
DCMB_emulator_using_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080120d4  080120d4  000220d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012378  08012378  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08012378  08012378  00022378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012380  08012380  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012380  08012380  00022380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012384  08012384  00022384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08012388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027c1c  2400007c  08012404  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24027c98  08012404  00037c98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d3dc  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ff6  00000000  00000000  0006d486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  00073480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e80  00000000  00000000  000754e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041abc  00000000  00000000  00077368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a2dd  00000000  00000000  000b8e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001acb30  00000000  00000000  000e3101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0028fc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f48  00000000  00000000  0028fc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080120bc 	.word	0x080120bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	080120bc 	.word	0x080120bc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <B_tcpStart>:


B_tcpHandle_t* B_tcpStart(B_uartHandle_t** transmitBuarts, 
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	71fb      	strb	r3, [r7, #7]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 8000698:	201c      	movs	r0, #28
 800069a:	f010 fdb5 	bl	8011208 <pvPortMalloc>
 800069e:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	711a      	strb	r2, [r3, #4]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f010 fdac 	bl	8011208 <pvPortMalloc>
 80006b0:	4602      	mov	r2, r0
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e00d      	b.n	80006d8 <B_tcpStart+0x50>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	441a      	add	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbed      	blt.n	80006bc <B_tcpStart+0x34>
    }
    btcp->rxBuart = rxBuart;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	609a      	str	r2, [r3, #8]
    btcp->tcpSeqNum = 0;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2200      	movs	r2, #0
 80006ea:	731a      	strb	r2, [r3, #12]
    btcp->crc = crc;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	619a      	str	r2, [r3, #24]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 80006f2:	2200      	movs	r2, #0
 80006f4:	210c      	movs	r1, #12
 80006f6:	2040      	movs	r0, #64	; 0x40
 80006f8:	f00e fa1a 	bl	800eb30 <xQueueGenericCreate>
 80006fc:	4602      	mov	r2, r0
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	611a      	str	r2, [r3, #16]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	3314      	adds	r3, #20
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2304      	movs	r3, #4
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000712:	4904      	ldr	r1, [pc, #16]	; (8000724 <B_tcpStart+0x9c>)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <B_tcpStart+0xa0>)
 8000716:	f00e fff9 	bl	800f70c <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 800071a:	693b      	ldr	r3, [r7, #16]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	080120d4 	.word	0x080120d4
 8000728:	080008e7 	.word	0x080008e7

0800072c <B_tcpSend>:

void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	71fb      	strb	r3, [r7, #7]
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8));
 800073a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800073e:	f010 fd63 	bl	8011208 <pvPortMalloc>
 8000742:	6178      	str	r0, [r7, #20]
    buf[0] = BSSR_SERIAL_START;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	22a5      	movs	r2, #165	; 0xa5
 8000748:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	701a      	strb	r2, [r3, #0]
    buf[2] = TCP_ID;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3302      	adds	r3, #2
 8000756:	2204      	movs	r2, #4
 8000758:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3303      	adds	r3, #3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	7b12      	ldrb	r2, [r2, #12]
 8000762:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3304      	adds	r3, #4
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f010 ff67 	bl	8011640 <memcpy>
    //uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, buf, length+4);
    //GEN11 change:
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6998      	ldr	r0, [r3, #24]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3304      	adds	r3, #4
 800077a:	461a      	mov	r2, r3
 800077c:	6979      	ldr	r1, [r7, #20]
 800077e:	f003 ff41 	bl	8004604 <HAL_CRC_Calculate>
 8000782:	4603      	mov	r3, r0
 8000784:	43db      	mvns	r3, r3
 8000786:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2ba1      	cmp	r3, #161	; 0xa1
 8000790:	d002      	beq.n	8000798 <B_tcpSend+0x6c>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b56      	cmp	r3, #86	; 0x56
 8000796:	d10c      	bne.n	80007b2 <B_tcpSend+0x86>
        buf_pos++;
 8000798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800079a:	3301      	adds	r3, #1
 800079c:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3303      	adds	r3, #3
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	3204      	adds	r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3302      	adds	r3, #2
 80007ae:	225a      	movs	r2, #90	; 0x5a
 80007b0:	701a      	strb	r2, [r3, #0]
    }
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	7b1b      	ldrb	r3, [r3, #12]
 80007b6:	2ba5      	cmp	r3, #165	; 0xa5
 80007b8:	d003      	beq.n	80007c2 <B_tcpSend+0x96>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	7b1b      	ldrb	r3, [r3, #12]
 80007be:	2b5a      	cmp	r3, #90	; 0x5a
 80007c0:	d108      	bne.n	80007d4 <B_tcpSend+0xa8>
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;
 80007c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c4:	3b01      	subs	r3, #1
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	225a      	movs	r2, #90	; 0x5a
 80007cc:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d0:	3301      	adds	r3, #1
 80007d2:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum;
 80007d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d6:	3b01      	subs	r3, #1
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4413      	add	r3, r2
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	7b12      	ldrb	r2, [r2, #12]
 80007e0:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	731a      	strb	r2, [r3, #12]
    for(int i = 0; i < length; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
 80007f2:	e021      	b.n	8000838 <B_tcpSend+0x10c>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b5a      	cmp	r3, #90	; 0x5a
 80007fe:	d005      	beq.n	800080c <B_tcpSend+0xe0>
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2ba5      	cmp	r3, #165	; 0xa5
 800080a:	d107      	bne.n	800081c <B_tcpSend+0xf0>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	225a      	movs	r2, #90	; 0x5a
 8000814:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000818:	3301      	adds	r3, #1
 800081a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	441a      	add	r2, r3
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	6979      	ldr	r1, [r7, #20]
 8000826:	440b      	add	r3, r1
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 800082c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800082e:	3301      	adds	r3, #1
 8000830:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	3301      	adds	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	6a3a      	ldr	r2, [r7, #32]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbd9      	blt.n	80007f4 <B_tcpSend+0xc8>
    }
    for(int i = 0; i < 4; i++){
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	e02e      	b.n	80008a4 <B_tcpSend+0x178>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	f1c3 0303 	rsb	r3, r3, #3
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	fa22 f103 	lsr.w	r1, r2, r3
 8000854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
        if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b5a      	cmp	r3, #90	; 0x5a
 8000868:	d005      	beq.n	8000876 <B_tcpSend+0x14a>
 800086a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2ba5      	cmp	r3, #165	; 0xa5
 8000874:	d110      	bne.n	8000898 <B_tcpSend+0x16c>
            buf[buf_pos+1] = buf[buf_pos];
 8000876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	441a      	add	r2, r3
 800087c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800087e:	3301      	adds	r3, #1
 8000880:	6979      	ldr	r1, [r7, #20]
 8000882:	440b      	add	r3, r1
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	225a      	movs	r2, #90	; 0x5a
 8000890:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000894:	3301      	adds	r3, #1
 8000896:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 8000898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089a:	3301      	adds	r3, #1
 800089c:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3301      	adds	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	ddcd      	ble.n	8000846 <B_tcpSend+0x11a>
    }
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e00d      	b.n	80008cc <B_tcpSend+0x1a0>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008be:	6979      	ldr	r1, [r7, #20]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa29 	bl	8000d18 <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4293      	cmp	r3, r2
 80008d6:	dbeb      	blt.n	80008b0 <B_tcpSend+0x184>
    }
    vPortFree(buf);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f010 fd61 	bl	80113a0 <vPortFree>
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8000938:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa0b 	bl	8000d5a <B_uartRead>
 8000944:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
        for(int i = 0; i < e->len; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800094e:	e160      	b.n	8000c12 <tcpRxTask+0x32c>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8000950:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800095a:	441a      	add	r2, r3
 800095c:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8000960:	7811      	ldrb	r1, [r2, #0]
 8000962:	f107 0214 	add.w	r2, r7, #20
 8000966:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8000968:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 800096c:	3301      	adds	r3, #1
 800096e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){
 8000972:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b5a      	cmp	r3, #90	; 0x5a
 8000982:	d107      	bne.n	8000994 <tcpRxTask+0xae>
 8000984:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <tcpRxTask+0xae>
                escaped = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
 8000992:	e002      	b.n	800099a <tcpRxTask+0xb4>
            } else {
                escaped = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
            }
            if(!started){
 800099a:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11e      	bne.n	80009e0 <tcpRxTask+0xfa>
                if(e->buf[i] == BSSR_SERIAL_START){
 80009a2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2ba5      	cmp	r3, #165	; 0xa5
 80009b2:	f040 8129 	bne.w	8000c08 <tcpRxTask+0x322>
                    started = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 80009bc:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009c6:	441a      	add	r2, r3
 80009c8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009cc:	7811      	ldrb	r1, [r2, #0]
 80009ce:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80009d2:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 80009d4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009d8:	3301      	adds	r3, #1
 80009da:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80009de:	e113      	b.n	8000c08 <tcpRxTask+0x322>
                }
            } else if(!expected_length){
 80009e0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11a      	bne.n	8000a1e <tcpRxTask+0x138>
                expected_length = e->buf[i];
 80009e8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 80009fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a04:	441a      	add	r2, r3
 8000a06:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a0a:	7811      	ldrb	r1, [r2, #0]
 8000a0c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a10:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a12:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a1c:	e0f4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(!sender){
 8000a1e:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11a      	bne.n	8000a5c <tcpRxTask+0x176>
                sender = e->buf[i];
 8000a26:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8000a38:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a42:	441a      	add	r2, r3
 8000a44:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a48:	7811      	ldrb	r1, [r2, #0]
 8000a4a:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a4e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a50:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a54:	3301      	adds	r3, #1
 8000a56:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a5a:	e0d5      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(seqNum == 0xffff){
 8000a5c:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d11a      	bne.n	8000a9e <tcpRxTask+0x1b8>
                seqNum = e->buf[i];
 8000a68:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
                input_buffer[buf_pos] = e->buf[i];
 8000a7a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a84:	441a      	add	r2, r3
 8000a86:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a8a:	7811      	ldrb	r1, [r2, #0]
 8000a8c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a90:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a92:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a96:	3301      	adds	r3, #1
 8000a98:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a9c:	e0b4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos < expected_length+4){
 8000a9e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000aa2:	1cda      	adds	r2, r3, #3
 8000aa4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db11      	blt.n	8000ad0 <tcpRxTask+0x1ea>
                input_buffer[buf_pos] = e->buf[i];
 8000aac:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000abc:	7811      	ldrb	r1, [r2, #0]
 8000abe:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000ac2:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000ac4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000ace:	e09b      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos + crcAcc < expected_length+8){
 8000ad0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000ad4:	1dda      	adds	r2, r3, #7
 8000ad6:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8000ada:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000ade:	440b      	add	r3, r1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f2c0 8091 	blt.w	8000c08 <tcpRxTask+0x322>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8000ae6:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000afa:	f1c3 0303 	rsb	r3, r3, #3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 8000b10:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b14:	3301      	adds	r3, #1
 8000b16:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8000b1a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d172      	bne.n	8000c08 <tcpRxTask+0x322>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 8000b22:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8000b2c:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fd67 	bl	8004604 <HAL_CRC_Calculate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

					if(crcExpected == crc && sender != TCP_ID){
 8000b3e:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8000b42:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d142      	bne.n	8000bd0 <tcpRxTask+0x2ea>
 8000b4a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d03e      	beq.n	8000bd0 <tcpRxTask+0x2ea>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b58:	e013      	b.n	8000b82 <tcpRxTask+0x29c>
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
 8000b5a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 8000b6e:	f107 0114 	add.w	r1, r7, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f8d0 	bl	8000d18 <B_uartSend>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b78:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b82:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	dbe3      	blt.n	8000b5a <tcpRxTask+0x274>
						}
						pkt.length = expected_length;
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 8000b9a:	701a      	strb	r2, [r3, #0]
						pkt.sender = sender;
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8000ba4:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8000ba6:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	709a      	strb	r2, [r3, #2]
						pkt.payload = input_buffer;
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000bba:	605a      	str	r2, [r3, #4]
						pkt.crc = crc;
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000bc4:	609a      	str	r2, [r3, #8]
						serialParse(&pkt);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fb98 	bl	8001300 <serialParse>
					}
					raw_buf_pos = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					sender = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8000c08:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000c12:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f63f ae97 	bhi.w	8000950 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8000c22:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 8000c26:	f000 f8ad 	bl	8000d84 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 8000c2a:	e685      	b.n	8000938 <tcpRxTask+0x52>

08000c2c <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	e01e      	b.n	8000c78 <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 8000c3a:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <B_uartStart+0xd8>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d115      	bne.n	8000c72 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f010 fade 	bl	8011208 <pvPortMalloc>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	492d      	ldr	r1, [pc, #180]	; (8000d04 <B_uartStart+0xd8>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <B_uartStart+0xd8>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8000c60:	4929      	ldr	r1, [pc, #164]	; (8000d08 <B_uartStart+0xdc>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
            break;
 8000c70:	e005      	b.n	8000c7e <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dddd      	ble.n	8000c3a <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 8000c7e:	2203      	movs	r2, #3
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f00d ff54 	bl	800eb30 <xQueueGenericCreate>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	f00d ff4c 	bl	800eb30 <xQueueGenericCreate>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	2040      	movs	r0, #64	; 0x40
 8000ca4:	f00d ff44 	bl	800eb30 <xQueueGenericCreate>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3314      	adds	r3, #20
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	4913      	ldr	r1, [pc, #76]	; (8000d0c <B_uartStart+0xe0>)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <B_uartStart+0xe4>)
 8000cc2:	f00e fd23 	bl	800f70c <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2306      	movs	r3, #6
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <B_uartStart+0xe0>)
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <B_uartStart+0xe8>)
 8000cda:	f00e fd17 	bl	800f70c <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000cf8:	bf00      	nop
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000098 	.word	0x24000098
 8000d08:	240000a8 	.word	0x240000a8
 8000d0c:	080120e0 	.word	0x080120e0
 8000d10:	08000da5 	.word	0x08000da5
 8000d14:	08000ded 	.word	0x08000ded

08000d18 <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f010 fa6f 	bl	8011208 <pvPortMalloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f010 fc83 	bl	8011640 <memcpy>
	e.len = len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6898      	ldr	r0, [r3, #8]
 8000d42:	f107 0114 	add.w	r1, r7, #20
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f00d ff47 	bl	800ebdc <xQueueGenericSend>
 8000d4e:	61f8      	str	r0, [r7, #28]
	return sent;
 8000d50:	69fb      	ldr	r3, [r7, #28]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8000d62:	2008      	movs	r0, #8
 8000d64:	f010 fa50 	bl	8011208 <pvPortMalloc>
 8000d68:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00e f957 	bl	800f028 <xQueueReceive>
	return e;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f010 fb05 	bl	80113a0 <vPortFree>
	vPortFree(e);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f010 fb02 	bl	80113a0 <vPortFree>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f107 010c 	add.w	r1, r7, #12
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00e f933 	bl	800f028 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00c f827 	bl	800ce20 <HAL_UART_Transmit_DMA>
		xSemaphoreTake(buart->txSem, portMAX_DELAY);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00e fa04 	bl	800f1e8 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f010 fadc 	bl	80113a0 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000de8:	e7e2      	b.n	8000db0 <txTask+0xc>
	...

08000dec <rxTask>:
	}
}

static void rxTask(void* pv){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8000df8:	e002      	b.n	8000e00 <rxTask+0x14>
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f00e fdd0 	bl	800f9a0 <vTaskDelay>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e08:	2b20      	cmp	r3, #32
 8000e0a:	d1f6      	bne.n	8000dfa <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e10:	f010 f9fa 	bl	8011208 <pvPortMalloc>
 8000e14:	4602      	mov	r2, r0
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e1a:	e009      	b.n	8000e30 <rxTask+0x44>
		vTaskDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f00e fdbf 	bl	800f9a0 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e26:	f010 f9ef 	bl	8011208 <pvPortMalloc>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f1      	beq.n	8000e1c <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e44:	4619      	mov	r1, r3
 8000e46:	f00c f86b 	bl	800cf20 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8000e4e:	f010 f8b9 	bl	8010fc4 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6c      	ldr	r2, [pc, #432]	; (800100c <rxTask+0x220>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d068      	beq.n	8000f32 <rxTask+0x146>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a69      	ldr	r2, [pc, #420]	; (8001010 <rxTask+0x224>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d061      	beq.n	8000f32 <rxTask+0x146>
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a67      	ldr	r2, [pc, #412]	; (8001014 <rxTask+0x228>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d05a      	beq.n	8000f32 <rxTask+0x146>
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a64      	ldr	r2, [pc, #400]	; (8001018 <rxTask+0x22c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d053      	beq.n	8000f32 <rxTask+0x146>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a62      	ldr	r2, [pc, #392]	; (800101c <rxTask+0x230>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <rxTask+0x146>
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a5f      	ldr	r2, [pc, #380]	; (8001020 <rxTask+0x234>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d045      	beq.n	8000f32 <rxTask+0x146>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <rxTask+0x238>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d03e      	beq.n	8000f32 <rxTask+0x146>
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <rxTask+0x23c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d037      	beq.n	8000f32 <rxTask+0x146>
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a58      	ldr	r2, [pc, #352]	; (800102c <rxTask+0x240>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d030      	beq.n	8000f32 <rxTask+0x146>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a55      	ldr	r2, [pc, #340]	; (8001030 <rxTask+0x244>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d029      	beq.n	8000f32 <rxTask+0x146>
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <rxTask+0x248>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d022      	beq.n	8000f32 <rxTask+0x146>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <rxTask+0x24c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01b      	beq.n	8000f32 <rxTask+0x146>
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a4e      	ldr	r2, [pc, #312]	; (800103c <rxTask+0x250>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d014      	beq.n	8000f32 <rxTask+0x146>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <rxTask+0x254>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <rxTask+0x146>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a49      	ldr	r2, [pc, #292]	; (8001044 <rxTask+0x258>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d006      	beq.n	8000f32 <rxTask+0x146>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <rxTask+0x25c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d107      	bne.n	8000f42 <rxTask+0x156>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f40:	e006      	b.n	8000f50 <rxTask+0x164>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d013      	beq.n	8000f86 <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d903      	bls.n	8000f72 <rxTask+0x186>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f7a:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f84:	e00b      	b.n	8000f9e <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d905      	bls.n	8000f9e <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8000f9e:	f010 f841 	bl	8011024 <vPortExitCritical>
		if(e.len){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02c      	beq.n	8001002 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f010 f92c 	bl	8011208 <pvPortMalloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8000fb4:	68b8      	ldr	r0, [r7, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f010 fb3c 	bl	8011640 <memcpy>
			buart->tail += e.len;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	441a      	add	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	6918      	ldr	r0, [r3, #16]
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	f00d fdf6 	bl	800ebdc <xQueueGenericSend>
 8000ff0:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d004      	beq.n	8001002 <rxTask+0x216>
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f825 	bl	800104c <processCriticalFrame>
		}
		vTaskDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f00e fccc 	bl	800f9a0 <vTaskDelay>
		e.len = 0;
 8001008:	e71f      	b.n	8000e4a <rxTask+0x5e>
 800100a:	bf00      	nop
 800100c:	40020010 	.word	0x40020010
 8001010:	40020028 	.word	0x40020028
 8001014:	40020040 	.word	0x40020040
 8001018:	40020058 	.word	0x40020058
 800101c:	40020070 	.word	0x40020070
 8001020:	40020088 	.word	0x40020088
 8001024:	400200a0 	.word	0x400200a0
 8001028:	400200b8 	.word	0x400200b8
 800102c:	40020410 	.word	0x40020410
 8001030:	40020428 	.word	0x40020428
 8001034:	40020440 	.word	0x40020440
 8001038:	40020458 	.word	0x40020458
 800103c:	40020470 	.word	0x40020470
 8001040:	40020488 	.word	0x40020488
 8001044:	400204a0 	.word	0x400204a0
 8001048:	400204b8 	.word	0x400204b8

0800104c <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e013      	b.n	8001096 <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_UART_TxCpltCallback+0x44>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d109      	bne.n	8001090 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_UART_TxCpltCallback+0x48>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00d ff40 	bl	800ef0e <xQueueGiveFromISR>
			return;
 800108e:	e005      	b.n	800109c <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d9e8      	bls.n	800106e <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000a8 	.word	0x240000a8
 80010a8:	24000098 	.word	0x24000098

080010ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e011      	b.n	80010de <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_UART_RxCpltCallback+0x58>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d107      	bne.n	80010d8 <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_UART_RxCpltCallback+0x5c>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 80010d6:	e010      	b.n	80010fa <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d9ea      	bls.n	80010ba <HAL_UART_RxCpltCallback+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010f6:	bf00      	nop
		}
	}
	configASSERT(NULL);
 80010f8:	e7fe      	b.n	80010f8 <HAL_UART_RxCpltCallback+0x4c>
}
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	240000a8 	.word	0x240000a8
 8001108:	24000098 	.word	0x24000098

0800110c <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <arm_boot+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <arm_boot+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <arm_boot+0x48>)
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <arm_boot+0x50>)
 800111a:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <arm_boot+0x54>)
 800111e:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 8001122:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <arm_boot+0x58>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <arm_boot+0x58>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 8001130:	bf00      	nop
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <arm_boot+0x58>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <arm_boot+0x58>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <arm_boot+0x58>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	52002008 	.word	0x52002008
 8001158:	08192a3b 	.word	0x08192a3b
 800115c:	4c5d6e7f 	.word	0x4c5d6e7f
 8001160:	52002044 	.word	0x52002044
 8001164:	52002018 	.word	0x52002018

08001168 <mc2StateTmr>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */


static void mc2StateTmr(TimerHandle_t xTimer) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	//first index set to 0x00 since the data ID for MC2 state is 0x00

	//motorState = 0;
	//fwdRevState = 1;
	//follwing if else are for testing
	if (fwdRevState == 1) //reverse
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <mc2StateTmr+0x168>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <mc2StateTmr+0x1c>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); //fwdREv
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	4855      	ldr	r0, [pc, #340]	; (80012d4 <mc2StateTmr+0x16c>)
 800117e:	f006 fbdd 	bl	800793c <HAL_GPIO_WritePin>
 8001182:	e008      	b.n	8001196 <mc2StateTmr+0x2e>
	else if (fwdRevState == 0) //forward
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <mc2StateTmr+0x168>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <mc2StateTmr+0x2e>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	2102      	movs	r1, #2
 8001190:	4850      	ldr	r0, [pc, #320]	; (80012d4 <mc2StateTmr+0x16c>)
 8001192:	f006 fbd3 	bl	800793c <HAL_GPIO_WritePin>
	if (regenValue ==255) {
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <mc2StateTmr+0x170>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d105      	bne.n	80011aa <mc2StateTmr+0x42>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1); // CS1
 800119e:	2201      	movs	r2, #1
 80011a0:	2104      	movs	r1, #4
 80011a2:	484c      	ldr	r0, [pc, #304]	; (80012d4 <mc2StateTmr+0x16c>)
 80011a4:	f006 fbca 	bl	800793c <HAL_GPIO_WritePin>
 80011a8:	e008      	b.n	80011bc <mc2StateTmr+0x54>
	}
	else if (regenValue < 20) {
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <mc2StateTmr+0x170>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b13      	cmp	r3, #19
 80011b0:	d804      	bhi.n	80011bc <mc2StateTmr+0x54>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0); // CS1
 80011b2:	2200      	movs	r2, #0
 80011b4:	2104      	movs	r1, #4
 80011b6:	4847      	ldr	r0, [pc, #284]	; (80012d4 <mc2StateTmr+0x16c>)
 80011b8:	f006 fbc0 	bl	800793c <HAL_GPIO_WritePin>
	}
	if (locVfmVal == 4) {
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <mc2StateTmr+0x174>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d105      	bne.n	80011d0 <mc2StateTmr+0x68>
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 1); // CS0
 80011c4:	2201      	movs	r2, #1
 80011c6:	2104      	movs	r1, #4
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <mc2StateTmr+0x178>)
 80011ca:	f006 fbb7 	bl	800793c <HAL_GPIO_WritePin>
 80011ce:	e008      	b.n	80011e2 <mc2StateTmr+0x7a>
	}
	else if(locVfmVal == 1) {
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <mc2StateTmr+0x174>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d104      	bne.n	80011e2 <mc2StateTmr+0x7a>
		 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 0); // CS0
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <mc2StateTmr+0x178>)
 80011de:	f006 fbad 	bl	800793c <HAL_GPIO_WritePin>
	}
	//testing end

	// Likely not for DCMB
	if (locVfmVal != vfmVal){
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <mc2StateTmr+0x174>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <mc2StateTmr+0x17c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d016      	beq.n	800121c <mc2StateTmr+0xb4>
		if (vfmVal > locVfmVal) {
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <mc2StateTmr+0x17c>)
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <mc2StateTmr+0x174>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d903      	bls.n	8001202 <mc2StateTmr+0x9a>
			vfmUpState = 1;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <mc2StateTmr+0x180>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e008      	b.n	8001214 <mc2StateTmr+0xac>
		}
		else if (vfmVal < locVfmVal) {
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <mc2StateTmr+0x17c>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <mc2StateTmr+0x174>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d202      	bcs.n	8001214 <mc2StateTmr+0xac>
			vfmDownState = 1;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <mc2StateTmr+0x184>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
		}
		locVfmVal = vfmVal;
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <mc2StateTmr+0x17c>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <mc2StateTmr+0x174>)
 800121a:	701a      	strb	r2, [r3, #0]
	}
	buf[1] = (motorState & 0b01)  << 4;
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <mc2StateTmr+0x188>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <mc2StateTmr+0x18c>)
 800122c:	705a      	strb	r2, [r3, #1]
	buf[1] |= (fwdRevState & 0b01) << 3;
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <mc2StateTmr+0x18c>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	b25a      	sxtb	r2, r3
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <mc2StateTmr+0x168>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	b25b      	sxtb	r3, r3
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25b      	sxtb	r3, r3
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <mc2StateTmr+0x18c>)
 800124a:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmUpState & 0b01) << 2;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <mc2StateTmr+0x18c>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	b25a      	sxtb	r2, r3
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <mc2StateTmr+0x180>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	b25b      	sxtb	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <mc2StateTmr+0x18c>)
 8001268:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmDownState & 0b01) << 1;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <mc2StateTmr+0x18c>)
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	b25a      	sxtb	r2, r3
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <mc2StateTmr+0x184>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b25b      	sxtb	r3, r3
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <mc2StateTmr+0x18c>)
 8001286:	705a      	strb	r2, [r3, #1]
	buf[2] = accValue;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <mc2StateTmr+0x190>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <mc2StateTmr+0x18c>)
 8001290:	709a      	strb	r2, [r3, #2]
	buf[3] = regenValue; // New for GEN11
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <mc2StateTmr+0x170>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <mc2StateTmr+0x18c>)
 800129a:	70da      	strb	r2, [r3, #3]


	if(vfmUpState == 1){
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <mc2StateTmr+0x180>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <mc2StateTmr+0x142>
		vfmUpState = 0;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <mc2StateTmr+0x180>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	}
	if(vfmDownState == 1){
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <mc2StateTmr+0x184>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <mc2StateTmr+0x150>
		vfmDownState = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <mc2StateTmr+0x184>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	}

	B_tcpSend(btcp, buf, 8);
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <mc2StateTmr+0x194>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2208      	movs	r2, #8
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <mc2StateTmr+0x18c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fa33 	bl	800072c <B_tcpSend>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240000c0 	.word	0x240000c0
 80012d4:	58021800 	.word	0x58021800
 80012d8:	240000bc 	.word	0x240000bc
 80012dc:	24000001 	.word	0x24000001
 80012e0:	58022800 	.word	0x58022800
 80012e4:	24000000 	.word	0x24000000
 80012e8:	240000bf 	.word	0x240000bf
 80012ec:	240000c1 	.word	0x240000c1
 80012f0:	240000be 	.word	0x240000be
 80012f4:	240000c4 	.word	0x240000c4
 80012f8:	240000ba 	.word	0x240000ba
 80012fc:	240276bc 	.word	0x240276bc

08001300 <serialParse>:

// call back function used to receive from MCMB
// called by btcp layer
void serialParse(B_tcpPacket_t *pkt) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d115      	bne.n	800133c <serialParse+0x3c>
		case 0x03:  //if sender is MCMB sender ID
			//Check if data ID is motor speed (0x01)
			if(pkt->payload[4] == 0x01){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d104      	bne.n	8001326 <serialParse+0x26>
				motorPWMFrequency = pkt->payload[5];
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	795a      	ldrb	r2, [r3, #5]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <serialParse+0x48>)
 8001324:	701a      	strb	r2, [r3, #0]
			}
			// If data ID is motor temperature (0x02) //New addition
			if (pkt->payload[4] == 0x02) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <serialParse+0x3c>
				motorTemperature = pkt->payload[5];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	795a      	ldrb	r2, [r3, #5]
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <serialParse+0x4c>)
 800133a:	701a      	strb	r2, [r3, #0]
			if (pkt->payload[4] == 0x06) {
				// Process PSM data
			}

	}
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	240000b9 	.word	0x240000b9
 800134c:	240000b8 	.word	0x240000b8

08001350 <task1_handler>:
// This task is used to send motor temperature and speed to the PC
void task1_handler(void* parameters) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	//char *test = "Test1\n";
	//char *test2 = "Test2\n";
	char temperatureBuf[30];
	char speedBuf[30];
	int timeOut = 1000;
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  /* Infinite loop */
	while(1)
	{
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <task1_handler+0x70>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001368:	4916      	ldr	r1, [pc, #88]	; (80013c4 <task1_handler+0x74>)
 800136a:	4618      	mov	r0, r3
 800136c:	f010 fa52 	bl	8011814 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temperatureBuf, strlen(temperatureBuf), timeOut);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ffb3 	bl	80002e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001380:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <task1_handler+0x78>)
 8001386:	f00b fbe1 	bl	800cb4c <HAL_UART_Transmit>
		//vTaskDelay(pdMS_TO_TICKS(500));
		//Note: delay must be equal or greater than python program's receive delay

		sprintf(speedBuf, "Motor PWM Frequency: %d Hz\n", (int)motorPWMFrequency);
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <task1_handler+0x7c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <task1_handler+0x80>)
 8001396:	4618      	mov	r0, r3
 8001398:	f010 fa3c 	bl	8011814 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)speedBuf, strlen(speedBuf), timeOut);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff9d 	bl	80002e0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <task1_handler+0x78>)
 80013b2:	f00b fbcb 	bl	800cb4c <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f00e faf1 	bl	800f9a0 <vTaskDelay>
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 80013be:	e7ce      	b.n	800135e <task1_handler+0xe>
 80013c0:	240000b8 	.word	0x240000b8
 80013c4:	080120ec 	.word	0x080120ec
 80013c8:	24027960 	.word	0x24027960
 80013cc:	240000b9 	.word	0x240000b9
 80013d0:	0801210c 	.word	0x0801210c

080013d4 <task2_handler>:

	}
}

// This task is used to receive motor control signals from PC
void task2_handler(void* parameters) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b099      	sub	sp, #100	; 0x64
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int rxBufSize = 5;
 80013dc:	2305      	movs	r3, #5
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
	int timeout = 700;
 80013e0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	char rxBuf[rxBufSize];
 80013e6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80013e8:	1e63      	subs	r3, r4, #1
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80013ec:	4623      	mov	r3, r4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	00cb      	lsls	r3, r1, #3
 80013fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001402:	00c2      	lsls	r2, r0, #3
 8001404:	4623      	mov	r3, r4
 8001406:	4618      	mov	r0, r3
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	00cb      	lsls	r3, r1, #3
 8001416:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800141a:	00c2      	lsls	r2, r0, #3
 800141c:	4623      	mov	r3, r4
 800141e:	3307      	adds	r3, #7
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	ebad 0d03 	sub.w	sp, sp, r3
 8001428:	466b      	mov	r3, sp
 800142a:	3300      	adds	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t locMotorState;
	uint8_t locFwdRevState;
	uint16_t locAcc;
	uint16_t locReg;
	uint8_t locVfmVal = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		/*for (int i=0; i < rxBufSize; i++) {
			rxBuf[i] = '\0';
		}*/
		//char rxBuf[rxBufSize];

		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 8001434:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001438:	b29a      	uxth	r2, r3
 800143a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800143c:	4886      	ldr	r0, [pc, #536]	; (8001658 <task2_handler+0x284>)
 800143e:	f00b fc1b 	bl	800cc78 <HAL_UART_Receive>
		rxBuf[4] = '\0';
 8001442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
		if (strncmp(rxBuf, "M On", strlen("M On")) == 0) {
 8001448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144a:	2204      	movs	r2, #4
 800144c:	4983      	ldr	r1, [pc, #524]	; (800165c <task2_handler+0x288>)
 800144e:	4618      	mov	r0, r3
 8001450:	f010 fa00 	bl	8011854 <strncmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <task2_handler+0xa2>
			locMotorState = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 8001460:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <task2_handler+0x28c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001468:	429a      	cmp	r2, r3
 800146a:	d0e3      	beq.n	8001434 <task2_handler+0x60>
				motorState = locMotorState;
 800146c:	4a7c      	ldr	r2, [pc, #496]	; (8001660 <task2_handler+0x28c>)
 800146e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001472:	7013      	strb	r3, [r2, #0]
 8001474:	e7de      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "MOff", strlen("MOff")) == 0) {
 8001476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001478:	2204      	movs	r2, #4
 800147a:	497a      	ldr	r1, [pc, #488]	; (8001664 <task2_handler+0x290>)
 800147c:	4618      	mov	r0, r3
 800147e:	f010 f9e9 	bl	8011854 <strncmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <task2_handler+0xd0>
			locMotorState = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <task2_handler+0x28c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001496:	429a      	cmp	r2, r3
 8001498:	d0cc      	beq.n	8001434 <task2_handler+0x60>
				motorState = locMotorState;
 800149a:	4a71      	ldr	r2, [pc, #452]	; (8001660 <task2_handler+0x28c>)
 800149c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80014a0:	7013      	strb	r3, [r2, #0]
 80014a2:	e7c7      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "F wd", strlen("F wd")) == 0) {
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	2204      	movs	r2, #4
 80014a8:	496f      	ldr	r1, [pc, #444]	; (8001668 <task2_handler+0x294>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f010 f9d2 	bl	8011854 <strncmp>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <task2_handler+0xfe>
			locFwdRevState = 0; //Note 0 is forward
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <task2_handler+0x298>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d0b5      	beq.n	8001434 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <task2_handler+0x298>)
 80014ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014ce:	7013      	strb	r3, [r2, #0]
 80014d0:	e7b0      	b.n	8001434 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev

		}
		else if (strncmp(rxBuf, "R ev", strlen("R ev")) == 0) {
 80014d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d4:	2204      	movs	r2, #4
 80014d6:	4966      	ldr	r1, [pc, #408]	; (8001670 <task2_handler+0x29c>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f010 f9bb 	bl	8011854 <strncmp>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10d      	bne.n	8001500 <task2_handler+0x12c>
			locFwdRevState = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <task2_handler+0x298>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d09e      	beq.n	8001434 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 80014f6:	4a5d      	ldr	r2, [pc, #372]	; (800166c <task2_handler+0x298>)
 80014f8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014fc:	7013      	strb	r3, [r2, #0]
 80014fe:	e799      	b.n	8001434 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
		}
		else if (strncmp(rxBuf, "A", 1) == 0) {
 8001500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <task2_handler+0x2a0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d12f      	bne.n	800156e <task2_handler+0x19a>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev
			//strncpy(val, &rxBuf[strlen("Accel: ")], strlen(rxBuf)-strlen("Accel: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 800150e:	2301      	movs	r3, #1
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
 8001512:	e00d      	b.n	8001530 <task2_handler+0x15c>
				val[i-1] = rxBuf[i];
 8001514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001516:	3b01      	subs	r3, #1
 8001518:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800151a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800151c:	440a      	add	r2, r1
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001524:	440b      	add	r3, r1
 8001526:	f803 2c34 	strb.w	r2, [r3, #-52]
			for (i = 1; i < strlen(rxBuf); i++) {
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	3301      	adds	r3, #1
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
 8001530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fed4 	bl	80002e0 <strlen>
 8001538:	4602      	mov	r2, r0
 800153a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153c:	429a      	cmp	r2, r3
 800153e:	d8e9      	bhi.n	8001514 <task2_handler+0x140>
			} val[i] = '\0';
 8001540:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	4413      	add	r3, r2
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			//char *end;
			locAcc = (uint16_t)atoi(val);
 800154c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001550:	4618      	mov	r0, r3
 8001552:	f010 f845 	bl	80115e0 <atoi>
 8001556:	4603      	mov	r3, r0
 8001558:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if (locAcc != accValue)
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <task2_handler+0x2a4>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001560:	429a      	cmp	r2, r3
 8001562:	f43f af67 	beq.w	8001434 <task2_handler+0x60>
				accValue = locAcc;
 8001566:	4a44      	ldr	r2, [pc, #272]	; (8001678 <task2_handler+0x2a4>)
 8001568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800156a:	8013      	strh	r3, [r2, #0]
 800156c:	e762      	b.n	8001434 <task2_handler+0x60>

		}
		else if (strncmp(rxBuf, "R", 1) == 0) {
 800156e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <task2_handler+0x2a8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d132      	bne.n	80015e2 <task2_handler+0x20e>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
			//strncpy(val, &rxBuf[strlen("Regen: ")], strlen(rxBuf)-strlen("Regen: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 800157c:	2301      	movs	r3, #1
 800157e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001580:	e00d      	b.n	800159e <task2_handler+0x1ca>
				val[i-1] = rxBuf[i];
 8001582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001584:	3b01      	subs	r3, #1
 8001586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800158a:	440a      	add	r2, r1
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001592:	440b      	add	r3, r1
 8001594:	f803 2c44 	strb.w	r2, [r3, #-68]
			for (i = 1; i < strlen(rxBuf); i++) {
 8001598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159a:	3301      	adds	r3, #1
 800159c:	65bb      	str	r3, [r7, #88]	; 0x58
 800159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe9d 	bl	80002e0 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d8e9      	bhi.n	8001582 <task2_handler+0x1ae>
			} val[i] = '\0';
 80015ae:	f107 021c 	add.w	r2, r7, #28
 80015b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b4:	4413      	add	r3, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			locReg = (uint16_t)atoi(val);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4618      	mov	r0, r3
 80015c0:	f010 f80e 	bl	80115e0 <atoi>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			if (locReg != regenValue)
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <task2_handler+0x2ac>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80015d2:	429a      	cmp	r2, r3
 80015d4:	f43f af2e 	beq.w	8001434 <task2_handler+0x60>
				regenValue = locReg;
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <task2_handler+0x2ac>)
 80015da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015de:	8013      	strh	r3, [r2, #0]
 80015e0:	e728      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "V", 1) == 0) {
 80015e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <task2_handler+0x2b0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af21 	bne.w	8001434 <task2_handler+0x60>
			char val[16];
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 80015f2:	2301      	movs	r3, #1
 80015f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015f6:	e00d      	b.n	8001614 <task2_handler+0x240>
				val[i-1] = rxBuf[i];
 80015f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001600:	440a      	add	r2, r1
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001608:	440b      	add	r3, r1
 800160a:	f803 2c54 	strb.w	r2, [r3, #-84]
			for (i = 1; i < strlen(rxBuf); i++) {
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	3301      	adds	r3, #1
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe62 	bl	80002e0 <strlen>
 800161c:	4602      	mov	r2, r0
 800161e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001620:	429a      	cmp	r2, r3
 8001622:	d8e9      	bhi.n	80015f8 <task2_handler+0x224>
			} val[i] = '\0';
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
			locVfmVal = (uint8_t)atoi(val);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f00f ffd3 	bl	80115e0 <atoi>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (locVfmVal != vfmVal)
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <task2_handler+0x2b4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001648:	429a      	cmp	r2, r3
 800164a:	f43f aef3 	beq.w	8001434 <task2_handler+0x60>
				vfmVal = locVfmVal;
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <task2_handler+0x2b4>)
 8001650:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001654:	7013      	strb	r3, [r2, #0]
		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 8001656:	e6ed      	b.n	8001434 <task2_handler+0x60>
 8001658:	24027960 	.word	0x24027960
 800165c:	08012128 	.word	0x08012128
 8001660:	240000be 	.word	0x240000be
 8001664:	08012130 	.word	0x08012130
 8001668:	08012138 	.word	0x08012138
 800166c:	240000c0 	.word	0x240000c0
 8001670:	08012140 	.word	0x08012140
 8001674:	08012148 	.word	0x08012148
 8001678:	240000ba 	.word	0x240000ba
 800167c:	0801214c 	.word	0x0801214c
 8001680:	240000bc 	.word	0x240000bc
 8001684:	08012150 	.word	0x08012150
 8001688:	24000000 	.word	0x24000000

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f001 fd81 	bl	8003198 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 8001696:	f7ff fd39 	bl	800110c <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169a:	f000 f8e3 	bl	8001864 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800169e:	f000 f96f 	bl	8001980 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f000 fced 	bl	8002080 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a6:	f000 fcb3 	bl	8002010 <MX_DMA_Init>
  MX_UART4_Init();
 80016aa:	f000 fbcb 	bl	8001e44 <MX_UART4_Init>
  MX_RTC_Init();
 80016ae:	f000 fa33 	bl	8001b18 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fc61 	bl	8001f78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016b6:	f000 fb03 	bl	8001cc0 <MX_TIM2_Init>
  MX_TIM12_Init();
 80016ba:	f000 fb55 	bl	8001d68 <MX_TIM12_Init>
  MX_TIM1_Init();
 80016be:	f000 faab 	bl	8001c18 <MX_TIM1_Init>
  MX_CRC_Init();
 80016c2:	f000 fa07 	bl	8001ad4 <MX_CRC_Init>
  MX_SPI3_Init();
 80016c6:	f000 fa4f 	bl	8001b68 <MX_SPI3_Init>
  MX_UART8_Init();
 80016ca:	f000 fc09 	bl	8001ee0 <MX_UART8_Init>
  MX_ADC1_Init();
 80016ce:	f000 f989 	bl	80019e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t SPI_START_VAL = 0b00010001;
 80016d2:	2311      	movs	r3, #17
 80016d4:	75fb      	strb	r3, [r7, #23]
  buart = B_uartStart(&huart4); //Note huart4 is for rs485
 80016d6:	4850      	ldr	r0, [pc, #320]	; (8001818 <main+0x18c>)
 80016d8:	f7ff faa8 	bl	8000c2c <B_uartStart>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a4f      	ldr	r2, [pc, #316]	; (800181c <main+0x190>)
 80016e0:	6013      	str	r3, [r2, #0]
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};
  btcp = B_tcpStart(&buart, buart, 1, &hcrc);
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <main+0x190>)
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <main+0x194>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	484c      	ldr	r0, [pc, #304]	; (800181c <main+0x190>)
 80016ec:	f7fe ffcc 	bl	8000688 <B_tcpStart>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <main+0x198>)
 80016f4:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 80016f6:	2201      	movs	r2, #1
 80016f8:	2120      	movs	r1, #32
 80016fa:	484b      	ldr	r0, [pc, #300]	; (8001828 <main+0x19c>)
 80016fc:	f006 f91e 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	4849      	ldr	r0, [pc, #292]	; (800182c <main+0x1a0>)
 8001706:	f006 f901 	bl	800790c <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET); // FwdRev
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	4848      	ldr	r0, [pc, #288]	; (8001830 <main+0x1a4>)
 8001710:	f006 f914 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171a:	4846      	ldr	r0, [pc, #280]	; (8001834 <main+0x1a8>)
 800171c:	f006 f90e 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	4843      	ldr	r0, [pc, #268]	; (8001834 <main+0x1a8>)
 8001728:	f006 f908 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 800172c:	2201      	movs	r2, #1
 800172e:	2101      	movs	r1, #1
 8001730:	483f      	ldr	r0, [pc, #252]	; (8001830 <main+0x1a4>)
 8001732:	f006 f903 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 8001736:	2201      	movs	r2, #1
 8001738:	2104      	movs	r1, #4
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <main+0x1ac>)
 800173c:	f006 f8fe 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 8001740:	2201      	movs	r2, #1
 8001742:	2104      	movs	r1, #4
 8001744:	483a      	ldr	r0, [pc, #232]	; (8001830 <main+0x1a4>)
 8001746:	f006 f8f9 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	4838      	ldr	r0, [pc, #224]	; (8001834 <main+0x1a8>)
 8001752:	f006 f8f3 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175c:	4835      	ldr	r0, [pc, #212]	; (8001834 <main+0x1a8>)
 800175e:	f006 f8ed 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 8001762:	2201      	movs	r2, #1
 8001764:	2104      	movs	r1, #4
 8001766:	4835      	ldr	r0, [pc, #212]	; (800183c <main+0x1b0>)
 8001768:	f006 f8e8 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <main+0x1a8>)
 8001774:	f006 f8e2 	bl	800793c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 8001778:	2201      	movs	r2, #1
 800177a:	2108      	movs	r1, #8
 800177c:	4830      	ldr	r0, [pc, #192]	; (8001840 <main+0x1b4>)
 800177e:	f006 f8dd 	bl	800793c <HAL_GPIO_WritePin>


  xTimerStart(xTimerCreate("mc2StateTmr", 10, pdTRUE, NULL, mc2StateTmr), 0);
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <main+0x1b8>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	2201      	movs	r2, #1
 800178a:	210a      	movs	r1, #10
 800178c:	482e      	ldr	r0, [pc, #184]	; (8001848 <main+0x1bc>)
 800178e:	f00e ffad 	bl	80106ec <xTimerCreate>
 8001792:	4604      	mov	r4, r0
 8001794:	f00e fa3a 	bl	800fc0c <xTaskGetTickCount>
 8001798:	4602      	mov	r2, r0
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	4620      	mov	r0, r4
 80017a4:	f00e fffe 	bl	80107a4 <xTimerGenericCommand>

  HAL_TIM_Base_Start(&htim2);
 80017a8:	4828      	ldr	r0, [pc, #160]	; (800184c <main+0x1c0>)
 80017aa:	f00a f84f 	bl	800b84c <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
	BaseType_t status;

	status = xTaskCreate(task1_handler,  /* Function that implements the task. */
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2304      	movs	r3, #4
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <main+0x1c4>)
 80017b8:	22c8      	movs	r2, #200	; 0xc8
 80017ba:	4926      	ldr	r1, [pc, #152]	; (8001854 <main+0x1c8>)
 80017bc:	4826      	ldr	r0, [pc, #152]	; (8001858 <main+0x1cc>)
 80017be:	f00d ffa5 	bl	800f70c <xTaskCreate>
 80017c2:	6138      	str	r0, [r7, #16]
              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
              "dont need this this time", /* Parameter passed into the task. */
              4, /* Priority at which the task is created. */ //Note must be 4 since btcp is 4
              &task1_handle /* Used to pass out the created task's handle. */
                            );
	configASSERT(status == pdPASS); // Error checking
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d00a      	beq.n	80017e0 <main+0x154>
	__asm volatile
 80017ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	60fb      	str	r3, [r7, #12]
}
 80017dc:	bf00      	nop
 80017de:	e7fe      	b.n	80017de <main+0x152>

	status = xTaskCreate(task2_handler,  /* Function that implements the task. */
 80017e0:	463b      	mov	r3, r7
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2304      	movs	r3, #4
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <main+0x1c4>)
 80017ea:	22c8      	movs	r2, #200	; 0xc8
 80017ec:	491b      	ldr	r1, [pc, #108]	; (800185c <main+0x1d0>)
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <main+0x1d4>)
 80017f0:	f00d ff8c 	bl	800f70c <xTaskCreate>
 80017f4:	6138      	str	r0, [r7, #16]
	              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
				  "dont need this this time", /* Parameter passed into the task. */
	              4, /* Priority at which the task is created. */
				  &task2_handle /* Used to pass out the created task's handle. */
	                            );
	configASSERT(status == pdPASS); // Error checking
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d00a      	beq.n	8001812 <main+0x186>
	__asm volatile
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	60bb      	str	r3, [r7, #8]
}
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <main+0x184>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001812:	f00d f869 	bl	800e8e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001816:	e7fe      	b.n	8001816 <main+0x18a>
 8001818:	24027838 	.word	0x24027838
 800181c:	240279f0 	.word	0x240279f0
 8001820:	240273e4 	.word	0x240273e4
 8001824:	240276bc 	.word	0x240276bc
 8001828:	58022400 	.word	0x58022400
 800182c:	58020400 	.word	0x58020400
 8001830:	58021800 	.word	0x58021800
 8001834:	58022000 	.word	0x58022000
 8001838:	58022800 	.word	0x58022800
 800183c:	58021400 	.word	0x58021400
 8001840:	58021000 	.word	0x58021000
 8001844:	08001169 	.word	0x08001169
 8001848:	08012154 	.word	0x08012154
 800184c:	240278c8 	.word	0x240278c8
 8001850:	08012160 	.word	0x08012160
 8001854:	0801217c 	.word	0x0801217c
 8001858:	08001351 	.word	0x08001351
 800185c:	08012184 	.word	0x08012184
 8001860:	080013d5 	.word	0x080013d5

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09c      	sub	sp, #112	; 0x70
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	224c      	movs	r2, #76	; 0x4c
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f00f fef2 	bl	801165c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f00f feec 	bl	801165c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001884:	2002      	movs	r0, #2
 8001886:	f006 f897 	bl	80079b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <SystemClock_Config+0x110>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <SystemClock_Config+0x110>)
 8001894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <SystemClock_Config+0x110>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <SystemClock_Config+0x114>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <SystemClock_Config+0x114>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <SystemClock_Config+0x114>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018bc:	bf00      	nop
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <SystemClock_Config+0x110>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d1f8      	bne.n	80018be <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <SystemClock_Config+0x118>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	4a2a      	ldr	r2, [pc, #168]	; (800197c <SystemClock_Config+0x118>)
 80018d2:	f023 0303 	bic.w	r3, r3, #3
 80018d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018d8:	232a      	movs	r3, #42	; 0x2a
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018dc:	2301      	movs	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018e8:	2301      	movs	r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80018f8:	2314      	movs	r3, #20
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001908:	230c      	movs	r3, #12
 800190a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800190c:	2300      	movs	r3, #0
 800190e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	4618      	mov	r0, r3
 800191a:	f006 f887 	bl	8007a2c <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001924:	f000 fe5a 	bl	80025dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001928:	233f      	movs	r3, #63	; 0x3f
 800192a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	2303      	movs	r3, #3
 800192e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001934:	2308      	movs	r3, #8
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001944:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f006 fc7c 	bl	800824c <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800195a:	f000 fe3f 	bl	80025dc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800195e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001962:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8001966:	2000      	movs	r0, #0
 8001968:	f006 fe26 	bl	80085b8 <HAL_RCC_MCOConfig>
}
 800196c:	bf00      	nop
 800196e:	3770      	adds	r7, #112	; 0x70
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024800 	.word	0x58024800
 8001978:	58000400 	.word	0x58000400
 800197c:	58024400 	.word	0x58024400

08001980 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b0      	sub	sp, #192	; 0xc0
 8001984:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	22bc      	movs	r2, #188	; 0xbc
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00f fe65 	bl	801165c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <PeriphCommonClock_Config+0x60>)
 8001994:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8001996:	2308      	movs	r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800199a:	2320      	movs	r3, #32
 800199c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019aa:	23c0      	movs	r3, #192	; 0xc0
 80019ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80019b6:	2320      	movs	r3, #32
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80019ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019be:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 f877 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80019d4:	f000 fe02 	bl	80025dc <Error_Handler>
  }
}
 80019d8:	bf00      	nop
 80019da:	37c0      	adds	r7, #192	; 0xc0
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	02090000 	.word	0x02090000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <MX_ADC1_Init+0xe8>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a64:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a66:	f001 fd8b 	bl	8003580 <HAL_ADC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fdb4 	bl	80025dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a80:	f002 fb9e 	bl	80041c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a8a:	f000 fda7 	bl	80025dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_ADC1_Init+0xec>)
 8001a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a92:	2306      	movs	r3, #6
 8001a94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001ab2:	f001 ff05 	bl	80038c0 <HAL_ADC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001abc:	f000 fd8e 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	240275a8 	.word	0x240275a8
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	10c00010 	.word	0x10c00010

08001ad4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <MX_CRC_Init+0x40>)
 8001adc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001aec:	2220      	movs	r2, #32
 8001aee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001afe:	f002 fd1d 	bl	800453c <HAL_CRC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b08:	f000 fd68 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	240273e4 	.word	0x240273e4
 8001b14:	58024c00 	.word	0x58024c00

08001b18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <MX_RTC_Init+0x4c>)
 8001b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b2a:	227f      	movs	r2, #127	; 0x7f
 8001b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b30:	22ff      	movs	r2, #255	; 0xff
 8001b32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b4e:	f009 f93b 	bl	800adc8 <HAL_RTC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001b58:	f000 fd40 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24027738 	.word	0x24027738
 8001b64:	58004000 	.word	0x58004000

08001b68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <MX_SPI3_Init+0xac>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b80:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b9e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ba2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bfc:	f009 f9f0 	bl	800afe0 <HAL_SPI_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001c06:	f000 fce9 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2402751c 	.word	0x2402751c
 8001c14:	40003c00 	.word	0x40003c00

08001c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <MX_TIM1_Init+0xa4>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c62:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c64:	f009 fd9b 	bl	800b79e <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f000 fcb5 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c80:	f00a f94c 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c8a:	f000 fca7 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001ca0:	f00a fe5e 	bl	800c960 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001caa:	f000 fc97 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2402775c 	.word	0x2402775c
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d08:	f009 fd49 	bl	800b79e <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d12:	f000 fc63 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d30:	f00a f8f4 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d3a:	f000 fc4f 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d4c:	f00a fe08 	bl	800c960 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d56:	f000 fc41 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	240278c8 	.word	0x240278c8

08001d68 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <MX_TIM12_Init+0xd8>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001da0:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001db4:	4821      	ldr	r0, [pc, #132]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001db6:	f009 fcf2 	bl	800b79e <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001dc0:	f000 fc0c 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001dd2:	f00a f8a3 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ddc:	f000 fbfe 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001de2:	f009 fe0b 	bl	800b9fc <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dec:	f000 fbf6 	bl	80025dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e08:	f009 ff78 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001e12:	f000 fbe3 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2204      	movs	r2, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e1e:	f009 ff6d 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001e28:	f000 fbd8 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e2e:	f000 fd9b 	bl	8002968 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24027ae4 	.word	0x24027ae4
 8001e40:	40001800 	.word	0x40001800

08001e44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <MX_UART4_Init+0x94>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <MX_UART4_Init+0x98>)
 8001e52:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e68:	220c      	movs	r2, #12
 8001e6a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e8c:	f00a fe0e 	bl	800caac <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001e96:	f000 fba1 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e9e:	f00c fc59 	bl	800e754 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001ea8:	f000 fb98 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001eb0:	f00c fc8e 	bl	800e7d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001eba:	f000 fb8f 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001ec0:	f00c fc0f 	bl	800e6e2 <HAL_UARTEx_DisableFifoMode>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001eca:	f000 fb87 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24027838 	.word	0x24027838
 8001ed8:	40004c00 	.word	0x40004c00
 8001edc:	001e8480 	.word	0x001e8480

08001ee0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <MX_UART8_Init+0x90>)
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <MX_UART8_Init+0x94>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <MX_UART8_Init+0x90>)
 8001eec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001ef0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <MX_UART8_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <MX_UART8_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f28:	4811      	ldr	r0, [pc, #68]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f2a:	f00a fdbf 	bl	800caac <HAL_UART_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 fb52 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480d      	ldr	r0, [pc, #52]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f3c:	f00c fc0a 	bl	800e754 <HAL_UARTEx_SetTxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f000 fb49 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4808      	ldr	r0, [pc, #32]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f4e:	f00c fc3f 	bl	800e7d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f000 fb40 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f5e:	f00c fbc0 	bl	800e6e2 <HAL_UARTEx_DisableFifoMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f000 fb38 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	240277a8 	.word	0x240277a8
 8001f74:	40007c00 	.word	0x40007c00

08001f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <MX_USART2_UART_Init+0x94>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fc2:	f00a fd73 	bl	800caac <HAL_UART_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fcc:	f000 fb06 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fd4:	f00c fbbe 	bl	800e754 <HAL_UARTEx_SetTxFifoThreshold>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fde:	f000 fafd 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4808      	ldr	r0, [pc, #32]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fe6:	f00c fbf3 	bl	800e7d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f000 faf4 	bl	80025dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001ff6:	f00c fb74 	bl	800e6e2 <HAL_UARTEx_DisableFifoMode>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002000:	f000 faec 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	24027960 	.word	0x24027960
 800200c:	40004400 	.word	0x40004400

08002010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <MX_DMA_Init+0x6c>)
 8002018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <MX_DMA_Init+0x6c>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_DMA_Init+0x6c>)
 8002028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2105      	movs	r1, #5
 8002038:	200b      	movs	r0, #11
 800203a:	f002 fa57 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800203e:	200b      	movs	r0, #11
 8002040:	f002 fa6e 	bl	8004520 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2105      	movs	r1, #5
 8002048:	200c      	movs	r0, #12
 800204a:	f002 fa4f 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800204e:	200c      	movs	r0, #12
 8002050:	f002 fa66 	bl	8004520 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2105      	movs	r1, #5
 8002058:	200d      	movs	r0, #13
 800205a:	f002 fa47 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800205e:	200d      	movs	r0, #13
 8002060:	f002 fa5e 	bl	8004520 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2105      	movs	r1, #5
 8002068:	2010      	movs	r0, #16
 800206a:	f002 fa3f 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800206e:	2010      	movs	r0, #16
 8002070:	f002 fa56 	bl	8004520 <HAL_NVIC_EnableIRQ>

}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	58024400 	.word	0x58024400

08002080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b090      	sub	sp, #64	; 0x40
 8002084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	4bbf      	ldr	r3, [pc, #764]	; (8002394 <MX_GPIO_Init+0x314>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209c:	4abd      	ldr	r2, [pc, #756]	; (8002394 <MX_GPIO_Init+0x314>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a6:	4bbb      	ldr	r3, [pc, #748]	; (8002394 <MX_GPIO_Init+0x314>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020b4:	4bb7      	ldr	r3, [pc, #732]	; (8002394 <MX_GPIO_Init+0x314>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ba:	4ab6      	ldr	r2, [pc, #728]	; (8002394 <MX_GPIO_Init+0x314>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c4:	4bb3      	ldr	r3, [pc, #716]	; (8002394 <MX_GPIO_Init+0x314>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020d2:	4bb0      	ldr	r3, [pc, #704]	; (8002394 <MX_GPIO_Init+0x314>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	4aae      	ldr	r2, [pc, #696]	; (8002394 <MX_GPIO_Init+0x314>)
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e2:	4bac      	ldr	r3, [pc, #688]	; (8002394 <MX_GPIO_Init+0x314>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f0:	4ba8      	ldr	r3, [pc, #672]	; (8002394 <MX_GPIO_Init+0x314>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	4aa7      	ldr	r2, [pc, #668]	; (8002394 <MX_GPIO_Init+0x314>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002100:	4ba4      	ldr	r3, [pc, #656]	; (8002394 <MX_GPIO_Init+0x314>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4ba1      	ldr	r3, [pc, #644]	; (8002394 <MX_GPIO_Init+0x314>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	4a9f      	ldr	r2, [pc, #636]	; (8002394 <MX_GPIO_Init+0x314>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211e:	4b9d      	ldr	r3, [pc, #628]	; (8002394 <MX_GPIO_Init+0x314>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212c:	4b99      	ldr	r3, [pc, #612]	; (8002394 <MX_GPIO_Init+0x314>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	4a98      	ldr	r2, [pc, #608]	; (8002394 <MX_GPIO_Init+0x314>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213c:	4b95      	ldr	r3, [pc, #596]	; (8002394 <MX_GPIO_Init+0x314>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800214a:	4b92      	ldr	r3, [pc, #584]	; (8002394 <MX_GPIO_Init+0x314>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	4a90      	ldr	r2, [pc, #576]	; (8002394 <MX_GPIO_Init+0x314>)
 8002152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215a:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <MX_GPIO_Init+0x314>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002168:	4b8a      	ldr	r3, [pc, #552]	; (8002394 <MX_GPIO_Init+0x314>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	4a89      	ldr	r2, [pc, #548]	; (8002394 <MX_GPIO_Init+0x314>)
 8002170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002178:	4b86      	ldr	r3, [pc, #536]	; (8002394 <MX_GPIO_Init+0x314>)
 800217a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b83      	ldr	r3, [pc, #524]	; (8002394 <MX_GPIO_Init+0x314>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	4a81      	ldr	r2, [pc, #516]	; (8002394 <MX_GPIO_Init+0x314>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <MX_GPIO_Init+0x314>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a4:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <MX_GPIO_Init+0x314>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021aa:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <MX_GPIO_Init+0x314>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b4:	4b77      	ldr	r3, [pc, #476]	; (8002394 <MX_GPIO_Init+0x314>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <MX_GPIO_Init+0x314>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c8:	4a72      	ldr	r2, [pc, #456]	; (8002394 <MX_GPIO_Init+0x314>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <MX_GPIO_Init+0x314>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2109      	movs	r1, #9
 80021e4:	486c      	ldr	r0, [pc, #432]	; (8002398 <MX_GPIO_Init+0x318>)
 80021e6:	f005 fba9 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80021ea:	2200      	movs	r2, #0
 80021ec:	f24f 2191 	movw	r1, #62097	; 0xf291
 80021f0:	486a      	ldr	r0, [pc, #424]	; (800239c <MX_GPIO_Init+0x31c>)
 80021f2:	f005 fba3 	bl	800793c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2104      	movs	r1, #4
 80021fa:	4869      	ldr	r0, [pc, #420]	; (80023a0 <MX_GPIO_Init+0x320>)
 80021fc:	f005 fb9e 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002200:	2200      	movs	r2, #0
 8002202:	f248 013f 	movw	r1, #32831	; 0x803f
 8002206:	4867      	ldr	r0, [pc, #412]	; (80023a4 <MX_GPIO_Init+0x324>)
 8002208:	f005 fb98 	bl	800793c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	f24b 0120 	movw	r1, #45088	; 0xb020
 8002212:	4865      	ldr	r0, [pc, #404]	; (80023a8 <MX_GPIO_Init+0x328>)
 8002214:	f005 fb92 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002218:	2200      	movs	r2, #0
 800221a:	21fc      	movs	r1, #252	; 0xfc
 800221c:	4863      	ldr	r0, [pc, #396]	; (80023ac <MX_GPIO_Init+0x32c>)
 800221e:	f005 fb8d 	bl	800793c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2108      	movs	r1, #8
 8002226:	4862      	ldr	r0, [pc, #392]	; (80023b0 <MX_GPIO_Init+0x330>)
 8002228:	f005 fb88 	bl	800793c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 800222c:	2309      	movs	r3, #9
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002240:	4619      	mov	r1, r3
 8002242:	4855      	ldr	r0, [pc, #340]	; (8002398 <MX_GPIO_Init+0x318>)
 8002244:	f005 f9b2 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002248:	f24f 2391 	movw	r3, #62097	; 0xf291
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800225a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800225e:	4619      	mov	r1, r3
 8002260:	484e      	ldr	r0, [pc, #312]	; (800239c <MX_GPIO_Init+0x31c>)
 8002262:	f005 f9a3 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002266:	2304      	movs	r3, #4
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227a:	4619      	mov	r1, r3
 800227c:	4848      	ldr	r0, [pc, #288]	; (80023a0 <MX_GPIO_Init+0x320>)
 800227e:	f005 f995 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 8002282:	2301      	movs	r3, #1
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002286:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <MX_GPIO_Init+0x334>)
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800228a:	2302      	movs	r3, #2
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002292:	4619      	mov	r1, r3
 8002294:	4844      	ldr	r0, [pc, #272]	; (80023a8 <MX_GPIO_Init+0x328>)
 8002296:	f005 f989 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800229a:	23de      	movs	r3, #222	; 0xde
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <MX_GPIO_Init+0x334>)
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	483e      	ldr	r0, [pc, #248]	; (80023a8 <MX_GPIO_Init+0x328>)
 80022ae:	f005 f97d 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022b2:	f248 033f 	movw	r3, #32831	; 0x803f
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c8:	4619      	mov	r1, r3
 80022ca:	4836      	ldr	r0, [pc, #216]	; (80023a4 <MX_GPIO_Init+0x324>)
 80022cc:	f005 f96e 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80022d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <MX_GPIO_Init+0x334>)
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e2:	4619      	mov	r1, r3
 80022e4:	482c      	ldr	r0, [pc, #176]	; (8002398 <MX_GPIO_Init+0x318>)
 80022e6:	f005 f961 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80022ea:	f24b 0320 	movw	r3, #45088	; 0xb020
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <MX_GPIO_Init+0x328>)
 8002304:	f005 f952 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002308:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 800231a:	230c      	movs	r3, #12
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002322:	4619      	mov	r1, r3
 8002324:	4824      	ldr	r0, [pc, #144]	; (80023b8 <MX_GPIO_Init+0x338>)
 8002326:	f005 f941 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800232a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233c:	4619      	mov	r1, r3
 800233e:	481e      	ldr	r0, [pc, #120]	; (80023b8 <MX_GPIO_Init+0x338>)
 8002340:	f005 f934 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002356:	2307      	movs	r3, #7
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <MX_GPIO_Init+0x330>)
 8002362:	f005 f923 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 8002366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_GPIO_Init+0x334>)
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <MX_GPIO_Init+0x330>)
 800237c:	f005 f916 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002380:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	e014      	b.n	80023bc <MX_GPIO_Init+0x33c>
 8002392:	bf00      	nop
 8002394:	58024400 	.word	0x58024400
 8002398:	58021000 	.word	0x58021000
 800239c:	58022000 	.word	0x58022000
 80023a0:	58021400 	.word	0x58021400
 80023a4:	58021800 	.word	0x58021800
 80023a8:	58022400 	.word	0x58022400
 80023ac:	58022800 	.word	0x58022800
 80023b0:	58020c00 	.word	0x58020c00
 80023b4:	11110000 	.word	0x11110000
 80023b8:	58020400 	.word	0x58020400
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023be:	2305      	movs	r3, #5
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	4872      	ldr	r0, [pc, #456]	; (8002594 <MX_GPIO_Init+0x514>)
 80023ca:	f005 f8ef 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ce:	2303      	movs	r3, #3
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023de:	2305      	movs	r3, #5
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	486b      	ldr	r0, [pc, #428]	; (8002598 <MX_GPIO_Init+0x518>)
 80023ea:	f005 f8df 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80023ee:	23fc      	movs	r3, #252	; 0xfc
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	4864      	ldr	r0, [pc, #400]	; (8002598 <MX_GPIO_Init+0x518>)
 8002406:	f005 f8d1 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800240a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <MX_GPIO_Init+0x51c>)
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	4619      	mov	r1, r3
 800241e:	4860      	ldr	r0, [pc, #384]	; (80025a0 <MX_GPIO_Init+0x520>)
 8002420:	f005 f8c4 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002436:	2300      	movs	r3, #0
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243e:	4619      	mov	r1, r3
 8002440:	4858      	ldr	r0, [pc, #352]	; (80025a4 <MX_GPIO_Init+0x524>)
 8002442:	f005 f8b3 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	2302      	movs	r3, #2
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002458:	2309      	movs	r3, #9
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800245c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002460:	4619      	mov	r1, r3
 8002462:	4851      	ldr	r0, [pc, #324]	; (80025a8 <MX_GPIO_Init+0x528>)
 8002464:	f005 f8a2 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI2 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002468:	230e      	movs	r3, #14
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002478:	2305      	movs	r3, #5
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800247c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002480:	4619      	mov	r1, r3
 8002482:	484a      	ldr	r0, [pc, #296]	; (80025ac <MX_GPIO_Init+0x52c>)
 8002484:	f005 f892 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 800249a:	2307      	movs	r3, #7
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	483f      	ldr	r0, [pc, #252]	; (80025a4 <MX_GPIO_Init+0x524>)
 80024a6:	f005 f881 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024aa:	2308      	movs	r3, #8
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	483b      	ldr	r0, [pc, #236]	; (80025b0 <MX_GPIO_Init+0x530>)
 80024c2:	f005 f873 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d6:	2305      	movs	r3, #5
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4833      	ldr	r0, [pc, #204]	; (80025b0 <MX_GPIO_Init+0x530>)
 80024e2:	f005 f863 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024f8:	2305      	movs	r3, #5
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002500:	4619      	mov	r1, r3
 8002502:	4827      	ldr	r0, [pc, #156]	; (80025a0 <MX_GPIO_Init+0x520>)
 8002504:	f005 f852 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002508:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800251a:	2305      	movs	r3, #5
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	481e      	ldr	r0, [pc, #120]	; (80025a0 <MX_GPIO_Init+0x520>)
 8002526:	f005 f841 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800253a:	2309      	movs	r3, #9
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002542:	4619      	mov	r1, r3
 8002544:	481b      	ldr	r0, [pc, #108]	; (80025b4 <MX_GPIO_Init+0x534>)
 8002546:	f005 f831 	bl	80075ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800255a:	2303      	movs	r3, #3
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	4811      	ldr	r0, [pc, #68]	; (80025ac <MX_GPIO_Init+0x52c>)
 8002566:	f005 f821 	bl	80075ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2105      	movs	r1, #5
 800256e:	2006      	movs	r0, #6
 8002570:	f001 ffbc 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002574:	2006      	movs	r0, #6
 8002576:	f001 ffd3 	bl	8004520 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2105      	movs	r1, #5
 800257e:	2028      	movs	r0, #40	; 0x28
 8002580:	f001 ffb4 	bl	80044ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002584:	2028      	movs	r0, #40	; 0x28
 8002586:	f001 ffcb 	bl	8004520 <HAL_NVIC_EnableIRQ>

}
 800258a:	bf00      	nop
 800258c:	3740      	adds	r7, #64	; 0x40
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	58022400 	.word	0x58022400
 8002598:	58022800 	.word	0x58022800
 800259c:	11110000 	.word	0x11110000
 80025a0:	58021800 	.word	0x58021800
 80025a4:	58020000 	.word	0x58020000
 80025a8:	58021c00 	.word	0x58021c00
 80025ac:	58022000 	.word	0x58022000
 80025b0:	58020c00 	.word	0x58020c00
 80025b4:	58020400 	.word	0x58020400

080025b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ca:	f000 fe21 	bl	8003210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40001000 	.word	0x40001000

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_MspInit+0x38>)
 80025f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_MspInit+0x38>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_MspInit+0x38>)
 8002604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	210f      	movs	r1, #15
 8002614:	f06f 0001 	mvn.w	r0, #1
 8002618:	f001 ff68 	bl	80044ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	58024400 	.word	0x58024400

08002628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_ADC_MspInit+0x80>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d129      	bne.n	800269e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_ADC_MspInit+0x84>)
 800264c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_ADC_MspInit+0x84>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_ADC_MspInit+0x84>)
 800265c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_ADC_MspInit+0x84>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_ADC_MspInit+0x84>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_ADC_MspInit+0x84>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002686:	2310      	movs	r3, #16
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268a:	2303      	movs	r3, #3
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <HAL_ADC_MspInit+0x88>)
 800269a:	f004 ff87 	bl	80075ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000
 80026ac:	58024400 	.word	0x58024400
 80026b0:	58020800 	.word	0x58020800

080026b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_CRC_MspInit+0x3c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10e      	bne.n	80026e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_CRC_MspInit+0x40>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_CRC_MspInit+0x40>)
 80026ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_CRC_MspInit+0x40>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	58024c00 	.word	0x58024c00
 80026f4:	58024400 	.word	0x58024400

080026f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0b2      	sub	sp, #200	; 0xc8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	22bc      	movs	r2, #188	; 0xbc
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f00e ffa7 	bl	801165c <memset>
  if(hrtc->Instance==RTC)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_RTC_MspInit+0x58>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d116      	bne.n	8002746 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800271e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002726:	f107 030c 	add.w	r3, r7, #12
 800272a:	4618      	mov	r0, r3
 800272c:	f006 f9c6 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002736:	f7ff ff51 	bl	80025dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RTC_MspInit+0x5c>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_RTC_MspInit+0x5c>)
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	37c8      	adds	r7, #200	; 0xc8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	58004000 	.word	0x58004000
 8002754:	58024400 	.word	0x58024400

08002758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0ba      	sub	sp, #232	; 0xe8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002770:	f107 0318 	add.w	r3, r7, #24
 8002774:	22bc      	movs	r2, #188	; 0xbc
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f00e ff6f 	bl	801165c <memset>
  if(hspi->Instance==SPI3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_SPI_MspInit+0x114>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d16d      	bne.n	8002864 <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800278e:	2300      	movs	r3, #0
 8002790:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	4618      	mov	r0, r3
 8002798:	f006 f990 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80027a2:	f7ff ff1b 	bl	80025dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e8:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <HAL_SPI_MspInit+0x118>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002818:	2305      	movs	r3, #5
 800281a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002822:	4619      	mov	r1, r3
 8002824:	4813      	ldr	r0, [pc, #76]	; (8002874 <HAL_SPI_MspInit+0x11c>)
 8002826:	f004 fec1 	bl	80075ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800282a:	2308      	movs	r3, #8
 800282c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002842:	2306      	movs	r3, #6
 8002844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800284c:	4619      	mov	r1, r3
 800284e:	480a      	ldr	r0, [pc, #40]	; (8002878 <HAL_SPI_MspInit+0x120>)
 8002850:	f004 feac 	bl	80075ac <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2105      	movs	r1, #5
 8002858:	2033      	movs	r0, #51	; 0x33
 800285a:	f001 fe47 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800285e:	2033      	movs	r0, #51	; 0x33
 8002860:	f001 fe5e 	bl	8004520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002864:	bf00      	nop
 8002866:	37e8      	adds	r7, #232	; 0xe8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40003c00 	.word	0x40003c00
 8002870:	58024400 	.word	0x58024400
 8002874:	58020c00 	.word	0x58020c00
 8002878:	58020400 	.word	0x58020400

0800287c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <HAL_TIM_Base_MspInit+0xdc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10f      	bne.n	80028be <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289e:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80028bc:	e047      	b.n	800294e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d12e      	bne.n	8002926 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002904:	2301      	movs	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4810      	ldr	r0, [pc, #64]	; (8002960 <HAL_TIM_Base_MspInit+0xe4>)
 8002920:	f004 fe44 	bl	80075ac <HAL_GPIO_Init>
}
 8002924:	e013      	b.n	800294e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM12)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_TIM_Base_MspInit+0xe8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10e      	bne.n	800294e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 8002932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 8002938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_TIM_Base_MspInit+0xe0>)
 8002942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	3730      	adds	r7, #48	; 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	58024400 	.word	0x58024400
 8002960:	58020000 	.word	0x58020000
 8002964:	40001800 	.word	0x40001800

08002968 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_TIM_MspPostInit+0x6c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d11f      	bne.n	80029ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_TIM_MspPostInit+0x70>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_TIM_MspPostInit+0x70>)
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_TIM_MspPostInit+0x70>)
 800299c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80029a8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80029ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_TIM_MspPostInit+0x74>)
 80029c6:	f004 fdf1 	bl	80075ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80029ca:	bf00      	nop
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40001800 	.word	0x40001800
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58021c00 	.word	0x58021c00

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0bc      	sub	sp, #240	; 0xf0
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	22bc      	movs	r2, #188	; 0xbc
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00e fe2b 	bl	801165c <memset>
  if(huart->Instance==UART4)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4aae      	ldr	r2, [pc, #696]	; (8002cc4 <HAL_UART_MspInit+0x2e4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f040 80a9 	bne.w	8002b64 <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	4618      	mov	r0, r3
 8002a22:	f006 f84b 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002a2c:	f7ff fdd6 	bl	80025dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a30:	4ba5      	ldr	r3, [pc, #660]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a36:	4aa4      	ldr	r2, [pc, #656]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a40:	4ba1      	ldr	r3, [pc, #644]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	4a9c      	ldr	r2, [pc, #624]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5e:	4b9a      	ldr	r3, [pc, #616]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002a86:	2306      	movs	r3, #6
 8002a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a90:	4619      	mov	r1, r3
 8002a92:	488e      	ldr	r0, [pc, #568]	; (8002ccc <HAL_UART_MspInit+0x2ec>)
 8002a94:	f004 fd8a 	bl	80075ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 8002a98:	4b8d      	ldr	r3, [pc, #564]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002a9a:	4a8e      	ldr	r2, [pc, #568]	; (8002cd4 <HAL_UART_MspInit+0x2f4>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002a9e:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa4:	4b8a      	ldr	r3, [pc, #552]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b87      	ldr	r3, [pc, #540]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abe:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002ac4:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aca:	4b81      	ldr	r3, [pc, #516]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002ad8:	487d      	ldr	r0, [pc, #500]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002ada:	f001 ff2d 	bl	8004938 <HAL_DMA_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002ae4:	f7ff fd7a 	bl	80025dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a79      	ldr	r2, [pc, #484]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002aec:	679a      	str	r2, [r3, #120]	; 0x78
 8002aee:	4a78      	ldr	r2, [pc, #480]	; (8002cd0 <HAL_UART_MspInit+0x2f0>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8002af4:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002af6:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <HAL_UART_MspInit+0x2fc>)
 8002af8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002afa:	4b77      	ldr	r3, [pc, #476]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b00:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b06:	4b74      	ldr	r3, [pc, #464]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0c:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b14:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b28:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b30:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002b36:	4868      	ldr	r0, [pc, #416]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b38:	f001 fefe 	bl	8004938 <HAL_DMA_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002b42:	f7ff fd4b 	bl	80025dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b4a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b4c:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_UART_MspInit+0x2f8>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	2034      	movs	r0, #52	; 0x34
 8002b58:	f001 fcc8 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b5c:	2034      	movs	r0, #52	; 0x34
 8002b5e:	f001 fcdf 	bl	8004520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b62:	e118      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==UART8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a5d      	ldr	r2, [pc, #372]	; (8002ce0 <HAL_UART_MspInit+0x300>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f040 80c4 	bne.w	8002cf8 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002b70:	2302      	movs	r3, #2
 8002b72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 ff9c 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002b8a:	f7ff fd27 	bl	80025dc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002b8e:	4b4e      	ldr	r3, [pc, #312]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb2:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <HAL_UART_MspInit+0x2e8>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002be4:	2308      	movs	r3, #8
 8002be6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002bea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bee:	4619      	mov	r1, r3
 8002bf0:	483c      	ldr	r0, [pc, #240]	; (8002ce4 <HAL_UART_MspInit+0x304>)
 8002bf2:	f004 fcdb 	bl	80075ac <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <HAL_UART_MspInit+0x30c>)
 8002bfa:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002bfe:	2251      	movs	r2, #81	; 0x51
 8002c00:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c14:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1c:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c28:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c30:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002c38:	482b      	ldr	r0, [pc, #172]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c3a:	f001 fe7d 	bl	8004938 <HAL_DMA_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8002c44:	f7ff fcca 	bl	80025dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_UART_MspInit+0x308>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c56:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_UART_MspInit+0x314>)
 8002c58:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002c5a:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c5c:	2252      	movs	r2, #82	; 0x52
 8002c5e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c72:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c8c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002c96:	f001 fe4f 	bl	8004938 <HAL_DMA_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002ca0:	f7ff fc9c 	bl	80025dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002ca8:	679a      	str	r2, [r3, #120]	; 0x78
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_UART_MspInit+0x310>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	2053      	movs	r0, #83	; 0x53
 8002cb6:	f001 fc19 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002cba:	2053      	movs	r0, #83	; 0x53
 8002cbc:	f001 fc30 	bl	8004520 <HAL_NVIC_EnableIRQ>
}
 8002cc0:	e069      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
 8002cc2:	bf00      	nop
 8002cc4:	40004c00 	.word	0x40004c00
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58020000 	.word	0x58020000
 8002cd0:	24027b34 	.word	0x24027b34
 8002cd4:	40020010 	.word	0x40020010
 8002cd8:	24027368 	.word	0x24027368
 8002cdc:	40020028 	.word	0x40020028
 8002ce0:	40007c00 	.word	0x40007c00
 8002ce4:	58022400 	.word	0x58022400
 8002ce8:	2402760c 	.word	0x2402760c
 8002cec:	40020040 	.word	0x40020040
 8002cf0:	240276c0 	.word	0x240276c0
 8002cf4:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_UART_MspInit+0x3c0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d149      	bne.n	8002d96 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d0c:	f107 0320 	add.w	r3, r7, #32
 8002d10:	4618      	mov	r0, r3
 8002d12:	f005 fed3 	bl	8008abc <HAL_RCCEx_PeriphCLKConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_MspInit+0x340>
      Error_Handler();
 8002d1c:	f7ff fc5e 	bl	80025dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d20:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d74:	2307      	movs	r3, #7
 8002d76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HAL_UART_MspInit+0x3c8>)
 8002d82:	f004 fc13 	bl	80075ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2105      	movs	r1, #5
 8002d8a:	2026      	movs	r0, #38	; 0x26
 8002d8c:	f001 fbae 	bl	80044ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d90:	2026      	movs	r0, #38	; 0x26
 8002d92:	f001 fbc5 	bl	8004520 <HAL_NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	37f0      	adds	r7, #240	; 0xf0
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40004400 	.word	0x40004400
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020000 	.word	0x58020000

08002dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	; 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d827      	bhi.n	8002e0a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	2036      	movs	r0, #54	; 0x36
 8002dc0:	f001 fb94 	bl	80044ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dc4:	2036      	movs	r0, #54	; 0x36
 8002dc6:	f001 fbab 	bl	8004520 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002dca:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_InitTick+0xc4>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_InitTick+0xc8>)
 8002dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_InitTick+0xc8>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_InitTick+0xc8>)
 8002de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dee:	f107 0210 	add.w	r2, r7, #16
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f005 fe1d 	bl	8008a38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_InitTick+0x6a>
 8002e08:	e001      	b.n	8002e0e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02b      	b.n	8002e66 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f005 fde7 	bl	80089e0 <HAL_RCC_GetPCLK1Freq>
 8002e12:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e14:	e004      	b.n	8002e20 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e16:	f005 fde3 	bl	80089e0 <HAL_RCC_GetPCLK1Freq>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <HAL_InitTick+0xcc>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	0c9b      	lsrs	r3, r3, #18
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_InitTick+0xd4>)
 8002e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e4e:	480b      	ldr	r0, [pc, #44]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e50:	f008 fca5 	bl	800b79e <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <HAL_InitTick+0xd0>)
 8002e5c:	f008 fd5e 	bl	800b91c <HAL_TIM_Base_Start_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	e000      	b.n	8002e66 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3740      	adds	r7, #64	; 0x40
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2400000c 	.word	0x2400000c
 8002e74:	58024400 	.word	0x58024400
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	24027bf8 	.word	0x24027bf8
 8002e80:	40001000 	.word	0x40001000

08002e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <NMI_Handler+0x4>

08002e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <HardFault_Handler+0x4>

08002e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <MemManage_Handler+0x4>

08002e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <BusFault_Handler+0x4>

08002e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <UsageFault_Handler+0x4>

08002ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f004 fd5a 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <DMA1_Stream0_IRQHandler+0x10>)
 8002ec6:	f003 f85f 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	24027b34 	.word	0x24027b34

08002ed4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Stream1_IRQHandler+0x10>)
 8002eda:	f003 f855 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	24027368 	.word	0x24027368

08002ee8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA1_Stream2_IRQHandler+0x10>)
 8002eee:	f003 f84b 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2402760c 	.word	0x2402760c

08002efc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA1_Stream5_IRQHandler+0x10>)
 8002f02:	f003 f841 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	240276c0 	.word	0x240276c0

08002f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <USART2_IRQHandler+0x10>)
 8002f16:	f00a f849 	bl	800cfac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	24027960 	.word	0x24027960

08002f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f2c:	f004 fd1f 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002f30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f34:	f004 fd1b 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002f38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f3c:	f004 fd17 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002f40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f44:	f004 fd13 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f4c:	f004 fd0f 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002f50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f54:	f004 fd0b 	bl	800796e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM5_IRQHandler+0x10>)
 8002f62:	f008 fdac 	bl	800babe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	24027484 	.word	0x24027484

08002f70 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <SPI3_IRQHandler+0x10>)
 8002f76:	f008 f935 	bl	800b1e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2402751c 	.word	0x2402751c

08002f84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <UART4_IRQHandler+0x10>)
 8002f8a:	f00a f80f 	bl	800cfac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	24027838 	.word	0x24027838

08002f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM6_DAC_IRQHandler+0x10>)
 8002f9e:	f008 fd8e 	bl	800babe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	24027bf8 	.word	0x24027bf8

08002fac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <UART8_IRQHandler+0x10>)
 8002fb2:	f009 fffb 	bl	800cfac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	240277a8 	.word	0x240277a8

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff0:	f00e fafa 	bl	80115e8 <__errno>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	24080000 	.word	0x24080000
 8003020:	00000400 	.word	0x00000400
 8003024:	240000cc 	.word	0x240000cc
 8003028:	24027c98 	.word	0x24027c98

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <SystemInit+0xec>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <SystemInit+0xec>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <SystemInit+0xf0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	2b06      	cmp	r3, #6
 800304a:	d807      	bhi.n	800305c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <SystemInit+0xf0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 030f 	bic.w	r3, r3, #15
 8003054:	4a31      	ldr	r2, [pc, #196]	; (800311c <SystemInit+0xf0>)
 8003056:	f043 0307 	orr.w	r3, r3, #7
 800305a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <SystemInit+0xf4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <SystemInit+0xf4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <SystemInit+0xf4>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <SystemInit+0xf4>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	492b      	ldr	r1, [pc, #172]	; (8003120 <SystemInit+0xf4>)
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <SystemInit+0xf8>)
 8003076:	4013      	ands	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <SystemInit+0xf0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <SystemInit+0xf0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <SystemInit+0xf0>)
 8003090:	f043 0307 	orr.w	r3, r3, #7
 8003094:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <SystemInit+0xf4>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <SystemInit+0xf4>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <SystemInit+0xf4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <SystemInit+0xf4>)
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <SystemInit+0xfc>)
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <SystemInit+0xf4>)
 80030b0:	4a1e      	ldr	r2, [pc, #120]	; (800312c <SystemInit+0x100>)
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <SystemInit+0xf4>)
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <SystemInit+0x104>)
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <SystemInit+0xf4>)
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <SystemInit+0xf4>)
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <SystemInit+0x104>)
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <SystemInit+0xf4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <SystemInit+0xf4>)
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <SystemInit+0x104>)
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <SystemInit+0xf4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <SystemInit+0xf4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a10      	ldr	r2, [pc, #64]	; (8003120 <SystemInit+0xf4>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <SystemInit+0xf4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <SystemInit+0x108>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <SystemInit+0x10c>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f6:	d202      	bcs.n	80030fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <SystemInit+0x110>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <SystemInit+0x114>)
 8003100:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003104:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SystemInit+0xec>)
 8003108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800310c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00
 800311c:	52002000 	.word	0x52002000
 8003120:	58024400 	.word	0x58024400
 8003124:	eaf6ed7f 	.word	0xeaf6ed7f
 8003128:	02020200 	.word	0x02020200
 800312c:	01ff0000 	.word	0x01ff0000
 8003130:	01010280 	.word	0x01010280
 8003134:	5c001000 	.word	0x5c001000
 8003138:	ffff0000 	.word	0xffff0000
 800313c:	51008108 	.word	0x51008108
 8003140:	52004000 	.word	0x52004000

08003144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800317c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003148:	f7ff ff70 	bl	800302c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800314c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800314e:	e003      	b.n	8003158 <LoopCopyDataInit>

08003150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003156:	3104      	adds	r1, #4

08003158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003158:	480a      	ldr	r0, [pc, #40]	; (8003184 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800315c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800315e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003160:	d3f6      	bcc.n	8003150 <CopyDataInit>
  ldr  r2, =_sbss
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003164:	e002      	b.n	800316c <LoopFillZerobss>

08003166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003168:	f842 3b04 	str.w	r3, [r2], #4

0800316c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800316e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003170:	d3f9      	bcc.n	8003166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003172:	f00e fa3f 	bl	80115f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003176:	f7fe fa89 	bl	800168c <main>
  bx  lr    
 800317a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800317c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003180:	08012388 	.word	0x08012388
  ldr  r0, =_sdata
 8003184:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003188:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 800318c:	2400007c 	.word	0x2400007c
  ldr  r3, = _ebss
 8003190:	24027c98 	.word	0x24027c98

08003194 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC3_IRQHandler>
	...

08003198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800319e:	2003      	movs	r0, #3
 80031a0:	f001 f999 	bl	80044d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a4:	f005 fa72 	bl	800868c <HAL_RCC_GetSysClockFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <HAL_Init+0x68>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4913      	ldr	r1, [pc, #76]	; (8003204 <HAL_Init+0x6c>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_Init+0x68>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_Init+0x6c>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <HAL_Init+0x70>)
 80031da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <HAL_Init+0x74>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff fde2 	bl	8002dac <HAL_InitTick>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e002      	b.n	80031f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031f2:	f7ff f9fb 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	080121a4 	.word	0x080121a4
 8003208:	24000008 	.word	0x24000008
 800320c:	24000004 	.word	0x24000004

08003210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x20>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_IncTick+0x24>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4413      	add	r3, r2
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <HAL_IncTick+0x24>)
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	24000010 	.word	0x24000010
 8003234:	24027c44 	.word	0x24027c44

08003238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return uwTick;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_GetTick+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	24027c44 	.word	0x24027c44

08003250 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_GetREVID+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0c1b      	lsrs	r3, r3, #16
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	5c001000 	.word	0x5c001000

08003268 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3360      	adds	r3, #96	; 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	431a      	orrs	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	611a      	str	r2, [r3, #16]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3360      	adds	r3, #96	; 0x60
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	431a      	orrs	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]
  }
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3330      	adds	r3, #48	; 0x30
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	4413      	add	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	211f      	movs	r1, #31
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	f003 011f 	and.w	r1, r3, #31
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	431a      	orrs	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3314      	adds	r3, #20
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	0e5b      	lsrs	r3, r3, #25
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	0d1b      	lsrs	r3, r3, #20
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2107      	movs	r1, #7
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	401a      	ands	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	431a      	orrs	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f003 0318 	and.w	r3, r3, #24
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <LL_ADC_SetChannelSingleDiff+0x44>)
 800344c:	40d9      	lsrs	r1, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	400b      	ands	r3, r1
 8003452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	000fffff 	.word	0x000fffff

08003470 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <LL_ADC_DisableDeepPowerDown+0x20>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6093      	str	r3, [r2, #8]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	5fffffc0 	.word	0x5fffffc0

08003494 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a8:	d101      	bne.n	80034ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	6fffffc0 	.word	0x6fffffc0

080034e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f8:	d101      	bne.n	80034fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <LL_ADC_IsEnabled+0x18>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <LL_ADC_IsEnabled+0x1a>
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d101      	bne.n	800354a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d101      	bne.n	8003570 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e18e      	b.n	80038b8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff f83d 	bl	8002628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff67 	bl	8003494 <LL_ADC_IsDeepPowerDownEnabled>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff4d 	bl	8003470 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff82 	bl	80034e4 <LL_ADC_IsInternalRegulatorEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d114      	bne.n	8003610 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff66 	bl	80034bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f0:	4b9a      	ldr	r3, [pc, #616]	; (800385c <HAL_ADC_Init+0x2dc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	4a9a      	ldr	r2, [pc, #616]	; (8003860 <HAL_ADC_Init+0x2e0>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	3301      	adds	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003602:	e002      	b.n	800360a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f9      	bne.n	8003604 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff65 	bl	80034e4 <LL_ADC_IsInternalRegulatorEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0210 	orr.w	r2, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff76 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003646:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8128 	bne.w	80038a6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 8124 	bne.w	80038a6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff4a 	bl	800350c <LL_ADC_IsEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d136      	bne.n	80036ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a78      	ldr	r2, [pc, #480]	; (8003864 <HAL_ADC_Init+0x2e4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_ADC_Init+0x112>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a76      	ldr	r2, [pc, #472]	; (8003868 <HAL_ADC_Init+0x2e8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10e      	bne.n	80036b0 <HAL_ADC_Init+0x130>
 8003692:	4874      	ldr	r0, [pc, #464]	; (8003864 <HAL_ADC_Init+0x2e4>)
 8003694:	f7ff ff3a 	bl	800350c <LL_ADC_IsEnabled>
 8003698:	4604      	mov	r4, r0
 800369a:	4873      	ldr	r0, [pc, #460]	; (8003868 <HAL_ADC_Init+0x2e8>)
 800369c:	f7ff ff36 	bl	800350c <LL_ADC_IsEnabled>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4323      	orrs	r3, r4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e008      	b.n	80036c2 <HAL_ADC_Init+0x142>
 80036b0:	486e      	ldr	r0, [pc, #440]	; (800386c <HAL_ADC_Init+0x2ec>)
 80036b2:	f7ff ff2b 	bl	800350c <LL_ADC_IsEnabled>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a66      	ldr	r2, [pc, #408]	; (8003864 <HAL_ADC_Init+0x2e4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_ADC_Init+0x15a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a64      	ldr	r2, [pc, #400]	; (8003868 <HAL_ADC_Init+0x2e8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_ADC_Init+0x15e>
 80036da:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_ADC_Init+0x2f0>)
 80036dc:	e000      	b.n	80036e0 <HAL_ADC_Init+0x160>
 80036de:	4a65      	ldr	r2, [pc, #404]	; (8003874 <HAL_ADC_Init+0x2f4>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7ff fdbe 	bl	8003268 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80036ec:	f7ff fdb0 	bl	8003250 <HAL_GetREVID>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d914      	bls.n	8003724 <HAL_ADC_Init+0x1a4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d110      	bne.n	8003724 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7d5b      	ldrb	r3, [r3, #21]
 8003706:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800370c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003712:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7f1b      	ldrb	r3, [r3, #28]
 8003718:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800371a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800371c:	f043 030c 	orr.w	r3, r3, #12
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e00d      	b.n	8003740 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7d5b      	ldrb	r3, [r3, #21]
 8003728:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800372e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003734:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7f1b      	ldrb	r3, [r3, #28]
 800373a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7f1b      	ldrb	r3, [r3, #28]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	3b01      	subs	r3, #1
 800374e:	045b      	lsls	r3, r3, #17
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_ADC_Init+0x2f8>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	430b      	orrs	r3, r1
 8003784:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fed1 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003790:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fede 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 800379c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d14a      	bne.n	800383a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d147      	bne.n	800383a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7d1b      	ldrb	r3, [r3, #20]
 80037ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_ADC_Init+0x2fc>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11b      	bne.n	800380e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_ADC_Init+0x300>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0411      	lsls	r1, r2, #16
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037f8:	4311      	orrs	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037fe:	430a      	orrs	r2, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	e007      	b.n	800381e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb93 	bl	8003f60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d120      	bne.n	8003884 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f023 010f 	bic.w	r1, r3, #15
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
 800385a:	e01b      	b.n	8003894 <HAL_ADC_Init+0x314>
 800385c:	24000004 	.word	0x24000004
 8003860:	053e2d63 	.word	0x053e2d63
 8003864:	40022000 	.word	0x40022000
 8003868:	40022100 	.word	0x40022100
 800386c:	58026000 	.word	0x58026000
 8003870:	40022300 	.word	0x40022300
 8003874:	58026300 	.word	0x58026300
 8003878:	fff0c003 	.word	0xfff0c003
 800387c:	ffffbffc 	.word	0xffffbffc
 8003880:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 020f 	bic.w	r2, r2, #15
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f023 0303 	bic.w	r3, r3, #3
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
 80038a4:	e007      	b.n	80038b6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f043 0210 	orr.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3724      	adds	r7, #36	; 0x24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b0a1      	sub	sp, #132	; 0x84
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a9d      	ldr	r2, [pc, #628]	; (8003b50 <HAL_ADC_ConfigChannel+0x290>)
 80038da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x2a>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e321      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x66e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe1b 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8306 	bne.w	8003f10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x62>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	e016      	b.n	8003950 <HAL_ADC_ConfigChannel+0x90>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800393a:	2320      	movs	r3, #32
 800393c:	e003      	b.n	8003946 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800393e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2201      	movs	r2, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	69d1      	ldr	r1, [r2, #28]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	430b      	orrs	r3, r1
 800395c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f7ff fd04 	bl	8003378 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fddc 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 800397a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fde9 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 8003986:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 80b3 	bne.w	8003af6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 80af 	bne.w	8003af6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f7ff fd13 	bl	80033d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039aa:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_ADC_ConfigChannel+0x294>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b6:	d10b      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x110>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	e01d      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x14c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x136>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	e00a      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x14c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d027      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a24:	f7ff fc54 	bl	80032d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6919      	ldr	r1, [r3, #16]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	7e5b      	ldrb	r3, [r3, #25]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x17e>
 8003a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a3c:	e000      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x180>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	461a      	mov	r2, r3
 8003a42:	f7ff fc7e 	bl	8003342 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6919      	ldr	r1, [r3, #16]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	7e1b      	ldrb	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x19c>
 8003a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a5a:	e000      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x19e>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f7ff fc56 	bl	8003310 <LL_ADC_SetDataRightShift>
 8003a64:	e047      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	069b      	lsls	r3, r3, #26
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d107      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a88:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	069b      	lsls	r3, r3, #26
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d107      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	069b      	lsls	r3, r3, #26
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ad0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	069b      	lsls	r3, r3, #26
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d107      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fd06 	bl	800350c <LL_ADC_IsEnabled>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 820d 	bne.w	8003f22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	461a      	mov	r2, r3
 8003b16:	f7ff fc87 	bl	8003428 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <HAL_ADC_ConfigChannel+0x290>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	f040 8133 	bne.w	8003d8c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x298>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	0e9b      	lsrs	r3, r3, #26
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	bf94      	ite	ls
 8003b46:	2301      	movls	r3, #1
 8003b48:	2300      	movhi	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	e01e      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x2cc>
 8003b4e:	bf00      	nop
 8003b50:	47ff0000 	.word	0x47ff0000
 8003b54:	5c001000 	.word	0x5c001000
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003b70:	2320      	movs	r3, #32
 8003b72:	e003      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	bf94      	ite	ls
 8003b86:	2301      	movls	r3, #1
 8003b88:	2300      	movhi	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d079      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x2ec>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	069b      	lsls	r3, r3, #26
 8003ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003baa:	e015      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x318>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	069b      	lsls	r3, r3, #26
 8003bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x338>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	3301      	adds	r3, #1
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	e017      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x368>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e003      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x38e>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	051b      	lsls	r3, r3, #20
 8003c4c:	e018      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x3c0>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c80:	430b      	orrs	r3, r1
 8003c82:	e07e      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x3e0>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	3301      	adds	r3, #1
 8003c98:	069b      	lsls	r3, r3, #26
 8003c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c9e:	e015      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x40c>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	069b      	lsls	r3, r3, #26
 8003cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x42c>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0e9b      	lsrs	r3, r3, #26
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	e017      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x45c>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	61bb      	str	r3, [r7, #24]
  return result;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003d04:	2320      	movs	r3, #32
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	ea42 0103 	orr.w	r1, r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x488>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	3301      	adds	r3, #1
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3b1e      	subs	r3, #30
 8003d40:	051b      	lsls	r3, r3, #20
 8003d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d46:	e01b      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x4c0>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	60fb      	str	r3, [r7, #12]
  return result;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f003 021f 	and.w	r2, r3, #31
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	3b1e      	subs	r3, #30
 8003d7a:	051b      	lsls	r3, r3, #20
 8003d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d80:	430b      	orrs	r3, r1
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6892      	ldr	r2, [r2, #8]
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7ff fb22 	bl	80033d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f280 80c6 	bge.w	8003f22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a67      	ldr	r2, [pc, #412]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x4ea>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x4ee>
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_ADC_ConfigChannel+0x680>)
 8003dac:	e000      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x4f0>
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <HAL_ADC_ConfigChannel+0x684>)
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fa7f 	bl	80032b4 <LL_ADC_GetCommonPathInternalCh>
 8003db6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_ADC_ConfigChannel+0x50c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10e      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x52a>
 8003dcc:	485a      	ldr	r0, [pc, #360]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003dce:	f7ff fb9d 	bl	800350c <LL_ADC_IsEnabled>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4859      	ldr	r0, [pc, #356]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003dd6:	f7ff fb99 	bl	800350c <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4323      	orrs	r3, r4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e008      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x53c>
 8003dea:	4857      	ldr	r0, [pc, #348]	; (8003f48 <HAL_ADC_ConfigChannel+0x688>)
 8003dec:	f7ff fb8e 	bl	800350c <LL_ADC_IsEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d07d      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_ADC_ConfigChannel+0x68c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d130      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x5ac>
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d12b      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <HAL_ADC_ConfigChannel+0x688>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f040 8081 	bne.w	8003f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a44      	ldr	r2, [pc, #272]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_ADC_ConfigChannel+0x574>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a43      	ldr	r2, [pc, #268]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x578>
 8003e34:	4a42      	ldr	r2, [pc, #264]	; (8003f40 <HAL_ADC_ConfigChannel+0x680>)
 8003e36:	e000      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x57a>
 8003e38:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <HAL_ADC_ConfigChannel+0x684>)
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7ff fa23 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e48:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_ADC_ConfigChannel+0x690>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <HAL_ADC_ConfigChannel+0x694>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	3301      	adds	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e5c:	e002      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f9      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e6a:	e05a      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_ADC_ConfigChannel+0x698>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d11e      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x5f4>
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d119      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_ADC_ConfigChannel+0x688>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d14b      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADC_ConfigChannel+0x5de>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x5e2>
 8003e9e:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <HAL_ADC_ConfigChannel+0x680>)
 8003ea0:	e000      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x5e4>
 8003ea2:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <HAL_ADC_ConfigChannel+0x684>)
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7ff f9ee 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb2:	e036      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_ADC_ConfigChannel+0x69c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d131      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d12c      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_ADC_ConfigChannel+0x688>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d127      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_ADC_ConfigChannel+0x678>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_ADC_ConfigChannel+0x626>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_ADC_ConfigChannel+0x67c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x62a>
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_ADC_ConfigChannel+0x680>)
 8003ee8:	e000      	b.n	8003eec <HAL_ADC_ConfigChannel+0x62c>
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <HAL_ADC_ConfigChannel+0x684>)
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f7ff f9ca 	bl	800328e <LL_ADC_SetCommonPathInternalCh>
 8003efa:	e012      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f0e:	e008      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3784      	adds	r7, #132	; 0x84
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40022100 	.word	0x40022100
 8003f40:	40022300 	.word	0x40022300
 8003f44:	58026300 	.word	0x58026300
 8003f48:	58026000 	.word	0x58026000
 8003f4c:	cb840000 	.word	0xcb840000
 8003f50:	24000004 	.word	0x24000004
 8003f54:	053e2d63 	.word	0x053e2d63
 8003f58:	c7520000 	.word	0xc7520000
 8003f5c:	cfb80000 	.word	0xcfb80000

08003f60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a79      	ldr	r2, [pc, #484]	; (8004154 <ADC_ConfigureBoostMode+0x1f4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <ADC_ConfigureBoostMode+0x1c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a78      	ldr	r2, [pc, #480]	; (8004158 <ADC_ConfigureBoostMode+0x1f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <ADC_ConfigureBoostMode+0x30>
 8003f7c:	4b77      	ldr	r3, [pc, #476]	; (800415c <ADC_ConfigureBoostMode+0x1fc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e008      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x42>
 8003f90:	4b73      	ldr	r3, [pc, #460]	; (8004160 <ADC_ConfigureBoostMode+0x200>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01c      	beq.n	8003fe0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003fa6:	f004 fceb 	bl	8008980 <HAL_RCC_GetHCLKFreq>
 8003faa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fb4:	d010      	beq.n	8003fd8 <ADC_ConfigureBoostMode+0x78>
 8003fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fba:	d871      	bhi.n	80040a0 <ADC_ConfigureBoostMode+0x140>
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d002      	beq.n	8003fc8 <ADC_ConfigureBoostMode+0x68>
 8003fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc6:	d16b      	bne.n	80040a0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
        break;
 8003fd6:	e066      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	60fb      	str	r3, [r7, #12]
        break;
 8003fde:	e062      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fe0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003fe4:	f005 fcaa 	bl	800993c <HAL_RCCEx_GetPeriphCLKFreq>
 8003fe8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ff2:	d051      	beq.n	8004098 <ADC_ConfigureBoostMode+0x138>
 8003ff4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ff8:	d854      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 8003ffa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ffe:	d047      	beq.n	8004090 <ADC_ConfigureBoostMode+0x130>
 8004000:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004004:	d84e      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 8004006:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800400a:	d03d      	beq.n	8004088 <ADC_ConfigureBoostMode+0x128>
 800400c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004010:	d848      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 8004012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004016:	d033      	beq.n	8004080 <ADC_ConfigureBoostMode+0x120>
 8004018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800401c:	d842      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 800401e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004022:	d029      	beq.n	8004078 <ADC_ConfigureBoostMode+0x118>
 8004024:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004028:	d83c      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 800402a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800402e:	d01a      	beq.n	8004066 <ADC_ConfigureBoostMode+0x106>
 8004030:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004034:	d836      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 8004036:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800403a:	d014      	beq.n	8004066 <ADC_ConfigureBoostMode+0x106>
 800403c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004040:	d830      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d00e      	beq.n	8004066 <ADC_ConfigureBoostMode+0x106>
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d82a      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 800404e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004052:	d008      	beq.n	8004066 <ADC_ConfigureBoostMode+0x106>
 8004054:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004058:	d824      	bhi.n	80040a4 <ADC_ConfigureBoostMode+0x144>
 800405a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800405e:	d002      	beq.n	8004066 <ADC_ConfigureBoostMode+0x106>
 8004060:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004064:	d11e      	bne.n	80040a4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]
        break;
 8004076:	e016      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
        break;
 800407e:	e012      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	60fb      	str	r3, [r7, #12]
        break;
 8004086:	e00e      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	60fb      	str	r3, [r7, #12]
        break;
 800408e:	e00a      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	09db      	lsrs	r3, r3, #7
 8004094:	60fb      	str	r3, [r7, #12]
        break;
 8004096:	e006      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	60fb      	str	r3, [r7, #12]
        break;
 800409e:	e002      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
        break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80040a4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80040a6:	f7ff f8d3 	bl	8003250 <HAL_GetREVID>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d815      	bhi.n	80040e0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <ADC_ConfigureBoostMode+0x204>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d908      	bls.n	80040ce <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80040cc:	e03e      	b.n	800414c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040dc:	609a      	str	r2, [r3, #8]
}
 80040de:	e035      	b.n	800414c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <ADC_ConfigureBoostMode+0x208>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d808      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040fc:	609a      	str	r2, [r3, #8]
}
 80040fe:	e025      	b.n	800414c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <ADC_ConfigureBoostMode+0x20c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d80a      	bhi.n	800411e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	e016      	b.n	800414c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <ADC_ConfigureBoostMode+0x210>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d80a      	bhi.n	800413c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	e007      	b.n	800414c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40022000 	.word	0x40022000
 8004158:	40022100 	.word	0x40022100
 800415c:	40022300 	.word	0x40022300
 8004160:	58026300 	.word	0x58026300
 8004164:	01312d00 	.word	0x01312d00
 8004168:	005f5e10 	.word	0x005f5e10
 800416c:	00bebc20 	.word	0x00bebc20
 8004170:	017d7840 	.word	0x017d7840

08004174 <LL_ADC_IsEnabled>:
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <LL_ADC_IsEnabled+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_IsEnabled+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_REG_IsConversionOngoing>:
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d101      	bne.n	80041b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b09f      	sub	sp, #124	; 0x7c
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0be      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a5c      	ldr	r2, [pc, #368]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d102      	bne.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	e001      	b.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e09d      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ffb9 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 8004228:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ffb3 	bl	800419a <LL_ADC_REG_IsConversionOngoing>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d17f      	bne.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800423a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423c:	2b00      	cmp	r3, #0
 800423e:	d17c      	bne.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a47      	ldr	r2, [pc, #284]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a46      	ldr	r2, [pc, #280]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004254:	4b45      	ldr	r3, [pc, #276]	; (800436c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004256:	e000      	b.n	800425a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004258:	4b45      	ldr	r3, [pc, #276]	; (8004370 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800425a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d039      	beq.n	80042d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	431a      	orrs	r2, r3
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a38      	ldr	r2, [pc, #224]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10e      	bne.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800428a:	4836      	ldr	r0, [pc, #216]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800428c:	f7ff ff72 	bl	8004174 <LL_ADC_IsEnabled>
 8004290:	4604      	mov	r4, r0
 8004292:	4835      	ldr	r0, [pc, #212]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004294:	f7ff ff6e 	bl	8004174 <LL_ADC_IsEnabled>
 8004298:	4603      	mov	r3, r0
 800429a:	4323      	orrs	r3, r4
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e008      	b.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042a8:	4832      	ldr	r0, [pc, #200]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042aa:	f7ff ff63 	bl	8004174 <LL_ADC_IsEnabled>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d047      	beq.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	6811      	ldr	r1, [r2, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042d6:	e03a      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10e      	bne.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80042f8:	481a      	ldr	r0, [pc, #104]	; (8004364 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042fa:	f7ff ff3b 	bl	8004174 <LL_ADC_IsEnabled>
 80042fe:	4604      	mov	r4, r0
 8004300:	4819      	ldr	r0, [pc, #100]	; (8004368 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004302:	f7ff ff37 	bl	8004174 <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	4323      	orrs	r3, r4
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e008      	b.n	8004328 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004316:	4817      	ldr	r0, [pc, #92]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004318:	f7ff ff2c 	bl	8004174 <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004332:	4013      	ands	r3, r2
 8004334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004336:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004338:	e009      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800434c:	e000      	b.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800434e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004358:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800435c:	4618      	mov	r0, r3
 800435e:	377c      	adds	r7, #124	; 0x7c
 8004360:	46bd      	mov	sp, r7
 8004362:	bd90      	pop	{r4, r7, pc}
 8004364:	40022000 	.word	0x40022000
 8004368:	40022100 	.word	0x40022100
 800436c:	40022300 	.word	0x40022300
 8004370:	58026300 	.word	0x58026300
 8004374:	58026000 	.word	0x58026000
 8004378:	fffff0e0 	.word	0xfffff0e0

0800437c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <__NVIC_SetPriorityGrouping+0x40>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004398:	4013      	ands	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <__NVIC_SetPriorityGrouping+0x40>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00
 80043c0:	05fa0000 	.word	0x05fa0000

080043c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <__NVIC_GetPriorityGrouping+0x18>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	f003 0307 	and.w	r3, r3, #7
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	db0b      	blt.n	800440a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	f003 021f 	and.w	r2, r3, #31
 80043f8:	4907      	ldr	r1, [pc, #28]	; (8004418 <__NVIC_EnableIRQ+0x38>)
 80043fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2001      	movs	r0, #1
 8004402:	fa00 f202 	lsl.w	r2, r0, r2
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000e100 	.word	0xe000e100

0800441c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	db0a      	blt.n	8004446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	490c      	ldr	r1, [pc, #48]	; (8004468 <__NVIC_SetPriority+0x4c>)
 8004436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	440b      	add	r3, r1
 8004440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004444:	e00a      	b.n	800445c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <__NVIC_SetPriority+0x50>)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	3b04      	subs	r3, #4
 8004454:	0112      	lsls	r2, r2, #4
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	440b      	add	r3, r1
 800445a:	761a      	strb	r2, [r3, #24]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000e100 	.word	0xe000e100
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f1c3 0307 	rsb	r3, r3, #7
 800448a:	2b04      	cmp	r3, #4
 800448c:	bf28      	it	cs
 800448e:	2304      	movcs	r3, #4
 8004490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3304      	adds	r3, #4
 8004496:	2b06      	cmp	r3, #6
 8004498:	d902      	bls.n	80044a0 <NVIC_EncodePriority+0x30>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3b03      	subs	r3, #3
 800449e:	e000      	b.n	80044a2 <NVIC_EncodePriority+0x32>
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43da      	mvns	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	401a      	ands	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b8:	f04f 31ff 	mov.w	r1, #4294967295
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	43d9      	mvns	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c8:	4313      	orrs	r3, r2
         );
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff4c 	bl	800437c <__NVIC_SetPriorityGrouping>
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044fa:	f7ff ff63 	bl	80043c4 <__NVIC_GetPriorityGrouping>
 80044fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	f7ff ffb3 	bl	8004470 <NVIC_EncodePriority>
 800450a:	4602      	mov	r2, r0
 800450c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff82 	bl	800441c <__NVIC_SetPriority>
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff56 	bl	80043e0 <__NVIC_EnableIRQ>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e054      	b.n	80045f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7f5b      	ldrb	r3, [r3, #29]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe f8a8 	bl	80026b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	791b      	ldrb	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a22      	ldr	r2, [pc, #136]	; (8004600 <HAL_CRC_Init+0xc4>)
 8004578:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0218 	bic.w	r2, r2, #24
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	e00c      	b.n	80045a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6899      	ldr	r1, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	461a      	mov	r2, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f948 	bl	800482c <HAL_CRCEx_Polynomial_Set>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e028      	b.n	80045f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	795b      	ldrb	r3, [r3, #5]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	611a      	str	r2, [r3, #16]
 80045b8:	e004      	b.n	80045c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6912      	ldr	r2, [r2, #16]
 80045c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	04c11db7 	.word	0x04c11db7

08004604 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2202      	movs	r2, #2
 8004618:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d006      	beq.n	8004640 <HAL_CRC_Calculate+0x3c>
 8004632:	2b03      	cmp	r3, #3
 8004634:	d829      	bhi.n	800468a <HAL_CRC_Calculate+0x86>
 8004636:	2b01      	cmp	r3, #1
 8004638:	d019      	beq.n	800466e <HAL_CRC_Calculate+0x6a>
 800463a:	2b02      	cmp	r3, #2
 800463c:	d01e      	beq.n	800467c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800463e:	e024      	b.n	800468a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e00a      	b.n	800465c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d3f0      	bcc.n	8004646 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	613b      	str	r3, [r7, #16]
      break;
 800466c:	e00e      	b.n	800468c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f812 	bl	800469c <CRC_Handle_8>
 8004678:	6138      	str	r0, [r7, #16]
      break;
 800467a:	e007      	b.n	800468c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f899 	bl	80047b8 <CRC_Handle_16>
 8004686:	6138      	str	r0, [r7, #16]
      break;
 8004688:	e000      	b.n	800468c <HAL_CRC_Calculate+0x88>
      break;
 800468a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004692:	693b      	ldr	r3, [r7, #16]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e023      	b.n	80046f6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	4413      	add	r3, r2
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	3301      	adds	r3, #1
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	440b      	add	r3, r1
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80046c8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	440b      	add	r3, r1
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80046d8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3303      	adds	r3, #3
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	440b      	add	r3, r1
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80046ec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80046ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3d6      	bcc.n	80046ae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04d      	beq.n	80047a6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	4413      	add	r3, r2
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d116      	bne.n	800475c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	b21a      	sxth	r2, r3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	3301      	adds	r3, #1
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	440b      	add	r3, r1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b21b      	sxth	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	b21b      	sxth	r3, r3
 800474e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	8b7a      	ldrh	r2, [r7, #26]
 800475a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d11f      	bne.n	80047a6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4413      	add	r3, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	b21a      	sxth	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	3301      	adds	r3, #1
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	440b      	add	r3, r1
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b21b      	sxth	r3, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	b21b      	sxth	r3, r3
 8004786:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	8b7a      	ldrh	r2, [r7, #26]
 8004792:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4413      	add	r3, r2
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3724      	adds	r7, #36	; 0x24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e013      	b.n	80047f2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	041a      	lsls	r2, r3, #16
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	3302      	adds	r3, #2
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	440b      	add	r3, r1
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3e6      	bcc.n	80047ca <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4413      	add	r3, r2
 8004814:	881a      	ldrh	r2, [r3, #0]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800483c:	231f      	movs	r3, #31
 800483e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004840:	bf00      	nop
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	613a      	str	r2, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_CRCEx_Polynomial_Set+0x34>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_CRCEx_Polynomial_Set+0x16>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b18      	cmp	r3, #24
 8004864:	d846      	bhi.n	80048f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048fb 	.word	0x080048fb
 8004870:	080048f5 	.word	0x080048f5
 8004874:	080048f5 	.word	0x080048f5
 8004878:	080048f5 	.word	0x080048f5
 800487c:	080048f5 	.word	0x080048f5
 8004880:	080048f5 	.word	0x080048f5
 8004884:	080048f5 	.word	0x080048f5
 8004888:	080048f5 	.word	0x080048f5
 800488c:	080048e9 	.word	0x080048e9
 8004890:	080048f5 	.word	0x080048f5
 8004894:	080048f5 	.word	0x080048f5
 8004898:	080048f5 	.word	0x080048f5
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048dd 	.word	0x080048dd
 80048b0:	080048f5 	.word	0x080048f5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	080048d1 	.word	0x080048d1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b06      	cmp	r3, #6
 80048d4:	d913      	bls.n	80048fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048da:	e010      	b.n	80048fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	d90f      	bls.n	8004902 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048e6:	e00c      	b.n	8004902 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d90b      	bls.n	8004906 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048f2:	e008      	b.n	8004906 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
      break;
 80048f8:	e006      	b.n	8004908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004906:	bf00      	nop
  }
  if (status == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 0118 	bic.w	r1, r3, #24
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	430a      	orrs	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004940:	f7fe fc7a 	bl	8003238 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e316      	b.n	8004f7e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a66      	ldr	r2, [pc, #408]	; (8004af0 <HAL_DMA_Init+0x1b8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a65      	ldr	r2, [pc, #404]	; (8004af4 <HAL_DMA_Init+0x1bc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a63      	ldr	r2, [pc, #396]	; (8004af8 <HAL_DMA_Init+0x1c0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a62      	ldr	r2, [pc, #392]	; (8004afc <HAL_DMA_Init+0x1c4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a60      	ldr	r2, [pc, #384]	; (8004b00 <HAL_DMA_Init+0x1c8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5f      	ldr	r2, [pc, #380]	; (8004b04 <HAL_DMA_Init+0x1cc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5d      	ldr	r2, [pc, #372]	; (8004b08 <HAL_DMA_Init+0x1d0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5c      	ldr	r2, [pc, #368]	; (8004b0c <HAL_DMA_Init+0x1d4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5a      	ldr	r2, [pc, #360]	; (8004b10 <HAL_DMA_Init+0x1d8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a59      	ldr	r2, [pc, #356]	; (8004b14 <HAL_DMA_Init+0x1dc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a57      	ldr	r2, [pc, #348]	; (8004b18 <HAL_DMA_Init+0x1e0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a56      	ldr	r2, [pc, #344]	; (8004b1c <HAL_DMA_Init+0x1e4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a54      	ldr	r2, [pc, #336]	; (8004b20 <HAL_DMA_Init+0x1e8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a53      	ldr	r2, [pc, #332]	; (8004b24 <HAL_DMA_Init+0x1ec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a51      	ldr	r2, [pc, #324]	; (8004b28 <HAL_DMA_Init+0x1f0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_DMA_Init+0xb8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a50      	ldr	r2, [pc, #320]	; (8004b2c <HAL_DMA_Init+0x1f4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Init+0xbc>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_DMA_Init+0xbe>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 813b 	beq.w	8004c72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a37      	ldr	r2, [pc, #220]	; (8004af0 <HAL_DMA_Init+0x1b8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a36      	ldr	r2, [pc, #216]	; (8004af4 <HAL_DMA_Init+0x1bc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a34      	ldr	r2, [pc, #208]	; (8004af8 <HAL_DMA_Init+0x1c0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a33      	ldr	r2, [pc, #204]	; (8004afc <HAL_DMA_Init+0x1c4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a31      	ldr	r2, [pc, #196]	; (8004b00 <HAL_DMA_Init+0x1c8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a30      	ldr	r2, [pc, #192]	; (8004b04 <HAL_DMA_Init+0x1cc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	; (8004b08 <HAL_DMA_Init+0x1d0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_DMA_Init+0x1d4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <HAL_DMA_Init+0x1d8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <HAL_DMA_Init+0x1dc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a28      	ldr	r2, [pc, #160]	; (8004b18 <HAL_DMA_Init+0x1e0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <HAL_DMA_Init+0x1e4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <HAL_DMA_Init+0x1e8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <HAL_DMA_Init+0x1ec>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <HAL_DMA_Init+0x1f0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_Init+0x174>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <HAL_DMA_Init+0x1f4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <HAL_DMA_Init+0x186>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <HAL_DMA_Init+0x196>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ace:	e02f      	b.n	8004b30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad0:	f7fe fbb2 	bl	8003238 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b05      	cmp	r3, #5
 8004adc:	d928      	bls.n	8004b30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e246      	b.n	8004f7e <HAL_DMA_Init+0x646>
 8004af0:	40020010 	.word	0x40020010
 8004af4:	40020028 	.word	0x40020028
 8004af8:	40020040 	.word	0x40020040
 8004afc:	40020058 	.word	0x40020058
 8004b00:	40020070 	.word	0x40020070
 8004b04:	40020088 	.word	0x40020088
 8004b08:	400200a0 	.word	0x400200a0
 8004b0c:	400200b8 	.word	0x400200b8
 8004b10:	40020410 	.word	0x40020410
 8004b14:	40020428 	.word	0x40020428
 8004b18:	40020440 	.word	0x40020440
 8004b1c:	40020458 	.word	0x40020458
 8004b20:	40020470 	.word	0x40020470
 8004b24:	40020488 	.word	0x40020488
 8004b28:	400204a0 	.word	0x400204a0
 8004b2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1c8      	bne.n	8004ad0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_DMA_Init+0x420>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d107      	bne.n	8004b94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b94:	4b71      	ldr	r3, [pc, #452]	; (8004d5c <HAL_DMA_Init+0x424>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b71      	ldr	r3, [pc, #452]	; (8004d60 <HAL_DMA_Init+0x428>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba0:	d328      	bcc.n	8004bf4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b28      	cmp	r3, #40	; 0x28
 8004ba8:	d903      	bls.n	8004bb2 <HAL_DMA_Init+0x27a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb0:	d917      	bls.n	8004be2 <HAL_DMA_Init+0x2aa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	d903      	bls.n	8004bc2 <HAL_DMA_Init+0x28a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b42      	cmp	r3, #66	; 0x42
 8004bc0:	d90f      	bls.n	8004be2 <HAL_DMA_Init+0x2aa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b46      	cmp	r3, #70	; 0x46
 8004bc8:	d903      	bls.n	8004bd2 <HAL_DMA_Init+0x29a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b48      	cmp	r3, #72	; 0x48
 8004bd0:	d907      	bls.n	8004be2 <HAL_DMA_Init+0x2aa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b4e      	cmp	r3, #78	; 0x4e
 8004bd8:	d905      	bls.n	8004be6 <HAL_DMA_Init+0x2ae>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b52      	cmp	r3, #82	; 0x52
 8004be0:	d801      	bhi.n	8004be6 <HAL_DMA_Init+0x2ae>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_DMA_Init+0x2b0>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0307 	bic.w	r3, r3, #7
 8004c0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d117      	bne.n	8004c4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f002 fb31 	bl	8007298 <DMA_CheckFifoParam>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e197      	b.n	8004f7e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f002 fa6c 	bl	8007134 <DMA_CalcBaseAndBitshift>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	223f      	movs	r2, #63	; 0x3f
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	e0cd      	b.n	8004e0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <HAL_DMA_Init+0x42c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <HAL_DMA_Init+0x430>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <HAL_DMA_Init+0x434>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <HAL_DMA_Init+0x438>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <HAL_DMA_Init+0x43c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <HAL_DMA_Init+0x440>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <HAL_DMA_Init+0x444>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_DMA_Init+0x38a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <HAL_DMA_Init+0x448>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DMA_Init+0x38e>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <HAL_DMA_Init+0x390>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8097 	beq.w	8004dfc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_DMA_Init+0x42c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d021      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <HAL_DMA_Init+0x430>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01c      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <HAL_DMA_Init+0x434>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d017      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <HAL_DMA_Init+0x438>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d012      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_DMA_Init+0x43c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00d      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_DMA_Init+0x440>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d008      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_DMA_Init+0x444>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <HAL_DMA_Init+0x3e4>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_DMA_Init+0x448>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_DMA_Init+0x44c>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d020      	beq.n	8004d88 <HAL_DMA_Init+0x450>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d102      	bne.n	8004d54 <HAL_DMA_Init+0x41c>
 8004d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d52:	e01a      	b.n	8004d8a <HAL_DMA_Init+0x452>
 8004d54:	2300      	movs	r3, #0
 8004d56:	e018      	b.n	8004d8a <HAL_DMA_Init+0x452>
 8004d58:	fe10803f 	.word	0xfe10803f
 8004d5c:	5c001000 	.word	0x5c001000
 8004d60:	ffff0000 	.word	0xffff0000
 8004d64:	58025408 	.word	0x58025408
 8004d68:	5802541c 	.word	0x5802541c
 8004d6c:	58025430 	.word	0x58025430
 8004d70:	58025444 	.word	0x58025444
 8004d74:	58025458 	.word	0x58025458
 8004d78:	5802546c 	.word	0x5802546c
 8004d7c:	58025480 	.word	0x58025480
 8004d80:	58025494 	.word	0x58025494
 8004d84:	fffe000f 	.word	0xfffe000f
 8004d88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004db8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b6e      	ldr	r3, [pc, #440]	; (8004f88 <HAL_DMA_Init+0x650>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	4a6e      	ldr	r2, [pc, #440]	; (8004f8c <HAL_DMA_Init+0x654>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 f9a7 	bl	8007134 <DMA_CalcBaseAndBitshift>
 8004de6:	4603      	mov	r3, r0
 8004de8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e008      	b.n	8004e0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0b7      	b.n	8004f7e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5f      	ldr	r2, [pc, #380]	; (8004f90 <HAL_DMA_Init+0x658>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d072      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5d      	ldr	r2, [pc, #372]	; (8004f94 <HAL_DMA_Init+0x65c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d06d      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5c      	ldr	r2, [pc, #368]	; (8004f98 <HAL_DMA_Init+0x660>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d068      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5a      	ldr	r2, [pc, #360]	; (8004f9c <HAL_DMA_Init+0x664>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d063      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a59      	ldr	r2, [pc, #356]	; (8004fa0 <HAL_DMA_Init+0x668>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d05e      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a57      	ldr	r2, [pc, #348]	; (8004fa4 <HAL_DMA_Init+0x66c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d059      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_DMA_Init+0x670>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d054      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a54      	ldr	r2, [pc, #336]	; (8004fac <HAL_DMA_Init+0x674>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d04f      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a53      	ldr	r2, [pc, #332]	; (8004fb0 <HAL_DMA_Init+0x678>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d04a      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a51      	ldr	r2, [pc, #324]	; (8004fb4 <HAL_DMA_Init+0x67c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d045      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a50      	ldr	r2, [pc, #320]	; (8004fb8 <HAL_DMA_Init+0x680>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d040      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <HAL_DMA_Init+0x684>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d03b      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4d      	ldr	r2, [pc, #308]	; (8004fc0 <HAL_DMA_Init+0x688>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d036      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a4b      	ldr	r2, [pc, #300]	; (8004fc4 <HAL_DMA_Init+0x68c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d031      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4a      	ldr	r2, [pc, #296]	; (8004fc8 <HAL_DMA_Init+0x690>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d02c      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a48      	ldr	r2, [pc, #288]	; (8004fcc <HAL_DMA_Init+0x694>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d027      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a47      	ldr	r2, [pc, #284]	; (8004fd0 <HAL_DMA_Init+0x698>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a45      	ldr	r2, [pc, #276]	; (8004fd4 <HAL_DMA_Init+0x69c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a44      	ldr	r2, [pc, #272]	; (8004fd8 <HAL_DMA_Init+0x6a0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_DMA_Init+0x6a4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a41      	ldr	r2, [pc, #260]	; (8004fe0 <HAL_DMA_Init+0x6a8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3f      	ldr	r2, [pc, #252]	; (8004fe4 <HAL_DMA_Init+0x6ac>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <HAL_DMA_Init+0x6b0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_DMA_Init+0x5c6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	; (8004fec <HAL_DMA_Init+0x6b4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_Init+0x5ca>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_DMA_Init+0x5cc>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d032      	beq.n	8004f6e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f002 fa41 	bl	8007390 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d102      	bne.n	8004f1c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_DMA_Init+0x624>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d80c      	bhi.n	8004f5c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f002 fabe 	bl	80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	e008      	b.n	8004f6e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	a7fdabf8 	.word	0xa7fdabf8
 8004f8c:	cccccccd 	.word	0xcccccccd
 8004f90:	40020010 	.word	0x40020010
 8004f94:	40020028 	.word	0x40020028
 8004f98:	40020040 	.word	0x40020040
 8004f9c:	40020058 	.word	0x40020058
 8004fa0:	40020070 	.word	0x40020070
 8004fa4:	40020088 	.word	0x40020088
 8004fa8:	400200a0 	.word	0x400200a0
 8004fac:	400200b8 	.word	0x400200b8
 8004fb0:	40020410 	.word	0x40020410
 8004fb4:	40020428 	.word	0x40020428
 8004fb8:	40020440 	.word	0x40020440
 8004fbc:	40020458 	.word	0x40020458
 8004fc0:	40020470 	.word	0x40020470
 8004fc4:	40020488 	.word	0x40020488
 8004fc8:	400204a0 	.word	0x400204a0
 8004fcc:	400204b8 	.word	0x400204b8
 8004fd0:	58025408 	.word	0x58025408
 8004fd4:	5802541c 	.word	0x5802541c
 8004fd8:	58025430 	.word	0x58025430
 8004fdc:	58025444 	.word	0x58025444
 8004fe0:	58025458 	.word	0x58025458
 8004fe4:	5802546c 	.word	0x5802546c
 8004fe8:	58025480 	.word	0x58025480
 8004fec:	58025494 	.word	0x58025494

08004ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e226      	b.n	800545a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_DMA_Start_IT+0x2a>
 8005016:	2302      	movs	r3, #2
 8005018:	e21f      	b.n	800545a <HAL_DMA_Start_IT+0x46a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b01      	cmp	r3, #1
 800502c:	f040 820a 	bne.w	8005444 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <HAL_DMA_Start_IT+0x1f4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04a      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a66      	ldr	r2, [pc, #408]	; (80051e8 <HAL_DMA_Start_IT+0x1f8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d045      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a65      	ldr	r2, [pc, #404]	; (80051ec <HAL_DMA_Start_IT+0x1fc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d040      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a63      	ldr	r2, [pc, #396]	; (80051f0 <HAL_DMA_Start_IT+0x200>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d03b      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a62      	ldr	r2, [pc, #392]	; (80051f4 <HAL_DMA_Start_IT+0x204>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d036      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a60      	ldr	r2, [pc, #384]	; (80051f8 <HAL_DMA_Start_IT+0x208>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5f      	ldr	r2, [pc, #380]	; (80051fc <HAL_DMA_Start_IT+0x20c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d02c      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5d      	ldr	r2, [pc, #372]	; (8005200 <HAL_DMA_Start_IT+0x210>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d027      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a5c      	ldr	r2, [pc, #368]	; (8005204 <HAL_DMA_Start_IT+0x214>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a5a      	ldr	r2, [pc, #360]	; (8005208 <HAL_DMA_Start_IT+0x218>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a59      	ldr	r2, [pc, #356]	; (800520c <HAL_DMA_Start_IT+0x21c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a57      	ldr	r2, [pc, #348]	; (8005210 <HAL_DMA_Start_IT+0x220>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a56      	ldr	r2, [pc, #344]	; (8005214 <HAL_DMA_Start_IT+0x224>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a54      	ldr	r2, [pc, #336]	; (8005218 <HAL_DMA_Start_IT+0x228>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a53      	ldr	r2, [pc, #332]	; (800521c <HAL_DMA_Start_IT+0x22c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_DMA_Start_IT+0xee>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a51      	ldr	r2, [pc, #324]	; (8005220 <HAL_DMA_Start_IT+0x230>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <HAL_DMA_Start_IT+0x100>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e007      	b.n	8005100 <HAL_DMA_Start_IT+0x110>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 fe68 	bl	8006ddc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <HAL_DMA_Start_IT+0x1f4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a33      	ldr	r2, [pc, #204]	; (80051e8 <HAL_DMA_Start_IT+0x1f8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a31      	ldr	r2, [pc, #196]	; (80051ec <HAL_DMA_Start_IT+0x1fc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <HAL_DMA_Start_IT+0x200>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <HAL_DMA_Start_IT+0x204>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_DMA_Start_IT+0x208>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <HAL_DMA_Start_IT+0x20c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <HAL_DMA_Start_IT+0x210>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a28      	ldr	r2, [pc, #160]	; (8005204 <HAL_DMA_Start_IT+0x214>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a27      	ldr	r2, [pc, #156]	; (8005208 <HAL_DMA_Start_IT+0x218>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <HAL_DMA_Start_IT+0x21c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a24      	ldr	r2, [pc, #144]	; (8005210 <HAL_DMA_Start_IT+0x220>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_DMA_Start_IT+0x224>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_DMA_Start_IT+0x228>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_DMA_Start_IT+0x22c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Start_IT+0x1bc>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_DMA_Start_IT+0x230>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_Start_IT+0x1c0>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_DMA_Start_IT+0x1c2>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d036      	beq.n	8005224 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 021e 	bic.w	r2, r3, #30
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0216 	orr.w	r2, r2, #22
 80051c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03e      	beq.n	8005250 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0208 	orr.w	r2, r2, #8
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e035      	b.n	8005250 <HAL_DMA_Start_IT+0x260>
 80051e4:	40020010 	.word	0x40020010
 80051e8:	40020028 	.word	0x40020028
 80051ec:	40020040 	.word	0x40020040
 80051f0:	40020058 	.word	0x40020058
 80051f4:	40020070 	.word	0x40020070
 80051f8:	40020088 	.word	0x40020088
 80051fc:	400200a0 	.word	0x400200a0
 8005200:	400200b8 	.word	0x400200b8
 8005204:	40020410 	.word	0x40020410
 8005208:	40020428 	.word	0x40020428
 800520c:	40020440 	.word	0x40020440
 8005210:	40020458 	.word	0x40020458
 8005214:	40020470 	.word	0x40020470
 8005218:	40020488 	.word	0x40020488
 800521c:	400204a0 	.word	0x400204a0
 8005220:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 020e 	bic.w	r2, r3, #14
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 020a 	orr.w	r2, r2, #10
 8005236:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0204 	orr.w	r2, r2, #4
 800524e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a83      	ldr	r2, [pc, #524]	; (8005464 <HAL_DMA_Start_IT+0x474>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d072      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a82      	ldr	r2, [pc, #520]	; (8005468 <HAL_DMA_Start_IT+0x478>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d06d      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a80      	ldr	r2, [pc, #512]	; (800546c <HAL_DMA_Start_IT+0x47c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d068      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7f      	ldr	r2, [pc, #508]	; (8005470 <HAL_DMA_Start_IT+0x480>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d063      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a7d      	ldr	r2, [pc, #500]	; (8005474 <HAL_DMA_Start_IT+0x484>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d05e      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a7c      	ldr	r2, [pc, #496]	; (8005478 <HAL_DMA_Start_IT+0x488>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d059      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a7a      	ldr	r2, [pc, #488]	; (800547c <HAL_DMA_Start_IT+0x48c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d054      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a79      	ldr	r2, [pc, #484]	; (8005480 <HAL_DMA_Start_IT+0x490>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d04f      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a77      	ldr	r2, [pc, #476]	; (8005484 <HAL_DMA_Start_IT+0x494>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04a      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a76      	ldr	r2, [pc, #472]	; (8005488 <HAL_DMA_Start_IT+0x498>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d045      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a74      	ldr	r2, [pc, #464]	; (800548c <HAL_DMA_Start_IT+0x49c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d040      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a73      	ldr	r2, [pc, #460]	; (8005490 <HAL_DMA_Start_IT+0x4a0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d03b      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a71      	ldr	r2, [pc, #452]	; (8005494 <HAL_DMA_Start_IT+0x4a4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d036      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a70      	ldr	r2, [pc, #448]	; (8005498 <HAL_DMA_Start_IT+0x4a8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d031      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a6e      	ldr	r2, [pc, #440]	; (800549c <HAL_DMA_Start_IT+0x4ac>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02c      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6d      	ldr	r2, [pc, #436]	; (80054a0 <HAL_DMA_Start_IT+0x4b0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d027      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a6b      	ldr	r2, [pc, #428]	; (80054a4 <HAL_DMA_Start_IT+0x4b4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6a      	ldr	r2, [pc, #424]	; (80054a8 <HAL_DMA_Start_IT+0x4b8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d01d      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a68      	ldr	r2, [pc, #416]	; (80054ac <HAL_DMA_Start_IT+0x4bc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a67      	ldr	r2, [pc, #412]	; (80054b0 <HAL_DMA_Start_IT+0x4c0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a65      	ldr	r2, [pc, #404]	; (80054b4 <HAL_DMA_Start_IT+0x4c4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a64      	ldr	r2, [pc, #400]	; (80054b8 <HAL_DMA_Start_IT+0x4c8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a62      	ldr	r2, [pc, #392]	; (80054bc <HAL_DMA_Start_IT+0x4cc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_DMA_Start_IT+0x350>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a61      	ldr	r2, [pc, #388]	; (80054c0 <HAL_DMA_Start_IT+0x4d0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <HAL_DMA_Start_IT+0x354>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_DMA_Start_IT+0x356>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01a      	beq.n	8005380 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005366:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a37      	ldr	r2, [pc, #220]	; (8005464 <HAL_DMA_Start_IT+0x474>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d04a      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a36      	ldr	r2, [pc, #216]	; (8005468 <HAL_DMA_Start_IT+0x478>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d045      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_DMA_Start_IT+0x47c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d040      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a33      	ldr	r2, [pc, #204]	; (8005470 <HAL_DMA_Start_IT+0x480>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d03b      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a31      	ldr	r2, [pc, #196]	; (8005474 <HAL_DMA_Start_IT+0x484>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d036      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a30      	ldr	r2, [pc, #192]	; (8005478 <HAL_DMA_Start_IT+0x488>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2e      	ldr	r2, [pc, #184]	; (800547c <HAL_DMA_Start_IT+0x48c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02c      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <HAL_DMA_Start_IT+0x490>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d027      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <HAL_DMA_Start_IT+0x494>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <HAL_DMA_Start_IT+0x498>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a28      	ldr	r2, [pc, #160]	; (800548c <HAL_DMA_Start_IT+0x49c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a27      	ldr	r2, [pc, #156]	; (8005490 <HAL_DMA_Start_IT+0x4a0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <HAL_DMA_Start_IT+0x4a4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a24      	ldr	r2, [pc, #144]	; (8005498 <HAL_DMA_Start_IT+0x4a8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	; (800549c <HAL_DMA_Start_IT+0x4ac>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_DMA_Start_IT+0x430>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HAL_DMA_Start_IT+0x4b0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <HAL_DMA_Start_IT+0x442>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e012      	b.n	8005458 <HAL_DMA_Start_IT+0x468>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e009      	b.n	8005458 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005452:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40020010 	.word	0x40020010
 8005468:	40020028 	.word	0x40020028
 800546c:	40020040 	.word	0x40020040
 8005470:	40020058 	.word	0x40020058
 8005474:	40020070 	.word	0x40020070
 8005478:	40020088 	.word	0x40020088
 800547c:	400200a0 	.word	0x400200a0
 8005480:	400200b8 	.word	0x400200b8
 8005484:	40020410 	.word	0x40020410
 8005488:	40020428 	.word	0x40020428
 800548c:	40020440 	.word	0x40020440
 8005490:	40020458 	.word	0x40020458
 8005494:	40020470 	.word	0x40020470
 8005498:	40020488 	.word	0x40020488
 800549c:	400204a0 	.word	0x400204a0
 80054a0:	400204b8 	.word	0x400204b8
 80054a4:	58025408 	.word	0x58025408
 80054a8:	5802541c 	.word	0x5802541c
 80054ac:	58025430 	.word	0x58025430
 80054b0:	58025444 	.word	0x58025444
 80054b4:	58025458 	.word	0x58025458
 80054b8:	5802546c 	.word	0x5802546c
 80054bc:	58025480 	.word	0x58025480
 80054c0:	58025494 	.word	0x58025494

080054c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054cc:	f7fd feb4 	bl	8003238 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e2dc      	b.n	8005a96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d008      	beq.n	80054fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e2cd      	b.n	8005a96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a76      	ldr	r2, [pc, #472]	; (80056d8 <HAL_DMA_Abort+0x214>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d04a      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a74      	ldr	r2, [pc, #464]	; (80056dc <HAL_DMA_Abort+0x218>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d045      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_DMA_Abort+0x21c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a71      	ldr	r2, [pc, #452]	; (80056e4 <HAL_DMA_Abort+0x220>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d03b      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a70      	ldr	r2, [pc, #448]	; (80056e8 <HAL_DMA_Abort+0x224>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d036      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6e      	ldr	r2, [pc, #440]	; (80056ec <HAL_DMA_Abort+0x228>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d031      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_DMA_Abort+0x22c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d02c      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6b      	ldr	r2, [pc, #428]	; (80056f4 <HAL_DMA_Abort+0x230>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d027      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6a      	ldr	r2, [pc, #424]	; (80056f8 <HAL_DMA_Abort+0x234>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a68      	ldr	r2, [pc, #416]	; (80056fc <HAL_DMA_Abort+0x238>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a67      	ldr	r2, [pc, #412]	; (8005700 <HAL_DMA_Abort+0x23c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a65      	ldr	r2, [pc, #404]	; (8005704 <HAL_DMA_Abort+0x240>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_DMA_Abort+0x244>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a62      	ldr	r2, [pc, #392]	; (800570c <HAL_DMA_Abort+0x248>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a61      	ldr	r2, [pc, #388]	; (8005710 <HAL_DMA_Abort+0x24c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_DMA_Abort+0xd6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5f      	ldr	r2, [pc, #380]	; (8005714 <HAL_DMA_Abort+0x250>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_DMA_Abort+0xda>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <HAL_DMA_Abort+0xdc>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 021e 	bic.w	r2, r2, #30
 80055b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e00a      	b.n	80055e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 020e 	bic.w	r2, r2, #14
 80055da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a3c      	ldr	r2, [pc, #240]	; (80056d8 <HAL_DMA_Abort+0x214>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d072      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <HAL_DMA_Abort+0x218>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d06d      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <HAL_DMA_Abort+0x21c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d068      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_DMA_Abort+0x220>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d063      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a36      	ldr	r2, [pc, #216]	; (80056e8 <HAL_DMA_Abort+0x224>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d05e      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_Abort+0x228>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d059      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_DMA_Abort+0x22c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d054      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_Abort+0x230>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d04f      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <HAL_DMA_Abort+0x234>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d04a      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_Abort+0x238>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d045      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_DMA_Abort+0x23c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d040      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_Abort+0x240>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d03b      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_DMA_Abort+0x244>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d036      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_Abort+0x248>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d031      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <HAL_DMA_Abort+0x24c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d02c      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_Abort+0x250>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d027      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_DMA_Abort+0x254>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d022      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_Abort+0x258>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01d      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_DMA_Abort+0x25c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d018      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_DMA_Abort+0x260>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_DMA_Abort+0x264>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00e      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_DMA_Abort+0x268>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <HAL_DMA_Abort+0x26c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_DMA_Abort+0x20e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a19      	ldr	r2, [pc, #100]	; (8005734 <HAL_DMA_Abort+0x270>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d132      	bne.n	8005738 <HAL_DMA_Abort+0x274>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e031      	b.n	800573a <HAL_DMA_Abort+0x276>
 80056d6:	bf00      	nop
 80056d8:	40020010 	.word	0x40020010
 80056dc:	40020028 	.word	0x40020028
 80056e0:	40020040 	.word	0x40020040
 80056e4:	40020058 	.word	0x40020058
 80056e8:	40020070 	.word	0x40020070
 80056ec:	40020088 	.word	0x40020088
 80056f0:	400200a0 	.word	0x400200a0
 80056f4:	400200b8 	.word	0x400200b8
 80056f8:	40020410 	.word	0x40020410
 80056fc:	40020428 	.word	0x40020428
 8005700:	40020440 	.word	0x40020440
 8005704:	40020458 	.word	0x40020458
 8005708:	40020470 	.word	0x40020470
 800570c:	40020488 	.word	0x40020488
 8005710:	400204a0 	.word	0x400204a0
 8005714:	400204b8 	.word	0x400204b8
 8005718:	58025408 	.word	0x58025408
 800571c:	5802541c 	.word	0x5802541c
 8005720:	58025430 	.word	0x58025430
 8005724:	58025444 	.word	0x58025444
 8005728:	58025458 	.word	0x58025458
 800572c:	5802546c 	.word	0x5802546c
 8005730:	58025480 	.word	0x58025480
 8005734:	58025494 	.word	0x58025494
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800574c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6d      	ldr	r2, [pc, #436]	; (8005908 <HAL_DMA_Abort+0x444>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d04a      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6b      	ldr	r2, [pc, #428]	; (800590c <HAL_DMA_Abort+0x448>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d045      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6a      	ldr	r2, [pc, #424]	; (8005910 <HAL_DMA_Abort+0x44c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d040      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a68      	ldr	r2, [pc, #416]	; (8005914 <HAL_DMA_Abort+0x450>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d03b      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a67      	ldr	r2, [pc, #412]	; (8005918 <HAL_DMA_Abort+0x454>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d036      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a65      	ldr	r2, [pc, #404]	; (800591c <HAL_DMA_Abort+0x458>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d031      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a64      	ldr	r2, [pc, #400]	; (8005920 <HAL_DMA_Abort+0x45c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d02c      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a62      	ldr	r2, [pc, #392]	; (8005924 <HAL_DMA_Abort+0x460>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a61      	ldr	r2, [pc, #388]	; (8005928 <HAL_DMA_Abort+0x464>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5f      	ldr	r2, [pc, #380]	; (800592c <HAL_DMA_Abort+0x468>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <HAL_DMA_Abort+0x46c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5c      	ldr	r2, [pc, #368]	; (8005934 <HAL_DMA_Abort+0x470>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a5b      	ldr	r2, [pc, #364]	; (8005938 <HAL_DMA_Abort+0x474>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a59      	ldr	r2, [pc, #356]	; (800593c <HAL_DMA_Abort+0x478>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a58      	ldr	r2, [pc, #352]	; (8005940 <HAL_DMA_Abort+0x47c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_Abort+0x32a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a56      	ldr	r2, [pc, #344]	; (8005944 <HAL_DMA_Abort+0x480>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <HAL_DMA_Abort+0x33c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e007      	b.n	8005810 <HAL_DMA_Abort+0x34c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005810:	e013      	b.n	800583a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005812:	f7fd fd11 	bl	8003238 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b05      	cmp	r3, #5
 800581e:	d90c      	bls.n	800583a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2203      	movs	r2, #3
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e12d      	b.n	8005a96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2f      	ldr	r2, [pc, #188]	; (8005908 <HAL_DMA_Abort+0x444>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d04a      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <HAL_DMA_Abort+0x448>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d045      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <HAL_DMA_Abort+0x44c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d040      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <HAL_DMA_Abort+0x450>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d03b      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a29      	ldr	r2, [pc, #164]	; (8005918 <HAL_DMA_Abort+0x454>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d036      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a27      	ldr	r2, [pc, #156]	; (800591c <HAL_DMA_Abort+0x458>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d031      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <HAL_DMA_Abort+0x45c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d02c      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a24      	ldr	r2, [pc, #144]	; (8005924 <HAL_DMA_Abort+0x460>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d027      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a23      	ldr	r2, [pc, #140]	; (8005928 <HAL_DMA_Abort+0x464>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a21      	ldr	r2, [pc, #132]	; (800592c <HAL_DMA_Abort+0x468>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a20      	ldr	r2, [pc, #128]	; (8005930 <HAL_DMA_Abort+0x46c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_DMA_Abort+0x470>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_DMA_Abort+0x474>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_DMA_Abort+0x478>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_DMA_Abort+0x47c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_DMA_Abort+0x422>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_DMA_Abort+0x480>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_DMA_Abort+0x426>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_DMA_Abort+0x428>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02b      	beq.n	8005948 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	223f      	movs	r2, #63	; 0x3f
 8005900:	409a      	lsls	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	609a      	str	r2, [r3, #8]
 8005906:	e02a      	b.n	800595e <HAL_DMA_Abort+0x49a>
 8005908:	40020010 	.word	0x40020010
 800590c:	40020028 	.word	0x40020028
 8005910:	40020040 	.word	0x40020040
 8005914:	40020058 	.word	0x40020058
 8005918:	40020070 	.word	0x40020070
 800591c:	40020088 	.word	0x40020088
 8005920:	400200a0 	.word	0x400200a0
 8005924:	400200b8 	.word	0x400200b8
 8005928:	40020410 	.word	0x40020410
 800592c:	40020428 	.word	0x40020428
 8005930:	40020440 	.word	0x40020440
 8005934:	40020458 	.word	0x40020458
 8005938:	40020470 	.word	0x40020470
 800593c:	40020488 	.word	0x40020488
 8005940:	400204a0 	.word	0x400204a0
 8005944:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2201      	movs	r2, #1
 8005958:	409a      	lsls	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4f      	ldr	r2, [pc, #316]	; (8005aa0 <HAL_DMA_Abort+0x5dc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d072      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a4d      	ldr	r2, [pc, #308]	; (8005aa4 <HAL_DMA_Abort+0x5e0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d06d      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4c      	ldr	r2, [pc, #304]	; (8005aa8 <HAL_DMA_Abort+0x5e4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d068      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <HAL_DMA_Abort+0x5e8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d063      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a49      	ldr	r2, [pc, #292]	; (8005ab0 <HAL_DMA_Abort+0x5ec>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d05e      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a47      	ldr	r2, [pc, #284]	; (8005ab4 <HAL_DMA_Abort+0x5f0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d059      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a46      	ldr	r2, [pc, #280]	; (8005ab8 <HAL_DMA_Abort+0x5f4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d054      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a44      	ldr	r2, [pc, #272]	; (8005abc <HAL_DMA_Abort+0x5f8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d04f      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a43      	ldr	r2, [pc, #268]	; (8005ac0 <HAL_DMA_Abort+0x5fc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d04a      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <HAL_DMA_Abort+0x600>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d045      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <HAL_DMA_Abort+0x604>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d040      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <HAL_DMA_Abort+0x608>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d03b      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <HAL_DMA_Abort+0x60c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d036      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <HAL_DMA_Abort+0x610>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d031      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <HAL_DMA_Abort+0x614>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d02c      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a38      	ldr	r2, [pc, #224]	; (8005adc <HAL_DMA_Abort+0x618>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d027      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <HAL_DMA_Abort+0x61c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d022      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <HAL_DMA_Abort+0x620>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01d      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <HAL_DMA_Abort+0x624>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d018      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a32      	ldr	r2, [pc, #200]	; (8005aec <HAL_DMA_Abort+0x628>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <HAL_DMA_Abort+0x62c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00e      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <HAL_DMA_Abort+0x630>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <HAL_DMA_Abort+0x634>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_DMA_Abort+0x58a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <HAL_DMA_Abort+0x638>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_DMA_Abort+0x58e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_DMA_Abort+0x590>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40020010 	.word	0x40020010
 8005aa4:	40020028 	.word	0x40020028
 8005aa8:	40020040 	.word	0x40020040
 8005aac:	40020058 	.word	0x40020058
 8005ab0:	40020070 	.word	0x40020070
 8005ab4:	40020088 	.word	0x40020088
 8005ab8:	400200a0 	.word	0x400200a0
 8005abc:	400200b8 	.word	0x400200b8
 8005ac0:	40020410 	.word	0x40020410
 8005ac4:	40020428 	.word	0x40020428
 8005ac8:	40020440 	.word	0x40020440
 8005acc:	40020458 	.word	0x40020458
 8005ad0:	40020470 	.word	0x40020470
 8005ad4:	40020488 	.word	0x40020488
 8005ad8:	400204a0 	.word	0x400204a0
 8005adc:	400204b8 	.word	0x400204b8
 8005ae0:	58025408 	.word	0x58025408
 8005ae4:	5802541c 	.word	0x5802541c
 8005ae8:	58025430 	.word	0x58025430
 8005aec:	58025444 	.word	0x58025444
 8005af0:	58025458 	.word	0x58025458
 8005af4:	5802546c 	.word	0x5802546c
 8005af8:	58025480 	.word	0x58025480
 8005afc:	58025494 	.word	0x58025494

08005b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e205      	b.n	8005f1e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d004      	beq.n	8005b28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e1fa      	b.n	8005f1e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a8c      	ldr	r2, [pc, #560]	; (8005d60 <HAL_DMA_Abort_IT+0x260>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04a      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a8b      	ldr	r2, [pc, #556]	; (8005d64 <HAL_DMA_Abort_IT+0x264>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d045      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a89      	ldr	r2, [pc, #548]	; (8005d68 <HAL_DMA_Abort_IT+0x268>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d040      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a88      	ldr	r2, [pc, #544]	; (8005d6c <HAL_DMA_Abort_IT+0x26c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a86      	ldr	r2, [pc, #536]	; (8005d70 <HAL_DMA_Abort_IT+0x270>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d036      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a85      	ldr	r2, [pc, #532]	; (8005d74 <HAL_DMA_Abort_IT+0x274>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d031      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_DMA_Abort_IT+0x278>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a82      	ldr	r2, [pc, #520]	; (8005d7c <HAL_DMA_Abort_IT+0x27c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a80      	ldr	r2, [pc, #512]	; (8005d80 <HAL_DMA_Abort_IT+0x280>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a7f      	ldr	r2, [pc, #508]	; (8005d84 <HAL_DMA_Abort_IT+0x284>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7d      	ldr	r2, [pc, #500]	; (8005d88 <HAL_DMA_Abort_IT+0x288>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7c      	ldr	r2, [pc, #496]	; (8005d8c <HAL_DMA_Abort_IT+0x28c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7a      	ldr	r2, [pc, #488]	; (8005d90 <HAL_DMA_Abort_IT+0x290>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a79      	ldr	r2, [pc, #484]	; (8005d94 <HAL_DMA_Abort_IT+0x294>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a77      	ldr	r2, [pc, #476]	; (8005d98 <HAL_DMA_Abort_IT+0x298>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMA_Abort_IT+0xc8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a76      	ldr	r2, [pc, #472]	; (8005d9c <HAL_DMA_Abort_IT+0x29c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMA_Abort_IT+0xcc>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_DMA_Abort_IT+0xce>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d065      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a60      	ldr	r2, [pc, #384]	; (8005d60 <HAL_DMA_Abort_IT+0x260>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d04a      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_DMA_Abort_IT+0x264>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d045      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5d      	ldr	r2, [pc, #372]	; (8005d68 <HAL_DMA_Abort_IT+0x268>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d040      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5b      	ldr	r2, [pc, #364]	; (8005d6c <HAL_DMA_Abort_IT+0x26c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d03b      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_DMA_Abort_IT+0x270>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d036      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_DMA_Abort_IT+0x274>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d031      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a57      	ldr	r2, [pc, #348]	; (8005d78 <HAL_DMA_Abort_IT+0x278>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d02c      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a55      	ldr	r2, [pc, #340]	; (8005d7c <HAL_DMA_Abort_IT+0x27c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d027      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a54      	ldr	r2, [pc, #336]	; (8005d80 <HAL_DMA_Abort_IT+0x280>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a52      	ldr	r2, [pc, #328]	; (8005d84 <HAL_DMA_Abort_IT+0x284>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01d      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a51      	ldr	r2, [pc, #324]	; (8005d88 <HAL_DMA_Abort_IT+0x288>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a4f      	ldr	r2, [pc, #316]	; (8005d8c <HAL_DMA_Abort_IT+0x28c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4e      	ldr	r2, [pc, #312]	; (8005d90 <HAL_DMA_Abort_IT+0x290>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4c      	ldr	r2, [pc, #304]	; (8005d94 <HAL_DMA_Abort_IT+0x294>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4b      	ldr	r2, [pc, #300]	; (8005d98 <HAL_DMA_Abort_IT+0x298>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_DMA_Abort_IT+0x17a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a49      	ldr	r2, [pc, #292]	; (8005d9c <HAL_DMA_Abort_IT+0x29c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <HAL_DMA_Abort_IT+0x18c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e147      	b.n	8005f1c <HAL_DMA_Abort_IT+0x41c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e13e      	b.n	8005f1c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 020e 	bic.w	r2, r2, #14
 8005cac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <HAL_DMA_Abort_IT+0x260>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d04a      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <HAL_DMA_Abort_IT+0x264>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d045      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <HAL_DMA_Abort_IT+0x268>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d040      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <HAL_DMA_Abort_IT+0x26c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d03b      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <HAL_DMA_Abort_IT+0x270>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d036      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a23      	ldr	r2, [pc, #140]	; (8005d74 <HAL_DMA_Abort_IT+0x274>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d031      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <HAL_DMA_Abort_IT+0x278>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d02c      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <HAL_DMA_Abort_IT+0x27c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d027      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_DMA_Abort_IT+0x280>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_DMA_Abort_IT+0x284>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01d      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_DMA_Abort_IT+0x288>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1a      	ldr	r2, [pc, #104]	; (8005d8c <HAL_DMA_Abort_IT+0x28c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_DMA_Abort_IT+0x290>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <HAL_DMA_Abort_IT+0x294>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_DMA_Abort_IT+0x298>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_DMA_Abort_IT+0x24e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <HAL_DMA_Abort_IT+0x29c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d128      	bne.n	8005da0 <HAL_DMA_Abort_IT+0x2a0>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e027      	b.n	8005db0 <HAL_DMA_Abort_IT+0x2b0>
 8005d60:	40020010 	.word	0x40020010
 8005d64:	40020028 	.word	0x40020028
 8005d68:	40020040 	.word	0x40020040
 8005d6c:	40020058 	.word	0x40020058
 8005d70:	40020070 	.word	0x40020070
 8005d74:	40020088 	.word	0x40020088
 8005d78:	400200a0 	.word	0x400200a0
 8005d7c:	400200b8 	.word	0x400200b8
 8005d80:	40020410 	.word	0x40020410
 8005d84:	40020428 	.word	0x40020428
 8005d88:	40020440 	.word	0x40020440
 8005d8c:	40020458 	.word	0x40020458
 8005d90:	40020470 	.word	0x40020470
 8005d94:	40020488 	.word	0x40020488
 8005d98:	400204a0 	.word	0x400204a0
 8005d9c:	400204b8 	.word	0x400204b8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5c      	ldr	r2, [pc, #368]	; (8005f28 <HAL_DMA_Abort_IT+0x428>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d072      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5b      	ldr	r2, [pc, #364]	; (8005f2c <HAL_DMA_Abort_IT+0x42c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d06d      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a59      	ldr	r2, [pc, #356]	; (8005f30 <HAL_DMA_Abort_IT+0x430>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d068      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a58      	ldr	r2, [pc, #352]	; (8005f34 <HAL_DMA_Abort_IT+0x434>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d063      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a56      	ldr	r2, [pc, #344]	; (8005f38 <HAL_DMA_Abort_IT+0x438>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d05e      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a55      	ldr	r2, [pc, #340]	; (8005f3c <HAL_DMA_Abort_IT+0x43c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d059      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a53      	ldr	r2, [pc, #332]	; (8005f40 <HAL_DMA_Abort_IT+0x440>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d054      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <HAL_DMA_Abort_IT+0x444>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04f      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a50      	ldr	r2, [pc, #320]	; (8005f48 <HAL_DMA_Abort_IT+0x448>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4f      	ldr	r2, [pc, #316]	; (8005f4c <HAL_DMA_Abort_IT+0x44c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a4d      	ldr	r2, [pc, #308]	; (8005f50 <HAL_DMA_Abort_IT+0x450>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4c      	ldr	r2, [pc, #304]	; (8005f54 <HAL_DMA_Abort_IT+0x454>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a4a      	ldr	r2, [pc, #296]	; (8005f58 <HAL_DMA_Abort_IT+0x458>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a49      	ldr	r2, [pc, #292]	; (8005f5c <HAL_DMA_Abort_IT+0x45c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a47      	ldr	r2, [pc, #284]	; (8005f60 <HAL_DMA_Abort_IT+0x460>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <HAL_DMA_Abort_IT+0x464>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a44      	ldr	r2, [pc, #272]	; (8005f68 <HAL_DMA_Abort_IT+0x468>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <HAL_DMA_Abort_IT+0x46c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a41      	ldr	r2, [pc, #260]	; (8005f70 <HAL_DMA_Abort_IT+0x470>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a40      	ldr	r2, [pc, #256]	; (8005f74 <HAL_DMA_Abort_IT+0x474>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3e      	ldr	r2, [pc, #248]	; (8005f78 <HAL_DMA_Abort_IT+0x478>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3d      	ldr	r2, [pc, #244]	; (8005f7c <HAL_DMA_Abort_IT+0x47c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <HAL_DMA_Abort_IT+0x480>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x3a0>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <HAL_DMA_Abort_IT+0x484>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_DMA_Abort_IT+0x3a4>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_DMA_Abort_IT+0x3a6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d028      	beq.n	8005efc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2201      	movs	r2, #1
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ed8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005efa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40020010 	.word	0x40020010
 8005f2c:	40020028 	.word	0x40020028
 8005f30:	40020040 	.word	0x40020040
 8005f34:	40020058 	.word	0x40020058
 8005f38:	40020070 	.word	0x40020070
 8005f3c:	40020088 	.word	0x40020088
 8005f40:	400200a0 	.word	0x400200a0
 8005f44:	400200b8 	.word	0x400200b8
 8005f48:	40020410 	.word	0x40020410
 8005f4c:	40020428 	.word	0x40020428
 8005f50:	40020440 	.word	0x40020440
 8005f54:	40020458 	.word	0x40020458
 8005f58:	40020470 	.word	0x40020470
 8005f5c:	40020488 	.word	0x40020488
 8005f60:	400204a0 	.word	0x400204a0
 8005f64:	400204b8 	.word	0x400204b8
 8005f68:	58025408 	.word	0x58025408
 8005f6c:	5802541c 	.word	0x5802541c
 8005f70:	58025430 	.word	0x58025430
 8005f74:	58025444 	.word	0x58025444
 8005f78:	58025458 	.word	0x58025458
 8005f7c:	5802546c 	.word	0x5802546c
 8005f80:	58025480 	.word	0x58025480
 8005f84:	58025494 	.word	0x58025494

08005f88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f94:	4b67      	ldr	r3, [pc, #412]	; (8006134 <HAL_DMA_IRQHandler+0x1ac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a67      	ldr	r2, [pc, #412]	; (8006138 <HAL_DMA_IRQHandler+0x1b0>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5f      	ldr	r2, [pc, #380]	; (800613c <HAL_DMA_IRQHandler+0x1b4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04a      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5d      	ldr	r2, [pc, #372]	; (8006140 <HAL_DMA_IRQHandler+0x1b8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d045      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_DMA_IRQHandler+0x1bc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d040      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5a      	ldr	r2, [pc, #360]	; (8006148 <HAL_DMA_IRQHandler+0x1c0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d03b      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a59      	ldr	r2, [pc, #356]	; (800614c <HAL_DMA_IRQHandler+0x1c4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d036      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a57      	ldr	r2, [pc, #348]	; (8006150 <HAL_DMA_IRQHandler+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a56      	ldr	r2, [pc, #344]	; (8006154 <HAL_DMA_IRQHandler+0x1cc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02c      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a54      	ldr	r2, [pc, #336]	; (8006158 <HAL_DMA_IRQHandler+0x1d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d027      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a53      	ldr	r2, [pc, #332]	; (800615c <HAL_DMA_IRQHandler+0x1d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_DMA_IRQHandler+0x1d8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_DMA_IRQHandler+0x1dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a4e      	ldr	r2, [pc, #312]	; (8006168 <HAL_DMA_IRQHandler+0x1e0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4d      	ldr	r2, [pc, #308]	; (800616c <HAL_DMA_IRQHandler+0x1e4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4b      	ldr	r2, [pc, #300]	; (8006170 <HAL_DMA_IRQHandler+0x1e8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4a      	ldr	r2, [pc, #296]	; (8006174 <HAL_DMA_IRQHandler+0x1ec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a48      	ldr	r2, [pc, #288]	; (8006178 <HAL_DMA_IRQHandler+0x1f0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_DMA_IRQHandler+0xd6>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_DMA_IRQHandler+0xd8>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 842b 	beq.w	80068bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2208      	movs	r2, #8
 8006070:	409a      	lsls	r2, r3
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a2 	beq.w	80061c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2e      	ldr	r2, [pc, #184]	; (800613c <HAL_DMA_IRQHandler+0x1b4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d04a      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2d      	ldr	r2, [pc, #180]	; (8006140 <HAL_DMA_IRQHandler+0x1b8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d045      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2b      	ldr	r2, [pc, #172]	; (8006144 <HAL_DMA_IRQHandler+0x1bc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d040      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <HAL_DMA_IRQHandler+0x1c0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d03b      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <HAL_DMA_IRQHandler+0x1c4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d036      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <HAL_DMA_IRQHandler+0x1c8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d031      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a25      	ldr	r2, [pc, #148]	; (8006154 <HAL_DMA_IRQHandler+0x1cc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02c      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a24      	ldr	r2, [pc, #144]	; (8006158 <HAL_DMA_IRQHandler+0x1d0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d027      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_DMA_IRQHandler+0x1d4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d022      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a21      	ldr	r2, [pc, #132]	; (8006160 <HAL_DMA_IRQHandler+0x1d8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01d      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_DMA_IRQHandler+0x1dc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <HAL_DMA_IRQHandler+0x1e0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_DMA_IRQHandler+0x1e4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_DMA_IRQHandler+0x1e8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_DMA_IRQHandler+0x1ec>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_DMA_IRQHandler+0x1f0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d12f      	bne.n	800617c <HAL_DMA_IRQHandler+0x1f4>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e02e      	b.n	8006190 <HAL_DMA_IRQHandler+0x208>
 8006132:	bf00      	nop
 8006134:	24000004 	.word	0x24000004
 8006138:	1b4e81b5 	.word	0x1b4e81b5
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0204 	bic.w	r2, r2, #4
 80061a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2208      	movs	r2, #8
 80061ae:	409a      	lsls	r2, r3
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d06e      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a69      	ldr	r2, [pc, #420]	; (8006380 <HAL_DMA_IRQHandler+0x3f8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a67      	ldr	r2, [pc, #412]	; (8006384 <HAL_DMA_IRQHandler+0x3fc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a66      	ldr	r2, [pc, #408]	; (8006388 <HAL_DMA_IRQHandler+0x400>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a64      	ldr	r2, [pc, #400]	; (800638c <HAL_DMA_IRQHandler+0x404>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a63      	ldr	r2, [pc, #396]	; (8006390 <HAL_DMA_IRQHandler+0x408>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a61      	ldr	r2, [pc, #388]	; (8006394 <HAL_DMA_IRQHandler+0x40c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a60      	ldr	r2, [pc, #384]	; (8006398 <HAL_DMA_IRQHandler+0x410>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5e      	ldr	r2, [pc, #376]	; (800639c <HAL_DMA_IRQHandler+0x414>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5d      	ldr	r2, [pc, #372]	; (80063a0 <HAL_DMA_IRQHandler+0x418>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5b      	ldr	r2, [pc, #364]	; (80063a4 <HAL_DMA_IRQHandler+0x41c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5a      	ldr	r2, [pc, #360]	; (80063a8 <HAL_DMA_IRQHandler+0x420>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a58      	ldr	r2, [pc, #352]	; (80063ac <HAL_DMA_IRQHandler+0x424>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a57      	ldr	r2, [pc, #348]	; (80063b0 <HAL_DMA_IRQHandler+0x428>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a55      	ldr	r2, [pc, #340]	; (80063b4 <HAL_DMA_IRQHandler+0x42c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a54      	ldr	r2, [pc, #336]	; (80063b8 <HAL_DMA_IRQHandler+0x430>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a52      	ldr	r2, [pc, #328]	; (80063bc <HAL_DMA_IRQHandler+0x434>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10a      	bne.n	800628c <HAL_DMA_IRQHandler+0x304>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e003      	b.n	8006294 <HAL_DMA_IRQHandler+0x30c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f043 0202 	orr.w	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2204      	movs	r2, #4
 80062be:	409a      	lsls	r2, r3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 808f 	beq.w	80063e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2c      	ldr	r2, [pc, #176]	; (8006380 <HAL_DMA_IRQHandler+0x3f8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d04a      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_DMA_IRQHandler+0x3fc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d045      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a29      	ldr	r2, [pc, #164]	; (8006388 <HAL_DMA_IRQHandler+0x400>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d040      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a27      	ldr	r2, [pc, #156]	; (800638c <HAL_DMA_IRQHandler+0x404>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d03b      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_DMA_IRQHandler+0x408>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d036      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a24      	ldr	r2, [pc, #144]	; (8006394 <HAL_DMA_IRQHandler+0x40c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d031      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a23      	ldr	r2, [pc, #140]	; (8006398 <HAL_DMA_IRQHandler+0x410>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d02c      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_DMA_IRQHandler+0x414>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d027      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_DMA_IRQHandler+0x418>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <HAL_DMA_IRQHandler+0x41c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01d      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_DMA_IRQHandler+0x420>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_DMA_IRQHandler+0x424>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_DMA_IRQHandler+0x428>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_DMA_IRQHandler+0x42c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <HAL_DMA_IRQHandler+0x430>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <HAL_DMA_IRQHandler+0x434>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d12a      	bne.n	80063c0 <HAL_DMA_IRQHandler+0x438>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e023      	b.n	80063c8 <HAL_DMA_IRQHandler+0x440>
 8006380:	40020010 	.word	0x40020010
 8006384:	40020028 	.word	0x40020028
 8006388:	40020040 	.word	0x40020040
 800638c:	40020058 	.word	0x40020058
 8006390:	40020070 	.word	0x40020070
 8006394:	40020088 	.word	0x40020088
 8006398:	400200a0 	.word	0x400200a0
 800639c:	400200b8 	.word	0x400200b8
 80063a0:	40020410 	.word	0x40020410
 80063a4:	40020428 	.word	0x40020428
 80063a8:	40020440 	.word	0x40020440
 80063ac:	40020458 	.word	0x40020458
 80063b0:	40020470 	.word	0x40020470
 80063b4:	40020488 	.word	0x40020488
 80063b8:	400204a0 	.word	0x400204a0
 80063bc:	400204b8 	.word	0x400204b8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2204      	movs	r2, #4
 80063d6:	409a      	lsls	r2, r3
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	f043 0204 	orr.w	r2, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2210      	movs	r2, #16
 80063f2:	409a      	lsls	r2, r3
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a6 	beq.w	800654a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a85      	ldr	r2, [pc, #532]	; (8006618 <HAL_DMA_IRQHandler+0x690>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d04a      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a83      	ldr	r2, [pc, #524]	; (800661c <HAL_DMA_IRQHandler+0x694>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d045      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a82      	ldr	r2, [pc, #520]	; (8006620 <HAL_DMA_IRQHandler+0x698>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d040      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a80      	ldr	r2, [pc, #512]	; (8006624 <HAL_DMA_IRQHandler+0x69c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d03b      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7f      	ldr	r2, [pc, #508]	; (8006628 <HAL_DMA_IRQHandler+0x6a0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d036      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7d      	ldr	r2, [pc, #500]	; (800662c <HAL_DMA_IRQHandler+0x6a4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d031      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a7c      	ldr	r2, [pc, #496]	; (8006630 <HAL_DMA_IRQHandler+0x6a8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d02c      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a7a      	ldr	r2, [pc, #488]	; (8006634 <HAL_DMA_IRQHandler+0x6ac>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d027      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a79      	ldr	r2, [pc, #484]	; (8006638 <HAL_DMA_IRQHandler+0x6b0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d022      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a77      	ldr	r2, [pc, #476]	; (800663c <HAL_DMA_IRQHandler+0x6b4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01d      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a76      	ldr	r2, [pc, #472]	; (8006640 <HAL_DMA_IRQHandler+0x6b8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a74      	ldr	r2, [pc, #464]	; (8006644 <HAL_DMA_IRQHandler+0x6bc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a73      	ldr	r2, [pc, #460]	; (8006648 <HAL_DMA_IRQHandler+0x6c0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a71      	ldr	r2, [pc, #452]	; (800664c <HAL_DMA_IRQHandler+0x6c4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a70      	ldr	r2, [pc, #448]	; (8006650 <HAL_DMA_IRQHandler+0x6c8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <HAL_DMA_IRQHandler+0x6cc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10a      	bne.n	80064b4 <HAL_DMA_IRQHandler+0x52c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e009      	b.n	80064c8 <HAL_DMA_IRQHandler+0x540>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf14      	ite	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2300      	moveq	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d03e      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2210      	movs	r2, #16
 80064d6:	409a      	lsls	r2, r3
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d024      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
 8006508:	e01f      	b.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01b      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	e016      	b.n	800654a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d107      	bne.n	800653a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0208 	bic.w	r2, r2, #8
 8006538:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2220      	movs	r2, #32
 8006554:	409a      	lsls	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8110 	beq.w	8006780 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_DMA_IRQHandler+0x690>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d04a      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_DMA_IRQHandler+0x694>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d045      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a29      	ldr	r2, [pc, #164]	; (8006620 <HAL_DMA_IRQHandler+0x698>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d040      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a28      	ldr	r2, [pc, #160]	; (8006624 <HAL_DMA_IRQHandler+0x69c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d03b      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a26      	ldr	r2, [pc, #152]	; (8006628 <HAL_DMA_IRQHandler+0x6a0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d036      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a25      	ldr	r2, [pc, #148]	; (800662c <HAL_DMA_IRQHandler+0x6a4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d031      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_DMA_IRQHandler+0x6a8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02c      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a22      	ldr	r2, [pc, #136]	; (8006634 <HAL_DMA_IRQHandler+0x6ac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d027      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_DMA_IRQHandler+0x6b0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d022      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1f      	ldr	r2, [pc, #124]	; (800663c <HAL_DMA_IRQHandler+0x6b4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d01d      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <HAL_DMA_IRQHandler+0x6b8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <HAL_DMA_IRQHandler+0x6bc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <HAL_DMA_IRQHandler+0x6c0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a19      	ldr	r2, [pc, #100]	; (800664c <HAL_DMA_IRQHandler+0x6c4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_DMA_IRQHandler+0x6c8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_DMA_IRQHandler+0x6cc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d12b      	bne.n	8006658 <HAL_DMA_IRQHandler+0x6d0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e02a      	b.n	800666c <HAL_DMA_IRQHandler+0x6e4>
 8006616:	bf00      	nop
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	bf14      	ite	ne
 8006666:	2301      	movne	r3, #1
 8006668:	2300      	moveq	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8087 	beq.w	8006780 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2220      	movs	r2, #32
 800667c:	409a      	lsls	r2, r3
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b04      	cmp	r3, #4
 800668c:	d139      	bne.n	8006702 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0216 	bic.w	r2, r2, #22
 800669c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_DMA_IRQHandler+0x736>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0208 	bic.w	r2, r2, #8
 80066cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	223f      	movs	r2, #63	; 0x3f
 80066d8:	409a      	lsls	r2, r3
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 834a 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
          }
          return;
 8006700:	e344      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d018      	beq.n	8006742 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	2b00      	cmp	r3, #0
 8006724:	d02c      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	e027      	b.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
 8006740:	e01e      	b.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10f      	bne.n	8006770 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0210 	bic.w	r2, r2, #16
 800675e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8306 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8088 	beq.w	80068a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7a      	ldr	r2, [pc, #488]	; (8006990 <HAL_DMA_IRQHandler+0xa08>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a79      	ldr	r2, [pc, #484]	; (8006994 <HAL_DMA_IRQHandler+0xa0c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a77      	ldr	r2, [pc, #476]	; (8006998 <HAL_DMA_IRQHandler+0xa10>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a76      	ldr	r2, [pc, #472]	; (800699c <HAL_DMA_IRQHandler+0xa14>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a74      	ldr	r2, [pc, #464]	; (80069a0 <HAL_DMA_IRQHandler+0xa18>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a73      	ldr	r2, [pc, #460]	; (80069a4 <HAL_DMA_IRQHandler+0xa1c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a71      	ldr	r2, [pc, #452]	; (80069a8 <HAL_DMA_IRQHandler+0xa20>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a70      	ldr	r2, [pc, #448]	; (80069ac <HAL_DMA_IRQHandler+0xa24>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6e      	ldr	r2, [pc, #440]	; (80069b0 <HAL_DMA_IRQHandler+0xa28>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a6d      	ldr	r2, [pc, #436]	; (80069b4 <HAL_DMA_IRQHandler+0xa2c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6b      	ldr	r2, [pc, #428]	; (80069b8 <HAL_DMA_IRQHandler+0xa30>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6a      	ldr	r2, [pc, #424]	; (80069bc <HAL_DMA_IRQHandler+0xa34>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a68      	ldr	r2, [pc, #416]	; (80069c0 <HAL_DMA_IRQHandler+0xa38>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a67      	ldr	r2, [pc, #412]	; (80069c4 <HAL_DMA_IRQHandler+0xa3c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a65      	ldr	r2, [pc, #404]	; (80069c8 <HAL_DMA_IRQHandler+0xa40>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a64      	ldr	r2, [pc, #400]	; (80069cc <HAL_DMA_IRQHandler+0xa44>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <HAL_DMA_IRQHandler+0x8ca>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e007      	b.n	8006862 <HAL_DMA_IRQHandler+0x8da>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	429a      	cmp	r2, r3
 800686c:	d307      	bcc.n	800687e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f2      	bne.n	8006862 <HAL_DMA_IRQHandler+0x8da>
 800687c:	e000      	b.n	8006880 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800687e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2203      	movs	r2, #3
 800689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800689e:	e003      	b.n	80068a8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8272 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	e26c      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <HAL_DMA_IRQHandler+0xa48>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_DMA_IRQHandler+0xa4c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01d      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a40      	ldr	r2, [pc, #256]	; (80069d8 <HAL_DMA_IRQHandler+0xa50>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a3f      	ldr	r2, [pc, #252]	; (80069dc <HAL_DMA_IRQHandler+0xa54>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3d      	ldr	r2, [pc, #244]	; (80069e0 <HAL_DMA_IRQHandler+0xa58>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_IRQHandler+0xa5c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3a      	ldr	r2, [pc, #232]	; (80069e8 <HAL_DMA_IRQHandler+0xa60>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a39      	ldr	r2, [pc, #228]	; (80069ec <HAL_DMA_IRQHandler+0xa64>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_DMA_IRQHandler+0x988>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_DMA_IRQHandler+0x98a>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 823f 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2204      	movs	r2, #4
 800692a:	409a      	lsls	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80cd 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xb48>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80c7 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2204      	movs	r2, #4
 800694c:	409a      	lsls	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d049      	beq.n	80069f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8210 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006978:	e20a      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8206 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800698c:	e200      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
 800698e:	bf00      	nop
 8006990:	40020010 	.word	0x40020010
 8006994:	40020028 	.word	0x40020028
 8006998:	40020040 	.word	0x40020040
 800699c:	40020058 	.word	0x40020058
 80069a0:	40020070 	.word	0x40020070
 80069a4:	40020088 	.word	0x40020088
 80069a8:	400200a0 	.word	0x400200a0
 80069ac:	400200b8 	.word	0x400200b8
 80069b0:	40020410 	.word	0x40020410
 80069b4:	40020428 	.word	0x40020428
 80069b8:	40020440 	.word	0x40020440
 80069bc:	40020458 	.word	0x40020458
 80069c0:	40020470 	.word	0x40020470
 80069c4:	40020488 	.word	0x40020488
 80069c8:	400204a0 	.word	0x400204a0
 80069cc:	400204b8 	.word	0x400204b8
 80069d0:	58025408 	.word	0x58025408
 80069d4:	5802541c 	.word	0x5802541c
 80069d8:	58025430 	.word	0x58025430
 80069dc:	58025444 	.word	0x58025444
 80069e0:	58025458 	.word	0x58025458
 80069e4:	5802546c 	.word	0x5802546c
 80069e8:	58025480 	.word	0x58025480
 80069ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d160      	bne.n	8006abc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a8c      	ldr	r2, [pc, #560]	; (8006c30 <HAL_DMA_IRQHandler+0xca8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04a      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a8a      	ldr	r2, [pc, #552]	; (8006c34 <HAL_DMA_IRQHandler+0xcac>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d045      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a89      	ldr	r2, [pc, #548]	; (8006c38 <HAL_DMA_IRQHandler+0xcb0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a87      	ldr	r2, [pc, #540]	; (8006c3c <HAL_DMA_IRQHandler+0xcb4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a86      	ldr	r2, [pc, #536]	; (8006c40 <HAL_DMA_IRQHandler+0xcb8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d036      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a84      	ldr	r2, [pc, #528]	; (8006c44 <HAL_DMA_IRQHandler+0xcbc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d031      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a83      	ldr	r2, [pc, #524]	; (8006c48 <HAL_DMA_IRQHandler+0xcc0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02c      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a81      	ldr	r2, [pc, #516]	; (8006c4c <HAL_DMA_IRQHandler+0xcc4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d027      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a80      	ldr	r2, [pc, #512]	; (8006c50 <HAL_DMA_IRQHandler+0xcc8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a7e      	ldr	r2, [pc, #504]	; (8006c54 <HAL_DMA_IRQHandler+0xccc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7d      	ldr	r2, [pc, #500]	; (8006c58 <HAL_DMA_IRQHandler+0xcd0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7b      	ldr	r2, [pc, #492]	; (8006c5c <HAL_DMA_IRQHandler+0xcd4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7a      	ldr	r2, [pc, #488]	; (8006c60 <HAL_DMA_IRQHandler+0xcd8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a78      	ldr	r2, [pc, #480]	; (8006c64 <HAL_DMA_IRQHandler+0xcdc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a77      	ldr	r2, [pc, #476]	; (8006c68 <HAL_DMA_IRQHandler+0xce0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a75      	ldr	r2, [pc, #468]	; (8006c6c <HAL_DMA_IRQHandler+0xce4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d108      	bne.n	8006aac <HAL_DMA_IRQHandler+0xb24>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0208 	bic.w	r2, r2, #8
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e007      	b.n	8006abc <HAL_DMA_IRQHandler+0xb34>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8165 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ace:	e15f      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2202      	movs	r2, #2
 8006ada:	409a      	lsls	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80c5 	beq.w	8006c70 <HAL_DMA_IRQHandler+0xce8>
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80bf 	beq.w	8006c70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2202      	movs	r2, #2
 8006afc:	409a      	lsls	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d018      	beq.n	8006b3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 813a 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b28:	e134      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8130 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3c:	e12a      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d168      	bne.n	8006c1a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a38      	ldr	r2, [pc, #224]	; (8006c30 <HAL_DMA_IRQHandler+0xca8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d04a      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a37      	ldr	r2, [pc, #220]	; (8006c34 <HAL_DMA_IRQHandler+0xcac>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d045      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a35      	ldr	r2, [pc, #212]	; (8006c38 <HAL_DMA_IRQHandler+0xcb0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d040      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <HAL_DMA_IRQHandler+0xcb4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d03b      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <HAL_DMA_IRQHandler+0xcb8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d036      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <HAL_DMA_IRQHandler+0xcbc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d031      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2f      	ldr	r2, [pc, #188]	; (8006c48 <HAL_DMA_IRQHandler+0xcc0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d02c      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2e      	ldr	r2, [pc, #184]	; (8006c4c <HAL_DMA_IRQHandler+0xcc4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d027      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2c      	ldr	r2, [pc, #176]	; (8006c50 <HAL_DMA_IRQHandler+0xcc8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d022      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <HAL_DMA_IRQHandler+0xccc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d01d      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a29      	ldr	r2, [pc, #164]	; (8006c58 <HAL_DMA_IRQHandler+0xcd0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d018      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a28      	ldr	r2, [pc, #160]	; (8006c5c <HAL_DMA_IRQHandler+0xcd4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <HAL_DMA_IRQHandler+0xcd8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a25      	ldr	r2, [pc, #148]	; (8006c64 <HAL_DMA_IRQHandler+0xcdc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <HAL_DMA_IRQHandler+0xce0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_DMA_IRQHandler+0xc60>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <HAL_DMA_IRQHandler+0xce4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d108      	bne.n	8006bfa <HAL_DMA_IRQHandler+0xc72>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0214 	bic.w	r2, r2, #20
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e007      	b.n	8006c0a <HAL_DMA_IRQHandler+0xc82>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 020a 	bic.w	r2, r2, #10
 8006c08:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80b8 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c2c:	e0b2      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
 8006c2e:	bf00      	nop
 8006c30:	40020010 	.word	0x40020010
 8006c34:	40020028 	.word	0x40020028
 8006c38:	40020040 	.word	0x40020040
 8006c3c:	40020058 	.word	0x40020058
 8006c40:	40020070 	.word	0x40020070
 8006c44:	40020088 	.word	0x40020088
 8006c48:	400200a0 	.word	0x400200a0
 8006c4c:	400200b8 	.word	0x400200b8
 8006c50:	40020410 	.word	0x40020410
 8006c54:	40020428 	.word	0x40020428
 8006c58:	40020440 	.word	0x40020440
 8006c5c:	40020458 	.word	0x40020458
 8006c60:	40020470 	.word	0x40020470
 8006c64:	40020488 	.word	0x40020488
 8006c68:	400204a0 	.word	0x400204a0
 8006c6c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	2208      	movs	r2, #8
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8088 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8082 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a41      	ldr	r2, [pc, #260]	; (8006d9c <HAL_DMA_IRQHandler+0xe14>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3f      	ldr	r2, [pc, #252]	; (8006da0 <HAL_DMA_IRQHandler+0xe18>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3e      	ldr	r2, [pc, #248]	; (8006da4 <HAL_DMA_IRQHandler+0xe1c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3c      	ldr	r2, [pc, #240]	; (8006da8 <HAL_DMA_IRQHandler+0xe20>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <HAL_DMA_IRQHandler+0xe24>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a39      	ldr	r2, [pc, #228]	; (8006db0 <HAL_DMA_IRQHandler+0xe28>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a38      	ldr	r2, [pc, #224]	; (8006db4 <HAL_DMA_IRQHandler+0xe2c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a36      	ldr	r2, [pc, #216]	; (8006db8 <HAL_DMA_IRQHandler+0xe30>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a35      	ldr	r2, [pc, #212]	; (8006dbc <HAL_DMA_IRQHandler+0xe34>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a33      	ldr	r2, [pc, #204]	; (8006dc0 <HAL_DMA_IRQHandler+0xe38>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a32      	ldr	r2, [pc, #200]	; (8006dc4 <HAL_DMA_IRQHandler+0xe3c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <HAL_DMA_IRQHandler+0xe40>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <HAL_DMA_IRQHandler+0xe44>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_DMA_IRQHandler+0xe48>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2c      	ldr	r2, [pc, #176]	; (8006dd4 <HAL_DMA_IRQHandler+0xe4c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <HAL_DMA_IRQHandler+0xe50>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <HAL_DMA_IRQHandler+0xdbc>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 021c 	bic.w	r2, r2, #28
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e007      	b.n	8006d54 <HAL_DMA_IRQHandler+0xdcc>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 020e 	bic.w	r2, r2, #14
 8006d52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	e004      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d96:	3728      	adds	r7, #40	; 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40020010 	.word	0x40020010
 8006da0:	40020028 	.word	0x40020028
 8006da4:	40020040 	.word	0x40020040
 8006da8:	40020058 	.word	0x40020058
 8006dac:	40020070 	.word	0x40020070
 8006db0:	40020088 	.word	0x40020088
 8006db4:	400200a0 	.word	0x400200a0
 8006db8:	400200b8 	.word	0x400200b8
 8006dbc:	40020410 	.word	0x40020410
 8006dc0:	40020428 	.word	0x40020428
 8006dc4:	40020440 	.word	0x40020440
 8006dc8:	40020458 	.word	0x40020458
 8006dcc:	40020470 	.word	0x40020470
 8006dd0:	40020488 	.word	0x40020488
 8006dd4:	400204a0 	.word	0x400204a0
 8006dd8:	400204b8 	.word	0x400204b8

08006ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a84      	ldr	r2, [pc, #528]	; (800700c <DMA_SetConfig+0x230>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d072      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a82      	ldr	r2, [pc, #520]	; (8007010 <DMA_SetConfig+0x234>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d06d      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a81      	ldr	r2, [pc, #516]	; (8007014 <DMA_SetConfig+0x238>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d068      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7f      	ldr	r2, [pc, #508]	; (8007018 <DMA_SetConfig+0x23c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d063      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7e      	ldr	r2, [pc, #504]	; (800701c <DMA_SetConfig+0x240>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d05e      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7c      	ldr	r2, [pc, #496]	; (8007020 <DMA_SetConfig+0x244>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d059      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a7b      	ldr	r2, [pc, #492]	; (8007024 <DMA_SetConfig+0x248>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d054      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a79      	ldr	r2, [pc, #484]	; (8007028 <DMA_SetConfig+0x24c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04f      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a78      	ldr	r2, [pc, #480]	; (800702c <DMA_SetConfig+0x250>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a76      	ldr	r2, [pc, #472]	; (8007030 <DMA_SetConfig+0x254>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a75      	ldr	r2, [pc, #468]	; (8007034 <DMA_SetConfig+0x258>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a73      	ldr	r2, [pc, #460]	; (8007038 <DMA_SetConfig+0x25c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a72      	ldr	r2, [pc, #456]	; (800703c <DMA_SetConfig+0x260>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a70      	ldr	r2, [pc, #448]	; (8007040 <DMA_SetConfig+0x264>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6f      	ldr	r2, [pc, #444]	; (8007044 <DMA_SetConfig+0x268>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6d      	ldr	r2, [pc, #436]	; (8007048 <DMA_SetConfig+0x26c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6c      	ldr	r2, [pc, #432]	; (800704c <DMA_SetConfig+0x270>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6a      	ldr	r2, [pc, #424]	; (8007050 <DMA_SetConfig+0x274>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a69      	ldr	r2, [pc, #420]	; (8007054 <DMA_SetConfig+0x278>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a67      	ldr	r2, [pc, #412]	; (8007058 <DMA_SetConfig+0x27c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a66      	ldr	r2, [pc, #408]	; (800705c <DMA_SetConfig+0x280>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a64      	ldr	r2, [pc, #400]	; (8007060 <DMA_SetConfig+0x284>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a63      	ldr	r2, [pc, #396]	; (8007064 <DMA_SetConfig+0x288>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a61      	ldr	r2, [pc, #388]	; (8007068 <DMA_SetConfig+0x28c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <DMA_SetConfig+0x10e>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <DMA_SetConfig+0x110>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00d      	beq.n	8006f0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ef8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3e      	ldr	r2, [pc, #248]	; (800700c <DMA_SetConfig+0x230>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d04a      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a3d      	ldr	r2, [pc, #244]	; (8007010 <DMA_SetConfig+0x234>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d045      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3b      	ldr	r2, [pc, #236]	; (8007014 <DMA_SetConfig+0x238>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d040      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a3a      	ldr	r2, [pc, #232]	; (8007018 <DMA_SetConfig+0x23c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d03b      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a38      	ldr	r2, [pc, #224]	; (800701c <DMA_SetConfig+0x240>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d036      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a37      	ldr	r2, [pc, #220]	; (8007020 <DMA_SetConfig+0x244>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d031      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a35      	ldr	r2, [pc, #212]	; (8007024 <DMA_SetConfig+0x248>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02c      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a34      	ldr	r2, [pc, #208]	; (8007028 <DMA_SetConfig+0x24c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d027      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a32      	ldr	r2, [pc, #200]	; (800702c <DMA_SetConfig+0x250>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a31      	ldr	r2, [pc, #196]	; (8007030 <DMA_SetConfig+0x254>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01d      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <DMA_SetConfig+0x258>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <DMA_SetConfig+0x25c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2c      	ldr	r2, [pc, #176]	; (800703c <DMA_SetConfig+0x260>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2b      	ldr	r2, [pc, #172]	; (8007040 <DMA_SetConfig+0x264>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a29      	ldr	r2, [pc, #164]	; (8007044 <DMA_SetConfig+0x268>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a28      	ldr	r2, [pc, #160]	; (8007048 <DMA_SetConfig+0x26c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <DMA_SetConfig+0x1d4>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <DMA_SetConfig+0x1d6>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d05a      	beq.n	800706c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	223f      	movs	r2, #63	; 0x3f
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fd4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d108      	bne.n	8006ff8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ff6:	e087      	b.n	8007108 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]
}
 8007008:	e07e      	b.n	8007108 <DMA_SetConfig+0x32c>
 800700a:	bf00      	nop
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	58025408 	.word	0x58025408
 8007050:	5802541c 	.word	0x5802541c
 8007054:	58025430 	.word	0x58025430
 8007058:	58025444 	.word	0x58025444
 800705c:	58025458 	.word	0x58025458
 8007060:	5802546c 	.word	0x5802546c
 8007064:	58025480 	.word	0x58025480
 8007068:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a28      	ldr	r2, [pc, #160]	; (8007114 <DMA_SetConfig+0x338>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d022      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a27      	ldr	r2, [pc, #156]	; (8007118 <DMA_SetConfig+0x33c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d01d      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a25      	ldr	r2, [pc, #148]	; (800711c <DMA_SetConfig+0x340>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a24      	ldr	r2, [pc, #144]	; (8007120 <DMA_SetConfig+0x344>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a22      	ldr	r2, [pc, #136]	; (8007124 <DMA_SetConfig+0x348>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a21      	ldr	r2, [pc, #132]	; (8007128 <DMA_SetConfig+0x34c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1f      	ldr	r2, [pc, #124]	; (800712c <DMA_SetConfig+0x350>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <DMA_SetConfig+0x2e0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <DMA_SetConfig+0x354>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d101      	bne.n	80070c0 <DMA_SetConfig+0x2e4>
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <DMA_SetConfig+0x2e6>
 80070c0:	2300      	movs	r3, #0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d020      	beq.n	8007108 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2201      	movs	r2, #1
 80070d0:	409a      	lsls	r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d108      	bne.n	80070f8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	60da      	str	r2, [r3, #12]
}
 80070f6:	e007      	b.n	8007108 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	58025408 	.word	0x58025408
 8007118:	5802541c 	.word	0x5802541c
 800711c:	58025430 	.word	0x58025430
 8007120:	58025444 	.word	0x58025444
 8007124:	58025458 	.word	0x58025458
 8007128:	5802546c 	.word	0x5802546c
 800712c:	58025480 	.word	0x58025480
 8007130:	58025494 	.word	0x58025494

08007134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a42      	ldr	r2, [pc, #264]	; (800724c <DMA_CalcBaseAndBitshift+0x118>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04a      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a41      	ldr	r2, [pc, #260]	; (8007250 <DMA_CalcBaseAndBitshift+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d045      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <DMA_CalcBaseAndBitshift+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d040      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3e      	ldr	r2, [pc, #248]	; (8007258 <DMA_CalcBaseAndBitshift+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d03b      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3c      	ldr	r2, [pc, #240]	; (800725c <DMA_CalcBaseAndBitshift+0x128>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d036      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <DMA_CalcBaseAndBitshift+0x12c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d031      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a39      	ldr	r2, [pc, #228]	; (8007264 <DMA_CalcBaseAndBitshift+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d02c      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <DMA_CalcBaseAndBitshift+0x134>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d027      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a36      	ldr	r2, [pc, #216]	; (800726c <DMA_CalcBaseAndBitshift+0x138>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d022      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a35      	ldr	r2, [pc, #212]	; (8007270 <DMA_CalcBaseAndBitshift+0x13c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01d      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a33      	ldr	r2, [pc, #204]	; (8007274 <DMA_CalcBaseAndBitshift+0x140>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d018      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a32      	ldr	r2, [pc, #200]	; (8007278 <DMA_CalcBaseAndBitshift+0x144>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a30      	ldr	r2, [pc, #192]	; (800727c <DMA_CalcBaseAndBitshift+0x148>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2f      	ldr	r2, [pc, #188]	; (8007280 <DMA_CalcBaseAndBitshift+0x14c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <DMA_CalcBaseAndBitshift+0x150>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <DMA_CalcBaseAndBitshift+0x154>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d101      	bne.n	80071e0 <DMA_CalcBaseAndBitshift+0xac>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <DMA_CalcBaseAndBitshift+0xae>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d024      	beq.n	8007230 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	3b10      	subs	r3, #16
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <DMA_CalcBaseAndBitshift+0x158>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <DMA_CalcBaseAndBitshift+0x15c>)
 8007200:	5cd3      	ldrb	r3, [r2, r3]
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d908      	bls.n	8007220 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <DMA_CalcBaseAndBitshift+0x160>)
 8007216:	4013      	ands	r3, r2
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	659a      	str	r2, [r3, #88]	; 0x58
 800721e:	e00d      	b.n	800723c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <DMA_CalcBaseAndBitshift+0x160>)
 8007228:	4013      	ands	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6593      	str	r3, [r2, #88]	; 0x58
 800722e:	e005      	b.n	800723c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8
 800728c:	aaaaaaab 	.word	0xaaaaaaab
 8007290:	080121b4 	.word	0x080121b4
 8007294:	fffffc00 	.word	0xfffffc00

08007298 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d120      	bne.n	80072ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d858      	bhi.n	8007366 <DMA_CheckFifoParam+0xce>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <DMA_CheckFifoParam+0x24>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	080072df 	.word	0x080072df
 80072c4:	080072cd 	.word	0x080072cd
 80072c8:	08007367 	.word	0x08007367
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d048      	beq.n	800736a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072dc:	e045      	b.n	800736a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072e6:	d142      	bne.n	800736e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072ec:	e03f      	b.n	800736e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f6:	d123      	bne.n	8007340 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d838      	bhi.n	8007372 <DMA_CheckFifoParam+0xda>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <DMA_CheckFifoParam+0x70>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007319 	.word	0x08007319
 800730c:	0800731f 	.word	0x0800731f
 8007310:	08007319 	.word	0x08007319
 8007314:	08007331 	.word	0x08007331
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
        break;
 800731c:	e030      	b.n	8007380 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d025      	beq.n	8007376 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800732e:	e022      	b.n	8007376 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007338:	d11f      	bne.n	800737a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800733e:	e01c      	b.n	800737a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	2b02      	cmp	r3, #2
 8007346:	d902      	bls.n	800734e <DMA_CheckFifoParam+0xb6>
 8007348:	2b03      	cmp	r3, #3
 800734a:	d003      	beq.n	8007354 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800734c:	e018      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
        break;
 8007352:	e015      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e00b      	b.n	800737e <DMA_CheckFifoParam+0xe6>
        break;
 8007366:	bf00      	nop
 8007368:	e00a      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800736a:	bf00      	nop
 800736c:	e008      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800736e:	bf00      	nop
 8007370:	e006      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 8007372:	bf00      	nop
 8007374:	e004      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 8007376:	bf00      	nop
 8007378:	e002      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
    break;
 800737e:	bf00      	nop
    }
  }

  return status;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a38      	ldr	r2, [pc, #224]	; (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a36      	ldr	r2, [pc, #216]	; (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a35      	ldr	r2, [pc, #212]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a33      	ldr	r2, [pc, #204]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a32      	ldr	r2, [pc, #200]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a30      	ldr	r2, [pc, #192]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2f      	ldr	r2, [pc, #188]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01a      	beq.n	800742e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3b08      	subs	r3, #8
 8007400:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a24      	ldr	r2, [pc, #144]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800741c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2201      	movs	r2, #1
 8007426:	409a      	lsls	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800742c:	e024      	b.n	8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	3b10      	subs	r3, #16
 8007436:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d806      	bhi.n	8007456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d902      	bls.n	8007456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3308      	adds	r3, #8
 8007454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4b18      	ldr	r3, [pc, #96]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a16      	ldr	r2, [pc, #88]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2201      	movs	r2, #1
 8007472:	409a      	lsls	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	58025408 	.word	0x58025408
 8007488:	5802541c 	.word	0x5802541c
 800748c:	58025430 	.word	0x58025430
 8007490:	58025444 	.word	0x58025444
 8007494:	58025458 	.word	0x58025458
 8007498:	5802546c 	.word	0x5802546c
 800749c:	58025480 	.word	0x58025480
 80074a0:	58025494 	.word	0x58025494
 80074a4:	cccccccd 	.word	0xcccccccd
 80074a8:	16009600 	.word	0x16009600
 80074ac:	58025880 	.word	0x58025880
 80074b0:	aaaaaaab 	.word	0xaaaaaaab
 80074b4:	400204b8 	.word	0x400204b8
 80074b8:	4002040f 	.word	0x4002040f
 80074bc:	10008200 	.word	0x10008200
 80074c0:	40020880 	.word	0x40020880

080074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d04a      	beq.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d847      	bhi.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a25      	ldr	r2, [pc, #148]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d022      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a24      	ldr	r2, [pc, #144]	; (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d01d      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a22      	ldr	r2, [pc, #136]	; (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d018      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a21      	ldr	r2, [pc, #132]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800754c:	671a      	str	r2, [r3, #112]	; 0x70
 800754e:	e009      	b.n	8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007562:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	2201      	movs	r2, #1
 800756a:	409a      	lsls	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	58025408 	.word	0x58025408
 8007580:	5802541c 	.word	0x5802541c
 8007584:	58025430 	.word	0x58025430
 8007588:	58025444 	.word	0x58025444
 800758c:	58025458 	.word	0x58025458
 8007590:	5802546c 	.word	0x5802546c
 8007594:	58025480 	.word	0x58025480
 8007598:	58025494 	.word	0x58025494
 800759c:	1600963f 	.word	0x1600963f
 80075a0:	58025940 	.word	0x58025940
 80075a4:	1000823f 	.word	0x1000823f
 80075a8:	40020940 	.word	0x40020940

080075ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	; 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075ba:	4b89      	ldr	r3, [pc, #548]	; (80077e0 <HAL_GPIO_Init+0x234>)
 80075bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075be:	e194      	b.n	80078ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	fa01 f303 	lsl.w	r3, r1, r3
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8186 	beq.w	80078e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d00b      	beq.n	80075f8 <HAL_GPIO_Init+0x4c>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d007      	beq.n	80075f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80075ec:	2b11      	cmp	r3, #17
 80075ee:	d003      	beq.n	80075f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b12      	cmp	r3, #18
 80075f6:	d130      	bne.n	800765a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800762e:	2201      	movs	r2, #1
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43db      	mvns	r3, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4013      	ands	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	f003 0201 	and.w	r2, r3, #1
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4313      	orrs	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	2203      	movs	r2, #3
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	43db      	mvns	r3, r3
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	4013      	ands	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	fa02 f303 	lsl.w	r3, r2, r3
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	4313      	orrs	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d003      	beq.n	800769a <HAL_GPIO_Init+0xee>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b12      	cmp	r3, #18
 8007698:	d123      	bne.n	80076e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	08da      	lsrs	r2, r3, #3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3208      	adds	r2, #8
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	220f      	movs	r2, #15
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43db      	mvns	r3, r3
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	4013      	ands	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	08da      	lsrs	r2, r3, #3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3208      	adds	r2, #8
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	2203      	movs	r2, #3
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4013      	ands	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f003 0203 	and.w	r2, r3, #3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4313      	orrs	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 80e0 	beq.w	80078e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007724:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <HAL_GPIO_Init+0x238>)
 8007726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800772a:	4a2e      	ldr	r2, [pc, #184]	; (80077e4 <HAL_GPIO_Init+0x238>)
 800772c:	f043 0302 	orr.w	r3, r3, #2
 8007730:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007734:	4b2b      	ldr	r3, [pc, #172]	; (80077e4 <HAL_GPIO_Init+0x238>)
 8007736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007742:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <HAL_GPIO_Init+0x23c>)
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	089b      	lsrs	r3, r3, #2
 8007748:	3302      	adds	r3, #2
 800774a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	220f      	movs	r2, #15
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	43db      	mvns	r3, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	4013      	ands	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a20      	ldr	r2, [pc, #128]	; (80077ec <HAL_GPIO_Init+0x240>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d052      	beq.n	8007814 <HAL_GPIO_Init+0x268>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1f      	ldr	r2, [pc, #124]	; (80077f0 <HAL_GPIO_Init+0x244>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d031      	beq.n	80077da <HAL_GPIO_Init+0x22e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1e      	ldr	r2, [pc, #120]	; (80077f4 <HAL_GPIO_Init+0x248>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d02b      	beq.n	80077d6 <HAL_GPIO_Init+0x22a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <HAL_GPIO_Init+0x24c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d025      	beq.n	80077d2 <HAL_GPIO_Init+0x226>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_GPIO_Init+0x250>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01f      	beq.n	80077ce <HAL_GPIO_Init+0x222>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <HAL_GPIO_Init+0x254>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d019      	beq.n	80077ca <HAL_GPIO_Init+0x21e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <HAL_GPIO_Init+0x258>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_GPIO_Init+0x21a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a19      	ldr	r2, [pc, #100]	; (8007808 <HAL_GPIO_Init+0x25c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00d      	beq.n	80077c2 <HAL_GPIO_Init+0x216>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a18      	ldr	r2, [pc, #96]	; (800780c <HAL_GPIO_Init+0x260>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <HAL_GPIO_Init+0x212>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a17      	ldr	r2, [pc, #92]	; (8007810 <HAL_GPIO_Init+0x264>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d101      	bne.n	80077ba <HAL_GPIO_Init+0x20e>
 80077b6:	2309      	movs	r3, #9
 80077b8:	e02d      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077ba:	230a      	movs	r3, #10
 80077bc:	e02b      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077be:	2308      	movs	r3, #8
 80077c0:	e029      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077c2:	2307      	movs	r3, #7
 80077c4:	e027      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077c6:	2306      	movs	r3, #6
 80077c8:	e025      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077ca:	2305      	movs	r3, #5
 80077cc:	e023      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077ce:	2304      	movs	r3, #4
 80077d0:	e021      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077d2:	2303      	movs	r3, #3
 80077d4:	e01f      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e01d      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077da:	2301      	movs	r3, #1
 80077dc:	e01b      	b.n	8007816 <HAL_GPIO_Init+0x26a>
 80077de:	bf00      	nop
 80077e0:	58000080 	.word	0x58000080
 80077e4:	58024400 	.word	0x58024400
 80077e8:	58000400 	.word	0x58000400
 80077ec:	58020000 	.word	0x58020000
 80077f0:	58020400 	.word	0x58020400
 80077f4:	58020800 	.word	0x58020800
 80077f8:	58020c00 	.word	0x58020c00
 80077fc:	58021000 	.word	0x58021000
 8007800:	58021400 	.word	0x58021400
 8007804:	58021800 	.word	0x58021800
 8007808:	58021c00 	.word	0x58021c00
 800780c:	58022000 	.word	0x58022000
 8007810:	58022400 	.word	0x58022400
 8007814:	2300      	movs	r3, #0
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	f002 0203 	and.w	r2, r2, #3
 800781c:	0092      	lsls	r2, r2, #2
 800781e:	4093      	lsls	r3, r2
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4313      	orrs	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007826:	4938      	ldr	r1, [pc, #224]	; (8007908 <HAL_GPIO_Init+0x35c>)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	3302      	adds	r3, #2
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	43db      	mvns	r3, r3
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	4013      	ands	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	43db      	mvns	r3, r3
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	4013      	ands	r3, r2
 800786c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80078ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80078b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	43db      	mvns	r3, r3
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4013      	ands	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80078dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f ae63 	bne.w	80075c0 <HAL_GPIO_Init+0x14>
  }
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	3724      	adds	r7, #36	; 0x24
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	58000400 	.word	0x58000400

0800790c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	887b      	ldrh	r3, [r7, #2]
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e001      	b.n	800792e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	807b      	strh	r3, [r7, #2]
 8007948:	4613      	mov	r3, r2
 800794a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800794c:	787b      	ldrb	r3, [r7, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007952:	887a      	ldrh	r2, [r7, #2]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007958:	e003      	b.n	8007962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800795a:	887b      	ldrh	r3, [r7, #2]
 800795c:	041a      	lsls	r2, r3, #16
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	619a      	str	r2, [r3, #24]
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	4603      	mov	r3, r0
 8007976:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 f804 	bl	80079a2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	4603      	mov	r3, r0
 80079aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80079c0:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <HAL_PWREx_ConfigSupply+0x70>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d00a      	beq.n	80079e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079cc:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <HAL_PWREx_ConfigSupply+0x70>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d001      	beq.n	80079de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e01f      	b.n	8007a1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	e01d      	b.n	8007a1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <HAL_PWREx_ConfigSupply+0x70>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f023 0207 	bic.w	r2, r3, #7
 80079ea:	490f      	ldr	r1, [pc, #60]	; (8007a28 <HAL_PWREx_ConfigSupply+0x70>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079f2:	f7fb fc21 	bl	8003238 <HAL_GetTick>
 80079f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079f8:	e009      	b.n	8007a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079fa:	f7fb fc1d 	bl	8003238 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a08:	d901      	bls.n	8007a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e007      	b.n	8007a1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_PWREx_ConfigSupply+0x70>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1a:	d1ee      	bne.n	80079fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024800 	.word	0x58024800

08007a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08c      	sub	sp, #48	; 0x30
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e3ff      	b.n	800823e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8087 	beq.w	8007b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a4c:	4b99      	ldr	r3, [pc, #612]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a56:	4b97      	ldr	r3, [pc, #604]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b10      	cmp	r3, #16
 8007a60:	d007      	beq.n	8007a72 <HAL_RCC_OscConfig+0x46>
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b18      	cmp	r3, #24
 8007a66:	d110      	bne.n	8007a8a <HAL_RCC_OscConfig+0x5e>
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d10b      	bne.n	8007a8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a72:	4b90      	ldr	r3, [pc, #576]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d06c      	beq.n	8007b58 <HAL_RCC_OscConfig+0x12c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d168      	bne.n	8007b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e3d9      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a92:	d106      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x76>
 8007a94:	4b87      	ldr	r3, [pc, #540]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a86      	ldr	r2, [pc, #536]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e02e      	b.n	8007b00 <HAL_RCC_OscConfig+0xd4>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x98>
 8007aaa:	4b82      	ldr	r3, [pc, #520]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a81      	ldr	r2, [pc, #516]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	4b7f      	ldr	r3, [pc, #508]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a7e      	ldr	r2, [pc, #504]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e01d      	b.n	8007b00 <HAL_RCC_OscConfig+0xd4>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007acc:	d10c      	bne.n	8007ae8 <HAL_RCC_OscConfig+0xbc>
 8007ace:	4b79      	ldr	r3, [pc, #484]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a78      	ldr	r2, [pc, #480]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	4b76      	ldr	r3, [pc, #472]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a75      	ldr	r2, [pc, #468]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e00b      	b.n	8007b00 <HAL_RCC_OscConfig+0xd4>
 8007ae8:	4b72      	ldr	r3, [pc, #456]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a71      	ldr	r2, [pc, #452]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	4b6f      	ldr	r3, [pc, #444]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6e      	ldr	r2, [pc, #440]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d013      	beq.n	8007b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7fb fb96 	bl	8003238 <HAL_GetTick>
 8007b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b10:	f7fb fb92 	bl	8003238 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b64      	cmp	r3, #100	; 0x64
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e38d      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b22:	4b64      	ldr	r3, [pc, #400]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0f0      	beq.n	8007b10 <HAL_RCC_OscConfig+0xe4>
 8007b2e:	e014      	b.n	8007b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fb fb82 	bl	8003238 <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b38:	f7fb fb7e 	bl	8003238 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b64      	cmp	r3, #100	; 0x64
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e379      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b4a:	4b5a      	ldr	r3, [pc, #360]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1f0      	bne.n	8007b38 <HAL_RCC_OscConfig+0x10c>
 8007b56:	e000      	b.n	8007b5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80ae 	beq.w	8007cc4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b68:	4b52      	ldr	r3, [pc, #328]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b72:	4b50      	ldr	r3, [pc, #320]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <HAL_RCC_OscConfig+0x162>
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	2b18      	cmp	r3, #24
 8007b82:	d13a      	bne.n	8007bfa <HAL_RCC_OscConfig+0x1ce>
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d135      	bne.n	8007bfa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b8e:	4b49      	ldr	r3, [pc, #292]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x17a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e34b      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ba6:	f7fb fb53 	bl	8003250 <HAL_GetREVID>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d817      	bhi.n	8007be4 <HAL_RCC_OscConfig+0x1b8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d108      	bne.n	8007bce <HAL_RCC_OscConfig+0x1a2>
 8007bbc:	4b3d      	ldr	r3, [pc, #244]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bc4:	4a3b      	ldr	r2, [pc, #236]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bcc:	e07a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bce:	4b39      	ldr	r3, [pc, #228]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	031b      	lsls	r3, r3, #12
 8007bdc:	4935      	ldr	r1, [pc, #212]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be2:	e06f      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be4:	4b33      	ldr	r3, [pc, #204]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	061b      	lsls	r3, r3, #24
 8007bf2:	4930      	ldr	r1, [pc, #192]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bf8:	e064      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d045      	beq.n	8007c8e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c02:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f023 0219 	bic.w	r2, r3, #25
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	4929      	ldr	r1, [pc, #164]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c14:	f7fb fb10 	bl	8003238 <HAL_GetTick>
 8007c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c1c:	f7fb fb0c 	bl	8003238 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e307      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3a:	f7fb fb09 	bl	8003250 <HAL_GetREVID>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d817      	bhi.n	8007c78 <HAL_RCC_OscConfig+0x24c>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d108      	bne.n	8007c62 <HAL_RCC_OscConfig+0x236>
 8007c50:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c58:	4a16      	ldr	r2, [pc, #88]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5e:	6053      	str	r3, [r2, #4]
 8007c60:	e030      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	031b      	lsls	r3, r3, #12
 8007c70:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	604b      	str	r3, [r1, #4]
 8007c76:	e025      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
 8007c78:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	490b      	ldr	r1, [pc, #44]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	604b      	str	r3, [r1, #4]
 8007c8c:	e01a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c8e:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a08      	ldr	r2, [pc, #32]	; (8007cb4 <HAL_RCC_OscConfig+0x288>)
 8007c94:	f023 0301 	bic.w	r3, r3, #1
 8007c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9a:	f7fb facd 	bl	8003238 <HAL_GetTick>
 8007c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ca0:	e00a      	b.n	8007cb8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ca2:	f7fb fac9 	bl	8003238 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d903      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e2c4      	b.n	800823e <HAL_RCC_OscConfig+0x812>
 8007cb4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cb8:	4ba4      	ldr	r3, [pc, #656]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ee      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 80a9 	beq.w	8007e24 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cd2:	4b9e      	ldr	r3, [pc, #632]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cdc:	4b9b      	ldr	r3, [pc, #620]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d007      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x2cc>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b18      	cmp	r3, #24
 8007cec:	d13a      	bne.n	8007d64 <HAL_RCC_OscConfig+0x338>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d135      	bne.n	8007d64 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cf8:	4b94      	ldr	r3, [pc, #592]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_OscConfig+0x2e4>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d001      	beq.n	8007d10 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e296      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d10:	f7fb fa9e 	bl	8003250 <HAL_GetREVID>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d817      	bhi.n	8007d4e <HAL_RCC_OscConfig+0x322>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d108      	bne.n	8007d38 <HAL_RCC_OscConfig+0x30c>
 8007d26:	4b89      	ldr	r3, [pc, #548]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d2e:	4a87      	ldr	r2, [pc, #540]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d36:	e075      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d38:	4b84      	ldr	r3, [pc, #528]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	069b      	lsls	r3, r3, #26
 8007d46:	4981      	ldr	r1, [pc, #516]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d4c:	e06a      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d4e:	4b7f      	ldr	r3, [pc, #508]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	061b      	lsls	r3, r3, #24
 8007d5c:	497b      	ldr	r1, [pc, #492]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d62:	e05f      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d042      	beq.n	8007df2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d6c:	4b77      	ldr	r3, [pc, #476]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a76      	ldr	r2, [pc, #472]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fb fa5e 	bl	8003238 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d80:	f7fb fa5a 	bl	8003238 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e255      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d92:	4b6e      	ldr	r3, [pc, #440]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d9e:	f7fb fa57 	bl	8003250 <HAL_GetREVID>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d817      	bhi.n	8007ddc <HAL_RCC_OscConfig+0x3b0>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d108      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x39a>
 8007db4:	4b65      	ldr	r3, [pc, #404]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dbc:	4a63      	ldr	r2, [pc, #396]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dc2:	6053      	str	r3, [r2, #4]
 8007dc4:	e02e      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
 8007dc6:	4b61      	ldr	r3, [pc, #388]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	069b      	lsls	r3, r3, #26
 8007dd4:	495d      	ldr	r1, [pc, #372]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	604b      	str	r3, [r1, #4]
 8007dda:	e023      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
 8007ddc:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	061b      	lsls	r3, r3, #24
 8007dea:	4958      	ldr	r1, [pc, #352]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60cb      	str	r3, [r1, #12]
 8007df0:	e018      	b.n	8007e24 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007df2:	4b56      	ldr	r3, [pc, #344]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a55      	ldr	r2, [pc, #340]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfe:	f7fb fa1b 	bl	8003238 <HAL_GetTick>
 8007e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e06:	f7fb fa17 	bl	8003238 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e212      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e18:	4b4c      	ldr	r3, [pc, #304]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f0      	bne.n	8007e06 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d036      	beq.n	8007e9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d019      	beq.n	8007e6c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e38:	4b44      	ldr	r3, [pc, #272]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3c:	4a43      	ldr	r2, [pc, #268]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e44:	f7fb f9f8 	bl	8003238 <HAL_GetTick>
 8007e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e4c:	f7fb f9f4 	bl	8003238 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e1ef      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e5e:	4b3b      	ldr	r3, [pc, #236]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0f0      	beq.n	8007e4c <HAL_RCC_OscConfig+0x420>
 8007e6a:	e018      	b.n	8007e9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e6c:	4b37      	ldr	r3, [pc, #220]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e70:	4a36      	ldr	r2, [pc, #216]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e78:	f7fb f9de 	bl	8003238 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e80:	f7fb f9da 	bl	8003238 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e1d5      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e92:	4b2e      	ldr	r3, [pc, #184]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d036      	beq.n	8007f18 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d019      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007eb2:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a25      	ldr	r2, [pc, #148]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ebc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ebe:	f7fb f9bb 	bl	8003238 <HAL_GetTick>
 8007ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ec6:	f7fb f9b7 	bl	8003238 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e1b2      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0f0      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x49a>
 8007ee4:	e018      	b.n	8007f18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ee6:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ef2:	f7fb f9a1 	bl	8003238 <HAL_GetTick>
 8007ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007efa:	f7fb f99d 	bl	8003238 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e198      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <HAL_RCC_OscConfig+0x520>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f0      	bne.n	8007efa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8085 	beq.w	8008030 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <HAL_RCC_OscConfig+0x524>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <HAL_RCC_OscConfig+0x524>)
 8007f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f32:	f7fb f981 	bl	8003238 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f38:	e00c      	b.n	8007f54 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f3a:	f7fb f97d 	bl	8003238 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b64      	cmp	r3, #100	; 0x64
 8007f46:	d905      	bls.n	8007f54 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e178      	b.n	800823e <HAL_RCC_OscConfig+0x812>
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f54:	4b96      	ldr	r3, [pc, #600]	; (80081b0 <HAL_RCC_OscConfig+0x784>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0ec      	beq.n	8007f3a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d106      	bne.n	8007f76 <HAL_RCC_OscConfig+0x54a>
 8007f68:	4b92      	ldr	r3, [pc, #584]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6c:	4a91      	ldr	r2, [pc, #580]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	6713      	str	r3, [r2, #112]	; 0x70
 8007f74:	e02d      	b.n	8007fd2 <HAL_RCC_OscConfig+0x5a6>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCC_OscConfig+0x56c>
 8007f7e:	4b8d      	ldr	r3, [pc, #564]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	4a8c      	ldr	r2, [pc, #560]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8a:	4b8a      	ldr	r3, [pc, #552]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	4a89      	ldr	r2, [pc, #548]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007f90:	f023 0304 	bic.w	r3, r3, #4
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
 8007f96:	e01c      	b.n	8007fd2 <HAL_RCC_OscConfig+0x5a6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b05      	cmp	r3, #5
 8007f9e:	d10c      	bne.n	8007fba <HAL_RCC_OscConfig+0x58e>
 8007fa0:	4b84      	ldr	r3, [pc, #528]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	4a83      	ldr	r2, [pc, #524]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fa6:	f043 0304 	orr.w	r3, r3, #4
 8007faa:	6713      	str	r3, [r2, #112]	; 0x70
 8007fac:	4b81      	ldr	r3, [pc, #516]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb0:	4a80      	ldr	r2, [pc, #512]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb8:	e00b      	b.n	8007fd2 <HAL_RCC_OscConfig+0x5a6>
 8007fba:	4b7e      	ldr	r3, [pc, #504]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	4a7d      	ldr	r2, [pc, #500]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc6:	4b7b      	ldr	r3, [pc, #492]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	4a7a      	ldr	r2, [pc, #488]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007fcc:	f023 0304 	bic.w	r3, r3, #4
 8007fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d015      	beq.n	8008006 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fda:	f7fb f92d 	bl	8003238 <HAL_GetTick>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe2:	f7fb f929 	bl	8003238 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e122      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff8:	4b6e      	ldr	r3, [pc, #440]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0ee      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x5b6>
 8008004:	e014      	b.n	8008030 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008006:	f7fb f917 	bl	8003238 <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800800e:	f7fb f913 	bl	8003238 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f241 3288 	movw	r2, #5000	; 0x1388
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e10c      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008024:	4b63      	ldr	r3, [pc, #396]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1ee      	bne.n	800800e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8101 	beq.w	800823c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800803a:	4b5e      	ldr	r3, [pc, #376]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008042:	2b18      	cmp	r3, #24
 8008044:	f000 80bc 	beq.w	80081c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b02      	cmp	r3, #2
 800804e:	f040 8095 	bne.w	800817c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008052:	4b58      	ldr	r3, [pc, #352]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a57      	ldr	r2, [pc, #348]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800805c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805e:	f7fb f8eb 	bl	8003238 <HAL_GetTick>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008064:	e008      	b.n	8008078 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008066:	f7fb f8e7 	bl	8003238 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d901      	bls.n	8008078 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0e2      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008078:	4b4e      	ldr	r3, [pc, #312]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1f0      	bne.n	8008066 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008084:	4b4b      	ldr	r3, [pc, #300]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008088:	4b4b      	ldr	r3, [pc, #300]	; (80081b8 <HAL_RCC_OscConfig+0x78c>)
 800808a:	4013      	ands	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008094:	0112      	lsls	r2, r2, #4
 8008096:	430a      	orrs	r2, r1
 8008098:	4946      	ldr	r1, [pc, #280]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800809a:	4313      	orrs	r3, r2
 800809c:	628b      	str	r3, [r1, #40]	; 0x28
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	3b01      	subs	r3, #1
 80080a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ac:	3b01      	subs	r3, #1
 80080ae:	025b      	lsls	r3, r3, #9
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	3b01      	subs	r3, #1
 80080ba:	041b      	lsls	r3, r3, #16
 80080bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c6:	3b01      	subs	r3, #1
 80080c8:	061b      	lsls	r3, r3, #24
 80080ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080ce:	4939      	ldr	r1, [pc, #228]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80080d4:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4a36      	ldr	r2, [pc, #216]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080e0:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e4:	4b35      	ldr	r3, [pc, #212]	; (80081bc <HAL_RCC_OscConfig+0x790>)
 80080e6:	4013      	ands	r3, r2
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080ec:	00d2      	lsls	r2, r2, #3
 80080ee:	4931      	ldr	r1, [pc, #196]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80080f4:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	f023 020c 	bic.w	r2, r3, #12
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	492c      	ldr	r1, [pc, #176]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008102:	4313      	orrs	r3, r2
 8008104:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008106:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f023 0202 	bic.w	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	4928      	ldr	r1, [pc, #160]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008114:	4313      	orrs	r3, r2
 8008116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008118:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	4a25      	ldr	r2, [pc, #148]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800811e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008124:	4b23      	ldr	r3, [pc, #140]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	4a22      	ldr	r2, [pc, #136]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800812a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800812e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008130:	4b20      	ldr	r3, [pc, #128]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800813a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800813c:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4a1c      	ldr	r2, [pc, #112]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008148:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800814e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008154:	f7fb f870 	bl	8003238 <HAL_GetTick>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800815c:	f7fb f86c 	bl	8003238 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e067      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0f0      	beq.n	800815c <HAL_RCC_OscConfig+0x730>
 800817a:	e05f      	b.n	800823c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0c      	ldr	r2, [pc, #48]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 8008182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008188:	f7fb f856 	bl	8003238 <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008190:	f7fb f852 	bl	8003238 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e04d      	b.n	800823e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <HAL_RCC_OscConfig+0x788>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f0      	bne.n	8008190 <HAL_RCC_OscConfig+0x764>
 80081ae:	e045      	b.n	800823c <HAL_RCC_OscConfig+0x810>
 80081b0:	58024800 	.word	0x58024800
 80081b4:	58024400 	.word	0x58024400
 80081b8:	fffffc0c 	.word	0xfffffc0c
 80081bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081c0:	4b21      	ldr	r3, [pc, #132]	; (8008248 <HAL_RCC_OscConfig+0x81c>)
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081c6:	4b20      	ldr	r3, [pc, #128]	; (8008248 <HAL_RCC_OscConfig+0x81c>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d031      	beq.n	8008238 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f003 0203 	and.w	r2, r3, #3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081de:	429a      	cmp	r2, r3
 80081e0:	d12a      	bne.n	8008238 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d122      	bne.n	8008238 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081fe:	429a      	cmp	r2, r3
 8008200:	d11a      	bne.n	8008238 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	0a5b      	lsrs	r3, r3, #9
 8008206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008210:	429a      	cmp	r2, r3
 8008212:	d111      	bne.n	8008238 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008222:	429a      	cmp	r2, r3
 8008224:	d108      	bne.n	8008238 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	0e1b      	lsrs	r3, r3, #24
 800822a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3730      	adds	r7, #48	; 0x30
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400

0800824c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e19c      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008260:	4b8a      	ldr	r3, [pc, #552]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d910      	bls.n	8008290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b87      	ldr	r3, [pc, #540]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f023 020f 	bic.w	r2, r3, #15
 8008276:	4985      	ldr	r1, [pc, #532]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827e:	4b83      	ldr	r3, [pc, #524]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d001      	beq.n	8008290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e184      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	4b7b      	ldr	r3, [pc, #492]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d908      	bls.n	80082be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082ac:	4b78      	ldr	r3, [pc, #480]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	4975      	ldr	r1, [pc, #468]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d010      	beq.n	80082ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	4b70      	ldr	r3, [pc, #448]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d908      	bls.n	80082ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082da:	4b6d      	ldr	r3, [pc, #436]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	496a      	ldr	r1, [pc, #424]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	4b64      	ldr	r3, [pc, #400]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008304:	429a      	cmp	r2, r3
 8008306:	d908      	bls.n	800831a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008308:	4b61      	ldr	r3, [pc, #388]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	495e      	ldr	r1, [pc, #376]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008316:	4313      	orrs	r3, r2
 8008318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69da      	ldr	r2, [r3, #28]
 800832a:	4b59      	ldr	r3, [pc, #356]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008332:	429a      	cmp	r2, r3
 8008334:	d908      	bls.n	8008348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008336:	4b56      	ldr	r3, [pc, #344]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	4953      	ldr	r1, [pc, #332]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008344:	4313      	orrs	r3, r2
 8008346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	4b4d      	ldr	r3, [pc, #308]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	429a      	cmp	r2, r3
 8008362:	d908      	bls.n	8008376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008364:	4b4a      	ldr	r3, [pc, #296]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f023 020f 	bic.w	r2, r3, #15
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4947      	ldr	r1, [pc, #284]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008372:	4313      	orrs	r3, r2
 8008374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d055      	beq.n	800842e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008382:	4b43      	ldr	r3, [pc, #268]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	4940      	ldr	r1, [pc, #256]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008390:	4313      	orrs	r3, r2
 8008392:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d107      	bne.n	80083ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800839c:	4b3c      	ldr	r3, [pc, #240]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d121      	bne.n	80083ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0f6      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d107      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083b4:	4b36      	ldr	r3, [pc, #216]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d115      	bne.n	80083ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0ea      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d107      	bne.n	80083dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083cc:	4b30      	ldr	r3, [pc, #192]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0de      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083dc:	4b2c      	ldr	r3, [pc, #176]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0d6      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083ec:	4b28      	ldr	r3, [pc, #160]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f023 0207 	bic.w	r2, r3, #7
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4925      	ldr	r1, [pc, #148]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fe:	f7fa ff1b 	bl	8003238 <HAL_GetTick>
 8008402:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008404:	e00a      	b.n	800841c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008406:	f7fa ff17 	bl	8003238 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f241 3288 	movw	r2, #5000	; 0x1388
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e0be      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800841c:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	429a      	cmp	r2, r3
 800842c:	d1eb      	bne.n	8008406 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	4b14      	ldr	r3, [pc, #80]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	429a      	cmp	r2, r3
 8008448:	d208      	bcs.n	800845c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f023 020f 	bic.w	r2, r3, #15
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	490e      	ldr	r1, [pc, #56]	; (8008490 <HAL_RCC_ClockConfig+0x244>)
 8008458:	4313      	orrs	r3, r2
 800845a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800845c:	4b0b      	ldr	r3, [pc, #44]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d214      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f023 020f 	bic.w	r2, r3, #15
 8008472:	4906      	ldr	r1, [pc, #24]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4313      	orrs	r3, r2
 8008478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <HAL_RCC_ClockConfig+0x240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d005      	beq.n	8008494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e086      	b.n	800859a <HAL_RCC_ClockConfig+0x34e>
 800848c:	52002000 	.word	0x52002000
 8008490:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	4b3f      	ldr	r3, [pc, #252]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d208      	bcs.n	80084c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084b0:	4b3c      	ldr	r3, [pc, #240]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	4939      	ldr	r1, [pc, #228]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d010      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695a      	ldr	r2, [r3, #20]
 80084d2:	4b34      	ldr	r3, [pc, #208]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084da:	429a      	cmp	r2, r3
 80084dc:	d208      	bcs.n	80084f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084de:	4b31      	ldr	r3, [pc, #196]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	492e      	ldr	r1, [pc, #184]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d010      	beq.n	800851e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008508:	429a      	cmp	r2, r3
 800850a:	d208      	bcs.n	800851e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800850c:	4b25      	ldr	r3, [pc, #148]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	4922      	ldr	r1, [pc, #136]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 800851a:	4313      	orrs	r3, r2
 800851c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69da      	ldr	r2, [r3, #28]
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008536:	429a      	cmp	r2, r3
 8008538:	d208      	bcs.n	800854c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800853a:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	4917      	ldr	r1, [pc, #92]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 8008548:	4313      	orrs	r3, r2
 800854a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800854c:	f000 f89e 	bl	800868c <HAL_RCC_GetSysClockFreq>
 8008550:	4602      	mov	r2, r0
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	4912      	ldr	r1, [pc, #72]	; (80085a8 <HAL_RCC_ClockConfig+0x35c>)
 800855e:	5ccb      	ldrb	r3, [r1, r3]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
 8008568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <HAL_RCC_ClockConfig+0x358>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	4a0d      	ldr	r2, [pc, #52]	; (80085a8 <HAL_RCC_ClockConfig+0x35c>)
 8008574:	5cd3      	ldrb	r3, [r2, r3]
 8008576:	f003 031f 	and.w	r3, r3, #31
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	4a0a      	ldr	r2, [pc, #40]	; (80085ac <HAL_RCC_ClockConfig+0x360>)
 8008582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008584:	4a0a      	ldr	r2, [pc, #40]	; (80085b0 <HAL_RCC_ClockConfig+0x364>)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <HAL_RCC_ClockConfig+0x368>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f7fa fc0c 	bl	8002dac <HAL_InitTick>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	58024400 	.word	0x58024400
 80085a8:	080121a4 	.word	0x080121a4
 80085ac:	24000008 	.word	0x24000008
 80085b0:	24000004 	.word	0x24000004
 80085b4:	2400000c 	.word	0x2400000c

080085b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12a      	bne.n	8008620 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80085ca:	4b2d      	ldr	r3, [pc, #180]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 80085cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d0:	4a2b      	ldr	r2, [pc, #172]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 80085d2:	f043 0301 	orr.w	r3, r3, #1
 80085d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085da:	4b29      	ldr	r3, [pc, #164]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 80085dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80085e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ee:	2302      	movs	r3, #2
 80085f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f2:	2303      	movs	r3, #3
 80085f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80085fa:	2300      	movs	r3, #0
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80085fe:	f107 031c 	add.w	r3, r7, #28
 8008602:	4619      	mov	r1, r3
 8008604:	481f      	ldr	r0, [pc, #124]	; (8008684 <HAL_RCC_MCOConfig+0xcc>)
 8008606:	f7fe ffd1 	bl	80075ac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800860a:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	430b      	orrs	r3, r1
 8008618:	4919      	ldr	r1, [pc, #100]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 800861a:	4313      	orrs	r3, r2
 800861c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800861e:	e02a      	b.n	8008676 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008620:	4b17      	ldr	r3, [pc, #92]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 8008622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008626:	4a16      	ldr	r2, [pc, #88]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 8008628:	f043 0304 	orr.w	r3, r3, #4
 800862c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008630:	4b13      	ldr	r3, [pc, #76]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 8008632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800863e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008644:	2302      	movs	r3, #2
 8008646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008648:	2303      	movs	r3, #3
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864c:	2300      	movs	r3, #0
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008650:	2300      	movs	r3, #0
 8008652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008654:	f107 031c 	add.w	r3, r7, #28
 8008658:	4619      	mov	r1, r3
 800865a:	480b      	ldr	r0, [pc, #44]	; (8008688 <HAL_RCC_MCOConfig+0xd0>)
 800865c:	f7fe ffa6 	bl	80075ac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	01d9      	lsls	r1, r3, #7
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	430b      	orrs	r3, r1
 8008670:	4903      	ldr	r1, [pc, #12]	; (8008680 <HAL_RCC_MCOConfig+0xc8>)
 8008672:	4313      	orrs	r3, r2
 8008674:	610b      	str	r3, [r1, #16]
}
 8008676:	bf00      	nop
 8008678:	3730      	adds	r7, #48	; 0x30
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	58024400 	.word	0x58024400
 8008684:	58020000 	.word	0x58020000
 8008688:	58020800 	.word	0x58020800

0800868c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800868c:	b480      	push	{r7}
 800868e:	b089      	sub	sp, #36	; 0x24
 8008690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008692:	4bb3      	ldr	r3, [pc, #716]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869a:	2b18      	cmp	r3, #24
 800869c:	f200 8155 	bhi.w	800894a <HAL_RCC_GetSysClockFreq+0x2be>
 80086a0:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	0800894b 	.word	0x0800894b
 80086b0:	0800894b 	.word	0x0800894b
 80086b4:	0800894b 	.word	0x0800894b
 80086b8:	0800894b 	.word	0x0800894b
 80086bc:	0800894b 	.word	0x0800894b
 80086c0:	0800894b 	.word	0x0800894b
 80086c4:	0800894b 	.word	0x0800894b
 80086c8:	08008733 	.word	0x08008733
 80086cc:	0800894b 	.word	0x0800894b
 80086d0:	0800894b 	.word	0x0800894b
 80086d4:	0800894b 	.word	0x0800894b
 80086d8:	0800894b 	.word	0x0800894b
 80086dc:	0800894b 	.word	0x0800894b
 80086e0:	0800894b 	.word	0x0800894b
 80086e4:	0800894b 	.word	0x0800894b
 80086e8:	08008739 	.word	0x08008739
 80086ec:	0800894b 	.word	0x0800894b
 80086f0:	0800894b 	.word	0x0800894b
 80086f4:	0800894b 	.word	0x0800894b
 80086f8:	0800894b 	.word	0x0800894b
 80086fc:	0800894b 	.word	0x0800894b
 8008700:	0800894b 	.word	0x0800894b
 8008704:	0800894b 	.word	0x0800894b
 8008708:	0800873f 	.word	0x0800873f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870c:	4b94      	ldr	r3, [pc, #592]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d009      	beq.n	800872c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008718:	4b91      	ldr	r3, [pc, #580]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	08db      	lsrs	r3, r3, #3
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	4a90      	ldr	r2, [pc, #576]	; (8008964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008724:	fa22 f303 	lsr.w	r3, r2, r3
 8008728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800872a:	e111      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800872c:	4b8d      	ldr	r3, [pc, #564]	; (8008964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800872e:	61bb      	str	r3, [r7, #24]
    break;
 8008730:	e10e      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008732:	4b8d      	ldr	r3, [pc, #564]	; (8008968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008734:	61bb      	str	r3, [r7, #24]
    break;
 8008736:	e10b      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008738:	4b8c      	ldr	r3, [pc, #560]	; (800896c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800873a:	61bb      	str	r3, [r7, #24]
    break;
 800873c:	e108      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800873e:	4b88      	ldr	r3, [pc, #544]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008748:	4b85      	ldr	r3, [pc, #532]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008752:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008754:	4b82      	ldr	r3, [pc, #520]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800875e:	4b80      	ldr	r3, [pc, #512]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	08db      	lsrs	r3, r3, #3
 8008764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008776:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80e1 	beq.w	8008944 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	f000 8083 	beq.w	8008890 <HAL_RCC_GetSysClockFreq+0x204>
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b02      	cmp	r3, #2
 800878e:	f200 80a1 	bhi.w	80088d4 <HAL_RCC_GetSysClockFreq+0x248>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0x114>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d056      	beq.n	800884c <HAL_RCC_GetSysClockFreq+0x1c0>
 800879e:	e099      	b.n	80088d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a0:	4b6f      	ldr	r3, [pc, #444]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02d      	beq.n	8008808 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ac:	4b6c      	ldr	r3, [pc, #432]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	08db      	lsrs	r3, r3, #3
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	4a6b      	ldr	r2, [pc, #428]	; (8008964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
 80087bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d6:	4b62      	ldr	r3, [pc, #392]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008806:	e087      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008812:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b51      	ldr	r3, [pc, #324]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a02 	vldr	s12, [r7, #8]
 800882e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884a:	e065      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b40      	ldr	r3, [pc, #256]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888e:	e043      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800897c <HAL_RCC_GetSysClockFreq+0x2f0>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b2f      	ldr	r3, [pc, #188]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d2:	e021      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	4b1e      	ldr	r3, [pc, #120]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008916:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008918:	4b11      	ldr	r3, [pc, #68]	; (8008960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	0a5b      	lsrs	r3, r3, #9
 800891e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008922:	3301      	adds	r3, #1
 8008924:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008930:	edd7 6a07 	vldr	s13, [r7, #28]
 8008934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800893c:	ee17 3a90 	vmov	r3, s15
 8008940:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008942:	e005      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	61bb      	str	r3, [r7, #24]
    break;
 8008948:	e002      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800894c:	61bb      	str	r3, [r7, #24]
    break;
 800894e:	bf00      	nop
  }

  return sysclockfreq;
 8008950:	69bb      	ldr	r3, [r7, #24]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	58024400 	.word	0x58024400
 8008964:	03d09000 	.word	0x03d09000
 8008968:	003d0900 	.word	0x003d0900
 800896c:	01e84800 	.word	0x01e84800
 8008970:	46000000 	.word	0x46000000
 8008974:	4c742400 	.word	0x4c742400
 8008978:	4a742400 	.word	0x4a742400
 800897c:	4bf42400 	.word	0x4bf42400

08008980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008986:	f7ff fe81 	bl	800868c <HAL_RCC_GetSysClockFreq>
 800898a:	4602      	mov	r2, r0
 800898c:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	490f      	ldr	r1, [pc, #60]	; (80089d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008998:	5ccb      	ldrb	r3, [r1, r3]
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089a4:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80089ae:	5cd3      	ldrb	r3, [r2, r3]
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ba:	4a07      	ldr	r2, [pc, #28]	; (80089d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089be:	4a07      	ldr	r2, [pc, #28]	; (80089dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089c4:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80089c6:	681b      	ldr	r3, [r3, #0]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	58024400 	.word	0x58024400
 80089d4:	080121a4 	.word	0x080121a4
 80089d8:	24000008 	.word	0x24000008
 80089dc:	24000004 	.word	0x24000004

080089e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089e4:	f7ff ffcc 	bl	8008980 <HAL_RCC_GetHCLKFreq>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	091b      	lsrs	r3, r3, #4
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	4904      	ldr	r1, [pc, #16]	; (8008a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089f6:	5ccb      	ldrb	r3, [r1, r3]
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	58024400 	.word	0x58024400
 8008a08:	080121a4 	.word	0x080121a4

08008a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a10:	f7ff ffb6 	bl	8008980 <HAL_RCC_GetHCLKFreq>
 8008a14:	4602      	mov	r2, r0
 8008a16:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	4904      	ldr	r1, [pc, #16]	; (8008a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a22:	5ccb      	ldrb	r3, [r1, r3]
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	58024400 	.word	0x58024400
 8008a34:	080121a4 	.word	0x080121a4

08008a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	223f      	movs	r2, #63	; 0x3f
 8008a46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a48:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0207 	and.w	r2, r3, #7
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008a54:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008a60:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 020f 	and.w	r2, r3, #15
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008a78:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008a84:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <HAL_RCC_GetClockConfig+0x80>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	601a      	str	r2, [r3, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	52002000 	.word	0x52002000

08008abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d03f      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ae0:	d02a      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ae6:	d824      	bhi.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aec:	d018      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af2:	d81e      	bhi.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afc:	d007      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008afe:	e018      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b00:	4bab      	ldr	r3, [pc, #684]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4aaa      	ldr	r2, [pc, #680]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b0c:	e015      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3304      	adds	r3, #4
 8008b12:	2102      	movs	r1, #2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 fff3 	bl	800ab00 <RCCEx_PLL2_Config>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b1e:	e00c      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3324      	adds	r3, #36	; 0x24
 8008b24:	2102      	movs	r1, #2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f002 f89c 	bl	800ac64 <RCCEx_PLL3_Config>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b30:	e003      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	75fb      	strb	r3, [r7, #23]
      break;
 8008b36:	e000      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b40:	4b9b      	ldr	r3, [pc, #620]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4c:	4998      	ldr	r1, [pc, #608]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	650b      	str	r3, [r1, #80]	; 0x50
 8008b52:	e001      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d03d      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d826      	bhi.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008b89 	.word	0x08008b89
 8008b78:	08008b97 	.word	0x08008b97
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bc1 	.word	0x08008bc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b88:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	4a88      	ldr	r2, [pc, #544]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b94:	e015      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 ffaf 	bl	800ab00 <RCCEx_PLL2_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ba6:	e00c      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3324      	adds	r3, #36	; 0x24
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f002 f858 	bl	800ac64 <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bc8:	4b79      	ldr	r3, [pc, #484]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bcc:	f023 0207 	bic.w	r2, r3, #7
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd4:	4976      	ldr	r1, [pc, #472]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8008bda:	e001      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d042      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf4:	d02b      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	d825      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8008bfe:	d028      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c00:	2bc0      	cmp	r3, #192	; 0xc0
 8008c02:	d821      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c04:	2b80      	cmp	r3, #128	; 0x80
 8008c06:	d016      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008c08:	2b80      	cmp	r3, #128	; 0x80
 8008c0a:	d81d      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	d007      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008c14:	e018      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c16:	4b66      	ldr	r3, [pc, #408]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	4a65      	ldr	r2, [pc, #404]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c22:	e017      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3304      	adds	r3, #4
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 ff68 	bl	800ab00 <RCCEx_PLL2_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c34:	e00e      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3324      	adds	r3, #36	; 0x24
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 f811 	bl	800ac64 <RCCEx_PLL3_Config>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c46:	e005      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4c:	e002      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c4e:	bf00      	nop
 8008c50:	e000      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d109      	bne.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c5a:	4b55      	ldr	r3, [pc, #340]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c66:	4952      	ldr	r1, [pc, #328]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8008c6c:	e001      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d049      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c88:	d030      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c8e:	d82a      	bhi.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c94:	d02c      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c9a:	d824      	bhi.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ca0:	d018      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ca6:	d81e      	bhi.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cb0:	d007      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008cb2:	e018      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb4:	4b3e      	ldr	r3, [pc, #248]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a3d      	ldr	r2, [pc, #244]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cc0:	e017      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 ff19 	bl	800ab00 <RCCEx_PLL2_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cd2:	e00e      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3324      	adds	r3, #36	; 0x24
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 ffc2 	bl	800ac64 <RCCEx_PLL3_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce4:	e005      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cea:	e002      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008cec:	bf00      	nop
 8008cee:	e000      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d06:	492a      	ldr	r1, [pc, #168]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8008d0c:	e001      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d04c      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d28:	d030      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d2e:	d82a      	bhi.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d34:	d02c      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d3a:	d824      	bhi.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d40:	d018      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d46:	d81e      	bhi.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d50:	d007      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008d52:	e018      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d54:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d60:	e017      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3304      	adds	r3, #4
 8008d66:	2100      	movs	r1, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 fec9 	bl	800ab00 <RCCEx_PLL2_Config>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d72:	e00e      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3324      	adds	r3, #36	; 0x24
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 ff72 	bl	800ac64 <RCCEx_PLL3_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d84:	e005      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8a:	e002      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008d8c:	bf00      	nop
 8008d8e:	e000      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10d      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008da6:	4902      	ldr	r1, [pc, #8]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	658b      	str	r3, [r1, #88]	; 0x58
 8008dac:	e004      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d032      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc8:	2b30      	cmp	r3, #48	; 0x30
 8008dca:	d01c      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008dcc:	2b30      	cmp	r3, #48	; 0x30
 8008dce:	d817      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d00c      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d813      	bhi.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d016      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d10f      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4baf      	ldr	r3, [pc, #700]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	4aae      	ldr	r2, [pc, #696]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008dec:	e00e      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3304      	adds	r3, #4
 8008df2:	2102      	movs	r1, #2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 fe83 	bl	800ab00 <RCCEx_PLL2_Config>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008dfe:	e005      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	75fb      	strb	r3, [r7, #23]
      break;
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e06:	bf00      	nop
 8008e08:	e000      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d109      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e12:	4ba3      	ldr	r3, [pc, #652]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1e:	49a0      	ldr	r1, [pc, #640]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e24:	e001      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d047      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e3e:	d030      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e44:	d82a      	bhi.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e4a:	d02c      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008e4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e50:	d824      	bhi.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e56:	d018      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e5c:	d81e      	bhi.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e66:	d007      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008e68:	e018      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6a:	4b8d      	ldr	r3, [pc, #564]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a8c      	ldr	r2, [pc, #560]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e76:	e017      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fe3e 	bl	800ab00 <RCCEx_PLL2_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e88:	e00e      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3324      	adds	r3, #36	; 0x24
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 fee7 	bl	800ac64 <RCCEx_PLL3_Config>
 8008e96:	4603      	mov	r3, r0
 8008e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e9a:	e005      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008eae:	4b7c      	ldr	r3, [pc, #496]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eba:	4979      	ldr	r1, [pc, #484]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	650b      	str	r3, [r1, #80]	; 0x50
 8008ec0:	e001      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d049      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eda:	d02e      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ee0:	d828      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ee6:	d02a      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eec:	d822      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ef2:	d026      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ef8:	d81c      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008efe:	d010      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f04:	d816      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01d      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0e:	d111      	bne.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	2101      	movs	r1, #1
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 fdf2 	bl	800ab00 <RCCEx_PLL2_Config>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f20:	e012      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3324      	adds	r3, #36	; 0x24
 8008f26:	2101      	movs	r1, #1
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fe9b 	bl	800ac64 <RCCEx_PLL3_Config>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f32:	e009      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
      break;
 8008f38:	e006      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e004      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e002      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f42:	bf00      	nop
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f4e:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f5a:	4951      	ldr	r1, [pc, #324]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8008f60:	e001      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d04b      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f7c:	d02e      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f82:	d828      	bhi.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f88:	d02a      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d822      	bhi.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f94:	d026      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f9a:	d81c      	bhi.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa0:	d010      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa6:	d816      	bhi.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01d      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb0:	d111      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fda1 	bl	800ab00 <RCCEx_PLL2_Config>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fc2:	e012      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	2101      	movs	r1, #1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fe4a 	bl	800ac64 <RCCEx_PLL3_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fd4:	e009      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fda:	e006      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e004      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e002      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fe4:	bf00      	nop
 8008fe6:	e000      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ff0:	4b2b      	ldr	r3, [pc, #172]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ffe:	4928      	ldr	r1, [pc, #160]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009000:	4313      	orrs	r3, r2
 8009002:	658b      	str	r3, [r1, #88]	; 0x58
 8009004:	e001      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02f      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800901e:	d00e      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009024:	d814      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d015      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800902a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800902e:	d10f      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	4a1a      	ldr	r2, [pc, #104]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800903c:	e00c      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3304      	adds	r3, #4
 8009042:	2101      	movs	r1, #1
 8009044:	4618      	mov	r0, r3
 8009046:	f001 fd5b 	bl	800ab00 <RCCEx_PLL2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800904e:	e003      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	75fb      	strb	r3, [r7, #23]
      break;
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906a:	490d      	ldr	r1, [pc, #52]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800906c:	4313      	orrs	r3, r2
 800906e:	650b      	str	r3, [r1, #80]	; 0x50
 8009070:	e001      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d033      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009086:	2b03      	cmp	r3, #3
 8009088:	d81c      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090cb 	.word	0x080090cb
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090b3 	.word	0x080090b3
 800909c:	080090cb 	.word	0x080090cb
 80090a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a4:	4bb8      	ldr	r3, [pc, #736]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	4ab7      	ldr	r2, [pc, #732]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090b0:	e00c      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2102      	movs	r1, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fd21 	bl	800ab00 <RCCEx_PLL2_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090c2:	e003      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	e000      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80090ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090d2:	4bad      	ldr	r3, [pc, #692]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d6:	f023 0203 	bic.w	r2, r3, #3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	49aa      	ldr	r1, [pc, #680]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80090e4:	e001      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8086 	beq.w	8009204 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090f8:	4ba4      	ldr	r3, [pc, #656]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4aa3      	ldr	r2, [pc, #652]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80090fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009104:	f7fa f898 	bl	8003238 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800910a:	e009      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800910c:	f7fa f894 	bl	8003238 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b64      	cmp	r3, #100	; 0x64
 8009118:	d902      	bls.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	75fb      	strb	r3, [r7, #23]
        break;
 800911e:	e005      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009120:	4b9a      	ldr	r3, [pc, #616]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0ef      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d166      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009132:	4b95      	ldr	r3, [pc, #596]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800913c:	4053      	eors	r3, r2
 800913e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009142:	2b00      	cmp	r3, #0
 8009144:	d013      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009146:	4b90      	ldr	r3, [pc, #576]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009150:	4b8d      	ldr	r3, [pc, #564]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009154:	4a8c      	ldr	r2, [pc, #560]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800915c:	4b8a      	ldr	r3, [pc, #552]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009160:	4a89      	ldr	r2, [pc, #548]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009168:	4a87      	ldr	r2, [pc, #540]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009178:	d115      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917a:	f7fa f85d 	bl	8003238 <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009180:	e00b      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009182:	f7fa f859 	bl	8003238 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009190:	4293      	cmp	r3, r2
 8009192:	d902      	bls.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	75fb      	strb	r3, [r7, #23]
            break;
 8009198:	e005      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800919a:	4b7b      	ldr	r3, [pc, #492]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0ed      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d126      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ba:	d10d      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80091bc:	4b72      	ldr	r3, [pc, #456]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ca:	0919      	lsrs	r1, r3, #4
 80091cc:	4b70      	ldr	r3, [pc, #448]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80091ce:	400b      	ands	r3, r1
 80091d0:	496d      	ldr	r1, [pc, #436]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	610b      	str	r3, [r1, #16]
 80091d6:	e005      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80091d8:	4b6b      	ldr	r3, [pc, #428]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	4a6a      	ldr	r2, [pc, #424]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091e2:	6113      	str	r3, [r2, #16]
 80091e4:	4b68      	ldr	r3, [pc, #416]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091f2:	4965      	ldr	r1, [pc, #404]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	670b      	str	r3, [r1, #112]	; 0x70
 80091f8:	e004      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	75bb      	strb	r3, [r7, #22]
 80091fe:	e001      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d07e      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009214:	2b28      	cmp	r3, #40	; 0x28
 8009216:	d867      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009218:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921e:	bf00      	nop
 8009220:	080092ef 	.word	0x080092ef
 8009224:	080092e9 	.word	0x080092e9
 8009228:	080092e9 	.word	0x080092e9
 800922c:	080092e9 	.word	0x080092e9
 8009230:	080092e9 	.word	0x080092e9
 8009234:	080092e9 	.word	0x080092e9
 8009238:	080092e9 	.word	0x080092e9
 800923c:	080092e9 	.word	0x080092e9
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092e9 	.word	0x080092e9
 8009248:	080092e9 	.word	0x080092e9
 800924c:	080092e9 	.word	0x080092e9
 8009250:	080092e9 	.word	0x080092e9
 8009254:	080092e9 	.word	0x080092e9
 8009258:	080092e9 	.word	0x080092e9
 800925c:	080092e9 	.word	0x080092e9
 8009260:	080092d7 	.word	0x080092d7
 8009264:	080092e9 	.word	0x080092e9
 8009268:	080092e9 	.word	0x080092e9
 800926c:	080092e9 	.word	0x080092e9
 8009270:	080092e9 	.word	0x080092e9
 8009274:	080092e9 	.word	0x080092e9
 8009278:	080092e9 	.word	0x080092e9
 800927c:	080092e9 	.word	0x080092e9
 8009280:	080092ef 	.word	0x080092ef
 8009284:	080092e9 	.word	0x080092e9
 8009288:	080092e9 	.word	0x080092e9
 800928c:	080092e9 	.word	0x080092e9
 8009290:	080092e9 	.word	0x080092e9
 8009294:	080092e9 	.word	0x080092e9
 8009298:	080092e9 	.word	0x080092e9
 800929c:	080092e9 	.word	0x080092e9
 80092a0:	080092ef 	.word	0x080092ef
 80092a4:	080092e9 	.word	0x080092e9
 80092a8:	080092e9 	.word	0x080092e9
 80092ac:	080092e9 	.word	0x080092e9
 80092b0:	080092e9 	.word	0x080092e9
 80092b4:	080092e9 	.word	0x080092e9
 80092b8:	080092e9 	.word	0x080092e9
 80092bc:	080092e9 	.word	0x080092e9
 80092c0:	080092ef 	.word	0x080092ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	2101      	movs	r1, #1
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 fc18 	bl	800ab00 <RCCEx_PLL2_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092d4:	e00c      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3324      	adds	r3, #36	; 0x24
 80092da:	2101      	movs	r1, #1
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fcc1 	bl	800ac64 <RCCEx_PLL3_Config>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092e6:	e003      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
      break;
 80092ec:	e000      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80092ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009302:	4921      	ldr	r1, [pc, #132]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009304:	4313      	orrs	r3, r2
 8009306:	654b      	str	r3, [r1, #84]	; 0x54
 8009308:	e001      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d03e      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931e:	2b05      	cmp	r3, #5
 8009320:	d820      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	0800936b 	.word	0x0800936b
 800932c:	08009341 	.word	0x08009341
 8009330:	08009353 	.word	0x08009353
 8009334:	0800936b 	.word	0x0800936b
 8009338:	0800936b 	.word	0x0800936b
 800933c:	0800936b 	.word	0x0800936b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3304      	adds	r3, #4
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f001 fbda 	bl	800ab00 <RCCEx_PLL2_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009350:	e00c      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3324      	adds	r3, #36	; 0x24
 8009356:	2101      	movs	r1, #1
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fc83 	bl	800ac64 <RCCEx_PLL3_Config>
 800935e:	4603      	mov	r3, r0
 8009360:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009362:	e003      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	75fb      	strb	r3, [r7, #23]
      break;
 8009368:	e000      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800936a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d110      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009376:	f023 0207 	bic.w	r2, r3, #7
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800937e:	4902      	ldr	r1, [pc, #8]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009380:	4313      	orrs	r3, r2
 8009382:	654b      	str	r3, [r1, #84]	; 0x54
 8009384:	e008      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009386:	bf00      	nop
 8009388:	58024400 	.word	0x58024400
 800938c:	58024800 	.word	0x58024800
 8009390:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d039      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093aa:	2b05      	cmp	r3, #5
 80093ac:	d820      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093f7 	.word	0x080093f7
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093df 	.word	0x080093df
 80093c0:	080093f7 	.word	0x080093f7
 80093c4:	080093f7 	.word	0x080093f7
 80093c8:	080093f7 	.word	0x080093f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	2101      	movs	r1, #1
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fb94 	bl	800ab00 <RCCEx_PLL2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093dc:	e00c      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3324      	adds	r3, #36	; 0x24
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fc3d 	bl	800ac64 <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093ee:	e003      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
      break;
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80093f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093fe:	4bb7      	ldr	r3, [pc, #732]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009402:	f023 0207 	bic.w	r2, r3, #7
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940c:	49b3      	ldr	r1, [pc, #716]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800940e:	4313      	orrs	r3, r2
 8009410:	658b      	str	r3, [r1, #88]	; 0x58
 8009412:	e001      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d04b      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800942a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800942e:	d02e      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009434:	d828      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d02a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009440:	d822      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009446:	d026      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800944c:	d81c      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800944e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009452:	d010      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009458:	d816      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01d      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800945e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009462:	d111      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3304      	adds	r3, #4
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f001 fb48 	bl	800ab00 <RCCEx_PLL2_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009474:	e012      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3324      	adds	r3, #36	; 0x24
 800947a:	2102      	movs	r1, #2
 800947c:	4618      	mov	r0, r3
 800947e:	f001 fbf1 	bl	800ac64 <RCCEx_PLL3_Config>
 8009482:	4603      	mov	r3, r0
 8009484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009486:	e009      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
      break;
 800948c:	e006      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800948e:	bf00      	nop
 8009490:	e004      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009496:	bf00      	nop
 8009498:	e000      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800949a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094a2:	4b8e      	ldr	r3, [pc, #568]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b0:	498a      	ldr	r1, [pc, #552]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	654b      	str	r3, [r1, #84]	; 0x54
 80094b6:	e001      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d04b      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094d2:	d02e      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80094d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094d8:	d828      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094de:	d02a      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80094e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e4:	d822      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094ea:	d026      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80094ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094f0:	d81c      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f6:	d010      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80094f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094fc:	d816      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01d      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009506:	d111      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f001 faf6 	bl	800ab00 <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009518:	e012      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2102      	movs	r1, #2
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fb9f 	bl	800ac64 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800952a:	e009      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
      break;
 8009530:	e006      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009532:	bf00      	nop
 8009534:	e004      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009536:	bf00      	nop
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800953a:	bf00      	nop
 800953c:	e000      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800953e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009546:	4b65      	ldr	r3, [pc, #404]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009554:	4961      	ldr	r1, [pc, #388]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009556:	4313      	orrs	r3, r2
 8009558:	658b      	str	r3, [r1, #88]	; 0x58
 800955a:	e001      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009568:	2b00      	cmp	r3, #0
 800956a:	d04b      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009572:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009576:	d02e      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009578:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800957c:	d828      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800957e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009582:	d02a      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009588:	d822      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800958a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800958e:	d026      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009590:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009594:	d81c      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800959a:	d010      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800959c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095a0:	d816      	bhi.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01d      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80095a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095aa:	d111      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3304      	adds	r3, #4
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 faa4 	bl	800ab00 <RCCEx_PLL2_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095bc:	e012      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3324      	adds	r3, #36	; 0x24
 80095c2:	2102      	movs	r1, #2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fb4d 	bl	800ac64 <RCCEx_PLL3_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095ce:	e009      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	75fb      	strb	r3, [r7, #23]
      break;
 80095d4:	e006      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095d6:	bf00      	nop
 80095d8:	e004      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095da:	bf00      	nop
 80095dc:	e002      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095de:	bf00      	nop
 80095e0:	e000      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095ea:	4b3c      	ldr	r3, [pc, #240]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095f8:	4938      	ldr	r1, [pc, #224]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	658b      	str	r3, [r1, #88]	; 0x58
 80095fe:	e001      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0308 	and.w	r3, r3, #8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01a      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961a:	d10a      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fb1e 	bl	800ac64 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009640:	4926      	ldr	r1, [pc, #152]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009642:	4313      	orrs	r3, r2
 8009644:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01a      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3324      	adds	r3, #36	; 0x24
 8009662:	2102      	movs	r1, #2
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fafd 	bl	800ac64 <RCCEx_PLL3_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009674:	4b19      	ldr	r3, [pc, #100]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009682:	4916      	ldr	r1, [pc, #88]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009684:	4313      	orrs	r3, r2
 8009686:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d036      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800969a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800969e:	d01f      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80096a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a4:	d817      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80096aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ae:	d009      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80096b0:	e011      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	3304      	adds	r3, #4
 80096b6:	2100      	movs	r1, #0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 fa21 	bl	800ab00 <RCCEx_PLL2_Config>
 80096be:	4603      	mov	r3, r0
 80096c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096c2:	e00e      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3324      	adds	r3, #36	; 0x24
 80096c8:	2102      	movs	r1, #2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 faca 	bl	800ac64 <RCCEx_PLL3_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096d4:	e005      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	75fb      	strb	r3, [r7, #23]
      break;
 80096da:	e002      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80096dc:	58024400 	.word	0x58024400
      break;
 80096e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096e8:	4b93      	ldr	r3, [pc, #588]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096f6:	4990      	ldr	r1, [pc, #576]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	658b      	str	r3, [r1, #88]	; 0x58
 80096fc:	e001      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d033      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009718:	d01c      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800971a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800971e:	d816      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009724:	d003      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800972a:	d007      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800972c:	e00f      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972e:	4b82      	ldr	r3, [pc, #520]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	4a81      	ldr	r2, [pc, #516]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800973a:	e00c      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3324      	adds	r3, #36	; 0x24
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f001 fa8e 	bl	800ac64 <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800974c:	e003      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
      break;
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800975c:	4b76      	ldr	r3, [pc, #472]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976a:	4973      	ldr	r1, [pc, #460]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800976c:	4313      	orrs	r3, r2
 800976e:	654b      	str	r3, [r1, #84]	; 0x54
 8009770:	e001      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d029      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800978a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800978e:	d007      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009790:	e00f      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009792:	4b69      	ldr	r3, [pc, #420]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	4a68      	ldr	r2, [pc, #416]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800979e:	e00b      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3304      	adds	r3, #4
 80097a4:	2102      	movs	r1, #2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 f9aa 	bl	800ab00 <RCCEx_PLL2_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097b0:	e002      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	75fb      	strb	r3, [r7, #23]
      break;
 80097b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097be:	4b5e      	ldr	r3, [pc, #376]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ca:	495b      	ldr	r1, [pc, #364]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097d0:	e001      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3324      	adds	r3, #36	; 0x24
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 fa3b 	bl	800ac64 <RCCEx_PLL3_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d030      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800980c:	d017      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800980e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009812:	d811      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009818:	d013      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800981a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800981e:	d80b      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009828:	d106      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4b43      	ldr	r3, [pc, #268]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4a42      	ldr	r2, [pc, #264]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009836:	e007      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	e004      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800983e:	bf00      	nop
 8009840:	e002      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009842:	bf00      	nop
 8009844:	e000      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009848:	7dfb      	ldrb	r3, [r7, #23]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d109      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800984e:	4b3a      	ldr	r3, [pc, #232]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800985a:	4937      	ldr	r1, [pc, #220]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800985c:	4313      	orrs	r3, r2
 800985e:	654b      	str	r3, [r1, #84]	; 0x54
 8009860:	e001      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d008      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009872:	4b31      	ldr	r3, [pc, #196]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987e:	492e      	ldr	r1, [pc, #184]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009880:	4313      	orrs	r3, r2
 8009882:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009890:	4b29      	ldr	r3, [pc, #164]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800989e:	4926      	ldr	r1, [pc, #152]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098b0:	4b21      	ldr	r3, [pc, #132]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098bc:	491e      	ldr	r1, [pc, #120]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00d      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098ce:	4b1a      	ldr	r3, [pc, #104]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	4a19      	ldr	r2, [pc, #100]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098d8:	6113      	str	r3, [r2, #16]
 80098da:	4b17      	ldr	r3, [pc, #92]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098e4:	4914      	ldr	r1, [pc, #80]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da08      	bge.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098f2:	4b11      	ldr	r3, [pc, #68]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fe:	490e      	ldr	r1, [pc, #56]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009900:	4313      	orrs	r3, r2
 8009902:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009910:	4b09      	ldr	r3, [pc, #36]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	4906      	ldr	r1, [pc, #24]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009920:	4313      	orrs	r3, r2
 8009922:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009924:	7dbb      	ldrb	r3, [r7, #22]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	58024400 	.word	0x58024400

0800993c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b090      	sub	sp, #64	; 0x40
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994a:	f040 8095 	bne.w	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800994e:	4bae      	ldr	r3, [pc, #696]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	633b      	str	r3, [r7, #48]	; 0x30
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	2b04      	cmp	r3, #4
 800995c:	f200 8088 	bhi.w	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009960:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	0800997d 	.word	0x0800997d
 800996c:	080099a5 	.word	0x080099a5
 8009970:	080099cd 	.word	0x080099cd
 8009974:	08009a69 	.word	0x08009a69
 8009978:	080099f5 	.word	0x080099f5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800997c:	4ba2      	ldr	r3, [pc, #648]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009988:	d108      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800998a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800998e:	4618      	mov	r0, r3
 8009990:	f000 ff64 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009998:	f000 bc95 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a0:	f000 bc91 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099a4:	4b98      	ldr	r3, [pc, #608]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b0:	d108      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b2:	f107 0318 	add.w	r3, r7, #24
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fca8 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099c0:	f000 bc81 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c8:	f000 bc7d 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099cc:	4b8e      	ldr	r3, [pc, #568]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d8:	d108      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099da:	f107 030c 	add.w	r3, r7, #12
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fde8 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099e8:	f000 bc6d 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f0:	f000 bc69 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099f4:	4b84      	ldr	r3, [pc, #528]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099fe:	4b82      	ldr	r3, [pc, #520]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d10c      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d109      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a10:	4b7d      	ldr	r3, [pc, #500]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	08db      	lsrs	r3, r3, #3
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	4a7c      	ldr	r2, [pc, #496]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a22:	e01f      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a24:	4b78      	ldr	r3, [pc, #480]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a30:	d106      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a38:	d102      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a3a:	4b75      	ldr	r3, [pc, #468]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3e:	e011      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a40:	4b71      	ldr	r3, [pc, #452]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4c:	d106      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a54:	d102      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a56:	4b6f      	ldr	r3, [pc, #444]	; (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5a:	e003      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a60:	f000 bc31 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a64:	f000 bc2f 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a68:	4b6b      	ldr	r3, [pc, #428]	; (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a6c:	f000 bc2b 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a74:	f000 bc27 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7e:	f040 8095 	bne.w	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009a82:	4b61      	ldr	r3, [pc, #388]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a92:	d04d      	beq.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9a:	f200 8084 	bhi.w	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8009aa2:	d07d      	beq.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8009aa8:	d87d      	bhi.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2b80      	cmp	r3, #128	; 0x80
 8009aae:	d02d      	beq.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d877      	bhi.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d012      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009ac2:	e070      	b.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ac4:	4b50      	ldr	r3, [pc, #320]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ad0:	d107      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fec0 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ae0:	e3f1      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae6:	e3ee      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ae8:	4b47      	ldr	r3, [pc, #284]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009af4:	d107      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af6:	f107 0318 	add.w	r3, r7, #24
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fc06 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b04:	e3df      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0a:	e3dc      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b0c:	4b3e      	ldr	r3, [pc, #248]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b18:	d107      	bne.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b1a:	f107 030c 	add.w	r3, r7, #12
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fd48 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b28:	e3cd      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b2e:	e3ca      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b30:	4b35      	ldr	r3, [pc, #212]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b3a:	4b33      	ldr	r3, [pc, #204]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0304 	and.w	r3, r3, #4
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d10c      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b4c:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	08db      	lsrs	r3, r3, #3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	4a2d      	ldr	r2, [pc, #180]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b5e:	e01e      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b60:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	d106      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b74:	d102      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b76:	4b26      	ldr	r3, [pc, #152]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b7a:	e010      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b7c:	4b22      	ldr	r3, [pc, #136]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b88:	d106      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b90:	d102      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b92:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b96:	e002      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b9c:	e393      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b9e:	e392      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ba4:	e38f      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009baa:	e38c      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb2:	f040 80a7 	bne.w	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009bbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bc6:	d05f      	beq.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bce:	f200 8096 	bhi.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009bd8:	f000 808e 	beq.w	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009be2:	f200 808c 	bhi.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bec:	d03a      	beq.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bf4:	f200 8083 	bhi.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00e      	beq.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c04:	d01c      	beq.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009c06:	e07a      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	03d09000 	.word	0x03d09000
 8009c10:	003d0900 	.word	0x003d0900
 8009c14:	01e84800 	.word	0x01e84800
 8009c18:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c1c:	4baa      	ldr	r3, [pc, #680]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c28:	d107      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fe14 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c38:	e345      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c3e:	e342      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c40:	4ba1      	ldr	r3, [pc, #644]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c4c:	d107      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4e:	f107 0318 	add.w	r3, r7, #24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fb5a 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c5c:	e333      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c62:	e330      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c64:	4b98      	ldr	r3, [pc, #608]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c70:	d107      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c72:	f107 030c 	add.w	r3, r7, #12
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fc9c 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c80:	e321      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c86:	e31e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c88:	4b8f      	ldr	r3, [pc, #572]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c92:	4b8d      	ldr	r3, [pc, #564]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d10c      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ca4:	4b88      	ldr	r3, [pc, #544]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	08db      	lsrs	r3, r3, #3
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	4a87      	ldr	r2, [pc, #540]	; (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cb6:	e01e      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cb8:	4b83      	ldr	r3, [pc, #524]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc4:	d106      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ccc:	d102      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009cce:	4b80      	ldr	r3, [pc, #512]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd2:	e010      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cd4:	4b7c      	ldr	r3, [pc, #496]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ce0:	d106      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ce8:	d102      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009cea:	4b7a      	ldr	r3, [pc, #488]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cee:	e002      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009cf4:	e2e7      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009cf6:	e2e6      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cf8:	4b77      	ldr	r3, [pc, #476]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cfc:	e2e3      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d02:	e2e0      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d0a:	f040 809c 	bne.w	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009d0e:	4b6e      	ldr	r3, [pc, #440]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d12:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d1e:	d054      	beq.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d26:	f200 808b 	bhi.w	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d30:	f000 8083 	beq.w	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d3a:	f200 8081 	bhi.w	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d44:	d02f      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d4c:	d878      	bhi.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d5a:	d012      	beq.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009d5c:	e070      	b.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d5e:	4b5a      	ldr	r3, [pc, #360]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6a:	d107      	bne.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fd73 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d7a:	e2a4      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d80:	e2a1      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d82:	4b51      	ldr	r3, [pc, #324]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d90:	f107 0318 	add.w	r3, r7, #24
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 fab9 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009d9e:	e292      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da4:	e28f      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da6:	4b48      	ldr	r3, [pc, #288]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009db2:	d107      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fbfb 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dc2:	e280      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dc8:	e27d      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009dca:	4b3f      	ldr	r3, [pc, #252]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dd2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dd4:	4b3c      	ldr	r3, [pc, #240]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d10c      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d109      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de6:	4b38      	ldr	r3, [pc, #224]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	4a36      	ldr	r2, [pc, #216]	; (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df8:	e01e      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dfa:	4b33      	ldr	r3, [pc, #204]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e06:	d106      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e0e:	d102      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e10:	4b2f      	ldr	r3, [pc, #188]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e14:	e010      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e16:	4b2c      	ldr	r3, [pc, #176]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e22:	d106      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e2a:	d102      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e30:	e002      	b.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e36:	e246      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e38:	e245      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e3a:	4b27      	ldr	r3, [pc, #156]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e3e:	e242      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e44:	e23f      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4c:	f040 80a8 	bne.w	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009e50:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009e58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e60:	d060      	beq.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e68:	f200 8097 	bhi.w	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e72:	f000 808f 	beq.w	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e7c:	f200 808d 	bhi.w	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e86:	d03b      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e8e:	f200 8084 	bhi.w	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9e:	d01d      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009ea0:	e07b      	b.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eae:	d107      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fcd1 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ebe:	e202      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ec4:	e1ff      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ec6:	bf00      	nop
 8009ec8:	58024400 	.word	0x58024400
 8009ecc:	03d09000 	.word	0x03d09000
 8009ed0:	003d0900 	.word	0x003d0900
 8009ed4:	01e84800 	.word	0x01e84800
 8009ed8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009edc:	4ba3      	ldr	r3, [pc, #652]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0318 	add.w	r3, r7, #24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fa0c 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ef8:	e1e5      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009efe:	e1e2      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f00:	4b9a      	ldr	r3, [pc, #616]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0e:	f107 030c 	add.w	r3, r7, #12
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fb4e 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f1c:	e1d3      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f22:	e1d0      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f24:	4b91      	ldr	r3, [pc, #580]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f2e:	4b8f      	ldr	r3, [pc, #572]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d10c      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d109      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f40:	4b8a      	ldr	r3, [pc, #552]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	08db      	lsrs	r3, r3, #3
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	4a89      	ldr	r2, [pc, #548]	; (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f52:	e01e      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f54:	4b85      	ldr	r3, [pc, #532]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f60:	d106      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f68:	d102      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009f6a:	4b82      	ldr	r3, [pc, #520]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f6e:	e010      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f70:	4b7e      	ldr	r3, [pc, #504]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f7c:	d106      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f84:	d102      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f86:	4b7c      	ldr	r3, [pc, #496]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8a:	e002      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f90:	e199      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f92:	e198      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f94:	4b79      	ldr	r3, [pc, #484]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f98:	e195      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f9e:	e192      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009fa6:	d173      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009fa8:	4b70      	ldr	r3, [pc, #448]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009fb0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb8:	d02f      	beq.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc0:	d863      	bhi.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fce:	d012      	beq.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009fd0:	e05b      	b.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fd2:	4b66      	ldr	r3, [pc, #408]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fde:	d107      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe0:	f107 0318 	add.w	r3, r7, #24
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f991 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fee:	e16a      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff4:	e167      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ff6:	4b5d      	ldr	r3, [pc, #372]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a002:	d107      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a004:	f107 030c 	add.w	r3, r7, #12
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fad3 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a012:	e158      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a018:	e155      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a01a:	4b54      	ldr	r3, [pc, #336]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a022:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a024:	4b51      	ldr	r3, [pc, #324]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	d10c      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a036:	4b4d      	ldr	r3, [pc, #308]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	08db      	lsrs	r3, r3, #3
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	4a4b      	ldr	r2, [pc, #300]	; (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a042:	fa22 f303 	lsr.w	r3, r2, r3
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a048:	e01e      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a04a:	4b48      	ldr	r3, [pc, #288]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a056:	d106      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a05e:	d102      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a060:	4b44      	ldr	r3, [pc, #272]	; (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a064:	e010      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a066:	4b41      	ldr	r3, [pc, #260]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a072:	d106      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a07a:	d102      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a07c:	4b3e      	ldr	r3, [pc, #248]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a080:	e002      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a086:	e11e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a088:	e11d      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a08e:	e11a      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a096:	d133      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a098:	4b34      	ldr	r3, [pc, #208]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a09a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ae:	d012      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a0b0:	e023      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0b2:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0be:	d107      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fbc9 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0ce:	e0fa      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0d4:	e0f7      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0d6:	4b25      	ldr	r3, [pc, #148]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e4:	f107 0318 	add.w	r3, r7, #24
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 f90f 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0f2:	e0e8      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f8:	e0e5      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0fe:	e0e2      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a106:	f040 808f 	bne.w	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a10a:	4b18      	ldr	r3, [pc, #96]	; (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a11a:	d075      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a122:	d87e      	bhi.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12a:	d060      	beq.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a132:	d876      	bhi.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a13a:	d045      	beq.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a142:	d86e      	bhi.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a14a:	d02b      	beq.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a152:	d866      	bhi.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a160:	d00e      	beq.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a162:	e05e      	b.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a164:	f000 f8bc 	bl	800a2e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a168:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a16a:	e0ac      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a16c:	58024400 	.word	0x58024400
 800a170:	03d09000 	.word	0x03d09000
 800a174:	003d0900 	.word	0x003d0900
 800a178:	01e84800 	.word	0x01e84800
 800a17c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a180:	4b53      	ldr	r3, [pc, #332]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a18c:	d107      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a18e:	f107 0318 	add.w	r3, r7, #24
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f8ba 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a19c:	e093      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a2:	e090      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1a4:	4b4a      	ldr	r3, [pc, #296]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1b0:	d107      	bne.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f9fc 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1c0:	e081      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1c6:	e07e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1c8:	4b41      	ldr	r3, [pc, #260]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d109      	bne.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1d4:	4b3e      	ldr	r3, [pc, #248]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	08db      	lsrs	r3, r3, #3
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	4a3d      	ldr	r2, [pc, #244]	; (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1e6:	e06e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ec:	e06b      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a1ee:	4b38      	ldr	r3, [pc, #224]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fa:	d102      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800a1fc:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a200:	e061      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a206:	e05e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a208:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a214:	d102      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a216:	4b31      	ldr	r3, [pc, #196]	; (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a21a:	e054      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a220:	e051      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a226:	e04e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a22e:	d148      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a230:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a238:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a240:	d02a      	beq.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a248:	d838      	bhi.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d004      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a256:	d00d      	beq.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a258:	e030      	b.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a266:	d102      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a268:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a26c:	e02b      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a272:	e028      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a274:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a280:	d107      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fae8 	bl	800a85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a290:	e019      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a296:	e016      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a298:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2a4:	d107      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0318 	add.w	r3, r7, #24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f82e 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a2b4:	e007      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ba:	e004      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2c0:	e001      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3740      	adds	r7, #64	; 0x40
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	03d09000 	.word	0x03d09000
 800a2d8:	003d0900 	.word	0x003d0900
 800a2dc:	01e84800 	.word	0x01e84800

0800a2e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a2e4:	f7fe fb4c 	bl	8008980 <HAL_RCC_GetHCLKFreq>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	4b06      	ldr	r3, [pc, #24]	; (800a304 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	091b      	lsrs	r3, r3, #4
 800a2f0:	f003 0307 	and.w	r3, r3, #7
 800a2f4:	4904      	ldr	r1, [pc, #16]	; (800a308 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a2f6:	5ccb      	ldrb	r3, [r1, r3]
 800a2f8:	f003 031f 	and.w	r3, r3, #31
 800a2fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a300:	4618      	mov	r0, r3
 800a302:	bd80      	pop	{r7, pc}
 800a304:	58024400 	.word	0x58024400
 800a308:	080121a4 	.word	0x080121a4

0800a30c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b089      	sub	sp, #36	; 0x24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a314:	4ba1      	ldr	r3, [pc, #644]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a31e:	4b9f      	ldr	r3, [pc, #636]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	0b1b      	lsrs	r3, r3, #12
 800a324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a328:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a32a:	4b9c      	ldr	r3, [pc, #624]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	091b      	lsrs	r3, r3, #4
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a336:	4b99      	ldr	r3, [pc, #612]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	08db      	lsrs	r3, r3, #3
 800a33c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	fb02 f303 	mul.w	r3, r2, r3
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8111 	beq.w	800a57c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	f000 8083 	beq.w	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b02      	cmp	r3, #2
 800a366:	f200 80a1 	bhi.w	800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d056      	beq.n	800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a376:	e099      	b.n	800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a378:	4b88      	ldr	r3, [pc, #544]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b00      	cmp	r3, #0
 800a382:	d02d      	beq.n	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a384:	4b85      	ldr	r3, [pc, #532]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	08db      	lsrs	r3, r3, #3
 800a38a:	f003 0303 	and.w	r3, r3, #3
 800a38e:	4a84      	ldr	r2, [pc, #528]	; (800a5a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a390:	fa22 f303 	lsr.w	r3, r2, r3
 800a394:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ae:	4b7b      	ldr	r3, [pc, #492]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3de:	e087      	b.n	800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a5a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f2:	4b6a      	ldr	r3, [pc, #424]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a402:	ed97 6a03 	vldr	s12, [r7, #12]
 800a406:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a41e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a422:	e065      	b.n	800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a436:	4b59      	ldr	r3, [pc, #356]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a446:	ed97 6a03 	vldr	s12, [r7, #12]
 800a44a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a466:	e043      	b.n	800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	ee07 3a90 	vmov	s15, r3
 800a46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a472:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47a:	4b48      	ldr	r3, [pc, #288]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a48e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4aa:	e021      	b.n	800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4be:	4b37      	ldr	r3, [pc, #220]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a4f0:	4b2a      	ldr	r3, [pc, #168]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f4:	0a5b      	lsrs	r3, r3, #9
 800a4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a50a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a516:	ee17 2a90 	vmov	r2, s15
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a51e:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	0c1b      	lsrs	r3, r3, #16
 800a524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a528:	ee07 3a90 	vmov	s15, r3
 800a52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a534:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a538:	edd7 6a07 	vldr	s13, [r7, #28]
 800a53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a544:	ee17 2a90 	vmov	r2, s15
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a54c:	4b13      	ldr	r3, [pc, #76]	; (800a59c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a550:	0e1b      	lsrs	r3, r3, #24
 800a552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a566:	edd7 6a07 	vldr	s13, [r7, #28]
 800a56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a572:	ee17 2a90 	vmov	r2, s15
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a57a:	e008      	b.n	800a58e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	609a      	str	r2, [r3, #8]
}
 800a58e:	bf00      	nop
 800a590:	3724      	adds	r7, #36	; 0x24
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	03d09000 	.word	0x03d09000
 800a5a4:	46000000 	.word	0x46000000
 800a5a8:	4c742400 	.word	0x4c742400
 800a5ac:	4a742400 	.word	0x4a742400
 800a5b0:	4bf42400 	.word	0x4bf42400

0800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b089      	sub	sp, #36	; 0x24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5bc:	4ba1      	ldr	r3, [pc, #644]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	f003 0303 	and.w	r3, r3, #3
 800a5c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a5c6:	4b9f      	ldr	r3, [pc, #636]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ca:	0d1b      	lsrs	r3, r3, #20
 800a5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a5d2:	4b9c      	ldr	r3, [pc, #624]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	0a1b      	lsrs	r3, r3, #8
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a5de:	4b99      	ldr	r3, [pc, #612]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e2:	08db      	lsrs	r3, r3, #3
 800a5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8111 	beq.w	800a824 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	2b02      	cmp	r3, #2
 800a606:	f000 8083 	beq.w	800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	f200 80a1 	bhi.w	800a754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d056      	beq.n	800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a61e:	e099      	b.n	800a754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a620:	4b88      	ldr	r3, [pc, #544]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0320 	and.w	r3, r3, #32
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d02d      	beq.n	800a688 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a62c:	4b85      	ldr	r3, [pc, #532]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	08db      	lsrs	r3, r3, #3
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	4a84      	ldr	r2, [pc, #528]	; (800a848 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a656:	4b7b      	ldr	r3, [pc, #492]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a666:	ed97 6a03 	vldr	s12, [r7, #12]
 800a66a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a682:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a686:	e087      	b.n	800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a850 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a69a:	4b6a      	ldr	r3, [pc, #424]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6ca:	e065      	b.n	800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6de:	4b59      	ldr	r3, [pc, #356]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a70e:	e043      	b.n	800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a722:	4b48      	ldr	r3, [pc, #288]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a732:	ed97 6a03 	vldr	s12, [r7, #12]
 800a736:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a752:	e021      	b.n	800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a766:	4b37      	ldr	r3, [pc, #220]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76e:	ee07 3a90 	vmov	s15, r3
 800a772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a776:	ed97 6a03 	vldr	s12, [r7, #12]
 800a77a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a796:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a798:	4b2a      	ldr	r3, [pc, #168]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	0a5b      	lsrs	r3, r3, #9
 800a79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7be:	ee17 2a90 	vmov	r2, s15
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a7c6:	4b1f      	ldr	r3, [pc, #124]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	0c1b      	lsrs	r3, r3, #16
 800a7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ec:	ee17 2a90 	vmov	r2, s15
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a7f4:	4b13      	ldr	r3, [pc, #76]	; (800a844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f8:	0e1b      	lsrs	r3, r3, #24
 800a7fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a80a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a80e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81a:	ee17 2a90 	vmov	r2, s15
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a822:	e008      	b.n	800a836 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	609a      	str	r2, [r3, #8]
}
 800a836:	bf00      	nop
 800a838:	3724      	adds	r7, #36	; 0x24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	58024400 	.word	0x58024400
 800a848:	03d09000 	.word	0x03d09000
 800a84c:	46000000 	.word	0x46000000
 800a850:	4c742400 	.word	0x4c742400
 800a854:	4a742400 	.word	0x4a742400
 800a858:	4bf42400 	.word	0x4bf42400

0800a85c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a864:	4ba0      	ldr	r3, [pc, #640]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a86e:	4b9e      	ldr	r3, [pc, #632]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	091b      	lsrs	r3, r3, #4
 800a874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a878:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a87a:	4b9b      	ldr	r3, [pc, #620]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a884:	4b98      	ldr	r3, [pc, #608]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	fb02 f303 	mul.w	r3, r2, r3
 800a894:	ee07 3a90 	vmov	s15, r3
 800a898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8111 	beq.w	800aaca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	f000 8083 	beq.w	800a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	f200 80a1 	bhi.w	800a9fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d056      	beq.n	800a972 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a8c4:	e099      	b.n	800a9fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8c6:	4b88      	ldr	r3, [pc, #544]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d02d      	beq.n	800a92e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8d2:	4b85      	ldr	r3, [pc, #532]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a83      	ldr	r2, [pc, #524]	; (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a8de:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	ee07 3a90 	vmov	s15, r3
 800a8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fc:	4b7a      	ldr	r3, [pc, #488]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a910:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a928:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a92c:	e087      	b.n	800aa3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	ee07 3a90 	vmov	s15, r3
 800a934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a938:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a93c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a940:	4b69      	ldr	r3, [pc, #420]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a950:	ed97 6a03 	vldr	s12, [r7, #12]
 800a954:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a95c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a970:	e065      	b.n	800aa3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aaf8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a984:	4b58      	ldr	r3, [pc, #352]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a994:	ed97 6a03 	vldr	s12, [r7, #12]
 800a998:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a99c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9b4:	e043      	b.n	800aa3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aafc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c8:	4b47      	ldr	r3, [pc, #284]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d0:	ee07 3a90 	vmov	s15, r3
 800a9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9f8:	e021      	b.n	800aa3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aa08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0c:	4b36      	ldr	r3, [pc, #216]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa20:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800aa3e:	4b2a      	ldr	r3, [pc, #168]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	0a5b      	lsrs	r3, r3, #9
 800aa44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa48:	ee07 3a90 	vmov	s15, r3
 800aa4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa58:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa64:	ee17 2a90 	vmov	r2, s15
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800aa6c:	4b1e      	ldr	r3, [pc, #120]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa70:	0c1b      	lsrs	r3, r3, #16
 800aa72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa86:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa92:	ee17 2a90 	vmov	r2, s15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aa9a:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9e:	0e1b      	lsrs	r3, r3, #24
 800aaa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aab4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aabc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac0:	ee17 2a90 	vmov	r2, s15
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aac8:	e008      	b.n	800aadc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	609a      	str	r2, [r3, #8]
}
 800aadc:	bf00      	nop
 800aade:	3724      	adds	r7, #36	; 0x24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	58024400 	.word	0x58024400
 800aaec:	03d09000 	.word	0x03d09000
 800aaf0:	46000000 	.word	0x46000000
 800aaf4:	4c742400 	.word	0x4c742400
 800aaf8:	4a742400 	.word	0x4a742400
 800aafc:	4bf42400 	.word	0x4bf42400

0800ab00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab0e:	4b53      	ldr	r3, [pc, #332]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d101      	bne.n	800ab1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e099      	b.n	800ac52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab1e:	4b4f      	ldr	r3, [pc, #316]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a4e      	ldr	r2, [pc, #312]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab2a:	f7f8 fb85 	bl	8003238 <HAL_GetTick>
 800ab2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab30:	e008      	b.n	800ab44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab32:	f7f8 fb81 	bl	8003238 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e086      	b.n	800ac52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab44:	4b45      	ldr	r3, [pc, #276]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1f0      	bne.n	800ab32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ab50:	4b42      	ldr	r3, [pc, #264]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	031b      	lsls	r3, r3, #12
 800ab5e:	493f      	ldr	r1, [pc, #252]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	628b      	str	r3, [r1, #40]	; 0x28
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	025b      	lsls	r3, r3, #9
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	041b      	lsls	r3, r3, #16
 800ab82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	061b      	lsls	r3, r3, #24
 800ab90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab94:	4931      	ldr	r1, [pc, #196]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab9a:	4b30      	ldr	r3, [pc, #192]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	492d      	ldr	r1, [pc, #180]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800abac:	4b2b      	ldr	r3, [pc, #172]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	f023 0220 	bic.w	r2, r3, #32
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	4928      	ldr	r1, [pc, #160]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800abbe:	4b27      	ldr	r3, [pc, #156]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	4a26      	ldr	r2, [pc, #152]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abc4:	f023 0310 	bic.w	r3, r3, #16
 800abc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800abca:	4b24      	ldr	r3, [pc, #144]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abce:	4b24      	ldr	r3, [pc, #144]	; (800ac60 <RCCEx_PLL2_Config+0x160>)
 800abd0:	4013      	ands	r3, r2
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	69d2      	ldr	r2, [r2, #28]
 800abd6:	00d2      	lsls	r2, r2, #3
 800abd8:	4920      	ldr	r1, [pc, #128]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800abde:	4b1f      	ldr	r3, [pc, #124]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	4a1e      	ldr	r2, [pc, #120]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abe4:	f043 0310 	orr.w	r3, r3, #16
 800abe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d106      	bne.n	800abfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800abf0:	4b1a      	ldr	r3, [pc, #104]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a19      	ldr	r2, [pc, #100]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800abf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abfc:	e00f      	b.n	800ac1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d106      	bne.n	800ac12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ac04:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	4a14      	ldr	r2, [pc, #80]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac10:	e005      	b.n	800ac1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ac12:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	4a11      	ldr	r2, [pc, #68]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac2a:	f7f8 fb05 	bl	8003238 <HAL_GetTick>
 800ac2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac30:	e008      	b.n	800ac44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac32:	f7f8 fb01 	bl	8003238 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d901      	bls.n	800ac44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e006      	b.n	800ac52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <RCCEx_PLL2_Config+0x15c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0f0      	beq.n	800ac32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	ffff0007 	.word	0xffff0007

0800ac64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac72:	4b53      	ldr	r3, [pc, #332]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d101      	bne.n	800ac82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e099      	b.n	800adb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac82:	4b4f      	ldr	r3, [pc, #316]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a4e      	ldr	r2, [pc, #312]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ac88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac8e:	f7f8 fad3 	bl	8003238 <HAL_GetTick>
 800ac92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac94:	e008      	b.n	800aca8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac96:	f7f8 facf 	bl	8003238 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d901      	bls.n	800aca8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e086      	b.n	800adb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aca8:	4b45      	ldr	r3, [pc, #276]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1f0      	bne.n	800ac96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800acb4:	4b42      	ldr	r3, [pc, #264]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	051b      	lsls	r3, r3, #20
 800acc2:	493f      	ldr	r1, [pc, #252]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	628b      	str	r3, [r1, #40]	; 0x28
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	3b01      	subs	r3, #1
 800acce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	025b      	lsls	r3, r3, #9
 800acda:	b29b      	uxth	r3, r3
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	041b      	lsls	r3, r3, #16
 800ace6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	061b      	lsls	r3, r3, #24
 800acf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acf8:	4931      	ldr	r1, [pc, #196]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800acfe:	4b30      	ldr	r3, [pc, #192]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	492d      	ldr	r1, [pc, #180]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	4928      	ldr	r1, [pc, #160]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad22:	4b27      	ldr	r3, [pc, #156]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	4a26      	ldr	r2, [pc, #152]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad2e:	4b24      	ldr	r3, [pc, #144]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad32:	4b24      	ldr	r3, [pc, #144]	; (800adc4 <RCCEx_PLL3_Config+0x160>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	69d2      	ldr	r2, [r2, #28]
 800ad3a:	00d2      	lsls	r2, r2, #3
 800ad3c:	4920      	ldr	r1, [pc, #128]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ad42:	4b1f      	ldr	r3, [pc, #124]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d106      	bne.n	800ad62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ad54:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a19      	ldr	r2, [pc, #100]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ad5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad60:	e00f      	b.n	800ad82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d106      	bne.n	800ad76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ad68:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	4a14      	ldr	r2, [pc, #80]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad74:	e005      	b.n	800ad82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	4a11      	ldr	r2, [pc, #68]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ad82:	4b0f      	ldr	r3, [pc, #60]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a0e      	ldr	r2, [pc, #56]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800ad88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad8e:	f7f8 fa53 	bl	8003238 <HAL_GetTick>
 800ad92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad94:	e008      	b.n	800ada8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ad96:	f7f8 fa4f 	bl	8003238 <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d901      	bls.n	800ada8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e006      	b.n	800adb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ada8:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <RCCEx_PLL3_Config+0x15c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d0f0      	beq.n	800ad96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	58024400 	.word	0x58024400
 800adc4:	ffff0007 	.word	0xffff0007

0800adc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d067      	beq.n	800aeaa <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d106      	bne.n	800adf4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7f7 fc82 	bl	80026f8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	22ca      	movs	r2, #202	; 0xca
 800ae02:	625a      	str	r2, [r3, #36]	; 0x24
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2253      	movs	r2, #83	; 0x53
 800ae0a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f879 	bl	800af04 <RTC_EnterInitMode>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d13b      	bne.n	800ae94 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6899      	ldr	r1, [r3, #8]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	4b23      	ldr	r3, [pc, #140]	; (800aeb4 <HAL_RTC_Init+0xec>)
 800ae28:	400b      	ands	r3, r1
 800ae2a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6899      	ldr	r1, [r3, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	0419      	lsls	r1, r3, #16
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f881 	bl	800af64 <RTC_ExitInitMode>
 800ae62:	4603      	mov	r3, r0
 800ae64:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d113      	bne.n	800ae94 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0203 	bic.w	r2, r2, #3
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69da      	ldr	r2, [r3, #28]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	22ff      	movs	r2, #255	; 0xff
 800ae9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	ff8fffbf 	.word	0xff8fffbf

0800aeb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aece:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800aed0:	f7f8 f9b2 	bl	8003238 <HAL_GetTick>
 800aed4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aed6:	e009      	b.n	800aeec <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aed8:	f7f8 f9ae 	bl	8003238 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aee6:	d901      	bls.n	800aeec <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e007      	b.n	800aefc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0ee      	beq.n	800aed8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d11d      	bne.n	800af5a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f04f 32ff 	mov.w	r2, #4294967295
 800af26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800af28:	f7f8 f986 	bl	8003238 <HAL_GetTick>
 800af2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af2e:	e00d      	b.n	800af4c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800af30:	f7f8 f982 	bl	8003238 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af3e:	d905      	bls.n	800af4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2203      	movs	r2, #3
 800af48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0ea      	beq.n	800af30 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <RTC_ExitInitMode+0x78>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a19      	ldr	r2, [pc, #100]	; (800afdc <RTC_ExitInitMode+0x78>)
 800af76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af7a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <RTC_ExitInitMode+0x78>)
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10c      	bne.n	800afa2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff ff95 	bl	800aeb8 <HAL_RTC_WaitForSynchro>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01e      	beq.n	800afd2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2203      	movs	r2, #3
 800af98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	73fb      	strb	r3, [r7, #15]
 800afa0:	e017      	b.n	800afd2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800afa2:	4b0e      	ldr	r3, [pc, #56]	; (800afdc <RTC_ExitInitMode+0x78>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <RTC_ExitInitMode+0x78>)
 800afa8:	f023 0320 	bic.w	r3, r3, #32
 800afac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff ff82 	bl	800aeb8 <HAL_RTC_WaitForSynchro>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2203      	movs	r2, #3
 800afbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800afc6:	4b05      	ldr	r3, [pc, #20]	; (800afdc <RTC_ExitInitMode+0x78>)
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	4a04      	ldr	r2, [pc, #16]	; (800afdc <RTC_ExitInitMode+0x78>)
 800afcc:	f043 0320 	orr.w	r3, r3, #32
 800afd0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	58004000 	.word	0x58004000

0800afe0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e0eb      	b.n	800b1ce <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a75      	ldr	r2, [pc, #468]	; (800b1d8 <HAL_SPI_Init+0x1f8>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d00f      	beq.n	800b026 <HAL_SPI_Init+0x46>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a74      	ldr	r2, [pc, #464]	; (800b1dc <HAL_SPI_Init+0x1fc>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00a      	beq.n	800b026 <HAL_SPI_Init+0x46>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a72      	ldr	r2, [pc, #456]	; (800b1e0 <HAL_SPI_Init+0x200>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d005      	beq.n	800b026 <HAL_SPI_Init+0x46>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	2b0f      	cmp	r3, #15
 800b020:	d901      	bls.n	800b026 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e0d3      	b.n	800b1ce <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb9e 	bl	800b768 <SPI_GetPacketSize>
 800b02c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a69      	ldr	r2, [pc, #420]	; (800b1d8 <HAL_SPI_Init+0x1f8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00c      	beq.n	800b052 <HAL_SPI_Init+0x72>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a67      	ldr	r2, [pc, #412]	; (800b1dc <HAL_SPI_Init+0x1fc>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d007      	beq.n	800b052 <HAL_SPI_Init+0x72>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a66      	ldr	r2, [pc, #408]	; (800b1e0 <HAL_SPI_Init+0x200>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d002      	beq.n	800b052 <HAL_SPI_Init+0x72>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b08      	cmp	r3, #8
 800b050:	d811      	bhi.n	800b076 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b056:	4a60      	ldr	r2, [pc, #384]	; (800b1d8 <HAL_SPI_Init+0x1f8>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d009      	beq.n	800b070 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a5e      	ldr	r2, [pc, #376]	; (800b1dc <HAL_SPI_Init+0x1fc>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d004      	beq.n	800b070 <HAL_SPI_Init+0x90>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a5d      	ldr	r2, [pc, #372]	; (800b1e0 <HAL_SPI_Init+0x200>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d104      	bne.n	800b07a <HAL_SPI_Init+0x9a>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b10      	cmp	r3, #16
 800b074:	d901      	bls.n	800b07a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e0a9      	b.n	800b1ce <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7f7 fb62 	bl	8002758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2202      	movs	r2, #2
 800b098:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f022 0201 	bic.w	r2, r2, #1
 800b0aa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0b4:	d119      	bne.n	800b0ea <HAL_SPI_Init+0x10a>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0be:	d103      	bne.n	800b0c8 <HAL_SPI_Init+0xe8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10c      	bne.n	800b0ea <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d8:	d107      	bne.n	800b0ea <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	69da      	ldr	r2, [r3, #28]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fc:	ea42 0103 	orr.w	r1, r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68da      	ldr	r2, [r3, #12]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	431a      	orrs	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	431a      	orrs	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	431a      	orrs	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	431a      	orrs	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	431a      	orrs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	431a      	orrs	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	431a      	orrs	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13e:	431a      	orrs	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	431a      	orrs	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b14a:	ea42 0103 	orr.w	r1, r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d113      	bne.n	800b18a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b174:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b188:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f022 0201 	bic.w	r2, r2, #1
 800b198:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	40013000 	.word	0x40013000
 800b1dc:	40003800 	.word	0x40003800
 800b1e0:	40003c00 	.word	0x40003c00

0800b1e4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08a      	sub	sp, #40	; 0x28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b1fc:	6a3a      	ldr	r2, [r7, #32]
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	4013      	ands	r3, r2
 800b202:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b216:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3330      	adds	r3, #48	; 0x30
 800b21e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d113      	bne.n	800b252 <HAL_SPI_IRQHandler+0x6e>
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	f003 0320 	and.w	r3, r3, #32
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10e      	bne.n	800b252 <HAL_SPI_IRQHandler+0x6e>
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	f003 0304 	and.w	r3, r3, #4
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d009      	beq.n	800b252 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	4798      	blx	r3
    handled = 1UL;
 800b24e:	2301      	movs	r3, #1
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10f      	bne.n	800b27c <HAL_SPI_IRQHandler+0x98>
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <HAL_SPI_IRQHandler+0x98>
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d105      	bne.n	800b27c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	4798      	blx	r3
    handled = 1UL;
 800b278:	2301      	movs	r3, #1
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10f      	bne.n	800b2a6 <HAL_SPI_IRQHandler+0xc2>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00a      	beq.n	800b2a6 <HAL_SPI_IRQHandler+0xc2>
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	f003 0304 	and.w	r3, r3, #4
 800b296:	2b00      	cmp	r3, #0
 800b298:	d105      	bne.n	800b2a6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	4798      	blx	r3
    handled = 1UL;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f040 816f 	bne.w	800b58c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 80a0 	beq.w	800b3fa <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0208 	orr.w	r2, r2, #8
 800b2c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	699a      	ldr	r2, [r3, #24]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0210 	orr.w	r2, r2, #16
 800b2d8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2e8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0208 	bic.w	r2, r2, #8
 800b2f8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00f      	beq.n	800b324 <HAL_SPI_IRQHandler+0x140>
 800b304:	7cfb      	ldrb	r3, [r7, #19]
 800b306:	2b04      	cmp	r3, #4
 800b308:	d004      	beq.n	800b314 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d007      	beq.n	800b324 <HAL_SPI_IRQHandler+0x140>
 800b314:	7cfb      	ldrb	r3, [r7, #19]
 800b316:	2b03      	cmp	r3, #3
 800b318:	d059      	beq.n	800b3ce <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d154      	bne.n	800b3ce <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d13d      	bne.n	800b3ae <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800b332:	e036      	b.n	800b3a2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d90b      	bls.n	800b354 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b344:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b346:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b34c:	1d1a      	adds	r2, r3, #4
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	665a      	str	r2, [r3, #100]	; 0x64
 800b352:	e01d      	b.n	800b390 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	2b07      	cmp	r3, #7
 800b35a:	d90b      	bls.n	800b374 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	8812      	ldrh	r2, [r2, #0]
 800b364:	b292      	uxth	r2, r2
 800b366:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b36c:	1c9a      	adds	r2, r3, #2
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	665a      	str	r2, [r3, #100]	; 0x64
 800b372:	e00d      	b.n	800b390 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b380:	7812      	ldrb	r2, [r2, #0]
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b396:	b29b      	uxth	r3, r3
 800b398:	3b01      	subs	r3, #1
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1c2      	bne.n	800b334 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f93a 	bl	800b628 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f90a 	bl	800b5e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800b3cc:	e0e3      	b.n	800b596 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b3ce:	7cfb      	ldrb	r3, [r7, #19]
 800b3d0:	2b05      	cmp	r3, #5
 800b3d2:	d103      	bne.n	800b3dc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f8f9 	bl	800b5cc <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800b3da:	e0d9      	b.n	800b590 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b3dc:	7cfb      	ldrb	r3, [r7, #19]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d103      	bne.n	800b3ea <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f8e8 	bl	800b5b8 <HAL_SPI_RxCpltCallback>
    return;
 800b3e8:	e0d2      	b.n	800b590 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b3ea:	7cfb      	ldrb	r3, [r7, #19]
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	f040 80cf 	bne.w	800b590 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f8d6 	bl	800b5a4 <HAL_SPI_TxCpltCallback>
    return;
 800b3f8:	e0ca      	b.n	800b590 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00d      	beq.n	800b420 <HAL_SPI_IRQHandler+0x23c>
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699a      	ldr	r2, [r3, #24]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b41c:	619a      	str	r2, [r3, #24]

    return;
 800b41e:	e0ba      	b.n	800b596 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 80b5 	beq.w	800b596 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00f      	beq.n	800b456 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b43c:	f043 0204 	orr.w	r2, r3, #4
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	699a      	ldr	r2, [r3, #24]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b454:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00f      	beq.n	800b480 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b466:	f043 0201 	orr.w	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b47e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00f      	beq.n	800b4aa <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b490:	f043 0208 	orr.w	r2, r3, #8
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699a      	ldr	r2, [r3, #24]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00f      	beq.n	800b4d4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0220 	orr.w	r2, r2, #32
 800b4d2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d05a      	beq.n	800b594 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6919      	ldr	r1, [r3, #16]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	4b28      	ldr	r3, [pc, #160]	; (800b59c <HAL_SPI_IRQHandler+0x3b8>)
 800b4fa:	400b      	ands	r3, r1
 800b4fc:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b504:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b508:	d138      	bne.n	800b57c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b518:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d013      	beq.n	800b54a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b526:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <HAL_SPI_IRQHandler+0x3bc>)
 800b528:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa fae6 	bl	8005b00 <HAL_DMA_Abort_IT>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b540:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d020      	beq.n	800b594 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b556:	4a12      	ldr	r2, [pc, #72]	; (800b5a0 <HAL_SPI_IRQHandler+0x3bc>)
 800b558:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fa face 	bl	8005b00 <HAL_DMA_Abort_IT>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d014      	beq.n	800b594 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b57a:	e00b      	b.n	800b594 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f82b 	bl	800b5e0 <HAL_SPI_ErrorCallback>
    return;
 800b58a:	e003      	b.n	800b594 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800b58c:	bf00      	nop
 800b58e:	e002      	b.n	800b596 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b590:	bf00      	nop
 800b592:	e000      	b.n	800b596 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b594:	bf00      	nop
  }
}
 800b596:	3728      	adds	r7, #40	; 0x28
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	fffffc94 	.word	0xfffffc94
 800b5a0:	0800b5f5 	.word	0x0800b5f5

0800b5a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff ffe0 	bl	800b5e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b620:	bf00      	nop
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0208 	orr.w	r2, r2, #8
 800b646:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f042 0210 	orr.w	r2, r2, #16
 800b656:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f022 0201 	bic.w	r2, r2, #1
 800b666:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6919      	ldr	r1, [r3, #16]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b3c      	ldr	r3, [pc, #240]	; (800b764 <SPI_CloseTransfer+0x13c>)
 800b674:	400b      	ands	r3, r1
 800b676:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b686:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b04      	cmp	r3, #4
 800b692:	d014      	beq.n	800b6be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00f      	beq.n	800b6be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	699a      	ldr	r2, [r3, #24]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f042 0220 	orr.w	r2, r2, #32
 800b6bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d014      	beq.n	800b6f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00f      	beq.n	800b6f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6da:	f043 0204 	orr.w	r2, r3, #4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699a      	ldr	r2, [r3, #24]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00f      	beq.n	800b71e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b704:	f043 0201 	orr.w	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	699a      	ldr	r2, [r3, #24]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b71c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00f      	beq.n	800b748 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b72e:	f043 0208 	orr.w	r2, r3, #8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	699a      	ldr	r2, [r3, #24]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b746:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	fffffc90 	.word	0xfffffc90

0800b768 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b774:	095b      	lsrs	r3, r3, #5
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	3307      	adds	r3, #7
 800b786:	08db      	lsrs	r3, r3, #3
 800b788:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b792:	4618      	mov	r0, r3
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e049      	b.n	800b844 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7f7 f859 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4610      	mov	r0, r2
 800b7de:	f000 fcb9 	bl	800c154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d001      	beq.n	800b864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e047      	b.n	800b8f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a23      	ldr	r2, [pc, #140]	; (800b900 <HAL_TIM_Base_Start+0xb4>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01d      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b87e:	d018      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a1f      	ldr	r2, [pc, #124]	; (800b904 <HAL_TIM_Base_Start+0xb8>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d013      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a1e      	ldr	r2, [pc, #120]	; (800b908 <HAL_TIM_Base_Start+0xbc>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d00e      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a1c      	ldr	r2, [pc, #112]	; (800b90c <HAL_TIM_Base_Start+0xc0>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d009      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a1b      	ldr	r2, [pc, #108]	; (800b910 <HAL_TIM_Base_Start+0xc4>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d004      	beq.n	800b8b2 <HAL_TIM_Base_Start+0x66>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a19      	ldr	r2, [pc, #100]	; (800b914 <HAL_TIM_Base_Start+0xc8>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d115      	bne.n	800b8de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	4b17      	ldr	r3, [pc, #92]	; (800b918 <HAL_TIM_Base_Start+0xcc>)
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b06      	cmp	r3, #6
 800b8c2:	d015      	beq.n	800b8f0 <HAL_TIM_Base_Start+0xa4>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ca:	d011      	beq.n	800b8f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f042 0201 	orr.w	r2, r2, #1
 800b8da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8dc:	e008      	b.n	800b8f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f042 0201 	orr.w	r2, r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	e000      	b.n	800b8f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40010000 	.word	0x40010000
 800b904:	40000400 	.word	0x40000400
 800b908:	40000800 	.word	0x40000800
 800b90c:	40000c00 	.word	0x40000c00
 800b910:	40010400 	.word	0x40010400
 800b914:	40001800 	.word	0x40001800
 800b918:	00010007 	.word	0x00010007

0800b91c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d001      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e04f      	b.n	800b9d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0201 	orr.w	r2, r2, #1
 800b94a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a23      	ldr	r2, [pc, #140]	; (800b9e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d01d      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95e:	d018      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d013      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a1e      	ldr	r2, [pc, #120]	; (800b9e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00e      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a1c      	ldr	r2, [pc, #112]	; (800b9ec <HAL_TIM_Base_Start_IT+0xd0>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d009      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a1b      	ldr	r2, [pc, #108]	; (800b9f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d004      	beq.n	800b992 <HAL_TIM_Base_Start_IT+0x76>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a19      	ldr	r2, [pc, #100]	; (800b9f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d115      	bne.n	800b9be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	4b17      	ldr	r3, [pc, #92]	; (800b9f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b99a:	4013      	ands	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b06      	cmp	r3, #6
 800b9a2:	d015      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0xb4>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9aa:	d011      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0201 	orr.w	r2, r2, #1
 800b9ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9bc:	e008      	b.n	800b9d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f042 0201 	orr.w	r2, r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e000      	b.n	800b9d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	40010000 	.word	0x40010000
 800b9e4:	40000400 	.word	0x40000400
 800b9e8:	40000800 	.word	0x40000800
 800b9ec:	40000c00 	.word	0x40000c00
 800b9f0:	40010400 	.word	0x40010400
 800b9f4:	40001800 	.word	0x40001800
 800b9f8:	00010007 	.word	0x00010007

0800b9fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e049      	b.n	800baa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d106      	bne.n	800ba28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f841 	bl	800baaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f000 fb8a 	bl	800c154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d122      	bne.n	800bb1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d11b      	bne.n	800bb1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f06f 0202 	mvn.w	r2, #2
 800baea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	f003 0303 	and.w	r3, r3, #3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fb09 	bl	800c118 <HAL_TIM_IC_CaptureCallback>
 800bb06:	e005      	b.n	800bb14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fafb 	bl	800c104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb0c 	bl	800c12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	f003 0304 	and.w	r3, r3, #4
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d122      	bne.n	800bb6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d11b      	bne.n	800bb6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f06f 0204 	mvn.w	r2, #4
 800bb3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d003      	beq.n	800bb5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fadf 	bl	800c118 <HAL_TIM_IC_CaptureCallback>
 800bb5a:	e005      	b.n	800bb68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fad1 	bl	800c104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fae2 	bl	800c12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	f003 0308 	and.w	r3, r3, #8
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d122      	bne.n	800bbc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f003 0308 	and.w	r3, r3, #8
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	d11b      	bne.n	800bbc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f06f 0208 	mvn.w	r2, #8
 800bb92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2204      	movs	r2, #4
 800bb98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69db      	ldr	r3, [r3, #28]
 800bba0:	f003 0303 	and.w	r3, r3, #3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fab5 	bl	800c118 <HAL_TIM_IC_CaptureCallback>
 800bbae:	e005      	b.n	800bbbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 faa7 	bl	800c104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fab8 	bl	800c12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	f003 0310 	and.w	r3, r3, #16
 800bbcc:	2b10      	cmp	r3, #16
 800bbce:	d122      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f003 0310 	and.w	r3, r3, #16
 800bbda:	2b10      	cmp	r3, #16
 800bbdc:	d11b      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f06f 0210 	mvn.w	r2, #16
 800bbe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2208      	movs	r2, #8
 800bbec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d003      	beq.n	800bc04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fa8b 	bl	800c118 <HAL_TIM_IC_CaptureCallback>
 800bc02:	e005      	b.n	800bc10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fa7d 	bl	800c104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fa8e 	bl	800c12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10e      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d107      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f06f 0201 	mvn.w	r2, #1
 800bc3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7f6 fcbb 	bl	80025b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4c:	2b80      	cmp	r3, #128	; 0x80
 800bc4e:	d10e      	bne.n	800bc6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5a:	2b80      	cmp	r3, #128	; 0x80
 800bc5c:	d107      	bne.n	800bc6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 ff0b 	bl	800ca84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc7c:	d10e      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc88:	2b80      	cmp	r3, #128	; 0x80
 800bc8a:	d107      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fefe 	bl	800ca98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca6:	2b40      	cmp	r3, #64	; 0x40
 800bca8:	d10e      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb4:	2b40      	cmp	r3, #64	; 0x40
 800bcb6:	d107      	bne.n	800bcc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa3c 	bl	800c140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	d10e      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d107      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f06f 0220 	mvn.w	r2, #32
 800bcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 febe 	bl	800ca70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcf4:	bf00      	nop
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bd12:	2302      	movs	r3, #2
 800bd14:	e0fd      	b.n	800bf12 <HAL_TIM_PWM_ConfigChannel+0x216>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b14      	cmp	r3, #20
 800bd22:	f200 80f0 	bhi.w	800bf06 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bd26:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2c:	0800bd81 	.word	0x0800bd81
 800bd30:	0800bf07 	.word	0x0800bf07
 800bd34:	0800bf07 	.word	0x0800bf07
 800bd38:	0800bf07 	.word	0x0800bf07
 800bd3c:	0800bdc1 	.word	0x0800bdc1
 800bd40:	0800bf07 	.word	0x0800bf07
 800bd44:	0800bf07 	.word	0x0800bf07
 800bd48:	0800bf07 	.word	0x0800bf07
 800bd4c:	0800be03 	.word	0x0800be03
 800bd50:	0800bf07 	.word	0x0800bf07
 800bd54:	0800bf07 	.word	0x0800bf07
 800bd58:	0800bf07 	.word	0x0800bf07
 800bd5c:	0800be43 	.word	0x0800be43
 800bd60:	0800bf07 	.word	0x0800bf07
 800bd64:	0800bf07 	.word	0x0800bf07
 800bd68:	0800bf07 	.word	0x0800bf07
 800bd6c:	0800be85 	.word	0x0800be85
 800bd70:	0800bf07 	.word	0x0800bf07
 800bd74:	0800bf07 	.word	0x0800bf07
 800bd78:	0800bf07 	.word	0x0800bf07
 800bd7c:	0800bec5 	.word	0x0800bec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fa7e 	bl	800c288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699a      	ldr	r2, [r3, #24]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f042 0208 	orr.w	r2, r2, #8
 800bd9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0204 	bic.w	r2, r2, #4
 800bdaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6999      	ldr	r1, [r3, #24]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	619a      	str	r2, [r3, #24]
      break;
 800bdbe:	e0a3      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 faee 	bl	800c3a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699a      	ldr	r2, [r3, #24]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6999      	ldr	r1, [r3, #24]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	021a      	lsls	r2, r3, #8
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	619a      	str	r2, [r3, #24]
      break;
 800be00:	e082      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fb57 	bl	800c4bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69da      	ldr	r2, [r3, #28]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f042 0208 	orr.w	r2, r2, #8
 800be1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69da      	ldr	r2, [r3, #28]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 0204 	bic.w	r2, r2, #4
 800be2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69d9      	ldr	r1, [r3, #28]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691a      	ldr	r2, [r3, #16]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	430a      	orrs	r2, r1
 800be3e:	61da      	str	r2, [r3, #28]
      break;
 800be40:	e062      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 fbbd 	bl	800c5c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	69da      	ldr	r2, [r3, #28]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69da      	ldr	r2, [r3, #28]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69d9      	ldr	r1, [r3, #28]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	021a      	lsls	r2, r3, #8
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	61da      	str	r2, [r3, #28]
      break;
 800be82:	e041      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fc04 	bl	800c698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f042 0208 	orr.w	r2, r2, #8
 800be9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0204 	bic.w	r2, r2, #4
 800beae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	691a      	ldr	r2, [r3, #16]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bec2:	e021      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fc46 	bl	800c75c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	021a      	lsls	r2, r3, #8
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	430a      	orrs	r2, r1
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf04:	e000      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bf06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop

0800bf1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d101      	bne.n	800bf34 <HAL_TIM_ConfigClockSource+0x18>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e0db      	b.n	800c0ec <HAL_TIM_ConfigClockSource+0x1d0>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4b69      	ldr	r3, [pc, #420]	; (800c0f4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bf50:	4013      	ands	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a63      	ldr	r2, [pc, #396]	; (800c0f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	f000 80a9 	beq.w	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf70:	4a61      	ldr	r2, [pc, #388]	; (800c0f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	f200 80ae 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf78:	4a60      	ldr	r2, [pc, #384]	; (800c0fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	f000 80a1 	beq.w	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf80:	4a5e      	ldr	r2, [pc, #376]	; (800c0fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	f200 80a6 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf88:	4a5d      	ldr	r2, [pc, #372]	; (800c100 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	f000 8099 	beq.w	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf90:	4a5b      	ldr	r2, [pc, #364]	; (800c100 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	f200 809e 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf9c:	f000 8091 	beq.w	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bfa0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bfa4:	f200 8096 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfac:	f000 8089 	beq.w	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bfb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfb4:	f200 808e 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfbc:	d03e      	beq.n	800c03c <HAL_TIM_ConfigClockSource+0x120>
 800bfbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc2:	f200 8087 	bhi.w	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfca:	f000 8085 	beq.w	800c0d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd2:	d87f      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfd4:	2b70      	cmp	r3, #112	; 0x70
 800bfd6:	d01a      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0xf2>
 800bfd8:	2b70      	cmp	r3, #112	; 0x70
 800bfda:	d87b      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfdc:	2b60      	cmp	r3, #96	; 0x60
 800bfde:	d050      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x166>
 800bfe0:	2b60      	cmp	r3, #96	; 0x60
 800bfe2:	d877      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfe4:	2b50      	cmp	r3, #80	; 0x50
 800bfe6:	d03c      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x146>
 800bfe8:	2b50      	cmp	r3, #80	; 0x50
 800bfea:	d873      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfec:	2b40      	cmp	r3, #64	; 0x40
 800bfee:	d058      	beq.n	800c0a2 <HAL_TIM_ConfigClockSource+0x186>
 800bff0:	2b40      	cmp	r3, #64	; 0x40
 800bff2:	d86f      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bff4:	2b30      	cmp	r3, #48	; 0x30
 800bff6:	d064      	beq.n	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800bff8:	2b30      	cmp	r3, #48	; 0x30
 800bffa:	d86b      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	d060      	beq.n	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800c000:	2b20      	cmp	r3, #32
 800c002:	d867      	bhi.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
 800c004:	2b00      	cmp	r3, #0
 800c006:	d05c      	beq.n	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
 800c008:	2b10      	cmp	r3, #16
 800c00a:	d05a      	beq.n	800c0c2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c00c:	e062      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	6899      	ldr	r1, [r3, #8]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f000 fc7f 	bl	800c920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c030:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	609a      	str	r2, [r3, #8]
      break;
 800c03a:	e04e      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	6899      	ldr	r1, [r3, #8]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	f000 fc68 	bl	800c920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c05e:	609a      	str	r2, [r3, #8]
      break;
 800c060:	e03b      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	6859      	ldr	r1, [r3, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	461a      	mov	r2, r3
 800c070:	f000 fbd8 	bl	800c824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2150      	movs	r1, #80	; 0x50
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fc32 	bl	800c8e4 <TIM_ITRx_SetConfig>
      break;
 800c080:	e02b      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6859      	ldr	r1, [r3, #4]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	461a      	mov	r2, r3
 800c090:	f000 fbf7 	bl	800c882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2160      	movs	r1, #96	; 0x60
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fc22 	bl	800c8e4 <TIM_ITRx_SetConfig>
      break;
 800c0a0:	e01b      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	6859      	ldr	r1, [r3, #4]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f000 fbb8 	bl	800c824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2140      	movs	r1, #64	; 0x40
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fc12 	bl	800c8e4 <TIM_ITRx_SetConfig>
      break;
 800c0c0:	e00b      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	f000 fc09 	bl	800c8e4 <TIM_ITRx_SetConfig>
        break;
 800c0d2:	e002      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c0d4:	bf00      	nop
 800c0d6:	e000      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c0d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	ffceff88 	.word	0xffceff88
 800c0f8:	00100040 	.word	0x00100040
 800c0fc:	00100030 	.word	0x00100030
 800c100:	00100020 	.word	0x00100020

0800c104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a40      	ldr	r2, [pc, #256]	; (800c268 <TIM_Base_SetConfig+0x114>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d013      	beq.n	800c194 <TIM_Base_SetConfig+0x40>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c172:	d00f      	beq.n	800c194 <TIM_Base_SetConfig+0x40>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a3d      	ldr	r2, [pc, #244]	; (800c26c <TIM_Base_SetConfig+0x118>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d00b      	beq.n	800c194 <TIM_Base_SetConfig+0x40>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a3c      	ldr	r2, [pc, #240]	; (800c270 <TIM_Base_SetConfig+0x11c>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d007      	beq.n	800c194 <TIM_Base_SetConfig+0x40>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a3b      	ldr	r2, [pc, #236]	; (800c274 <TIM_Base_SetConfig+0x120>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d003      	beq.n	800c194 <TIM_Base_SetConfig+0x40>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a3a      	ldr	r2, [pc, #232]	; (800c278 <TIM_Base_SetConfig+0x124>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d108      	bne.n	800c1a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c19a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a2f      	ldr	r2, [pc, #188]	; (800c268 <TIM_Base_SetConfig+0x114>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d01f      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1b4:	d01b      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2c      	ldr	r2, [pc, #176]	; (800c26c <TIM_Base_SetConfig+0x118>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d017      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a2b      	ldr	r2, [pc, #172]	; (800c270 <TIM_Base_SetConfig+0x11c>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d013      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2a      	ldr	r2, [pc, #168]	; (800c274 <TIM_Base_SetConfig+0x120>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d00f      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a29      	ldr	r2, [pc, #164]	; (800c278 <TIM_Base_SetConfig+0x124>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00b      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a28      	ldr	r2, [pc, #160]	; (800c27c <TIM_Base_SetConfig+0x128>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d007      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a27      	ldr	r2, [pc, #156]	; (800c280 <TIM_Base_SetConfig+0x12c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d003      	beq.n	800c1ee <TIM_Base_SetConfig+0x9a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a26      	ldr	r2, [pc, #152]	; (800c284 <TIM_Base_SetConfig+0x130>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d108      	bne.n	800c200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a10      	ldr	r2, [pc, #64]	; (800c268 <TIM_Base_SetConfig+0x114>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d00f      	beq.n	800c24c <TIM_Base_SetConfig+0xf8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a12      	ldr	r2, [pc, #72]	; (800c278 <TIM_Base_SetConfig+0x124>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00b      	beq.n	800c24c <TIM_Base_SetConfig+0xf8>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a11      	ldr	r2, [pc, #68]	; (800c27c <TIM_Base_SetConfig+0x128>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d007      	beq.n	800c24c <TIM_Base_SetConfig+0xf8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a10      	ldr	r2, [pc, #64]	; (800c280 <TIM_Base_SetConfig+0x12c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d003      	beq.n	800c24c <TIM_Base_SetConfig+0xf8>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a0f      	ldr	r2, [pc, #60]	; (800c284 <TIM_Base_SetConfig+0x130>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d103      	bne.n	800c254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	691a      	ldr	r2, [r3, #16]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	615a      	str	r2, [r3, #20]
}
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40010000 	.word	0x40010000
 800c26c:	40000400 	.word	0x40000400
 800c270:	40000800 	.word	0x40000800
 800c274:	40000c00 	.word	0x40000c00
 800c278:	40010400 	.word	0x40010400
 800c27c:	40014000 	.word	0x40014000
 800c280:	40014400 	.word	0x40014400
 800c284:	40014800 	.word	0x40014800

0800c288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	f023 0201 	bic.w	r2, r3, #1
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	4b37      	ldr	r3, [pc, #220]	; (800c390 <TIM_OC1_SetConfig+0x108>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f023 0303 	bic.w	r3, r3, #3
 800c2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f023 0302 	bic.w	r3, r3, #2
 800c2d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a2d      	ldr	r2, [pc, #180]	; (800c394 <TIM_OC1_SetConfig+0x10c>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d00f      	beq.n	800c304 <TIM_OC1_SetConfig+0x7c>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a2c      	ldr	r2, [pc, #176]	; (800c398 <TIM_OC1_SetConfig+0x110>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d00b      	beq.n	800c304 <TIM_OC1_SetConfig+0x7c>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a2b      	ldr	r2, [pc, #172]	; (800c39c <TIM_OC1_SetConfig+0x114>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d007      	beq.n	800c304 <TIM_OC1_SetConfig+0x7c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a2a      	ldr	r2, [pc, #168]	; (800c3a0 <TIM_OC1_SetConfig+0x118>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d003      	beq.n	800c304 <TIM_OC1_SetConfig+0x7c>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a29      	ldr	r2, [pc, #164]	; (800c3a4 <TIM_OC1_SetConfig+0x11c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d10c      	bne.n	800c31e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f023 0308 	bic.w	r3, r3, #8
 800c30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	4313      	orrs	r3, r2
 800c314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f023 0304 	bic.w	r3, r3, #4
 800c31c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a1c      	ldr	r2, [pc, #112]	; (800c394 <TIM_OC1_SetConfig+0x10c>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00f      	beq.n	800c346 <TIM_OC1_SetConfig+0xbe>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a1b      	ldr	r2, [pc, #108]	; (800c398 <TIM_OC1_SetConfig+0x110>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00b      	beq.n	800c346 <TIM_OC1_SetConfig+0xbe>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a1a      	ldr	r2, [pc, #104]	; (800c39c <TIM_OC1_SetConfig+0x114>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d007      	beq.n	800c346 <TIM_OC1_SetConfig+0xbe>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a19      	ldr	r2, [pc, #100]	; (800c3a0 <TIM_OC1_SetConfig+0x118>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d003      	beq.n	800c346 <TIM_OC1_SetConfig+0xbe>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a18      	ldr	r2, [pc, #96]	; (800c3a4 <TIM_OC1_SetConfig+0x11c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d111      	bne.n	800c36a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c34c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	4313      	orrs	r3, r2
 800c368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	621a      	str	r2, [r3, #32]
}
 800c384:	bf00      	nop
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	fffeff8f 	.word	0xfffeff8f
 800c394:	40010000 	.word	0x40010000
 800c398:	40010400 	.word	0x40010400
 800c39c:	40014000 	.word	0x40014000
 800c3a0:	40014400 	.word	0x40014400
 800c3a4:	40014800 	.word	0x40014800

0800c3a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	f023 0210 	bic.w	r2, r3, #16
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4b34      	ldr	r3, [pc, #208]	; (800c4a4 <TIM_OC2_SetConfig+0xfc>)
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	021b      	lsls	r3, r3, #8
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	f023 0320 	bic.w	r3, r3, #32
 800c3f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a29      	ldr	r2, [pc, #164]	; (800c4a8 <TIM_OC2_SetConfig+0x100>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d003      	beq.n	800c410 <TIM_OC2_SetConfig+0x68>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a28      	ldr	r2, [pc, #160]	; (800c4ac <TIM_OC2_SetConfig+0x104>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10d      	bne.n	800c42c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	4313      	orrs	r3, r2
 800c422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c42a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a1e      	ldr	r2, [pc, #120]	; (800c4a8 <TIM_OC2_SetConfig+0x100>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00f      	beq.n	800c454 <TIM_OC2_SetConfig+0xac>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a1d      	ldr	r2, [pc, #116]	; (800c4ac <TIM_OC2_SetConfig+0x104>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_OC2_SetConfig+0xac>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a1c      	ldr	r2, [pc, #112]	; (800c4b0 <TIM_OC2_SetConfig+0x108>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_OC2_SetConfig+0xac>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a1b      	ldr	r2, [pc, #108]	; (800c4b4 <TIM_OC2_SetConfig+0x10c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_OC2_SetConfig+0xac>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a1a      	ldr	r2, [pc, #104]	; (800c4b8 <TIM_OC2_SetConfig+0x110>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d113      	bne.n	800c47c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c45a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	693a      	ldr	r2, [r7, #16]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	621a      	str	r2, [r3, #32]
}
 800c496:	bf00      	nop
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	feff8fff 	.word	0xfeff8fff
 800c4a8:	40010000 	.word	0x40010000
 800c4ac:	40010400 	.word	0x40010400
 800c4b0:	40014000 	.word	0x40014000
 800c4b4:	40014400 	.word	0x40014400
 800c4b8:	40014800 	.word	0x40014800

0800c4bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f023 0303 	bic.w	r3, r3, #3
 800c4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	021b      	lsls	r3, r3, #8
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	4313      	orrs	r3, r2
 800c510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a27      	ldr	r2, [pc, #156]	; (800c5b4 <TIM_OC3_SetConfig+0xf8>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d003      	beq.n	800c522 <TIM_OC3_SetConfig+0x66>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a26      	ldr	r2, [pc, #152]	; (800c5b8 <TIM_OC3_SetConfig+0xfc>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d10d      	bne.n	800c53e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	021b      	lsls	r3, r3, #8
 800c530:	697a      	ldr	r2, [r7, #20]
 800c532:	4313      	orrs	r3, r2
 800c534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c53c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a1c      	ldr	r2, [pc, #112]	; (800c5b4 <TIM_OC3_SetConfig+0xf8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d00f      	beq.n	800c566 <TIM_OC3_SetConfig+0xaa>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a1b      	ldr	r2, [pc, #108]	; (800c5b8 <TIM_OC3_SetConfig+0xfc>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00b      	beq.n	800c566 <TIM_OC3_SetConfig+0xaa>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a1a      	ldr	r2, [pc, #104]	; (800c5bc <TIM_OC3_SetConfig+0x100>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d007      	beq.n	800c566 <TIM_OC3_SetConfig+0xaa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a19      	ldr	r2, [pc, #100]	; (800c5c0 <TIM_OC3_SetConfig+0x104>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d003      	beq.n	800c566 <TIM_OC3_SetConfig+0xaa>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a18      	ldr	r2, [pc, #96]	; (800c5c4 <TIM_OC3_SetConfig+0x108>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d113      	bne.n	800c58e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c56c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	011b      	lsls	r3, r3, #4
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	4313      	orrs	r3, r2
 800c580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	699b      	ldr	r3, [r3, #24]
 800c586:	011b      	lsls	r3, r3, #4
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	621a      	str	r2, [r3, #32]
}
 800c5a8:	bf00      	nop
 800c5aa:	371c      	adds	r7, #28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	40010000 	.word	0x40010000
 800c5b8:	40010400 	.word	0x40010400
 800c5bc:	40014000 	.word	0x40014000
 800c5c0:	40014400 	.word	0x40014400
 800c5c4:	40014800 	.word	0x40014800

0800c5c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	021b      	lsls	r3, r3, #8
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4313      	orrs	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	031b      	lsls	r3, r3, #12
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a18      	ldr	r2, [pc, #96]	; (800c684 <TIM_OC4_SetConfig+0xbc>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00f      	beq.n	800c648 <TIM_OC4_SetConfig+0x80>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a17      	ldr	r2, [pc, #92]	; (800c688 <TIM_OC4_SetConfig+0xc0>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d00b      	beq.n	800c648 <TIM_OC4_SetConfig+0x80>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a16      	ldr	r2, [pc, #88]	; (800c68c <TIM_OC4_SetConfig+0xc4>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d007      	beq.n	800c648 <TIM_OC4_SetConfig+0x80>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a15      	ldr	r2, [pc, #84]	; (800c690 <TIM_OC4_SetConfig+0xc8>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d003      	beq.n	800c648 <TIM_OC4_SetConfig+0x80>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a14      	ldr	r2, [pc, #80]	; (800c694 <TIM_OC4_SetConfig+0xcc>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d109      	bne.n	800c65c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c64e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	019b      	lsls	r3, r3, #6
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	621a      	str	r2, [r3, #32]
}
 800c676:	bf00      	nop
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	40010000 	.word	0x40010000
 800c688:	40010400 	.word	0x40010400
 800c68c:	40014000 	.word	0x40014000
 800c690:	40014400 	.word	0x40014400
 800c694:	40014800 	.word	0x40014800

0800c698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c698:	b480      	push	{r7}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c6d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	041b      	lsls	r3, r3, #16
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a17      	ldr	r2, [pc, #92]	; (800c748 <TIM_OC5_SetConfig+0xb0>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00f      	beq.n	800c70e <TIM_OC5_SetConfig+0x76>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a16      	ldr	r2, [pc, #88]	; (800c74c <TIM_OC5_SetConfig+0xb4>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d00b      	beq.n	800c70e <TIM_OC5_SetConfig+0x76>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a15      	ldr	r2, [pc, #84]	; (800c750 <TIM_OC5_SetConfig+0xb8>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d007      	beq.n	800c70e <TIM_OC5_SetConfig+0x76>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a14      	ldr	r2, [pc, #80]	; (800c754 <TIM_OC5_SetConfig+0xbc>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d003      	beq.n	800c70e <TIM_OC5_SetConfig+0x76>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a13      	ldr	r2, [pc, #76]	; (800c758 <TIM_OC5_SetConfig+0xc0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d109      	bne.n	800c722 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	021b      	lsls	r3, r3, #8
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4313      	orrs	r3, r2
 800c720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	621a      	str	r2, [r3, #32]
}
 800c73c:	bf00      	nop
 800c73e:	371c      	adds	r7, #28
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	40010000 	.word	0x40010000
 800c74c:	40010400 	.word	0x40010400
 800c750:	40014000 	.word	0x40014000
 800c754:	40014400 	.word	0x40014400
 800c758:	40014800 	.word	0x40014800

0800c75c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c78a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4313      	orrs	r3, r2
 800c796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c79e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	051b      	lsls	r3, r3, #20
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a18      	ldr	r2, [pc, #96]	; (800c810 <TIM_OC6_SetConfig+0xb4>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00f      	beq.n	800c7d4 <TIM_OC6_SetConfig+0x78>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a17      	ldr	r2, [pc, #92]	; (800c814 <TIM_OC6_SetConfig+0xb8>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d00b      	beq.n	800c7d4 <TIM_OC6_SetConfig+0x78>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a16      	ldr	r2, [pc, #88]	; (800c818 <TIM_OC6_SetConfig+0xbc>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d007      	beq.n	800c7d4 <TIM_OC6_SetConfig+0x78>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a15      	ldr	r2, [pc, #84]	; (800c81c <TIM_OC6_SetConfig+0xc0>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d003      	beq.n	800c7d4 <TIM_OC6_SetConfig+0x78>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a14      	ldr	r2, [pc, #80]	; (800c820 <TIM_OC6_SetConfig+0xc4>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d109      	bne.n	800c7e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	029b      	lsls	r3, r3, #10
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	621a      	str	r2, [r3, #32]
}
 800c802:	bf00      	nop
 800c804:	371c      	adds	r7, #28
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	40010000 	.word	0x40010000
 800c814:	40010400 	.word	0x40010400
 800c818:	40014000 	.word	0x40014000
 800c81c:	40014400 	.word	0x40014400
 800c820:	40014800 	.word	0x40014800

0800c824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	f023 0201 	bic.w	r2, r3, #1
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c84e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	011b      	lsls	r3, r3, #4
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	4313      	orrs	r3, r2
 800c858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f023 030a 	bic.w	r3, r3, #10
 800c860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c882:	b480      	push	{r7}
 800c884:	b087      	sub	sp, #28
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	f023 0210 	bic.w	r2, r3, #16
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	031b      	lsls	r3, r3, #12
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	621a      	str	r2, [r3, #32]
}
 800c8d6:	bf00      	nop
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
	...

0800c8e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4b09      	ldr	r3, [pc, #36]	; (800c91c <TIM_ITRx_SetConfig+0x38>)
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	4313      	orrs	r3, r2
 800c902:	f043 0307 	orr.w	r3, r3, #7
 800c906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	609a      	str	r2, [r3, #8]
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	ffcfff8f 	.word	0xffcfff8f

0800c920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c93a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	021a      	lsls	r2, r3, #8
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	431a      	orrs	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4313      	orrs	r3, r2
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	609a      	str	r2, [r3, #8]
}
 800c954:	bf00      	nop
 800c956:	371c      	adds	r7, #28
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c974:	2302      	movs	r3, #2
 800c976:	e068      	b.n	800ca4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2202      	movs	r2, #2
 800c984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a2e      	ldr	r2, [pc, #184]	; (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d004      	beq.n	800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a2d      	ldr	r2, [pc, #180]	; (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d108      	bne.n	800c9be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d01d      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9ea:	d018      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a1b      	ldr	r2, [pc, #108]	; (800ca60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d013      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00e      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a18      	ldr	r2, [pc, #96]	; (800ca68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d009      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d004      	beq.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a14      	ldr	r2, [pc, #80]	; (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d10c      	bne.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	40010000 	.word	0x40010000
 800ca5c:	40010400 	.word	0x40010400
 800ca60:	40000400 	.word	0x40000400
 800ca64:	40000800 	.word	0x40000800
 800ca68:	40000c00 	.word	0x40000c00
 800ca6c:	40001800 	.word	0x40001800

0800ca70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e042      	b.n	800cb44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7f5 ff85 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2224      	movs	r2, #36	; 0x24
 800cada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f022 0201 	bic.w	r2, r2, #1
 800caec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fd40 	bl	800d574 <UART_SetConfig>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d101      	bne.n	800cafe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e022      	b.n	800cb44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fa94 	bl	800e034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	689a      	ldr	r2, [r3, #8]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f042 0201 	orr.w	r2, r2, #1
 800cb3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 fb1b 	bl	800e178 <UART_CheckIdleState>
 800cb42:	4603      	mov	r3, r0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	; 0x28
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb62:	2b20      	cmp	r3, #32
 800cb64:	f040 8083 	bne.w	800cc6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <HAL_UART_Transmit+0x28>
 800cb6e:	88fb      	ldrh	r3, [r7, #6]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e07b      	b.n	800cc70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <HAL_UART_Transmit+0x3a>
 800cb82:	2302      	movs	r3, #2
 800cb84:	e074      	b.n	800cc70 <HAL_UART_Transmit+0x124>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2221      	movs	r2, #33	; 0x21
 800cb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb9e:	f7f6 fb4b 	bl	8003238 <HAL_GetTick>
 800cba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	88fa      	ldrh	r2, [r7, #6]
 800cba8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	88fa      	ldrh	r2, [r7, #6]
 800cbb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbbc:	d108      	bne.n	800cbd0 <HAL_UART_Transmit+0x84>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d104      	bne.n	800cbd0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	61bb      	str	r3, [r7, #24]
 800cbce:	e003      	b.n	800cbd8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cbe0:	e02c      	b.n	800cc3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2180      	movs	r1, #128	; 0x80
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f001 fb0e 	bl	800e20e <UART_WaitOnFlagUntilTimeout>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e039      	b.n	800cc70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10b      	bne.n	800cc1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	3302      	adds	r3, #2
 800cc16:	61bb      	str	r3, [r7, #24]
 800cc18:	e007      	b.n	800cc2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	781a      	ldrb	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	3301      	adds	r3, #1
 800cc28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	3b01      	subs	r3, #1
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1cc      	bne.n	800cbe2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2140      	movs	r1, #64	; 0x40
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f001 fadb 	bl	800e20e <UART_WaitOnFlagUntilTimeout>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e006      	b.n	800cc70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2220      	movs	r2, #32
 800cc66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e000      	b.n	800cc70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cc6e:	2302      	movs	r3, #2
  }
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3720      	adds	r7, #32
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08a      	sub	sp, #40	; 0x28
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	4613      	mov	r3, r2
 800cc86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	f040 80c0 	bne.w	800ce14 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <HAL_UART_Receive+0x28>
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e0b8      	b.n	800ce16 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d101      	bne.n	800ccb2 <HAL_UART_Receive+0x3a>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e0b1      	b.n	800ce16 <HAL_UART_Receive+0x19e>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2222      	movs	r2, #34	; 0x22
 800ccc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccd0:	f7f6 fab2 	bl	8003238 <HAL_GetTick>
 800ccd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	88fa      	ldrh	r2, [r7, #6]
 800ccda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	88fa      	ldrh	r2, [r7, #6]
 800cce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccee:	d10e      	bne.n	800cd0e <HAL_UART_Receive+0x96>
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d105      	bne.n	800cd04 <HAL_UART_Receive+0x8c>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ccfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd02:	e02d      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	22ff      	movs	r2, #255	; 0xff
 800cd08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd0c:	e028      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10d      	bne.n	800cd32 <HAL_UART_Receive+0xba>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d104      	bne.n	800cd28 <HAL_UART_Receive+0xb0>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	22ff      	movs	r2, #255	; 0xff
 800cd22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd26:	e01b      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	227f      	movs	r2, #127	; 0x7f
 800cd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd30:	e016      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd3a:	d10d      	bne.n	800cd58 <HAL_UART_Receive+0xe0>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d104      	bne.n	800cd4e <HAL_UART_Receive+0xd6>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	227f      	movs	r2, #127	; 0x7f
 800cd48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd4c:	e008      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	223f      	movs	r2, #63	; 0x3f
 800cd52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd56:	e003      	b.n	800cd60 <HAL_UART_Receive+0xe8>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd70:	d108      	bne.n	800cd84 <HAL_UART_Receive+0x10c>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d104      	bne.n	800cd84 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	61bb      	str	r3, [r7, #24]
 800cd82:	e003      	b.n	800cd8c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cd94:	e032      	b.n	800cdfc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2120      	movs	r1, #32
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f001 fa34 	bl	800e20e <UART_WaitOnFlagUntilTimeout>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e032      	b.n	800ce16 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10c      	bne.n	800cdd0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	8a7b      	ldrh	r3, [r7, #18]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	3302      	adds	r3, #2
 800cdcc:	61bb      	str	r3, [r7, #24]
 800cdce:	e00c      	b.n	800cdea <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	8a7b      	ldrh	r3, [r7, #18]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	4013      	ands	r3, r2
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	3301      	adds	r3, #1
 800cde8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1c6      	bne.n	800cd96 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2220      	movs	r2, #32
 800ce0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	e000      	b.n	800ce16 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ce14:	2302      	movs	r3, #2
  }
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce34:	2b20      	cmp	r3, #32
 800ce36:	d168      	bne.n	800cf0a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <HAL_UART_Transmit_DMA+0x24>
 800ce3e:	88fb      	ldrh	r3, [r7, #6]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ce44:	2301      	movs	r3, #1
 800ce46:	e061      	b.n	800cf0c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d101      	bne.n	800ce56 <HAL_UART_Transmit_DMA+0x36>
 800ce52:	2302      	movs	r3, #2
 800ce54:	e05a      	b.n	800cf0c <HAL_UART_Transmit_DMA+0xec>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	88fa      	ldrh	r2, [r7, #6]
 800ce68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	88fa      	ldrh	r2, [r7, #6]
 800ce70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2221      	movs	r2, #33	; 0x21
 800ce80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02c      	beq.n	800cee6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce90:	4a20      	ldr	r2, [pc, #128]	; (800cf14 <HAL_UART_Transmit_DMA+0xf4>)
 800ce92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce98:	4a1f      	ldr	r2, [pc, #124]	; (800cf18 <HAL_UART_Transmit_DMA+0xf8>)
 800ce9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cea0:	4a1e      	ldr	r2, [pc, #120]	; (800cf1c <HAL_UART_Transmit_DMA+0xfc>)
 800cea2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cea8:	2200      	movs	r2, #0
 800ceaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3328      	adds	r3, #40	; 0x28
 800cebc:	461a      	mov	r2, r3
 800cebe:	88fb      	ldrh	r3, [r7, #6]
 800cec0:	f7f8 f896 	bl	8004ff0 <HAL_DMA_Start_IT>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00d      	beq.n	800cee6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2210      	movs	r2, #16
 800cece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2220      	movs	r2, #32
 800cede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e012      	b.n	800cf0c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2240      	movs	r2, #64	; 0x40
 800ceec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf04:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	e000      	b.n	800cf0c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800cf0a:	2302      	movs	r3, #2
  }
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	0800e48d 	.word	0x0800e48d
 800cf18:	0800e4dd 	.word	0x0800e4dd
 800cf1c:	0800e5c7 	.word	0x0800e5c7

0800cf20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf34:	2b20      	cmp	r3, #32
 800cf36:	d131      	bne.n	800cf9c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d002      	beq.n	800cf44 <HAL_UART_Receive_DMA+0x24>
 800cf3e:	88fb      	ldrh	r3, [r7, #6]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e02a      	b.n	800cf9e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d101      	bne.n	800cf56 <HAL_UART_Receive_DMA+0x36>
 800cf52:	2302      	movs	r3, #2
 800cf54:	e023      	b.n	800cf9e <HAL_UART_Receive_DMA+0x7e>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a0f      	ldr	r2, [pc, #60]	; (800cfa8 <HAL_UART_Receive_DMA+0x88>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d00e      	beq.n	800cf8c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d007      	beq.n	800cf8c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cf8a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f001 f9bc 	bl	800e310 <UART_Start_Receive_DMA>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	e000      	b.n	800cf9e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800cf9c:	2302      	movs	r3, #2
  }
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	58000c00 	.word	0x58000c00

0800cfac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	69db      	ldr	r3, [r3, #28]
 800cfba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	f640 030f 	movw	r3, #2063	; 0x80f
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d118      	bne.n	800d00e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	f003 0320 	and.w	r3, r3, #32
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	f003 0320 	and.w	r3, r3, #32
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d104      	bne.n	800cffa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d009      	beq.n	800d00e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 8282 	beq.w	800d508 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	4798      	blx	r3
      }
      return;
 800d00c:	e27c      	b.n	800d508 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 80ef 	beq.w	800d1f4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	4b73      	ldr	r3, [pc, #460]	; (800d1e8 <HAL_UART_IRQHandler+0x23c>)
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d105      	bne.n	800d02c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d020:	69ba      	ldr	r2, [r7, #24]
 800d022:	4b72      	ldr	r3, [pc, #456]	; (800d1ec <HAL_UART_IRQHandler+0x240>)
 800d024:	4013      	ands	r3, r2
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80e4 	beq.w	800d1f4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d010      	beq.n	800d058 <HAL_UART_IRQHandler+0xac>
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2201      	movs	r2, #1
 800d046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d04e:	f043 0201 	orr.w	r2, r3, #1
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d010      	beq.n	800d084 <HAL_UART_IRQHandler+0xd8>
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00b      	beq.n	800d084 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2202      	movs	r2, #2
 800d072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d07a:	f043 0204 	orr.w	r2, r3, #4
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	f003 0304 	and.w	r3, r3, #4
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d010      	beq.n	800d0b0 <HAL_UART_IRQHandler+0x104>
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2204      	movs	r2, #4
 800d09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a6:	f043 0202 	orr.w	r2, r3, #2
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	f003 0308 	and.w	r3, r3, #8
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d015      	beq.n	800d0e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	f003 0320 	and.w	r3, r3, #32
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	4b48      	ldr	r3, [pc, #288]	; (800d1e8 <HAL_UART_IRQHandler+0x23c>)
 800d0c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00b      	beq.n	800d0e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2208      	movs	r2, #8
 800d0d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0dc:	f043 0208 	orr.w	r2, r3, #8
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d011      	beq.n	800d114 <HAL_UART_IRQHandler+0x168>
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00c      	beq.n	800d114 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d10a:	f043 0220 	orr.w	r2, r3, #32
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f000 81f6 	beq.w	800d50c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b00      	cmp	r3, #0
 800d128:	d011      	beq.n	800d14e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d104      	bne.n	800d13e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d154:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d160:	2b40      	cmp	r3, #64	; 0x40
 800d162:	d004      	beq.n	800d16e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d031      	beq.n	800d1d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 f95a 	bl	800e428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17e:	2b40      	cmp	r3, #64	; 0x40
 800d180:	d123      	bne.n	800d1ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d190:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d196:	2b00      	cmp	r3, #0
 800d198:	d013      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d19e:	4a14      	ldr	r2, [pc, #80]	; (800d1f0 <HAL_UART_IRQHandler+0x244>)
 800d1a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f8 fcaa 	bl	8005b00 <HAL_DMA_Abort_IT>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d017      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d1bc:	4610      	mov	r0, r2
 800d1be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c0:	e00f      	b.n	800d1e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f9c0 	bl	800d548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c8:	e00b      	b.n	800d1e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f9bc 	bl	800d548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1d0:	e007      	b.n	800d1e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f9b8 	bl	800d548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d1e0:	e194      	b.n	800d50c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e2:	bf00      	nop
    return;
 800d1e4:	e192      	b.n	800d50c <HAL_UART_IRQHandler+0x560>
 800d1e6:	bf00      	nop
 800d1e8:	10000001 	.word	0x10000001
 800d1ec:	04000120 	.word	0x04000120
 800d1f0:	0800e647 	.word	0x0800e647

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	f040 810f 	bne.w	800d41c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	f003 0310 	and.w	r3, r3, #16
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8109 	beq.w	800d41c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	f003 0310 	and.w	r3, r3, #16
 800d210:	2b00      	cmp	r3, #0
 800d212:	f000 8103 	beq.w	800d41c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2210      	movs	r2, #16
 800d21c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d228:	2b40      	cmp	r3, #64	; 0x40
 800d22a:	f040 80bb 	bne.w	800d3a4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a96      	ldr	r2, [pc, #600]	; (800d490 <HAL_UART_IRQHandler+0x4e4>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d059      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a94      	ldr	r2, [pc, #592]	; (800d494 <HAL_UART_IRQHandler+0x4e8>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d053      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a92      	ldr	r2, [pc, #584]	; (800d498 <HAL_UART_IRQHandler+0x4ec>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d04d      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a90      	ldr	r2, [pc, #576]	; (800d49c <HAL_UART_IRQHandler+0x4f0>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d047      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a8e      	ldr	r2, [pc, #568]	; (800d4a0 <HAL_UART_IRQHandler+0x4f4>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d041      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a8c      	ldr	r2, [pc, #560]	; (800d4a4 <HAL_UART_IRQHandler+0x4f8>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d03b      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a8a      	ldr	r2, [pc, #552]	; (800d4a8 <HAL_UART_IRQHandler+0x4fc>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d035      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a88      	ldr	r2, [pc, #544]	; (800d4ac <HAL_UART_IRQHandler+0x500>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d02f      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a86      	ldr	r2, [pc, #536]	; (800d4b0 <HAL_UART_IRQHandler+0x504>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d029      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a84      	ldr	r2, [pc, #528]	; (800d4b4 <HAL_UART_IRQHandler+0x508>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d023      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a82      	ldr	r2, [pc, #520]	; (800d4b8 <HAL_UART_IRQHandler+0x50c>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d01d      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a80      	ldr	r2, [pc, #512]	; (800d4bc <HAL_UART_IRQHandler+0x510>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d017      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a7e      	ldr	r2, [pc, #504]	; (800d4c0 <HAL_UART_IRQHandler+0x514>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d011      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a7c      	ldr	r2, [pc, #496]	; (800d4c4 <HAL_UART_IRQHandler+0x518>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d00b      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a7a      	ldr	r2, [pc, #488]	; (800d4c8 <HAL_UART_IRQHandler+0x51c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d005      	beq.n	800d2ee <HAL_UART_IRQHandler+0x342>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a78      	ldr	r2, [pc, #480]	; (800d4cc <HAL_UART_IRQHandler+0x520>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d105      	bne.n	800d2fa <HAL_UART_IRQHandler+0x34e>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	e004      	b.n	800d304 <HAL_UART_IRQHandler+0x358>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	b29b      	uxth	r3, r3
 800d304:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800d306:	893b      	ldrh	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 8101 	beq.w	800d510 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d314:	893a      	ldrh	r2, [r7, #8]
 800d316:	429a      	cmp	r2, r3
 800d318:	f080 80fa 	bcs.w	800d510 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	893a      	ldrh	r2, [r7, #8]
 800d320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d32e:	d02b      	beq.n	800d388 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d33e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	689a      	ldr	r2, [r3, #8]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0201 	bic.w	r2, r2, #1
 800d34e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d35e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2220      	movs	r2, #32
 800d364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f022 0210 	bic.w	r2, r2, #16
 800d37c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d382:	4618      	mov	r0, r3
 800d384:	f7f8 f89e 	bl	80054c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d394:	b29b      	uxth	r3, r3
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f8dd 	bl	800d55c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3a2:	e0b5      	b.n	800d510 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f000 80a8 	beq.w	800d514 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800d3c4:	897b      	ldrh	r3, [r7, #10]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 80a4 	beq.w	800d514 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d3da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6899      	ldr	r1, [r3, #8]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	4b3a      	ldr	r3, [pc, #232]	; (800d4d0 <HAL_UART_IRQHandler+0x524>)
 800d3e8:	400b      	ands	r3, r1
 800d3ea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2220      	movs	r2, #32
 800d3f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0210 	bic.w	r2, r2, #16
 800d40e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d410:	897b      	ldrh	r3, [r7, #10]
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 f8a1 	bl	800d55c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d41a:	e07b      	b.n	800d514 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00d      	beq.n	800d442 <HAL_UART_IRQHandler+0x496>
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d008      	beq.n	800d442 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f001 f933 	bl	800e6a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d440:	e06b      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d012      	beq.n	800d472 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d452:	2b00      	cmp	r3, #0
 800d454:	d104      	bne.n	800d460 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d008      	beq.n	800d472 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d464:	2b00      	cmp	r3, #0
 800d466:	d057      	beq.n	800d518 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
    }
    return;
 800d470:	e052      	b.n	800d518 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d02b      	beq.n	800d4d4 <HAL_UART_IRQHandler+0x528>
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d026      	beq.n	800d4d4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 f8f3 	bl	800e672 <UART_EndTransmit_IT>
    return;
 800d48c:	e045      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
 800d48e:	bf00      	nop
 800d490:	40020010 	.word	0x40020010
 800d494:	40020028 	.word	0x40020028
 800d498:	40020040 	.word	0x40020040
 800d49c:	40020058 	.word	0x40020058
 800d4a0:	40020070 	.word	0x40020070
 800d4a4:	40020088 	.word	0x40020088
 800d4a8:	400200a0 	.word	0x400200a0
 800d4ac:	400200b8 	.word	0x400200b8
 800d4b0:	40020410 	.word	0x40020410
 800d4b4:	40020428 	.word	0x40020428
 800d4b8:	40020440 	.word	0x40020440
 800d4bc:	40020458 	.word	0x40020458
 800d4c0:	40020470 	.word	0x40020470
 800d4c4:	40020488 	.word	0x40020488
 800d4c8:	400204a0 	.word	0x400204a0
 800d4cc:	400204b8 	.word	0x400204b8
 800d4d0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d008      	beq.n	800d4f0 <HAL_UART_IRQHandler+0x544>
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d003      	beq.n	800d4f0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f001 f8f0 	bl	800e6ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4ee:	e014      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00f      	beq.n	800d51a <HAL_UART_IRQHandler+0x56e>
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da0c      	bge.n	800d51a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f001 f8da 	bl	800e6ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d506:	e008      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
      return;
 800d508:	bf00      	nop
 800d50a:	e006      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
    return;
 800d50c:	bf00      	nop
 800d50e:	e004      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
      return;
 800d510:	bf00      	nop
 800d512:	e002      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
      return;
 800d514:	bf00      	nop
 800d516:	e000      	b.n	800d51a <HAL_UART_IRQHandler+0x56e>
    return;
 800d518:	bf00      	nop
  }
}
 800d51a:	3720      	adds	r7, #32
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d574:	b5b0      	push	{r4, r5, r7, lr}
 800d576:	b08e      	sub	sp, #56	; 0x38
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	689a      	ldr	r2, [r3, #8]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	431a      	orrs	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	431a      	orrs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	4313      	orrs	r3, r2
 800d598:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	4bbf      	ldr	r3, [pc, #764]	; (800d8a0 <UART_SetConfig+0x32c>)
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	6812      	ldr	r2, [r2, #0]
 800d5a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68da      	ldr	r2, [r3, #12]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4ab5      	ldr	r2, [pc, #724]	; (800d8a4 <UART_SetConfig+0x330>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d004      	beq.n	800d5de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689a      	ldr	r2, [r3, #8]
 800d5e4:	4bb0      	ldr	r3, [pc, #704]	; (800d8a8 <UART_SetConfig+0x334>)
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	6812      	ldr	r2, [r2, #0]
 800d5ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5ee:	430b      	orrs	r3, r1
 800d5f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	f023 010f 	bic.w	r1, r3, #15
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	430a      	orrs	r2, r1
 800d606:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4aa7      	ldr	r2, [pc, #668]	; (800d8ac <UART_SetConfig+0x338>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d176      	bne.n	800d700 <UART_SetConfig+0x18c>
 800d612:	4ba7      	ldr	r3, [pc, #668]	; (800d8b0 <UART_SetConfig+0x33c>)
 800d614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d61a:	2b28      	cmp	r3, #40	; 0x28
 800d61c:	d86c      	bhi.n	800d6f8 <UART_SetConfig+0x184>
 800d61e:	a201      	add	r2, pc, #4	; (adr r2, 800d624 <UART_SetConfig+0xb0>)
 800d620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d624:	0800d6c9 	.word	0x0800d6c9
 800d628:	0800d6f9 	.word	0x0800d6f9
 800d62c:	0800d6f9 	.word	0x0800d6f9
 800d630:	0800d6f9 	.word	0x0800d6f9
 800d634:	0800d6f9 	.word	0x0800d6f9
 800d638:	0800d6f9 	.word	0x0800d6f9
 800d63c:	0800d6f9 	.word	0x0800d6f9
 800d640:	0800d6f9 	.word	0x0800d6f9
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6f9 	.word	0x0800d6f9
 800d64c:	0800d6f9 	.word	0x0800d6f9
 800d650:	0800d6f9 	.word	0x0800d6f9
 800d654:	0800d6f9 	.word	0x0800d6f9
 800d658:	0800d6f9 	.word	0x0800d6f9
 800d65c:	0800d6f9 	.word	0x0800d6f9
 800d660:	0800d6f9 	.word	0x0800d6f9
 800d664:	0800d6d9 	.word	0x0800d6d9
 800d668:	0800d6f9 	.word	0x0800d6f9
 800d66c:	0800d6f9 	.word	0x0800d6f9
 800d670:	0800d6f9 	.word	0x0800d6f9
 800d674:	0800d6f9 	.word	0x0800d6f9
 800d678:	0800d6f9 	.word	0x0800d6f9
 800d67c:	0800d6f9 	.word	0x0800d6f9
 800d680:	0800d6f9 	.word	0x0800d6f9
 800d684:	0800d6e1 	.word	0x0800d6e1
 800d688:	0800d6f9 	.word	0x0800d6f9
 800d68c:	0800d6f9 	.word	0x0800d6f9
 800d690:	0800d6f9 	.word	0x0800d6f9
 800d694:	0800d6f9 	.word	0x0800d6f9
 800d698:	0800d6f9 	.word	0x0800d6f9
 800d69c:	0800d6f9 	.word	0x0800d6f9
 800d6a0:	0800d6f9 	.word	0x0800d6f9
 800d6a4:	0800d6e9 	.word	0x0800d6e9
 800d6a8:	0800d6f9 	.word	0x0800d6f9
 800d6ac:	0800d6f9 	.word	0x0800d6f9
 800d6b0:	0800d6f9 	.word	0x0800d6f9
 800d6b4:	0800d6f9 	.word	0x0800d6f9
 800d6b8:	0800d6f9 	.word	0x0800d6f9
 800d6bc:	0800d6f9 	.word	0x0800d6f9
 800d6c0:	0800d6f9 	.word	0x0800d6f9
 800d6c4:	0800d6f1 	.word	0x0800d6f1
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ce:	e222      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6d6:	e21e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6d8:	2308      	movs	r3, #8
 800d6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6de:	e21a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6e0:	2310      	movs	r3, #16
 800d6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6e6:	e216      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6e8:	2320      	movs	r3, #32
 800d6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ee:	e212      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6f0:	2340      	movs	r3, #64	; 0x40
 800d6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6f6:	e20e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6fe:	e20a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a6b      	ldr	r2, [pc, #428]	; (800d8b4 <UART_SetConfig+0x340>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d130      	bne.n	800d76c <UART_SetConfig+0x1f8>
 800d70a:	4b69      	ldr	r3, [pc, #420]	; (800d8b0 <UART_SetConfig+0x33c>)
 800d70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70e:	f003 0307 	and.w	r3, r3, #7
 800d712:	2b05      	cmp	r3, #5
 800d714:	d826      	bhi.n	800d764 <UART_SetConfig+0x1f0>
 800d716:	a201      	add	r2, pc, #4	; (adr r2, 800d71c <UART_SetConfig+0x1a8>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d735 	.word	0x0800d735
 800d720:	0800d73d 	.word	0x0800d73d
 800d724:	0800d745 	.word	0x0800d745
 800d728:	0800d74d 	.word	0x0800d74d
 800d72c:	0800d755 	.word	0x0800d755
 800d730:	0800d75d 	.word	0x0800d75d
 800d734:	2300      	movs	r3, #0
 800d736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d73a:	e1ec      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d73c:	2304      	movs	r3, #4
 800d73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d742:	e1e8      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d744:	2308      	movs	r3, #8
 800d746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d74a:	e1e4      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d74c:	2310      	movs	r3, #16
 800d74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d752:	e1e0      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d754:	2320      	movs	r3, #32
 800d756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d75a:	e1dc      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d75c:	2340      	movs	r3, #64	; 0x40
 800d75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d762:	e1d8      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d764:	2380      	movs	r3, #128	; 0x80
 800d766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d76a:	e1d4      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a51      	ldr	r2, [pc, #324]	; (800d8b8 <UART_SetConfig+0x344>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d130      	bne.n	800d7d8 <UART_SetConfig+0x264>
 800d776:	4b4e      	ldr	r3, [pc, #312]	; (800d8b0 <UART_SetConfig+0x33c>)
 800d778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	2b05      	cmp	r3, #5
 800d780:	d826      	bhi.n	800d7d0 <UART_SetConfig+0x25c>
 800d782:	a201      	add	r2, pc, #4	; (adr r2, 800d788 <UART_SetConfig+0x214>)
 800d784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d788:	0800d7a1 	.word	0x0800d7a1
 800d78c:	0800d7a9 	.word	0x0800d7a9
 800d790:	0800d7b1 	.word	0x0800d7b1
 800d794:	0800d7b9 	.word	0x0800d7b9
 800d798:	0800d7c1 	.word	0x0800d7c1
 800d79c:	0800d7c9 	.word	0x0800d7c9
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7a6:	e1b6      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7a8:	2304      	movs	r3, #4
 800d7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ae:	e1b2      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7b0:	2308      	movs	r3, #8
 800d7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7b6:	e1ae      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7b8:	2310      	movs	r3, #16
 800d7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7be:	e1aa      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7c0:	2320      	movs	r3, #32
 800d7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7c6:	e1a6      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7c8:	2340      	movs	r3, #64	; 0x40
 800d7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ce:	e1a2      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7d0:	2380      	movs	r3, #128	; 0x80
 800d7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7d6:	e19e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a37      	ldr	r2, [pc, #220]	; (800d8bc <UART_SetConfig+0x348>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d130      	bne.n	800d844 <UART_SetConfig+0x2d0>
 800d7e2:	4b33      	ldr	r3, [pc, #204]	; (800d8b0 <UART_SetConfig+0x33c>)
 800d7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	2b05      	cmp	r3, #5
 800d7ec:	d826      	bhi.n	800d83c <UART_SetConfig+0x2c8>
 800d7ee:	a201      	add	r2, pc, #4	; (adr r2, 800d7f4 <UART_SetConfig+0x280>)
 800d7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f4:	0800d80d 	.word	0x0800d80d
 800d7f8:	0800d815 	.word	0x0800d815
 800d7fc:	0800d81d 	.word	0x0800d81d
 800d800:	0800d825 	.word	0x0800d825
 800d804:	0800d82d 	.word	0x0800d82d
 800d808:	0800d835 	.word	0x0800d835
 800d80c:	2300      	movs	r3, #0
 800d80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d812:	e180      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d814:	2304      	movs	r3, #4
 800d816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d81a:	e17c      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d81c:	2308      	movs	r3, #8
 800d81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d822:	e178      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d824:	2310      	movs	r3, #16
 800d826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d82a:	e174      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d82c:	2320      	movs	r3, #32
 800d82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d832:	e170      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d834:	2340      	movs	r3, #64	; 0x40
 800d836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d83a:	e16c      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d83c:	2380      	movs	r3, #128	; 0x80
 800d83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d842:	e168      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a1d      	ldr	r2, [pc, #116]	; (800d8c0 <UART_SetConfig+0x34c>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d142      	bne.n	800d8d4 <UART_SetConfig+0x360>
 800d84e:	4b18      	ldr	r3, [pc, #96]	; (800d8b0 <UART_SetConfig+0x33c>)
 800d850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d852:	f003 0307 	and.w	r3, r3, #7
 800d856:	2b05      	cmp	r3, #5
 800d858:	d838      	bhi.n	800d8cc <UART_SetConfig+0x358>
 800d85a:	a201      	add	r2, pc, #4	; (adr r2, 800d860 <UART_SetConfig+0x2ec>)
 800d85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d860:	0800d879 	.word	0x0800d879
 800d864:	0800d881 	.word	0x0800d881
 800d868:	0800d889 	.word	0x0800d889
 800d86c:	0800d891 	.word	0x0800d891
 800d870:	0800d899 	.word	0x0800d899
 800d874:	0800d8c5 	.word	0x0800d8c5
 800d878:	2300      	movs	r3, #0
 800d87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d87e:	e14a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d880:	2304      	movs	r3, #4
 800d882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d886:	e146      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d888:	2308      	movs	r3, #8
 800d88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d88e:	e142      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d890:	2310      	movs	r3, #16
 800d892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d896:	e13e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d898:	2320      	movs	r3, #32
 800d89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d89e:	e13a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d8a0:	cfff69f3 	.word	0xcfff69f3
 800d8a4:	58000c00 	.word	0x58000c00
 800d8a8:	11fff4ff 	.word	0x11fff4ff
 800d8ac:	40011000 	.word	0x40011000
 800d8b0:	58024400 	.word	0x58024400
 800d8b4:	40004400 	.word	0x40004400
 800d8b8:	40004800 	.word	0x40004800
 800d8bc:	40004c00 	.word	0x40004c00
 800d8c0:	40005000 	.word	0x40005000
 800d8c4:	2340      	movs	r3, #64	; 0x40
 800d8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ca:	e124      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d8cc:	2380      	movs	r3, #128	; 0x80
 800d8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8d2:	e120      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4acc      	ldr	r2, [pc, #816]	; (800dc0c <UART_SetConfig+0x698>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d176      	bne.n	800d9cc <UART_SetConfig+0x458>
 800d8de:	4bcc      	ldr	r3, [pc, #816]	; (800dc10 <UART_SetConfig+0x69c>)
 800d8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8e6:	2b28      	cmp	r3, #40	; 0x28
 800d8e8:	d86c      	bhi.n	800d9c4 <UART_SetConfig+0x450>
 800d8ea:	a201      	add	r2, pc, #4	; (adr r2, 800d8f0 <UART_SetConfig+0x37c>)
 800d8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f0:	0800d995 	.word	0x0800d995
 800d8f4:	0800d9c5 	.word	0x0800d9c5
 800d8f8:	0800d9c5 	.word	0x0800d9c5
 800d8fc:	0800d9c5 	.word	0x0800d9c5
 800d900:	0800d9c5 	.word	0x0800d9c5
 800d904:	0800d9c5 	.word	0x0800d9c5
 800d908:	0800d9c5 	.word	0x0800d9c5
 800d90c:	0800d9c5 	.word	0x0800d9c5
 800d910:	0800d99d 	.word	0x0800d99d
 800d914:	0800d9c5 	.word	0x0800d9c5
 800d918:	0800d9c5 	.word	0x0800d9c5
 800d91c:	0800d9c5 	.word	0x0800d9c5
 800d920:	0800d9c5 	.word	0x0800d9c5
 800d924:	0800d9c5 	.word	0x0800d9c5
 800d928:	0800d9c5 	.word	0x0800d9c5
 800d92c:	0800d9c5 	.word	0x0800d9c5
 800d930:	0800d9a5 	.word	0x0800d9a5
 800d934:	0800d9c5 	.word	0x0800d9c5
 800d938:	0800d9c5 	.word	0x0800d9c5
 800d93c:	0800d9c5 	.word	0x0800d9c5
 800d940:	0800d9c5 	.word	0x0800d9c5
 800d944:	0800d9c5 	.word	0x0800d9c5
 800d948:	0800d9c5 	.word	0x0800d9c5
 800d94c:	0800d9c5 	.word	0x0800d9c5
 800d950:	0800d9ad 	.word	0x0800d9ad
 800d954:	0800d9c5 	.word	0x0800d9c5
 800d958:	0800d9c5 	.word	0x0800d9c5
 800d95c:	0800d9c5 	.word	0x0800d9c5
 800d960:	0800d9c5 	.word	0x0800d9c5
 800d964:	0800d9c5 	.word	0x0800d9c5
 800d968:	0800d9c5 	.word	0x0800d9c5
 800d96c:	0800d9c5 	.word	0x0800d9c5
 800d970:	0800d9b5 	.word	0x0800d9b5
 800d974:	0800d9c5 	.word	0x0800d9c5
 800d978:	0800d9c5 	.word	0x0800d9c5
 800d97c:	0800d9c5 	.word	0x0800d9c5
 800d980:	0800d9c5 	.word	0x0800d9c5
 800d984:	0800d9c5 	.word	0x0800d9c5
 800d988:	0800d9c5 	.word	0x0800d9c5
 800d98c:	0800d9c5 	.word	0x0800d9c5
 800d990:	0800d9bd 	.word	0x0800d9bd
 800d994:	2301      	movs	r3, #1
 800d996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d99a:	e0bc      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d99c:	2304      	movs	r3, #4
 800d99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9a2:	e0b8      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9a4:	2308      	movs	r3, #8
 800d9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9aa:	e0b4      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9ac:	2310      	movs	r3, #16
 800d9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9b2:	e0b0      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9b4:	2320      	movs	r3, #32
 800d9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ba:	e0ac      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9bc:	2340      	movs	r3, #64	; 0x40
 800d9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9c2:	e0a8      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9c4:	2380      	movs	r3, #128	; 0x80
 800d9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ca:	e0a4      	b.n	800db16 <UART_SetConfig+0x5a2>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a90      	ldr	r2, [pc, #576]	; (800dc14 <UART_SetConfig+0x6a0>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d130      	bne.n	800da38 <UART_SetConfig+0x4c4>
 800d9d6:	4b8e      	ldr	r3, [pc, #568]	; (800dc10 <UART_SetConfig+0x69c>)
 800d9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9da:	f003 0307 	and.w	r3, r3, #7
 800d9de:	2b05      	cmp	r3, #5
 800d9e0:	d826      	bhi.n	800da30 <UART_SetConfig+0x4bc>
 800d9e2:	a201      	add	r2, pc, #4	; (adr r2, 800d9e8 <UART_SetConfig+0x474>)
 800d9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e8:	0800da01 	.word	0x0800da01
 800d9ec:	0800da09 	.word	0x0800da09
 800d9f0:	0800da11 	.word	0x0800da11
 800d9f4:	0800da19 	.word	0x0800da19
 800d9f8:	0800da21 	.word	0x0800da21
 800d9fc:	0800da29 	.word	0x0800da29
 800da00:	2300      	movs	r3, #0
 800da02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da06:	e086      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da08:	2304      	movs	r3, #4
 800da0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da0e:	e082      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da10:	2308      	movs	r3, #8
 800da12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da16:	e07e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da18:	2310      	movs	r3, #16
 800da1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da1e:	e07a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da20:	2320      	movs	r3, #32
 800da22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da26:	e076      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da28:	2340      	movs	r3, #64	; 0x40
 800da2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da2e:	e072      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da30:	2380      	movs	r3, #128	; 0x80
 800da32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da36:	e06e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a76      	ldr	r2, [pc, #472]	; (800dc18 <UART_SetConfig+0x6a4>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d130      	bne.n	800daa4 <UART_SetConfig+0x530>
 800da42:	4b73      	ldr	r3, [pc, #460]	; (800dc10 <UART_SetConfig+0x69c>)
 800da44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da46:	f003 0307 	and.w	r3, r3, #7
 800da4a:	2b05      	cmp	r3, #5
 800da4c:	d826      	bhi.n	800da9c <UART_SetConfig+0x528>
 800da4e:	a201      	add	r2, pc, #4	; (adr r2, 800da54 <UART_SetConfig+0x4e0>)
 800da50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da54:	0800da6d 	.word	0x0800da6d
 800da58:	0800da75 	.word	0x0800da75
 800da5c:	0800da7d 	.word	0x0800da7d
 800da60:	0800da85 	.word	0x0800da85
 800da64:	0800da8d 	.word	0x0800da8d
 800da68:	0800da95 	.word	0x0800da95
 800da6c:	2300      	movs	r3, #0
 800da6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da72:	e050      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da74:	2304      	movs	r3, #4
 800da76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da7a:	e04c      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da7c:	2308      	movs	r3, #8
 800da7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da82:	e048      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da84:	2310      	movs	r3, #16
 800da86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da8a:	e044      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da8c:	2320      	movs	r3, #32
 800da8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da92:	e040      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da94:	2340      	movs	r3, #64	; 0x40
 800da96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da9a:	e03c      	b.n	800db16 <UART_SetConfig+0x5a2>
 800da9c:	2380      	movs	r3, #128	; 0x80
 800da9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daa2:	e038      	b.n	800db16 <UART_SetConfig+0x5a2>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a5c      	ldr	r2, [pc, #368]	; (800dc1c <UART_SetConfig+0x6a8>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d130      	bne.n	800db10 <UART_SetConfig+0x59c>
 800daae:	4b58      	ldr	r3, [pc, #352]	; (800dc10 <UART_SetConfig+0x69c>)
 800dab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dab2:	f003 0307 	and.w	r3, r3, #7
 800dab6:	2b05      	cmp	r3, #5
 800dab8:	d826      	bhi.n	800db08 <UART_SetConfig+0x594>
 800daba:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <UART_SetConfig+0x54c>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800dad9 	.word	0x0800dad9
 800dac4:	0800dae1 	.word	0x0800dae1
 800dac8:	0800dae9 	.word	0x0800dae9
 800dacc:	0800daf1 	.word	0x0800daf1
 800dad0:	0800daf9 	.word	0x0800daf9
 800dad4:	0800db01 	.word	0x0800db01
 800dad8:	2302      	movs	r3, #2
 800dada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dade:	e01a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800dae0:	2304      	movs	r3, #4
 800dae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dae6:	e016      	b.n	800db16 <UART_SetConfig+0x5a2>
 800dae8:	2308      	movs	r3, #8
 800daea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daee:	e012      	b.n	800db16 <UART_SetConfig+0x5a2>
 800daf0:	2310      	movs	r3, #16
 800daf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daf6:	e00e      	b.n	800db16 <UART_SetConfig+0x5a2>
 800daf8:	2320      	movs	r3, #32
 800dafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dafe:	e00a      	b.n	800db16 <UART_SetConfig+0x5a2>
 800db00:	2340      	movs	r3, #64	; 0x40
 800db02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db06:	e006      	b.n	800db16 <UART_SetConfig+0x5a2>
 800db08:	2380      	movs	r3, #128	; 0x80
 800db0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db0e:	e002      	b.n	800db16 <UART_SetConfig+0x5a2>
 800db10:	2380      	movs	r3, #128	; 0x80
 800db12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a40      	ldr	r2, [pc, #256]	; (800dc1c <UART_SetConfig+0x6a8>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	f040 80ef 	bne.w	800dd00 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db26:	2b20      	cmp	r3, #32
 800db28:	dc46      	bgt.n	800dbb8 <UART_SetConfig+0x644>
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	f2c0 8081 	blt.w	800dc32 <UART_SetConfig+0x6be>
 800db30:	3b02      	subs	r3, #2
 800db32:	2b1e      	cmp	r3, #30
 800db34:	d87d      	bhi.n	800dc32 <UART_SetConfig+0x6be>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x5c8>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800dbbf 	.word	0x0800dbbf
 800db40:	0800dc33 	.word	0x0800dc33
 800db44:	0800dbc7 	.word	0x0800dbc7
 800db48:	0800dc33 	.word	0x0800dc33
 800db4c:	0800dc33 	.word	0x0800dc33
 800db50:	0800dc33 	.word	0x0800dc33
 800db54:	0800dbd7 	.word	0x0800dbd7
 800db58:	0800dc33 	.word	0x0800dc33
 800db5c:	0800dc33 	.word	0x0800dc33
 800db60:	0800dc33 	.word	0x0800dc33
 800db64:	0800dc33 	.word	0x0800dc33
 800db68:	0800dc33 	.word	0x0800dc33
 800db6c:	0800dc33 	.word	0x0800dc33
 800db70:	0800dc33 	.word	0x0800dc33
 800db74:	0800dbe7 	.word	0x0800dbe7
 800db78:	0800dc33 	.word	0x0800dc33
 800db7c:	0800dc33 	.word	0x0800dc33
 800db80:	0800dc33 	.word	0x0800dc33
 800db84:	0800dc33 	.word	0x0800dc33
 800db88:	0800dc33 	.word	0x0800dc33
 800db8c:	0800dc33 	.word	0x0800dc33
 800db90:	0800dc33 	.word	0x0800dc33
 800db94:	0800dc33 	.word	0x0800dc33
 800db98:	0800dc33 	.word	0x0800dc33
 800db9c:	0800dc33 	.word	0x0800dc33
 800dba0:	0800dc33 	.word	0x0800dc33
 800dba4:	0800dc33 	.word	0x0800dc33
 800dba8:	0800dc33 	.word	0x0800dc33
 800dbac:	0800dc33 	.word	0x0800dc33
 800dbb0:	0800dc33 	.word	0x0800dc33
 800dbb4:	0800dc25 	.word	0x0800dc25
 800dbb8:	2b40      	cmp	r3, #64	; 0x40
 800dbba:	d036      	beq.n	800dc2a <UART_SetConfig+0x6b6>
 800dbbc:	e039      	b.n	800dc32 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbbe:	f7fc fb8f 	bl	800a2e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800dbc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dbc4:	e03b      	b.n	800dc3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbc6:	f107 0314 	add.w	r3, r7, #20
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc fb9e 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbd4:	e033      	b.n	800dc3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fc fcea 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbe4:	e02b      	b.n	800dc3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbe6:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <UART_SetConfig+0x69c>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d009      	beq.n	800dc06 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbf2:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <UART_SetConfig+0x69c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	08db      	lsrs	r3, r3, #3
 800dbf8:	f003 0303 	and.w	r3, r3, #3
 800dbfc:	4a08      	ldr	r2, [pc, #32]	; (800dc20 <UART_SetConfig+0x6ac>)
 800dbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc04:	e01b      	b.n	800dc3e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800dc06:	4b06      	ldr	r3, [pc, #24]	; (800dc20 <UART_SetConfig+0x6ac>)
 800dc08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc0a:	e018      	b.n	800dc3e <UART_SetConfig+0x6ca>
 800dc0c:	40011400 	.word	0x40011400
 800dc10:	58024400 	.word	0x58024400
 800dc14:	40007800 	.word	0x40007800
 800dc18:	40007c00 	.word	0x40007c00
 800dc1c:	58000c00 	.word	0x58000c00
 800dc20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc24:	4bc4      	ldr	r3, [pc, #784]	; (800df38 <UART_SetConfig+0x9c4>)
 800dc26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc28:	e009      	b.n	800dc3e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc30:	e005      	b.n	800dc3e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800dc32:	2300      	movs	r3, #0
 800dc34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dc3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f000 81da 	beq.w	800dffa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	4abc      	ldr	r2, [pc, #752]	; (800df3c <UART_SetConfig+0x9c8>)
 800dc4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc50:	461a      	mov	r2, r3
 800dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc54:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc58:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	4413      	add	r3, r2
 800dc64:	6a3a      	ldr	r2, [r7, #32]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d305      	bcc.n	800dc76 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc70:	6a3a      	ldr	r2, [r7, #32]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d903      	bls.n	800dc7e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dc7c:	e1bd      	b.n	800dffa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	4618      	mov	r0, r3
 800dc82:	f04f 0100 	mov.w	r1, #0
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8a:	4aac      	ldr	r2, [pc, #688]	; (800df3c <UART_SetConfig+0x9c8>)
 800dc8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	f04f 0300 	mov.w	r3, #0
 800dc96:	f7f2 fb7b 	bl	8000390 <__aeabi_uldivmod>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4610      	mov	r0, r2
 800dca0:	4619      	mov	r1, r3
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	020b      	lsls	r3, r1, #8
 800dcac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcb0:	0202      	lsls	r2, r0, #8
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	6849      	ldr	r1, [r1, #4]
 800dcb6:	0849      	lsrs	r1, r1, #1
 800dcb8:	4608      	mov	r0, r1
 800dcba:	f04f 0100 	mov.w	r1, #0
 800dcbe:	1814      	adds	r4, r2, r0
 800dcc0:	eb43 0501 	adc.w	r5, r3, r1
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	f04f 0300 	mov.w	r3, #0
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 fb5d 	bl	8000390 <__aeabi_uldivmod>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4613      	mov	r3, r2
 800dcdc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dce4:	d308      	bcc.n	800dcf8 <UART_SetConfig+0x784>
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcec:	d204      	bcs.n	800dcf8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcf4:	60da      	str	r2, [r3, #12]
 800dcf6:	e180      	b.n	800dffa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dcfe:	e17c      	b.n	800dffa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd08:	f040 80bf 	bne.w	800de8a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800dd0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd10:	2b20      	cmp	r3, #32
 800dd12:	dc49      	bgt.n	800dda8 <UART_SetConfig+0x834>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	db7c      	blt.n	800de12 <UART_SetConfig+0x89e>
 800dd18:	2b20      	cmp	r3, #32
 800dd1a:	d87a      	bhi.n	800de12 <UART_SetConfig+0x89e>
 800dd1c:	a201      	add	r2, pc, #4	; (adr r2, 800dd24 <UART_SetConfig+0x7b0>)
 800dd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd22:	bf00      	nop
 800dd24:	0800ddaf 	.word	0x0800ddaf
 800dd28:	0800ddb7 	.word	0x0800ddb7
 800dd2c:	0800de13 	.word	0x0800de13
 800dd30:	0800de13 	.word	0x0800de13
 800dd34:	0800ddbf 	.word	0x0800ddbf
 800dd38:	0800de13 	.word	0x0800de13
 800dd3c:	0800de13 	.word	0x0800de13
 800dd40:	0800de13 	.word	0x0800de13
 800dd44:	0800ddcf 	.word	0x0800ddcf
 800dd48:	0800de13 	.word	0x0800de13
 800dd4c:	0800de13 	.word	0x0800de13
 800dd50:	0800de13 	.word	0x0800de13
 800dd54:	0800de13 	.word	0x0800de13
 800dd58:	0800de13 	.word	0x0800de13
 800dd5c:	0800de13 	.word	0x0800de13
 800dd60:	0800de13 	.word	0x0800de13
 800dd64:	0800dddf 	.word	0x0800dddf
 800dd68:	0800de13 	.word	0x0800de13
 800dd6c:	0800de13 	.word	0x0800de13
 800dd70:	0800de13 	.word	0x0800de13
 800dd74:	0800de13 	.word	0x0800de13
 800dd78:	0800de13 	.word	0x0800de13
 800dd7c:	0800de13 	.word	0x0800de13
 800dd80:	0800de13 	.word	0x0800de13
 800dd84:	0800de13 	.word	0x0800de13
 800dd88:	0800de13 	.word	0x0800de13
 800dd8c:	0800de13 	.word	0x0800de13
 800dd90:	0800de13 	.word	0x0800de13
 800dd94:	0800de13 	.word	0x0800de13
 800dd98:	0800de13 	.word	0x0800de13
 800dd9c:	0800de13 	.word	0x0800de13
 800dda0:	0800de13 	.word	0x0800de13
 800dda4:	0800de05 	.word	0x0800de05
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	d02e      	beq.n	800de0a <UART_SetConfig+0x896>
 800ddac:	e031      	b.n	800de12 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddae:	f7fa fe17 	bl	80089e0 <HAL_RCC_GetPCLK1Freq>
 800ddb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ddb4:	e033      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddb6:	f7fa fe29 	bl	8008a0c <HAL_RCC_GetPCLK2Freq>
 800ddba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ddbc:	e02f      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddbe:	f107 0314 	add.w	r3, r7, #20
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fc faa2 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ddcc:	e027      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fc fbee 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dddc:	e01f      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddde:	4b58      	ldr	r3, [pc, #352]	; (800df40 <UART_SetConfig+0x9cc>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0320 	and.w	r3, r3, #32
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d009      	beq.n	800ddfe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddea:	4b55      	ldr	r3, [pc, #340]	; (800df40 <UART_SetConfig+0x9cc>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	08db      	lsrs	r3, r3, #3
 800ddf0:	f003 0303 	and.w	r3, r3, #3
 800ddf4:	4a53      	ldr	r2, [pc, #332]	; (800df44 <UART_SetConfig+0x9d0>)
 800ddf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddfc:	e00f      	b.n	800de1e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ddfe:	4b51      	ldr	r3, [pc, #324]	; (800df44 <UART_SetConfig+0x9d0>)
 800de00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de02:	e00c      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de04:	4b4c      	ldr	r3, [pc, #304]	; (800df38 <UART_SetConfig+0x9c4>)
 800de06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de08:	e009      	b.n	800de1e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de10:	e005      	b.n	800de1e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800de1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80ea 	beq.w	800dffa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2a:	4a44      	ldr	r2, [pc, #272]	; (800df3c <UART_SetConfig+0x9c8>)
 800de2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de30:	461a      	mov	r2, r3
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	fbb3 f3f2 	udiv	r3, r3, r2
 800de38:	005a      	lsls	r2, r3, #1
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	085b      	lsrs	r3, r3, #1
 800de40:	441a      	add	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	fbb2 f3f3 	udiv	r3, r2, r3
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de50:	2b0f      	cmp	r3, #15
 800de52:	d916      	bls.n	800de82 <UART_SetConfig+0x90e>
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de5a:	d212      	bcs.n	800de82 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	b29b      	uxth	r3, r3
 800de60:	f023 030f 	bic.w	r3, r3, #15
 800de64:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	f003 0307 	and.w	r3, r3, #7
 800de70:	b29a      	uxth	r2, r3
 800de72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de74:	4313      	orrs	r3, r2
 800de76:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de7e:	60da      	str	r2, [r3, #12]
 800de80:	e0bb      	b.n	800dffa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800de88:	e0b7      	b.n	800dffa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800de8e:	2b20      	cmp	r3, #32
 800de90:	dc4a      	bgt.n	800df28 <UART_SetConfig+0x9b4>
 800de92:	2b00      	cmp	r3, #0
 800de94:	f2c0 8086 	blt.w	800dfa4 <UART_SetConfig+0xa30>
 800de98:	2b20      	cmp	r3, #32
 800de9a:	f200 8083 	bhi.w	800dfa4 <UART_SetConfig+0xa30>
 800de9e:	a201      	add	r2, pc, #4	; (adr r2, 800dea4 <UART_SetConfig+0x930>)
 800dea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea4:	0800df2f 	.word	0x0800df2f
 800dea8:	0800df49 	.word	0x0800df49
 800deac:	0800dfa5 	.word	0x0800dfa5
 800deb0:	0800dfa5 	.word	0x0800dfa5
 800deb4:	0800df51 	.word	0x0800df51
 800deb8:	0800dfa5 	.word	0x0800dfa5
 800debc:	0800dfa5 	.word	0x0800dfa5
 800dec0:	0800dfa5 	.word	0x0800dfa5
 800dec4:	0800df61 	.word	0x0800df61
 800dec8:	0800dfa5 	.word	0x0800dfa5
 800decc:	0800dfa5 	.word	0x0800dfa5
 800ded0:	0800dfa5 	.word	0x0800dfa5
 800ded4:	0800dfa5 	.word	0x0800dfa5
 800ded8:	0800dfa5 	.word	0x0800dfa5
 800dedc:	0800dfa5 	.word	0x0800dfa5
 800dee0:	0800dfa5 	.word	0x0800dfa5
 800dee4:	0800df71 	.word	0x0800df71
 800dee8:	0800dfa5 	.word	0x0800dfa5
 800deec:	0800dfa5 	.word	0x0800dfa5
 800def0:	0800dfa5 	.word	0x0800dfa5
 800def4:	0800dfa5 	.word	0x0800dfa5
 800def8:	0800dfa5 	.word	0x0800dfa5
 800defc:	0800dfa5 	.word	0x0800dfa5
 800df00:	0800dfa5 	.word	0x0800dfa5
 800df04:	0800dfa5 	.word	0x0800dfa5
 800df08:	0800dfa5 	.word	0x0800dfa5
 800df0c:	0800dfa5 	.word	0x0800dfa5
 800df10:	0800dfa5 	.word	0x0800dfa5
 800df14:	0800dfa5 	.word	0x0800dfa5
 800df18:	0800dfa5 	.word	0x0800dfa5
 800df1c:	0800dfa5 	.word	0x0800dfa5
 800df20:	0800dfa5 	.word	0x0800dfa5
 800df24:	0800df97 	.word	0x0800df97
 800df28:	2b40      	cmp	r3, #64	; 0x40
 800df2a:	d037      	beq.n	800df9c <UART_SetConfig+0xa28>
 800df2c:	e03a      	b.n	800dfa4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df2e:	f7fa fd57 	bl	80089e0 <HAL_RCC_GetPCLK1Freq>
 800df32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800df34:	e03c      	b.n	800dfb0 <UART_SetConfig+0xa3c>
 800df36:	bf00      	nop
 800df38:	003d0900 	.word	0x003d0900
 800df3c:	080121bc 	.word	0x080121bc
 800df40:	58024400 	.word	0x58024400
 800df44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df48:	f7fa fd60 	bl	8008a0c <HAL_RCC_GetPCLK2Freq>
 800df4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800df4e:	e02f      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df50:	f107 0314 	add.w	r3, r7, #20
 800df54:	4618      	mov	r0, r3
 800df56:	f7fc f9d9 	bl	800a30c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df5e:	e027      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df60:	f107 0308 	add.w	r3, r7, #8
 800df64:	4618      	mov	r0, r3
 800df66:	f7fc fb25 	bl	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df6e:	e01f      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df70:	4b2c      	ldr	r3, [pc, #176]	; (800e024 <UART_SetConfig+0xab0>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 0320 	and.w	r3, r3, #32
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d009      	beq.n	800df90 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df7c:	4b29      	ldr	r3, [pc, #164]	; (800e024 <UART_SetConfig+0xab0>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	08db      	lsrs	r3, r3, #3
 800df82:	f003 0303 	and.w	r3, r3, #3
 800df86:	4a28      	ldr	r2, [pc, #160]	; (800e028 <UART_SetConfig+0xab4>)
 800df88:	fa22 f303 	lsr.w	r3, r2, r3
 800df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df8e:	e00f      	b.n	800dfb0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800df90:	4b25      	ldr	r3, [pc, #148]	; (800e028 <UART_SetConfig+0xab4>)
 800df92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df94:	e00c      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df96:	4b25      	ldr	r3, [pc, #148]	; (800e02c <UART_SetConfig+0xab8>)
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df9a:	e009      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfa2:	e005      	b.n	800dfb0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dfae:	bf00      	nop
    }

    if (pclk != 0U)
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d021      	beq.n	800dffa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfba:	4a1d      	ldr	r2, [pc, #116]	; (800e030 <UART_SetConfig+0xabc>)
 800dfbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	085b      	lsrs	r3, r3, #1
 800dfce:	441a      	add	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	2b0f      	cmp	r3, #15
 800dfe0:	d908      	bls.n	800dff4 <UART_SetConfig+0xa80>
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfe8:	d204      	bcs.n	800dff4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	e002      	b.n	800dffa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800dff4:	2301      	movs	r3, #1
 800dff6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2201      	movs	r2, #1
 800e006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e016:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3738      	adds	r7, #56	; 0x38
 800e01e:	46bd      	mov	sp, r7
 800e020:	bdb0      	pop	{r4, r5, r7, pc}
 800e022:	bf00      	nop
 800e024:	58024400 	.word	0x58024400
 800e028:	03d09000 	.word	0x03d09000
 800e02c:	003d0900 	.word	0x003d0900
 800e030:	080121bc 	.word	0x080121bc

0800e034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00a      	beq.n	800e05e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e062:	f003 0302 	and.w	r3, r3, #2
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00a      	beq.n	800e080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e084:	f003 0304 	and.w	r3, r3, #4
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00a      	beq.n	800e0a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a6:	f003 0308 	and.w	r3, r3, #8
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00a      	beq.n	800e0c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	430a      	orrs	r2, r1
 800e0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c8:	f003 0310 	and.w	r3, r3, #16
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00a      	beq.n	800e0e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	430a      	orrs	r2, r1
 800e0e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00a      	beq.n	800e108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	430a      	orrs	r2, r1
 800e106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e110:	2b00      	cmp	r3, #0
 800e112:	d01a      	beq.n	800e14a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e132:	d10a      	bne.n	800e14a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	430a      	orrs	r2, r1
 800e16a:	605a      	str	r2, [r3, #4]
  }
}
 800e16c:	bf00      	nop
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e188:	f7f5 f856 	bl	8003238 <HAL_GetTick>
 800e18c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0308 	and.w	r3, r3, #8
 800e198:	2b08      	cmp	r3, #8
 800e19a:	d10e      	bne.n	800e1ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e19c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f82f 	bl	800e20e <UART_WaitOnFlagUntilTimeout>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e025      	b.n	800e206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f003 0304 	and.w	r3, r3, #4
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d10e      	bne.n	800e1e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f819 	bl	800e20e <UART_WaitOnFlagUntilTimeout>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	e00f      	b.n	800e206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2220      	movs	r2, #32
 800e1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2220      	movs	r2, #32
 800e1f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b084      	sub	sp, #16
 800e212:	af00      	add	r7, sp, #0
 800e214:	60f8      	str	r0, [r7, #12]
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	603b      	str	r3, [r7, #0]
 800e21a:	4613      	mov	r3, r2
 800e21c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e21e:	e062      	b.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e226:	d05e      	beq.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e228:	f7f5 f806 	bl	8003238 <HAL_GetTick>
 800e22c:	4602      	mov	r2, r0
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	69ba      	ldr	r2, [r7, #24]
 800e234:	429a      	cmp	r2, r3
 800e236:	d302      	bcc.n	800e23e <UART_WaitOnFlagUntilTimeout+0x30>
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d11d      	bne.n	800e27a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e24c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689a      	ldr	r2, [r3, #8]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f022 0201 	bic.w	r2, r2, #1
 800e25c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2220      	movs	r2, #32
 800e262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2220      	movs	r2, #32
 800e26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e045      	b.n	800e306 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	2b00      	cmp	r3, #0
 800e286:	d02e      	beq.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e296:	d126      	bne.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e2b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0201 	bic.w	r2, r2, #1
 800e2c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2220      	movs	r2, #32
 800e2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e00f      	b.n	800e306 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69da      	ldr	r2, [r3, #28]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	bf0c      	ite	eq
 800e2f6:	2301      	moveq	r3, #1
 800e2f8:	2300      	movne	r3, #0
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	79fb      	ldrb	r3, [r7, #7]
 800e300:	429a      	cmp	r2, r3
 800e302:	d08d      	beq.n	800e220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
	...

0800e310 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	88fa      	ldrh	r2, [r7, #6]
 800e328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2222      	movs	r2, #34	; 0x22
 800e338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d02c      	beq.n	800e39e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e348:	4a25      	ldr	r2, [pc, #148]	; (800e3e0 <UART_Start_Receive_DMA+0xd0>)
 800e34a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e350:	4a24      	ldr	r2, [pc, #144]	; (800e3e4 <UART_Start_Receive_DMA+0xd4>)
 800e352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e358:	4a23      	ldr	r2, [pc, #140]	; (800e3e8 <UART_Start_Receive_DMA+0xd8>)
 800e35a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e360:	2200      	movs	r2, #0
 800e362:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3324      	adds	r3, #36	; 0x24
 800e36e:	4619      	mov	r1, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e374:	461a      	mov	r2, r3
 800e376:	88fb      	ldrh	r3, [r7, #6]
 800e378:	f7f6 fe3a 	bl	8004ff0 <HAL_DMA_Start_IT>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00d      	beq.n	800e39e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2210      	movs	r2, #16
 800e386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2220      	movs	r2, #32
 800e396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	e01c      	b.n	800e3d8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3b4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	689a      	ldr	r2, [r3, #8]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f042 0201 	orr.w	r2, r2, #1
 800e3c4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	689a      	ldr	r2, [r3, #8]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3d4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	0800e4f9 	.word	0x0800e4f9
 800e3e4:	0800e58f 	.word	0x0800e58f
 800e3e8:	0800e5c7 	.word	0x0800e5c7

0800e3ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e402:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	689a      	ldr	r2, [r3, #8]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e412:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2220      	movs	r2, #32
 800e418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e41c:	bf00      	nop
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e43e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6899      	ldr	r1, [r3, #8]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <UART_EndRxTransfer+0x60>)
 800e44c:	400b      	ands	r3, r1
 800e44e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e454:	2b01      	cmp	r3, #1
 800e456:	d107      	bne.n	800e468 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f022 0210 	bic.w	r2, r2, #16
 800e466:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2220      	movs	r2, #32
 800e46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	effffffe 	.word	0xeffffffe

0800e48c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e498:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4a2:	d014      	beq.n	800e4ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	689a      	ldr	r2, [r3, #8]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4ba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ca:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4cc:	e002      	b.n	800e4d4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f7f2 fdc6 	bl	8001060 <HAL_UART_TxCpltCallback>
}
 800e4d4:	bf00      	nop
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff f818 	bl	800d520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4f0:	bf00      	nop
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e504:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e50e:	d02b      	beq.n	800e568 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e526:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	689a      	ldr	r2, [r3, #8]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f022 0201 	bic.w	r2, r2, #1
 800e536:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689a      	ldr	r2, [r3, #8]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e546:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2220      	movs	r2, #32
 800e54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e554:	2b01      	cmp	r3, #1
 800e556:	d107      	bne.n	800e568 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f022 0210 	bic.w	r2, r2, #16
 800e566:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d107      	bne.n	800e580 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e576:	4619      	mov	r1, r3
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7fe ffef 	bl	800d55c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e57e:	e002      	b.n	800e586 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7f2 fd93 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 800e586:	bf00      	nop
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d109      	bne.n	800e5b8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5aa:	085b      	lsrs	r3, r3, #1
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7fe ffd3 	bl	800d55c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5b6:	e002      	b.n	800e5be <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f7fe ffbb 	bl	800d534 <HAL_UART_RxHalfCpltCallback>
}
 800e5be:	bf00      	nop
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b086      	sub	sp, #24
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ee:	2b80      	cmp	r3, #128	; 0x80
 800e5f0:	d109      	bne.n	800e606 <UART_DMAError+0x40>
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	2b21      	cmp	r3, #33	; 0x21
 800e5f6:	d106      	bne.n	800e606 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e600:	6978      	ldr	r0, [r7, #20]
 800e602:	f7ff fef3 	bl	800e3ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e610:	2b40      	cmp	r3, #64	; 0x40
 800e612:	d109      	bne.n	800e628 <UART_DMAError+0x62>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b22      	cmp	r3, #34	; 0x22
 800e618:	d106      	bne.n	800e628 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e622:	6978      	ldr	r0, [r7, #20]
 800e624:	f7ff ff00 	bl	800e428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e62e:	f043 0210 	orr.w	r2, r3, #16
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e638:	6978      	ldr	r0, [r7, #20]
 800e63a:	f7fe ff85 	bl	800d548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e63e:	bf00      	nop
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7fe ff6f 	bl	800d548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b082      	sub	sp, #8
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e688:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2220      	movs	r2, #32
 800e68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7f2 fce1 	bl	8001060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e69e:	bf00      	nop
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6a6:	b480      	push	{r7}
 800e6a8:	b083      	sub	sp, #12
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6ae:	bf00      	nop
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	b083      	sub	sp, #12
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e6c2:	bf00      	nop
 800e6c4:	370c      	adds	r7, #12
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr

0800e6ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e6ce:	b480      	push	{r7}
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e6d6:	bf00      	nop
 800e6d8:	370c      	adds	r7, #12
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b085      	sub	sp, #20
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d101      	bne.n	800e6f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e027      	b.n	800e748 <HAL_UARTEx_DisableFifoMode+0x66>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2224      	movs	r2, #36	; 0x24
 800e704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0201 	bic.w	r2, r2, #1
 800e71e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e726:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2220      	movs	r2, #32
 800e73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e764:	2b01      	cmp	r3, #1
 800e766:	d101      	bne.n	800e76c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e768:	2302      	movs	r3, #2
 800e76a:	e02d      	b.n	800e7c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2224      	movs	r2, #36	; 0x24
 800e778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f022 0201 	bic.w	r2, r2, #1
 800e792:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	430a      	orrs	r2, r1
 800e7a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f84f 	bl	800e84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e02d      	b.n	800e844 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2224      	movs	r2, #36	; 0x24
 800e7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0201 	bic.w	r2, r2, #1
 800e80e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f811 	bl	800e84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2220      	movs	r2, #32
 800e836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d108      	bne.n	800e86e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e86c:	e031      	b.n	800e8d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e86e:	2310      	movs	r3, #16
 800e870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e872:	2310      	movs	r3, #16
 800e874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	0e5b      	lsrs	r3, r3, #25
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	f003 0307 	and.w	r3, r3, #7
 800e884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	0f5b      	lsrs	r3, r3, #29
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	f003 0307 	and.w	r3, r3, #7
 800e894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e896:	7bbb      	ldrb	r3, [r7, #14]
 800e898:	7b3a      	ldrb	r2, [r7, #12]
 800e89a:	4911      	ldr	r1, [pc, #68]	; (800e8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800e89c:	5c8a      	ldrb	r2, [r1, r2]
 800e89e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8a2:	7b3a      	ldrb	r2, [r7, #12]
 800e8a4:	490f      	ldr	r1, [pc, #60]	; (800e8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800e8a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
 800e8b6:	7b7a      	ldrb	r2, [r7, #13]
 800e8b8:	4909      	ldr	r1, [pc, #36]	; (800e8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800e8ba:	5c8a      	ldrb	r2, [r1, r2]
 800e8bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8c0:	7b7a      	ldrb	r2, [r7, #13]
 800e8c2:	4908      	ldr	r1, [pc, #32]	; (800e8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800e8c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e8d2:	bf00      	nop
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	080121d4 	.word	0x080121d4
 800e8e4:	080121dc 	.word	0x080121dc

0800e8e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e8ec:	f001 f88c 	bl	800fa08 <vTaskStartScheduler>
  
  return osOK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f103 0208 	add.w	r2, r3, #8
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f04f 32ff 	mov.w	r2, #4294967295
 800e90e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f103 0208 	add.w	r2, r3, #8
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f103 0208 	add.w	r2, r3, #8
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e92a:	bf00      	nop
 800e92c:	370c      	adds	r7, #12
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e936:	b480      	push	{r7}
 800e938:	b083      	sub	sp, #12
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	689a      	ldr	r2, [r3, #8]
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]
}
 800e98c:	bf00      	nop
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ae:	d103      	bne.n	800e9b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	e00c      	b.n	800e9d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3308      	adds	r3, #8
 800e9bc:	60fb      	str	r3, [r7, #12]
 800e9be:	e002      	b.n	800e9c6 <vListInsert+0x2e>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	60fb      	str	r3, [r7, #12]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d2f6      	bcs.n	800e9c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	1c5a      	adds	r2, r3, #1
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b085      	sub	sp, #20
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	6892      	ldr	r2, [r2, #8]
 800ea20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	6852      	ldr	r2, [r2, #4]
 800ea2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d103      	bne.n	800ea3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	689a      	ldr	r2, [r3, #8]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	1e5a      	subs	r2, r3, #1
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
	...

0800ea60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10a      	bne.n	800ea8a <xQueueGenericReset+0x2a>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	60bb      	str	r3, [r7, #8]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ea8a:	f002 fa9b 	bl	8010fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ea9a:	fb01 f303 	mul.w	r3, r1, r3
 800ea9e:	441a      	add	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaba:	3b01      	subs	r3, #1
 800eabc:	68f9      	ldr	r1, [r7, #12]
 800eabe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eac0:	fb01 f303 	mul.w	r3, r1, r3
 800eac4:	441a      	add	r2, r3
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	22ff      	movs	r2, #255	; 0xff
 800eace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	22ff      	movs	r2, #255	; 0xff
 800ead6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d114      	bne.n	800eb0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d01a      	beq.n	800eb1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	3310      	adds	r3, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f001 fa07 	bl	800ff00 <xTaskRemoveFromEventList>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d012      	beq.n	800eb1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eaf8:	4b0c      	ldr	r3, [pc, #48]	; (800eb2c <xQueueGenericReset+0xcc>)
 800eafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	e009      	b.n	800eb1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3310      	adds	r3, #16
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff fef1 	bl	800e8f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	3324      	adds	r3, #36	; 0x24
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff feec 	bl	800e8f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb1e:	f002 fa81 	bl	8011024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb22:	2301      	movs	r3, #1
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	e000ed04 	.word	0xe000ed04

0800eb30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08a      	sub	sp, #40	; 0x28
 800eb34:	af02      	add	r7, sp, #8
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10a      	bne.n	800eb5a <xQueueGenericCreate+0x2a>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	613b      	str	r3, [r7, #16]
}
 800eb56:	bf00      	nop
 800eb58:	e7fe      	b.n	800eb58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	fb02 f303 	mul.w	r3, r2, r3
 800eb62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	3348      	adds	r3, #72	; 0x48
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f002 fb4d 	bl	8011208 <pvPortMalloc>
 800eb6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00d      	beq.n	800eb92 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	3348      	adds	r3, #72	; 0x48
 800eb7e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eb80:	79fa      	ldrb	r2, [r7, #7]
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	4613      	mov	r3, r2
 800eb88:	697a      	ldr	r2, [r7, #20]
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f000 f805 	bl	800eb9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eb92:	69bb      	ldr	r3, [r7, #24]
	}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3720      	adds	r7, #32
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d103      	bne.n	800ebb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e002      	b.n	800ebbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ebca:	2101      	movs	r1, #1
 800ebcc:	69b8      	ldr	r0, [r7, #24]
 800ebce:	f7ff ff47 	bl	800ea60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
	...

0800ebdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	; 0x38
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
 800ebe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ebea:	2300      	movs	r3, #0
 800ebec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10a      	bne.n	800ec0e <xQueueGenericSend+0x32>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec0a:	bf00      	nop
 800ec0c:	e7fe      	b.n	800ec0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d103      	bne.n	800ec1c <xQueueGenericSend+0x40>
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <xQueueGenericSend+0x44>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e000      	b.n	800ec22 <xQueueGenericSend+0x46>
 800ec20:	2300      	movs	r3, #0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <xQueueGenericSend+0x60>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec38:	bf00      	nop
 800ec3a:	e7fe      	b.n	800ec3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d103      	bne.n	800ec4a <xQueueGenericSend+0x6e>
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d101      	bne.n	800ec4e <xQueueGenericSend+0x72>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e000      	b.n	800ec50 <xQueueGenericSend+0x74>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10a      	bne.n	800ec6a <xQueueGenericSend+0x8e>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	623b      	str	r3, [r7, #32]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec6a:	f001 faeb 	bl	8010244 <xTaskGetSchedulerState>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d102      	bne.n	800ec7a <xQueueGenericSend+0x9e>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <xQueueGenericSend+0xa2>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <xQueueGenericSend+0xa4>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10a      	bne.n	800ec9a <xQueueGenericSend+0xbe>
	__asm volatile
 800ec84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	61fb      	str	r3, [r7, #28]
}
 800ec96:	bf00      	nop
 800ec98:	e7fe      	b.n	800ec98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec9a:	f002 f993 	bl	8010fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d302      	bcc.n	800ecb0 <xQueueGenericSend+0xd4>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d129      	bne.n	800ed04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecb6:	f000 fbbb 	bl	800f430 <prvCopyDataToQueue>
 800ecba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d010      	beq.n	800ece6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	3324      	adds	r3, #36	; 0x24
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f001 f919 	bl	800ff00 <xTaskRemoveFromEventList>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d013      	beq.n	800ecfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ecd4:	4b3f      	ldr	r3, [pc, #252]	; (800edd4 <xQueueGenericSend+0x1f8>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	e00a      	b.n	800ecfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ecec:	4b39      	ldr	r3, [pc, #228]	; (800edd4 <xQueueGenericSend+0x1f8>)
 800ecee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ecfc:	f002 f992 	bl	8011024 <vPortExitCritical>
				return pdPASS;
 800ed00:	2301      	movs	r3, #1
 800ed02:	e063      	b.n	800edcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d103      	bne.n	800ed12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed0a:	f002 f98b 	bl	8011024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e05c      	b.n	800edcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f001 f951 	bl	800ffc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed22:	2301      	movs	r3, #1
 800ed24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed26:	f002 f97d 	bl	8011024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed2a:	f000 fec5 	bl	800fab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed2e:	f002 f949 	bl	8010fc4 <vPortEnterCritical>
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed38:	b25b      	sxtb	r3, r3
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3e:	d103      	bne.n	800ed48 <xQueueGenericSend+0x16c>
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed4e:	b25b      	sxtb	r3, r3
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed54:	d103      	bne.n	800ed5e <xQueueGenericSend+0x182>
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed5e:	f002 f961 	bl	8011024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed62:	1d3a      	adds	r2, r7, #4
 800ed64:	f107 0314 	add.w	r3, r7, #20
 800ed68:	4611      	mov	r1, r2
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f001 f940 	bl	800fff0 <xTaskCheckForTimeOut>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d124      	bne.n	800edc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed78:	f000 fc52 	bl	800f620 <prvIsQueueFull>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d018      	beq.n	800edb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	3310      	adds	r3, #16
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f001 f868 	bl	800fe60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed92:	f000 fbdd 	bl	800f550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed96:	f000 fe9d 	bl	800fad4 <xTaskResumeAll>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f47f af7c 	bne.w	800ec9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eda2:	4b0c      	ldr	r3, [pc, #48]	; (800edd4 <xQueueGenericSend+0x1f8>)
 800eda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	f3bf 8f6f 	isb	sy
 800edb2:	e772      	b.n	800ec9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800edb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edb6:	f000 fbcb 	bl	800f550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edba:	f000 fe8b 	bl	800fad4 <xTaskResumeAll>
 800edbe:	e76c      	b.n	800ec9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800edc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edc2:	f000 fbc5 	bl	800f550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edc6:	f000 fe85 	bl	800fad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800edca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3738      	adds	r7, #56	; 0x38
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	e000ed04 	.word	0xe000ed04

0800edd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b090      	sub	sp, #64	; 0x40
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800edea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10a      	bne.n	800ee06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d103      	bne.n	800ee14 <xQueueGenericSendFromISR+0x3c>
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <xQueueGenericSendFromISR+0x40>
 800ee14:	2301      	movs	r3, #1
 800ee16:	e000      	b.n	800ee1a <xQueueGenericSendFromISR+0x42>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10a      	bne.n	800ee34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee30:	bf00      	nop
 800ee32:	e7fe      	b.n	800ee32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d103      	bne.n	800ee42 <xQueueGenericSendFromISR+0x6a>
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d101      	bne.n	800ee46 <xQueueGenericSendFromISR+0x6e>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <xQueueGenericSendFromISR+0x70>
 800ee46:	2300      	movs	r3, #0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	623b      	str	r3, [r7, #32]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee62:	f002 f991 	bl	8011188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee66:	f3ef 8211 	mrs	r2, BASEPRI
 800ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	61fa      	str	r2, [r7, #28]
 800ee7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d302      	bcc.n	800ee94 <xQueueGenericSendFromISR+0xbc>
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	d12f      	bne.n	800eef4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eea4:	683a      	ldr	r2, [r7, #0]
 800eea6:	68b9      	ldr	r1, [r7, #8]
 800eea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eeaa:	f000 fac1 	bl	800f430 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eeae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb6:	d112      	bne.n	800eede <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d016      	beq.n	800eeee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	3324      	adds	r3, #36	; 0x24
 800eec4:	4618      	mov	r0, r3
 800eec6:	f001 f81b 	bl	800ff00 <xTaskRemoveFromEventList>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00e      	beq.n	800eeee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00b      	beq.n	800eeee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	601a      	str	r2, [r3, #0]
 800eedc:	e007      	b.n	800eeee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eee2:	3301      	adds	r3, #1
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	b25a      	sxtb	r2, r3
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eeee:	2301      	movs	r3, #1
 800eef0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eef2:	e001      	b.n	800eef8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eefa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3740      	adds	r7, #64	; 0x40
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b08e      	sub	sp, #56	; 0x38
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d10a      	bne.n	800ef38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	623b      	str	r3, [r7, #32]
}
 800ef34:	bf00      	nop
 800ef36:	e7fe      	b.n	800ef36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	61fb      	str	r3, [r7, #28]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d103      	bne.n	800ef66 <xQueueGiveFromISR+0x58>
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <xQueueGiveFromISR+0x5c>
 800ef66:	2301      	movs	r3, #1
 800ef68:	e000      	b.n	800ef6c <xQueueGiveFromISR+0x5e>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10a      	bne.n	800ef86 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	61bb      	str	r3, [r7, #24]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef86:	f002 f8ff 	bl	8011188 <vPortValidateInterruptPriority>
	__asm volatile
 800ef8a:	f3ef 8211 	mrs	r2, BASEPRI
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	617a      	str	r2, [r7, #20]
 800efa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800efa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d22b      	bcs.n	800f00e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800efc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd0:	d112      	bne.n	800eff8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d016      	beq.n	800f008 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	3324      	adds	r3, #36	; 0x24
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 ff8e 	bl	800ff00 <xTaskRemoveFromEventList>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00e      	beq.n	800f008 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00b      	beq.n	800f008 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2201      	movs	r2, #1
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	e007      	b.n	800f008 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800effc:	3301      	adds	r3, #1
 800effe:	b2db      	uxtb	r3, r3
 800f000:	b25a      	sxtb	r2, r3
 800f002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f008:	2301      	movs	r3, #1
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34
 800f00c:	e001      	b.n	800f012 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	637b      	str	r3, [r7, #52]	; 0x34
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f383 8811 	msr	BASEPRI, r3
}
 800f01c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f020:	4618      	mov	r0, r3
 800f022:	3738      	adds	r7, #56	; 0x38
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08c      	sub	sp, #48	; 0x30
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f034:	2300      	movs	r3, #0
 800f036:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10a      	bne.n	800f058 <xQueueReceive+0x30>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	623b      	str	r3, [r7, #32]
}
 800f054:	bf00      	nop
 800f056:	e7fe      	b.n	800f056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d103      	bne.n	800f066 <xQueueReceive+0x3e>
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <xQueueReceive+0x42>
 800f066:	2301      	movs	r3, #1
 800f068:	e000      	b.n	800f06c <xQueueReceive+0x44>
 800f06a:	2300      	movs	r3, #0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10a      	bne.n	800f086 <xQueueReceive+0x5e>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	61fb      	str	r3, [r7, #28]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f086:	f001 f8dd 	bl	8010244 <xTaskGetSchedulerState>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <xQueueReceive+0x6e>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d101      	bne.n	800f09a <xQueueReceive+0x72>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <xQueueReceive+0x74>
 800f09a:	2300      	movs	r3, #0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <xQueueReceive+0x8e>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	61bb      	str	r3, [r7, #24]
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0b6:	f001 ff85 	bl	8010fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d01f      	beq.n	800f106 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0c6:	68b9      	ldr	r1, [r7, #8]
 800f0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0ca:	f000 fa1b 	bl	800f504 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	1e5a      	subs	r2, r3, #1
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00f      	beq.n	800f0fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 ff0c 	bl	800ff00 <xTaskRemoveFromEventList>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d007      	beq.n	800f0fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0ee:	4b3d      	ldr	r3, [pc, #244]	; (800f1e4 <xQueueReceive+0x1bc>)
 800f0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f4:	601a      	str	r2, [r3, #0]
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0fe:	f001 ff91 	bl	8011024 <vPortExitCritical>
				return pdPASS;
 800f102:	2301      	movs	r3, #1
 800f104:	e069      	b.n	800f1da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d103      	bne.n	800f114 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f10c:	f001 ff8a 	bl	8011024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f110:	2300      	movs	r3, #0
 800f112:	e062      	b.n	800f1da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f11a:	f107 0310 	add.w	r3, r7, #16
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 ff50 	bl	800ffc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f124:	2301      	movs	r3, #1
 800f126:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f128:	f001 ff7c 	bl	8011024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f12c:	f000 fcc4 	bl	800fab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f130:	f001 ff48 	bl	8010fc4 <vPortEnterCritical>
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f13a:	b25b      	sxtb	r3, r3
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f140:	d103      	bne.n	800f14a <xQueueReceive+0x122>
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f150:	b25b      	sxtb	r3, r3
 800f152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f156:	d103      	bne.n	800f160 <xQueueReceive+0x138>
 800f158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f160:	f001 ff60 	bl	8011024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f164:	1d3a      	adds	r2, r7, #4
 800f166:	f107 0310 	add.w	r3, r7, #16
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 ff3f 	bl	800fff0 <xTaskCheckForTimeOut>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d123      	bne.n	800f1c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f17a:	f000 fa3b 	bl	800f5f4 <prvIsQueueEmpty>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d017      	beq.n	800f1b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	3324      	adds	r3, #36	; 0x24
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	4611      	mov	r1, r2
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 fe67 	bl	800fe60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f194:	f000 f9dc 	bl	800f550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f198:	f000 fc9c 	bl	800fad4 <xTaskResumeAll>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d189      	bne.n	800f0b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f1a2:	4b10      	ldr	r3, [pc, #64]	; (800f1e4 <xQueueReceive+0x1bc>)
 800f1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	e780      	b.n	800f0b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1b6:	f000 f9cb 	bl	800f550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1ba:	f000 fc8b 	bl	800fad4 <xTaskResumeAll>
 800f1be:	e77a      	b.n	800f0b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1c2:	f000 f9c5 	bl	800f550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1c6:	f000 fc85 	bl	800fad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1cc:	f000 fa12 	bl	800f5f4 <prvIsQueueEmpty>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f43f af6f 	beq.w	800f0b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3730      	adds	r7, #48	; 0x30
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	e000ed04 	.word	0xe000ed04

0800f1e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b08e      	sub	sp, #56	; 0x38
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	2b00      	cmp	r3, #0
 800f202:	d10a      	bne.n	800f21a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	623b      	str	r3, [r7, #32]
}
 800f216:	bf00      	nop
 800f218:	e7fe      	b.n	800f218 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00a      	beq.n	800f238 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	61fb      	str	r3, [r7, #28]
}
 800f234:	bf00      	nop
 800f236:	e7fe      	b.n	800f236 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f238:	f001 f804 	bl	8010244 <xTaskGetSchedulerState>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <xQueueSemaphoreTake+0x60>
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d101      	bne.n	800f24c <xQueueSemaphoreTake+0x64>
 800f248:	2301      	movs	r3, #1
 800f24a:	e000      	b.n	800f24e <xQueueSemaphoreTake+0x66>
 800f24c:	2300      	movs	r3, #0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10a      	bne.n	800f268 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f256:	f383 8811 	msr	BASEPRI, r3
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	f3bf 8f4f 	dsb	sy
 800f262:	61bb      	str	r3, [r7, #24]
}
 800f264:	bf00      	nop
 800f266:	e7fe      	b.n	800f266 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f268:	f001 feac 	bl	8010fc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f270:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f274:	2b00      	cmp	r3, #0
 800f276:	d024      	beq.n	800f2c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	1e5a      	subs	r2, r3, #1
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d104      	bne.n	800f292 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f288:	f001 f984 	bl	8010594 <pvTaskIncrementMutexHeldCount>
 800f28c:	4602      	mov	r2, r0
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00f      	beq.n	800f2ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	3310      	adds	r3, #16
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f000 fe2e 	bl	800ff00 <xTaskRemoveFromEventList>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d007      	beq.n	800f2ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2aa:	4b54      	ldr	r3, [pc, #336]	; (800f3fc <xQueueSemaphoreTake+0x214>)
 800f2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2ba:	f001 feb3 	bl	8011024 <vPortExitCritical>
				return pdPASS;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e097      	b.n	800f3f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d111      	bne.n	800f2ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00a      	beq.n	800f2e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	617b      	str	r3, [r7, #20]
}
 800f2e0:	bf00      	nop
 800f2e2:	e7fe      	b.n	800f2e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f2e4:	f001 fe9e 	bl	8011024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	e082      	b.n	800f3f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d106      	bne.n	800f300 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2f2:	f107 030c 	add.w	r3, r7, #12
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f000 fe64 	bl	800ffc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f300:	f001 fe90 	bl	8011024 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f304:	f000 fbd8 	bl	800fab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f308:	f001 fe5c 	bl	8010fc4 <vPortEnterCritical>
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f312:	b25b      	sxtb	r3, r3
 800f314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f318:	d103      	bne.n	800f322 <xQueueSemaphoreTake+0x13a>
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f328:	b25b      	sxtb	r3, r3
 800f32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f32e:	d103      	bne.n	800f338 <xQueueSemaphoreTake+0x150>
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	2200      	movs	r2, #0
 800f334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f338:	f001 fe74 	bl	8011024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f33c:	463a      	mov	r2, r7
 800f33e:	f107 030c 	add.w	r3, r7, #12
 800f342:	4611      	mov	r1, r2
 800f344:	4618      	mov	r0, r3
 800f346:	f000 fe53 	bl	800fff0 <xTaskCheckForTimeOut>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d132      	bne.n	800f3b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f352:	f000 f94f 	bl	800f5f4 <prvIsQueueEmpty>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d026      	beq.n	800f3aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d109      	bne.n	800f378 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f364:	f001 fe2e 	bl	8010fc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 ff87 	bl	8010280 <xTaskPriorityInherit>
 800f372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f374:	f001 fe56 	bl	8011024 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	3324      	adds	r3, #36	; 0x24
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	4611      	mov	r1, r2
 800f380:	4618      	mov	r0, r3
 800f382:	f000 fd6d 	bl	800fe60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f388:	f000 f8e2 	bl	800f550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f38c:	f000 fba2 	bl	800fad4 <xTaskResumeAll>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	f47f af68 	bne.w	800f268 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f398:	4b18      	ldr	r3, [pc, #96]	; (800f3fc <xQueueSemaphoreTake+0x214>)
 800f39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	e75e      	b.n	800f268 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3ac:	f000 f8d0 	bl	800f550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3b0:	f000 fb90 	bl	800fad4 <xTaskResumeAll>
 800f3b4:	e758      	b.n	800f268 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b8:	f000 f8ca 	bl	800f550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3bc:	f000 fb8a 	bl	800fad4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3c2:	f000 f917 	bl	800f5f4 <prvIsQueueEmpty>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f43f af4d 	beq.w	800f268 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00d      	beq.n	800f3f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f3d4:	f001 fdf6 	bl	8010fc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3da:	f000 f811 	bl	800f400 <prvGetDisinheritPriorityAfterTimeout>
 800f3de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f001 f846 	bl	8010478 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f3ec:	f001 fe1a 	bl	8011024 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3738      	adds	r7, #56	; 0x38
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	e000ed04 	.word	0xe000ed04

0800f400 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d006      	beq.n	800f41e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f1c3 0307 	rsb	r3, r3, #7
 800f41a:	60fb      	str	r3, [r7, #12]
 800f41c:	e001      	b.n	800f422 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f422:	68fb      	ldr	r3, [r7, #12]
	}
 800f424:	4618      	mov	r0, r3
 800f426:	3714      	adds	r7, #20
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f43c:	2300      	movs	r3, #0
 800f43e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10d      	bne.n	800f46a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d14d      	bne.n	800f4f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 ff86 	bl	801036c <xTaskPriorityDisinherit>
 800f460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	609a      	str	r2, [r3, #8]
 800f468:	e043      	b.n	800f4f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d119      	bne.n	800f4a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6858      	ldr	r0, [r3, #4]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f478:	461a      	mov	r2, r3
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	f002 f8e0 	bl	8011640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f488:	441a      	add	r2, r3
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	685a      	ldr	r2, [r3, #4]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	429a      	cmp	r2, r3
 800f498:	d32b      	bcc.n	800f4f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	605a      	str	r2, [r3, #4]
 800f4a2:	e026      	b.n	800f4f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	68d8      	ldr	r0, [r3, #12]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	68b9      	ldr	r1, [r7, #8]
 800f4b0:	f002 f8c6 	bl	8011640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	68da      	ldr	r2, [r3, #12]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4bc:	425b      	negs	r3, r3
 800f4be:	441a      	add	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d207      	bcs.n	800f4e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	689a      	ldr	r2, [r3, #8]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d8:	425b      	negs	r3, r3
 800f4da:	441a      	add	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b02      	cmp	r3, #2
 800f4e4:	d105      	bne.n	800f4f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4fa:	697b      	ldr	r3, [r7, #20]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3718      	adds	r7, #24
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f512:	2b00      	cmp	r3, #0
 800f514:	d018      	beq.n	800f548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	68da      	ldr	r2, [r3, #12]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51e:	441a      	add	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	68da      	ldr	r2, [r3, #12]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d303      	bcc.n	800f538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	68d9      	ldr	r1, [r3, #12]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f540:	461a      	mov	r2, r3
 800f542:	6838      	ldr	r0, [r7, #0]
 800f544:	f002 f87c 	bl	8011640 <memcpy>
	}
}
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f558:	f001 fd34 	bl	8010fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f564:	e011      	b.n	800f58a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d012      	beq.n	800f594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3324      	adds	r3, #36	; 0x24
 800f572:	4618      	mov	r0, r3
 800f574:	f000 fcc4 	bl	800ff00 <xTaskRemoveFromEventList>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f57e:	f000 fd99 	bl	80100b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f582:	7bfb      	ldrb	r3, [r7, #15]
 800f584:	3b01      	subs	r3, #1
 800f586:	b2db      	uxtb	r3, r3
 800f588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	dce9      	bgt.n	800f566 <prvUnlockQueue+0x16>
 800f592:	e000      	b.n	800f596 <prvUnlockQueue+0x46>
					break;
 800f594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	22ff      	movs	r2, #255	; 0xff
 800f59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f59e:	f001 fd41 	bl	8011024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f5a2:	f001 fd0f 	bl	8010fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5ae:	e011      	b.n	800f5d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d012      	beq.n	800f5de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	3310      	adds	r3, #16
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 fc9f 	bl	800ff00 <xTaskRemoveFromEventList>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f5c8:	f000 fd74 	bl	80100b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f5cc:	7bbb      	ldrb	r3, [r7, #14]
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dce9      	bgt.n	800f5b0 <prvUnlockQueue+0x60>
 800f5dc:	e000      	b.n	800f5e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f5de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	22ff      	movs	r2, #255	; 0xff
 800f5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5e8:	f001 fd1c 	bl	8011024 <vPortExitCritical>
}
 800f5ec:	bf00      	nop
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5fc:	f001 fce2 	bl	8010fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f604:	2b00      	cmp	r3, #0
 800f606:	d102      	bne.n	800f60e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f608:	2301      	movs	r3, #1
 800f60a:	60fb      	str	r3, [r7, #12]
 800f60c:	e001      	b.n	800f612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f60e:	2300      	movs	r3, #0
 800f610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f612:	f001 fd07 	bl	8011024 <vPortExitCritical>

	return xReturn;
 800f616:	68fb      	ldr	r3, [r7, #12]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f628:	f001 fccc 	bl	8010fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f634:	429a      	cmp	r2, r3
 800f636:	d102      	bne.n	800f63e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	60fb      	str	r3, [r7, #12]
 800f63c:	e001      	b.n	800f642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f63e:	2300      	movs	r3, #0
 800f640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f642:	f001 fcef 	bl	8011024 <vPortExitCritical>

	return xReturn;
 800f646:	68fb      	ldr	r3, [r7, #12]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f65a:	2300      	movs	r3, #0
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	e014      	b.n	800f68a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f660:	4a0f      	ldr	r2, [pc, #60]	; (800f6a0 <vQueueAddToRegistry+0x50>)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10b      	bne.n	800f684 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f66c:	490c      	ldr	r1, [pc, #48]	; (800f6a0 <vQueueAddToRegistry+0x50>)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	683a      	ldr	r2, [r7, #0]
 800f672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f676:	4a0a      	ldr	r2, [pc, #40]	; (800f6a0 <vQueueAddToRegistry+0x50>)
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4413      	add	r3, r2
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f682:	e006      	b.n	800f692 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3301      	adds	r3, #1
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2b07      	cmp	r3, #7
 800f68e:	d9e7      	bls.n	800f660 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f690:	bf00      	nop
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	24027c48 	.word	0x24027c48

0800f6a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f6b4:	f001 fc86 	bl	8010fc4 <vPortEnterCritical>
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c4:	d103      	bne.n	800f6ce <vQueueWaitForMessageRestricted+0x2a>
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6d4:	b25b      	sxtb	r3, r3
 800f6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6da:	d103      	bne.n	800f6e4 <vQueueWaitForMessageRestricted+0x40>
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6e4:	f001 fc9e 	bl	8011024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d106      	bne.n	800f6fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	3324      	adds	r3, #36	; 0x24
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 fbd5 	bl	800fea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6fe:	6978      	ldr	r0, [r7, #20]
 800f700:	f7ff ff26 	bl	800f550 <prvUnlockQueue>
	}
 800f704:	bf00      	nop
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08c      	sub	sp, #48	; 0x30
 800f710:	af04      	add	r7, sp, #16
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	603b      	str	r3, [r7, #0]
 800f718:	4613      	mov	r3, r2
 800f71a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4618      	mov	r0, r3
 800f722:	f001 fd71 	bl	8011208 <pvPortMalloc>
 800f726:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00e      	beq.n	800f74c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f72e:	20b4      	movs	r0, #180	; 0xb4
 800f730:	f001 fd6a 	bl	8011208 <pvPortMalloc>
 800f734:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d003      	beq.n	800f744 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	631a      	str	r2, [r3, #48]	; 0x30
 800f742:	e005      	b.n	800f750 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f744:	6978      	ldr	r0, [r7, #20]
 800f746:	f001 fe2b 	bl	80113a0 <vPortFree>
 800f74a:	e001      	b.n	800f750 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f74c:	2300      	movs	r3, #0
 800f74e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d013      	beq.n	800f77e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f756:	88fa      	ldrh	r2, [r7, #6]
 800f758:	2300      	movs	r3, #0
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	9302      	str	r3, [sp, #8]
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	68b9      	ldr	r1, [r7, #8]
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 f80f 	bl	800f790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f772:	69f8      	ldr	r0, [r7, #28]
 800f774:	f000 f8aa 	bl	800f8cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f778:	2301      	movs	r3, #1
 800f77a:	61bb      	str	r3, [r7, #24]
 800f77c:	e002      	b.n	800f784 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f77e:	f04f 33ff 	mov.w	r3, #4294967295
 800f782:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f784:	69bb      	ldr	r3, [r7, #24]
	}
 800f786:	4618      	mov	r0, r3
 800f788:	3720      	adds	r7, #32
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
	...

0800f790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b088      	sub	sp, #32
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7a2:	6879      	ldr	r1, [r7, #4]
 800f7a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f7a8:	440b      	add	r3, r1
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4413      	add	r3, r2
 800f7ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	f023 0307 	bic.w	r3, r3, #7
 800f7b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	f003 0307 	and.w	r3, r3, #7
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00a      	beq.n	800f7d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	617b      	str	r3, [r7, #20]
}
 800f7d4:	bf00      	nop
 800f7d6:	e7fe      	b.n	800f7d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d01f      	beq.n	800f81e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7de:	2300      	movs	r3, #0
 800f7e0:	61fb      	str	r3, [r7, #28]
 800f7e2:	e012      	b.n	800f80a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7e4:	68ba      	ldr	r2, [r7, #8]
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	7819      	ldrb	r1, [r3, #0]
 800f7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	3334      	adds	r3, #52	; 0x34
 800f7f4:	460a      	mov	r2, r1
 800f7f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d006      	beq.n	800f812 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	3301      	adds	r3, #1
 800f808:	61fb      	str	r3, [r7, #28]
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b0f      	cmp	r3, #15
 800f80e:	d9e9      	bls.n	800f7e4 <prvInitialiseNewTask+0x54>
 800f810:	e000      	b.n	800f814 <prvInitialiseNewTask+0x84>
			{
				break;
 800f812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f816:	2200      	movs	r2, #0
 800f818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f81c:	e003      	b.n	800f826 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f828:	2b06      	cmp	r3, #6
 800f82a:	d901      	bls.n	800f830 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f82c:	2306      	movs	r3, #6
 800f82e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f83a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	2200      	movs	r2, #0
 800f840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	3304      	adds	r3, #4
 800f846:	4618      	mov	r0, r3
 800f848:	f7ff f875 	bl	800e936 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	3318      	adds	r3, #24
 800f850:	4618      	mov	r0, r3
 800f852:	f7ff f870 	bl	800e936 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f85a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	f1c3 0207 	rsb	r2, r3, #7
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f86a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	2200      	movs	r2, #0
 800f870:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f876:	2200      	movs	r2, #0
 800f878:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87e:	334c      	adds	r3, #76	; 0x4c
 800f880:	2260      	movs	r2, #96	; 0x60
 800f882:	2100      	movs	r1, #0
 800f884:	4618      	mov	r0, r3
 800f886:	f001 fee9 	bl	801165c <memset>
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	4a0c      	ldr	r2, [pc, #48]	; (800f8c0 <prvInitialiseNewTask+0x130>)
 800f88e:	651a      	str	r2, [r3, #80]	; 0x50
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	4a0c      	ldr	r2, [pc, #48]	; (800f8c4 <prvInitialiseNewTask+0x134>)
 800f894:	655a      	str	r2, [r3, #84]	; 0x54
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	4a0b      	ldr	r2, [pc, #44]	; (800f8c8 <prvInitialiseNewTask+0x138>)
 800f89a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	68f9      	ldr	r1, [r7, #12]
 800f8a0:	69b8      	ldr	r0, [r7, #24]
 800f8a2:	f001 fa5f 	bl	8010d64 <pxPortInitialiseStack>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d002      	beq.n	800f8b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8b8:	bf00      	nop
 800f8ba:	3720      	adds	r7, #32
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	08012204 	.word	0x08012204
 800f8c4:	08012224 	.word	0x08012224
 800f8c8:	080121e4 	.word	0x080121e4

0800f8cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8d4:	f001 fb76 	bl	8010fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8d8:	4b2a      	ldr	r3, [pc, #168]	; (800f984 <prvAddNewTaskToReadyList+0xb8>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	4a29      	ldr	r2, [pc, #164]	; (800f984 <prvAddNewTaskToReadyList+0xb8>)
 800f8e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8e2:	4b29      	ldr	r3, [pc, #164]	; (800f988 <prvAddNewTaskToReadyList+0xbc>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d109      	bne.n	800f8fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8ea:	4a27      	ldr	r2, [pc, #156]	; (800f988 <prvAddNewTaskToReadyList+0xbc>)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8f0:	4b24      	ldr	r3, [pc, #144]	; (800f984 <prvAddNewTaskToReadyList+0xb8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d110      	bne.n	800f91a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8f8:	f000 fc00 	bl	80100fc <prvInitialiseTaskLists>
 800f8fc:	e00d      	b.n	800f91a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8fe:	4b23      	ldr	r3, [pc, #140]	; (800f98c <prvAddNewTaskToReadyList+0xc0>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d109      	bne.n	800f91a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f906:	4b20      	ldr	r3, [pc, #128]	; (800f988 <prvAddNewTaskToReadyList+0xbc>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f910:	429a      	cmp	r2, r3
 800f912:	d802      	bhi.n	800f91a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f914:	4a1c      	ldr	r2, [pc, #112]	; (800f988 <prvAddNewTaskToReadyList+0xbc>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f91a:	4b1d      	ldr	r3, [pc, #116]	; (800f990 <prvAddNewTaskToReadyList+0xc4>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	3301      	adds	r3, #1
 800f920:	4a1b      	ldr	r2, [pc, #108]	; (800f990 <prvAddNewTaskToReadyList+0xc4>)
 800f922:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f928:	2201      	movs	r2, #1
 800f92a:	409a      	lsls	r2, r3
 800f92c:	4b19      	ldr	r3, [pc, #100]	; (800f994 <prvAddNewTaskToReadyList+0xc8>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4313      	orrs	r3, r2
 800f932:	4a18      	ldr	r2, [pc, #96]	; (800f994 <prvAddNewTaskToReadyList+0xc8>)
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93a:	4613      	mov	r3, r2
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	4413      	add	r3, r2
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	4a15      	ldr	r2, [pc, #84]	; (800f998 <prvAddNewTaskToReadyList+0xcc>)
 800f944:	441a      	add	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3304      	adds	r3, #4
 800f94a:	4619      	mov	r1, r3
 800f94c:	4610      	mov	r0, r2
 800f94e:	f7fe ffff 	bl	800e950 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f952:	f001 fb67 	bl	8011024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <prvAddNewTaskToReadyList+0xc0>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00e      	beq.n	800f97c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f95e:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <prvAddNewTaskToReadyList+0xbc>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	429a      	cmp	r2, r3
 800f96a:	d207      	bcs.n	800f97c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f96c:	4b0b      	ldr	r3, [pc, #44]	; (800f99c <prvAddNewTaskToReadyList+0xd0>)
 800f96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f97c:	bf00      	nop
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	240001d0 	.word	0x240001d0
 800f988:	240000d0 	.word	0x240000d0
 800f98c:	240001dc 	.word	0x240001dc
 800f990:	240001ec 	.word	0x240001ec
 800f994:	240001d8 	.word	0x240001d8
 800f998:	240000d4 	.word	0x240000d4
 800f99c:	e000ed04 	.word	0xe000ed04

0800f9a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d017      	beq.n	800f9e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9b2:	4b13      	ldr	r3, [pc, #76]	; (800fa00 <vTaskDelay+0x60>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <vTaskDelay+0x30>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	60bb      	str	r3, [r7, #8]
}
 800f9cc:	bf00      	nop
 800f9ce:	e7fe      	b.n	800f9ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9d0:	f000 f872 	bl	800fab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fdf0 	bl	80105bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9dc:	f000 f87a 	bl	800fad4 <xTaskResumeAll>
 800f9e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d107      	bne.n	800f9f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f9e8:	4b06      	ldr	r3, [pc, #24]	; (800fa04 <vTaskDelay+0x64>)
 800f9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9f8:	bf00      	nop
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	240001f8 	.word	0x240001f8
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800fa0e:	4b22      	ldr	r3, [pc, #136]	; (800fa98 <vTaskStartScheduler+0x90>)
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	2300      	movs	r3, #0
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	2300      	movs	r3, #0
 800fa18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa1c:	491f      	ldr	r1, [pc, #124]	; (800fa9c <vTaskStartScheduler+0x94>)
 800fa1e:	4820      	ldr	r0, [pc, #128]	; (800faa0 <vTaskStartScheduler+0x98>)
 800fa20:	f7ff fe74 	bl	800f70c <xTaskCreate>
 800fa24:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d102      	bne.n	800fa32 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa2c:	f000 fe2c 	bl	8010688 <xTimerCreateTimerTask>
 800fa30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d11b      	bne.n	800fa70 <vTaskStartScheduler+0x68>
	__asm volatile
 800fa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3c:	f383 8811 	msr	BASEPRI, r3
 800fa40:	f3bf 8f6f 	isb	sy
 800fa44:	f3bf 8f4f 	dsb	sy
 800fa48:	60bb      	str	r3, [r7, #8]
}
 800fa4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa4c:	4b15      	ldr	r3, [pc, #84]	; (800faa4 <vTaskStartScheduler+0x9c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	334c      	adds	r3, #76	; 0x4c
 800fa52:	4a15      	ldr	r2, [pc, #84]	; (800faa8 <vTaskStartScheduler+0xa0>)
 800fa54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa56:	4b15      	ldr	r3, [pc, #84]	; (800faac <vTaskStartScheduler+0xa4>)
 800fa58:	f04f 32ff 	mov.w	r2, #4294967295
 800fa5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa5e:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <vTaskStartScheduler+0xa8>)
 800fa60:	2201      	movs	r2, #1
 800fa62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa64:	4b13      	ldr	r3, [pc, #76]	; (800fab4 <vTaskStartScheduler+0xac>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa6a:	f001 fa09 	bl	8010e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa6e:	e00e      	b.n	800fa8e <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa76:	d10a      	bne.n	800fa8e <vTaskStartScheduler+0x86>
	__asm volatile
 800fa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7c:	f383 8811 	msr	BASEPRI, r3
 800fa80:	f3bf 8f6f 	isb	sy
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	607b      	str	r3, [r7, #4]
}
 800fa8a:	bf00      	nop
 800fa8c:	e7fe      	b.n	800fa8c <vTaskStartScheduler+0x84>
}
 800fa8e:	bf00      	nop
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	240001f4 	.word	0x240001f4
 800fa9c:	0801218c 	.word	0x0801218c
 800faa0:	080100cd 	.word	0x080100cd
 800faa4:	240000d0 	.word	0x240000d0
 800faa8:	24000018 	.word	0x24000018
 800faac:	240001f0 	.word	0x240001f0
 800fab0:	240001dc 	.word	0x240001dc
 800fab4:	240001d4 	.word	0x240001d4

0800fab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fab8:	b480      	push	{r7}
 800faba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fabc:	4b04      	ldr	r3, [pc, #16]	; (800fad0 <vTaskSuspendAll+0x18>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	4a03      	ldr	r2, [pc, #12]	; (800fad0 <vTaskSuspendAll+0x18>)
 800fac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fac6:	bf00      	nop
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	240001f8 	.word	0x240001f8

0800fad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fade:	2300      	movs	r3, #0
 800fae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fae2:	4b41      	ldr	r3, [pc, #260]	; (800fbe8 <xTaskResumeAll+0x114>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10a      	bne.n	800fb00 <xTaskResumeAll+0x2c>
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	603b      	str	r3, [r7, #0]
}
 800fafc:	bf00      	nop
 800fafe:	e7fe      	b.n	800fafe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb00:	f001 fa60 	bl	8010fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb04:	4b38      	ldr	r3, [pc, #224]	; (800fbe8 <xTaskResumeAll+0x114>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	4a37      	ldr	r2, [pc, #220]	; (800fbe8 <xTaskResumeAll+0x114>)
 800fb0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb0e:	4b36      	ldr	r3, [pc, #216]	; (800fbe8 <xTaskResumeAll+0x114>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d161      	bne.n	800fbda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb16:	4b35      	ldr	r3, [pc, #212]	; (800fbec <xTaskResumeAll+0x118>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d05d      	beq.n	800fbda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb1e:	e02e      	b.n	800fb7e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb20:	4b33      	ldr	r3, [pc, #204]	; (800fbf0 <xTaskResumeAll+0x11c>)
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	3318      	adds	r3, #24
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fe ff6c 	bl	800ea0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3304      	adds	r3, #4
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe ff67 	bl	800ea0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb40:	2201      	movs	r2, #1
 800fb42:	409a      	lsls	r2, r3
 800fb44:	4b2b      	ldr	r3, [pc, #172]	; (800fbf4 <xTaskResumeAll+0x120>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	4a2a      	ldr	r2, [pc, #168]	; (800fbf4 <xTaskResumeAll+0x120>)
 800fb4c:	6013      	str	r3, [r2, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb52:	4613      	mov	r3, r2
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	4413      	add	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4a27      	ldr	r2, [pc, #156]	; (800fbf8 <xTaskResumeAll+0x124>)
 800fb5c:	441a      	add	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3304      	adds	r3, #4
 800fb62:	4619      	mov	r1, r3
 800fb64:	4610      	mov	r0, r2
 800fb66:	f7fe fef3 	bl	800e950 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb6e:	4b23      	ldr	r3, [pc, #140]	; (800fbfc <xTaskResumeAll+0x128>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d302      	bcc.n	800fb7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fb78:	4b21      	ldr	r3, [pc, #132]	; (800fc00 <xTaskResumeAll+0x12c>)
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb7e:	4b1c      	ldr	r3, [pc, #112]	; (800fbf0 <xTaskResumeAll+0x11c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1cc      	bne.n	800fb20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d001      	beq.n	800fb90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb8c:	f000 fb3a 	bl	8010204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb90:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <xTaskResumeAll+0x130>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d010      	beq.n	800fbbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb9c:	f000 f846 	bl	800fc2c <xTaskIncrementTick>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fba6:	4b16      	ldr	r3, [pc, #88]	; (800fc00 <xTaskResumeAll+0x12c>)
 800fba8:	2201      	movs	r2, #1
 800fbaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1f1      	bne.n	800fb9c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fbb8:	4b12      	ldr	r3, [pc, #72]	; (800fc04 <xTaskResumeAll+0x130>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbbe:	4b10      	ldr	r3, [pc, #64]	; (800fc00 <xTaskResumeAll+0x12c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbca:	4b0f      	ldr	r3, [pc, #60]	; (800fc08 <xTaskResumeAll+0x134>)
 800fbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbda:	f001 fa23 	bl	8011024 <vPortExitCritical>

	return xAlreadyYielded;
 800fbde:	68bb      	ldr	r3, [r7, #8]
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	240001f8 	.word	0x240001f8
 800fbec:	240001d0 	.word	0x240001d0
 800fbf0:	24000190 	.word	0x24000190
 800fbf4:	240001d8 	.word	0x240001d8
 800fbf8:	240000d4 	.word	0x240000d4
 800fbfc:	240000d0 	.word	0x240000d0
 800fc00:	240001e4 	.word	0x240001e4
 800fc04:	240001e0 	.word	0x240001e0
 800fc08:	e000ed04 	.word	0xe000ed04

0800fc0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc12:	4b05      	ldr	r3, [pc, #20]	; (800fc28 <xTaskGetTickCount+0x1c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc18:	687b      	ldr	r3, [r7, #4]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	370c      	adds	r7, #12
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	240001d4 	.word	0x240001d4

0800fc2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc36:	4b4e      	ldr	r3, [pc, #312]	; (800fd70 <xTaskIncrementTick+0x144>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f040 808e 	bne.w	800fd5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc40:	4b4c      	ldr	r3, [pc, #304]	; (800fd74 <xTaskIncrementTick+0x148>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3301      	adds	r3, #1
 800fc46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc48:	4a4a      	ldr	r2, [pc, #296]	; (800fd74 <xTaskIncrementTick+0x148>)
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d120      	bne.n	800fc96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc54:	4b48      	ldr	r3, [pc, #288]	; (800fd78 <xTaskIncrementTick+0x14c>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00a      	beq.n	800fc74 <xTaskIncrementTick+0x48>
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	603b      	str	r3, [r7, #0]
}
 800fc70:	bf00      	nop
 800fc72:	e7fe      	b.n	800fc72 <xTaskIncrementTick+0x46>
 800fc74:	4b40      	ldr	r3, [pc, #256]	; (800fd78 <xTaskIncrementTick+0x14c>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	60fb      	str	r3, [r7, #12]
 800fc7a:	4b40      	ldr	r3, [pc, #256]	; (800fd7c <xTaskIncrementTick+0x150>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a3e      	ldr	r2, [pc, #248]	; (800fd78 <xTaskIncrementTick+0x14c>)
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	4a3e      	ldr	r2, [pc, #248]	; (800fd7c <xTaskIncrementTick+0x150>)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6013      	str	r3, [r2, #0]
 800fc88:	4b3d      	ldr	r3, [pc, #244]	; (800fd80 <xTaskIncrementTick+0x154>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	4a3c      	ldr	r2, [pc, #240]	; (800fd80 <xTaskIncrementTick+0x154>)
 800fc90:	6013      	str	r3, [r2, #0]
 800fc92:	f000 fab7 	bl	8010204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc96:	4b3b      	ldr	r3, [pc, #236]	; (800fd84 <xTaskIncrementTick+0x158>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d348      	bcc.n	800fd32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fca0:	4b35      	ldr	r3, [pc, #212]	; (800fd78 <xTaskIncrementTick+0x14c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d104      	bne.n	800fcb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcaa:	4b36      	ldr	r3, [pc, #216]	; (800fd84 <xTaskIncrementTick+0x158>)
 800fcac:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb0:	601a      	str	r2, [r3, #0]
					break;
 800fcb2:	e03e      	b.n	800fd32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb4:	4b30      	ldr	r3, [pc, #192]	; (800fd78 <xTaskIncrementTick+0x14c>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d203      	bcs.n	800fcd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fccc:	4a2d      	ldr	r2, [pc, #180]	; (800fd84 <xTaskIncrementTick+0x158>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcd2:	e02e      	b.n	800fd32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fe fe96 	bl	800ea0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d004      	beq.n	800fcf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	3318      	adds	r3, #24
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fe fe8d 	bl	800ea0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	409a      	lsls	r2, r3
 800fcf8:	4b23      	ldr	r3, [pc, #140]	; (800fd88 <xTaskIncrementTick+0x15c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	4a22      	ldr	r2, [pc, #136]	; (800fd88 <xTaskIncrementTick+0x15c>)
 800fd00:	6013      	str	r3, [r2, #0]
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	4a1f      	ldr	r2, [pc, #124]	; (800fd8c <xTaskIncrementTick+0x160>)
 800fd10:	441a      	add	r2, r3
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	3304      	adds	r3, #4
 800fd16:	4619      	mov	r1, r3
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f7fe fe19 	bl	800e950 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd22:	4b1b      	ldr	r3, [pc, #108]	; (800fd90 <xTaskIncrementTick+0x164>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d3b9      	bcc.n	800fca0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd30:	e7b6      	b.n	800fca0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd32:	4b17      	ldr	r3, [pc, #92]	; (800fd90 <xTaskIncrementTick+0x164>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd38:	4914      	ldr	r1, [pc, #80]	; (800fd8c <xTaskIncrementTick+0x160>)
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	009b      	lsls	r3, r3, #2
 800fd3e:	4413      	add	r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	440b      	add	r3, r1
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d901      	bls.n	800fd4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd4e:	4b11      	ldr	r3, [pc, #68]	; (800fd94 <xTaskIncrementTick+0x168>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d007      	beq.n	800fd66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fd56:	2301      	movs	r3, #1
 800fd58:	617b      	str	r3, [r7, #20]
 800fd5a:	e004      	b.n	800fd66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd5c:	4b0e      	ldr	r3, [pc, #56]	; (800fd98 <xTaskIncrementTick+0x16c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3301      	adds	r3, #1
 800fd62:	4a0d      	ldr	r2, [pc, #52]	; (800fd98 <xTaskIncrementTick+0x16c>)
 800fd64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd66:	697b      	ldr	r3, [r7, #20]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3718      	adds	r7, #24
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	240001f8 	.word	0x240001f8
 800fd74:	240001d4 	.word	0x240001d4
 800fd78:	24000188 	.word	0x24000188
 800fd7c:	2400018c 	.word	0x2400018c
 800fd80:	240001e8 	.word	0x240001e8
 800fd84:	240001f0 	.word	0x240001f0
 800fd88:	240001d8 	.word	0x240001d8
 800fd8c:	240000d4 	.word	0x240000d4
 800fd90:	240000d0 	.word	0x240000d0
 800fd94:	240001e4 	.word	0x240001e4
 800fd98:	240001e0 	.word	0x240001e0

0800fd9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fda2:	4b29      	ldr	r3, [pc, #164]	; (800fe48 <vTaskSwitchContext+0xac>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdaa:	4b28      	ldr	r3, [pc, #160]	; (800fe4c <vTaskSwitchContext+0xb0>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdb0:	e044      	b.n	800fe3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fdb2:	4b26      	ldr	r3, [pc, #152]	; (800fe4c <vTaskSwitchContext+0xb0>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdb8:	4b25      	ldr	r3, [pc, #148]	; (800fe50 <vTaskSwitchContext+0xb4>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	fab3 f383 	clz	r3, r3
 800fdc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fdc6:	7afb      	ldrb	r3, [r7, #11]
 800fdc8:	f1c3 031f 	rsb	r3, r3, #31
 800fdcc:	617b      	str	r3, [r7, #20]
 800fdce:	4921      	ldr	r1, [pc, #132]	; (800fe54 <vTaskSwitchContext+0xb8>)
 800fdd0:	697a      	ldr	r2, [r7, #20]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	440b      	add	r3, r1
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10a      	bne.n	800fdf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	607b      	str	r3, [r7, #4]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <vTaskSwitchContext+0x5a>
 800fdf8:	697a      	ldr	r2, [r7, #20]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	4a14      	ldr	r2, [pc, #80]	; (800fe54 <vTaskSwitchContext+0xb8>)
 800fe04:	4413      	add	r3, r2
 800fe06:	613b      	str	r3, [r7, #16]
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	605a      	str	r2, [r3, #4]
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	3308      	adds	r3, #8
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d104      	bne.n	800fe28 <vTaskSwitchContext+0x8c>
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	685a      	ldr	r2, [r3, #4]
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	605a      	str	r2, [r3, #4]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	4a0a      	ldr	r2, [pc, #40]	; (800fe58 <vTaskSwitchContext+0xbc>)
 800fe30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe32:	4b09      	ldr	r3, [pc, #36]	; (800fe58 <vTaskSwitchContext+0xbc>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	334c      	adds	r3, #76	; 0x4c
 800fe38:	4a08      	ldr	r2, [pc, #32]	; (800fe5c <vTaskSwitchContext+0xc0>)
 800fe3a:	6013      	str	r3, [r2, #0]
}
 800fe3c:	bf00      	nop
 800fe3e:	371c      	adds	r7, #28
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr
 800fe48:	240001f8 	.word	0x240001f8
 800fe4c:	240001e4 	.word	0x240001e4
 800fe50:	240001d8 	.word	0x240001d8
 800fe54:	240000d4 	.word	0x240000d4
 800fe58:	240000d0 	.word	0x240000d0
 800fe5c:	24000018 	.word	0x24000018

0800fe60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d10a      	bne.n	800fe86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe74:	f383 8811 	msr	BASEPRI, r3
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	f3bf 8f4f 	dsb	sy
 800fe80:	60fb      	str	r3, [r7, #12]
}
 800fe82:	bf00      	nop
 800fe84:	e7fe      	b.n	800fe84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe86:	4b07      	ldr	r3, [pc, #28]	; (800fea4 <vTaskPlaceOnEventList+0x44>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	3318      	adds	r3, #24
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7fe fd82 	bl	800e998 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe94:	2101      	movs	r1, #1
 800fe96:	6838      	ldr	r0, [r7, #0]
 800fe98:	f000 fb90 	bl	80105bc <prvAddCurrentTaskToDelayedList>
}
 800fe9c:	bf00      	nop
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	240000d0 	.word	0x240000d0

0800fea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10a      	bne.n	800fed0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	617b      	str	r3, [r7, #20]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <vTaskPlaceOnEventListRestricted+0x54>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	3318      	adds	r3, #24
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7fe fd39 	bl	800e950 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295
 800fee8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	68b8      	ldr	r0, [r7, #8]
 800feee:	f000 fb65 	bl	80105bc <prvAddCurrentTaskToDelayedList>
	}
 800fef2:	bf00      	nop
 800fef4:	3718      	adds	r7, #24
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	240000d0 	.word	0x240000d0

0800ff00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60fb      	str	r3, [r7, #12]
}
 800ff28:	bf00      	nop
 800ff2a:	e7fe      	b.n	800ff2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	3318      	adds	r3, #24
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe fd6a 	bl	800ea0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff36:	4b1d      	ldr	r3, [pc, #116]	; (800ffac <xTaskRemoveFromEventList+0xac>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d11c      	bne.n	800ff78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	3304      	adds	r3, #4
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fe fd61 	bl	800ea0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	409a      	lsls	r2, r3
 800ff50:	4b17      	ldr	r3, [pc, #92]	; (800ffb0 <xTaskRemoveFromEventList+0xb0>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	4a16      	ldr	r2, [pc, #88]	; (800ffb0 <xTaskRemoveFromEventList+0xb0>)
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5e:	4613      	mov	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	4413      	add	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4a13      	ldr	r2, [pc, #76]	; (800ffb4 <xTaskRemoveFromEventList+0xb4>)
 800ff68:	441a      	add	r2, r3
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4610      	mov	r0, r2
 800ff72:	f7fe fced 	bl	800e950 <vListInsertEnd>
 800ff76:	e005      	b.n	800ff84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	3318      	adds	r3, #24
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	480e      	ldr	r0, [pc, #56]	; (800ffb8 <xTaskRemoveFromEventList+0xb8>)
 800ff80:	f7fe fce6 	bl	800e950 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff88:	4b0c      	ldr	r3, [pc, #48]	; (800ffbc <xTaskRemoveFromEventList+0xbc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d905      	bls.n	800ff9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff92:	2301      	movs	r3, #1
 800ff94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff96:	4b0a      	ldr	r3, [pc, #40]	; (800ffc0 <xTaskRemoveFromEventList+0xc0>)
 800ff98:	2201      	movs	r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	e001      	b.n	800ffa2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffa2:	697b      	ldr	r3, [r7, #20]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	240001f8 	.word	0x240001f8
 800ffb0:	240001d8 	.word	0x240001d8
 800ffb4:	240000d4 	.word	0x240000d4
 800ffb8:	24000190 	.word	0x24000190
 800ffbc:	240000d0 	.word	0x240000d0
 800ffc0:	240001e4 	.word	0x240001e4

0800ffc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <vTaskInternalSetTimeOutState+0x24>)
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <vTaskInternalSetTimeOutState+0x28>)
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	605a      	str	r2, [r3, #4]
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	240001e8 	.word	0x240001e8
 800ffec:	240001d4 	.word	0x240001d4

0800fff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10a      	bne.n	8010016 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	613b      	str	r3, [r7, #16]
}
 8010012:	bf00      	nop
 8010014:	e7fe      	b.n	8010014 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801001c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	60fb      	str	r3, [r7, #12]
}
 801002e:	bf00      	nop
 8010030:	e7fe      	b.n	8010030 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010032:	f000 ffc7 	bl	8010fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010036:	4b1d      	ldr	r3, [pc, #116]	; (80100ac <xTaskCheckForTimeOut+0xbc>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	69ba      	ldr	r2, [r7, #24]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d102      	bne.n	8010056 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010050:	2300      	movs	r3, #0
 8010052:	61fb      	str	r3, [r7, #28]
 8010054:	e023      	b.n	801009e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	4b15      	ldr	r3, [pc, #84]	; (80100b0 <xTaskCheckForTimeOut+0xc0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	429a      	cmp	r2, r3
 8010060:	d007      	beq.n	8010072 <xTaskCheckForTimeOut+0x82>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	69ba      	ldr	r2, [r7, #24]
 8010068:	429a      	cmp	r2, r3
 801006a:	d302      	bcc.n	8010072 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801006c:	2301      	movs	r3, #1
 801006e:	61fb      	str	r3, [r7, #28]
 8010070:	e015      	b.n	801009e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	697a      	ldr	r2, [r7, #20]
 8010078:	429a      	cmp	r2, r3
 801007a:	d20b      	bcs.n	8010094 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	1ad2      	subs	r2, r2, r3
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff ff9b 	bl	800ffc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801008e:	2300      	movs	r3, #0
 8010090:	61fb      	str	r3, [r7, #28]
 8010092:	e004      	b.n	801009e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801009a:	2301      	movs	r3, #1
 801009c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801009e:	f000 ffc1 	bl	8011024 <vPortExitCritical>

	return xReturn;
 80100a2:	69fb      	ldr	r3, [r7, #28]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	240001d4 	.word	0x240001d4
 80100b0:	240001e8 	.word	0x240001e8

080100b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100b4:	b480      	push	{r7}
 80100b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100b8:	4b03      	ldr	r3, [pc, #12]	; (80100c8 <vTaskMissedYield+0x14>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	601a      	str	r2, [r3, #0]
}
 80100be:	bf00      	nop
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	240001e4 	.word	0x240001e4

080100cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100d4:	f000 f852 	bl	801017c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <prvIdleTask+0x28>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d9f9      	bls.n	80100d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80100e0:	4b05      	ldr	r3, [pc, #20]	; (80100f8 <prvIdleTask+0x2c>)
 80100e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e6:	601a      	str	r2, [r3, #0]
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100f0:	e7f0      	b.n	80100d4 <prvIdleTask+0x8>
 80100f2:	bf00      	nop
 80100f4:	240000d4 	.word	0x240000d4
 80100f8:	e000ed04 	.word	0xe000ed04

080100fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010102:	2300      	movs	r3, #0
 8010104:	607b      	str	r3, [r7, #4]
 8010106:	e00c      	b.n	8010122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	4613      	mov	r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	4413      	add	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	4a12      	ldr	r2, [pc, #72]	; (801015c <prvInitialiseTaskLists+0x60>)
 8010114:	4413      	add	r3, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7fe fbed 	bl	800e8f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3301      	adds	r3, #1
 8010120:	607b      	str	r3, [r7, #4]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b06      	cmp	r3, #6
 8010126:	d9ef      	bls.n	8010108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010128:	480d      	ldr	r0, [pc, #52]	; (8010160 <prvInitialiseTaskLists+0x64>)
 801012a:	f7fe fbe4 	bl	800e8f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801012e:	480d      	ldr	r0, [pc, #52]	; (8010164 <prvInitialiseTaskLists+0x68>)
 8010130:	f7fe fbe1 	bl	800e8f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010134:	480c      	ldr	r0, [pc, #48]	; (8010168 <prvInitialiseTaskLists+0x6c>)
 8010136:	f7fe fbde 	bl	800e8f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801013a:	480c      	ldr	r0, [pc, #48]	; (801016c <prvInitialiseTaskLists+0x70>)
 801013c:	f7fe fbdb 	bl	800e8f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010140:	480b      	ldr	r0, [pc, #44]	; (8010170 <prvInitialiseTaskLists+0x74>)
 8010142:	f7fe fbd8 	bl	800e8f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <prvInitialiseTaskLists+0x78>)
 8010148:	4a05      	ldr	r2, [pc, #20]	; (8010160 <prvInitialiseTaskLists+0x64>)
 801014a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801014c:	4b0a      	ldr	r3, [pc, #40]	; (8010178 <prvInitialiseTaskLists+0x7c>)
 801014e:	4a05      	ldr	r2, [pc, #20]	; (8010164 <prvInitialiseTaskLists+0x68>)
 8010150:	601a      	str	r2, [r3, #0]
}
 8010152:	bf00      	nop
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	240000d4 	.word	0x240000d4
 8010160:	24000160 	.word	0x24000160
 8010164:	24000174 	.word	0x24000174
 8010168:	24000190 	.word	0x24000190
 801016c:	240001a4 	.word	0x240001a4
 8010170:	240001bc 	.word	0x240001bc
 8010174:	24000188 	.word	0x24000188
 8010178:	2400018c 	.word	0x2400018c

0801017c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010182:	e019      	b.n	80101b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010184:	f000 ff1e 	bl	8010fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010188:	4b10      	ldr	r3, [pc, #64]	; (80101cc <prvCheckTasksWaitingTermination+0x50>)
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	3304      	adds	r3, #4
 8010194:	4618      	mov	r0, r3
 8010196:	f7fe fc38 	bl	800ea0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801019a:	4b0d      	ldr	r3, [pc, #52]	; (80101d0 <prvCheckTasksWaitingTermination+0x54>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	3b01      	subs	r3, #1
 80101a0:	4a0b      	ldr	r2, [pc, #44]	; (80101d0 <prvCheckTasksWaitingTermination+0x54>)
 80101a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101a4:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	4a0a      	ldr	r2, [pc, #40]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101ae:	f000 ff39 	bl	8011024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f810 	bl	80101d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101b8:	4b06      	ldr	r3, [pc, #24]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e1      	bne.n	8010184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101c0:	bf00      	nop
 80101c2:	bf00      	nop
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	240001a4 	.word	0x240001a4
 80101d0:	240001d0 	.word	0x240001d0
 80101d4:	240001b8 	.word	0x240001b8

080101d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	334c      	adds	r3, #76	; 0x4c
 80101e4:	4618      	mov	r0, r3
 80101e6:	f001 faa9 	bl	801173c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ee:	4618      	mov	r0, r3
 80101f0:	f001 f8d6 	bl	80113a0 <vPortFree>
			vPortFree( pxTCB );
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f001 f8d3 	bl	80113a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101fa:	bf00      	nop
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
	...

08010204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801020a:	4b0c      	ldr	r3, [pc, #48]	; (801023c <prvResetNextTaskUnblockTime+0x38>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d104      	bne.n	801021e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010214:	4b0a      	ldr	r3, [pc, #40]	; (8010240 <prvResetNextTaskUnblockTime+0x3c>)
 8010216:	f04f 32ff 	mov.w	r2, #4294967295
 801021a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801021c:	e008      	b.n	8010230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801021e:	4b07      	ldr	r3, [pc, #28]	; (801023c <prvResetNextTaskUnblockTime+0x38>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	4a04      	ldr	r2, [pc, #16]	; (8010240 <prvResetNextTaskUnblockTime+0x3c>)
 801022e:	6013      	str	r3, [r2, #0]
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	24000188 	.word	0x24000188
 8010240:	240001f0 	.word	0x240001f0

08010244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801024a:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <xTaskGetSchedulerState+0x34>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010252:	2301      	movs	r3, #1
 8010254:	607b      	str	r3, [r7, #4]
 8010256:	e008      	b.n	801026a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010258:	4b08      	ldr	r3, [pc, #32]	; (801027c <xTaskGetSchedulerState+0x38>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d102      	bne.n	8010266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010260:	2302      	movs	r3, #2
 8010262:	607b      	str	r3, [r7, #4]
 8010264:	e001      	b.n	801026a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010266:	2300      	movs	r3, #0
 8010268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801026a:	687b      	ldr	r3, [r7, #4]
	}
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	240001dc 	.word	0x240001dc
 801027c:	240001f8 	.word	0x240001f8

08010280 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801028c:	2300      	movs	r3, #0
 801028e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d05e      	beq.n	8010354 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801029a:	4b31      	ldr	r3, [pc, #196]	; (8010360 <xTaskPriorityInherit+0xe0>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d24e      	bcs.n	8010342 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	db06      	blt.n	80102ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102ac:	4b2c      	ldr	r3, [pc, #176]	; (8010360 <xTaskPriorityInherit+0xe0>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b2:	f1c3 0207 	rsb	r2, r3, #7
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	6959      	ldr	r1, [r3, #20]
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c2:	4613      	mov	r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4a26      	ldr	r2, [pc, #152]	; (8010364 <xTaskPriorityInherit+0xe4>)
 80102cc:	4413      	add	r3, r2
 80102ce:	4299      	cmp	r1, r3
 80102d0:	d12f      	bne.n	8010332 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	3304      	adds	r3, #4
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fe fb97 	bl	800ea0a <uxListRemove>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d10a      	bne.n	80102f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e6:	2201      	movs	r2, #1
 80102e8:	fa02 f303 	lsl.w	r3, r2, r3
 80102ec:	43da      	mvns	r2, r3
 80102ee:	4b1e      	ldr	r3, [pc, #120]	; (8010368 <xTaskPriorityInherit+0xe8>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4013      	ands	r3, r2
 80102f4:	4a1c      	ldr	r2, [pc, #112]	; (8010368 <xTaskPriorityInherit+0xe8>)
 80102f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102f8:	4b19      	ldr	r3, [pc, #100]	; (8010360 <xTaskPriorityInherit+0xe0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010306:	2201      	movs	r2, #1
 8010308:	409a      	lsls	r2, r3
 801030a:	4b17      	ldr	r3, [pc, #92]	; (8010368 <xTaskPriorityInherit+0xe8>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4313      	orrs	r3, r2
 8010310:	4a15      	ldr	r2, [pc, #84]	; (8010368 <xTaskPriorityInherit+0xe8>)
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010318:	4613      	mov	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	4413      	add	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4a10      	ldr	r2, [pc, #64]	; (8010364 <xTaskPriorityInherit+0xe4>)
 8010322:	441a      	add	r2, r3
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	3304      	adds	r3, #4
 8010328:	4619      	mov	r1, r3
 801032a:	4610      	mov	r0, r2
 801032c:	f7fe fb10 	bl	800e950 <vListInsertEnd>
 8010330:	e004      	b.n	801033c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010332:	4b0b      	ldr	r3, [pc, #44]	; (8010360 <xTaskPriorityInherit+0xe0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801033c:	2301      	movs	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	e008      	b.n	8010354 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010346:	4b06      	ldr	r3, [pc, #24]	; (8010360 <xTaskPriorityInherit+0xe0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	429a      	cmp	r2, r3
 801034e:	d201      	bcs.n	8010354 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010350:	2301      	movs	r3, #1
 8010352:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010354:	68fb      	ldr	r3, [r7, #12]
	}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	240000d0 	.word	0x240000d0
 8010364:	240000d4 	.word	0x240000d4
 8010368:	240001d8 	.word	0x240001d8

0801036c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010378:	2300      	movs	r3, #0
 801037a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d06e      	beq.n	8010460 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010382:	4b3a      	ldr	r3, [pc, #232]	; (801046c <xTaskPriorityDisinherit+0x100>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	429a      	cmp	r2, r3
 801038a:	d00a      	beq.n	80103a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60fb      	str	r3, [r7, #12]
}
 801039e:	bf00      	nop
 80103a0:	e7fe      	b.n	80103a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10a      	bne.n	80103c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80103aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ae:	f383 8811 	msr	BASEPRI, r3
 80103b2:	f3bf 8f6f 	isb	sy
 80103b6:	f3bf 8f4f 	dsb	sy
 80103ba:	60bb      	str	r3, [r7, #8]
}
 80103bc:	bf00      	nop
 80103be:	e7fe      	b.n	80103be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103c4:	1e5a      	subs	r2, r3, #1
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d044      	beq.n	8010460 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d140      	bne.n	8010460 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	3304      	adds	r3, #4
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe fb11 	bl	800ea0a <uxListRemove>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d115      	bne.n	801041a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f2:	491f      	ldr	r1, [pc, #124]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 80103f4:	4613      	mov	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	4413      	add	r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	440b      	add	r3, r1
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10a      	bne.n	801041a <xTaskPriorityDisinherit+0xae>
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010408:	2201      	movs	r2, #1
 801040a:	fa02 f303 	lsl.w	r3, r2, r3
 801040e:	43da      	mvns	r2, r3
 8010410:	4b18      	ldr	r3, [pc, #96]	; (8010474 <xTaskPriorityDisinherit+0x108>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4013      	ands	r3, r2
 8010416:	4a17      	ldr	r2, [pc, #92]	; (8010474 <xTaskPriorityDisinherit+0x108>)
 8010418:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010426:	f1c3 0207 	rsb	r2, r3, #7
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010432:	2201      	movs	r2, #1
 8010434:	409a      	lsls	r2, r3
 8010436:	4b0f      	ldr	r3, [pc, #60]	; (8010474 <xTaskPriorityDisinherit+0x108>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4313      	orrs	r3, r2
 801043c:	4a0d      	ldr	r2, [pc, #52]	; (8010474 <xTaskPriorityDisinherit+0x108>)
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010444:	4613      	mov	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4a08      	ldr	r2, [pc, #32]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 801044e:	441a      	add	r2, r3
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	3304      	adds	r3, #4
 8010454:	4619      	mov	r1, r3
 8010456:	4610      	mov	r0, r2
 8010458:	f7fe fa7a 	bl	800e950 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801045c:	2301      	movs	r3, #1
 801045e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010460:	697b      	ldr	r3, [r7, #20]
	}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	240000d0 	.word	0x240000d0
 8010470:	240000d4 	.word	0x240000d4
 8010474:	240001d8 	.word	0x240001d8

08010478 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010486:	2301      	movs	r3, #1
 8010488:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d077      	beq.n	8010580 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010494:	2b00      	cmp	r3, #0
 8010496:	d10a      	bne.n	80104ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049c:	f383 8811 	msr	BASEPRI, r3
 80104a0:	f3bf 8f6f 	isb	sy
 80104a4:	f3bf 8f4f 	dsb	sy
 80104a8:	60fb      	str	r3, [r7, #12]
}
 80104aa:	bf00      	nop
 80104ac:	e7fe      	b.n	80104ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d902      	bls.n	80104be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	61fb      	str	r3, [r7, #28]
 80104bc:	e002      	b.n	80104c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d058      	beq.n	8010580 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d153      	bne.n	8010580 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104d8:	4b2b      	ldr	r3, [pc, #172]	; (8010588 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	69ba      	ldr	r2, [r7, #24]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d10a      	bne.n	80104f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80104e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e6:	f383 8811 	msr	BASEPRI, r3
 80104ea:	f3bf 8f6f 	isb	sy
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	60bb      	str	r3, [r7, #8]
}
 80104f4:	bf00      	nop
 80104f6:	e7fe      	b.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	69fa      	ldr	r2, [r7, #28]
 8010502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	2b00      	cmp	r3, #0
 801050a:	db04      	blt.n	8010516 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	f1c3 0207 	rsb	r2, r3, #7
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	6959      	ldr	r1, [r3, #20]
 801051a:	693a      	ldr	r2, [r7, #16]
 801051c:	4613      	mov	r3, r2
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	4413      	add	r3, r2
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	4a19      	ldr	r2, [pc, #100]	; (801058c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010526:	4413      	add	r3, r2
 8010528:	4299      	cmp	r1, r3
 801052a:	d129      	bne.n	8010580 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	3304      	adds	r3, #4
 8010530:	4618      	mov	r0, r3
 8010532:	f7fe fa6a 	bl	800ea0a <uxListRemove>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010540:	2201      	movs	r2, #1
 8010542:	fa02 f303 	lsl.w	r3, r2, r3
 8010546:	43da      	mvns	r2, r3
 8010548:	4b11      	ldr	r3, [pc, #68]	; (8010590 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4013      	ands	r3, r2
 801054e:	4a10      	ldr	r2, [pc, #64]	; (8010590 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010550:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010556:	2201      	movs	r2, #1
 8010558:	409a      	lsls	r2, r3
 801055a:	4b0d      	ldr	r3, [pc, #52]	; (8010590 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4313      	orrs	r3, r2
 8010560:	4a0b      	ldr	r2, [pc, #44]	; (8010590 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010562:	6013      	str	r3, [r2, #0]
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010568:	4613      	mov	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4a06      	ldr	r2, [pc, #24]	; (801058c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010572:	441a      	add	r2, r3
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3304      	adds	r3, #4
 8010578:	4619      	mov	r1, r3
 801057a:	4610      	mov	r0, r2
 801057c:	f7fe f9e8 	bl	800e950 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010580:	bf00      	nop
 8010582:	3720      	adds	r7, #32
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	240000d0 	.word	0x240000d0
 801058c:	240000d4 	.word	0x240000d4
 8010590:	240001d8 	.word	0x240001d8

08010594 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010594:	b480      	push	{r7}
 8010596:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010598:	4b07      	ldr	r3, [pc, #28]	; (80105b8 <pvTaskIncrementMutexHeldCount+0x24>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d004      	beq.n	80105aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105a0:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105a6:	3201      	adds	r2, #1
 80105a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80105aa:	4b03      	ldr	r3, [pc, #12]	; (80105b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105ac:	681b      	ldr	r3, [r3, #0]
	}
 80105ae:	4618      	mov	r0, r3
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	240000d0 	.word	0x240000d0

080105bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105c6:	4b29      	ldr	r3, [pc, #164]	; (801066c <prvAddCurrentTaskToDelayedList+0xb0>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105cc:	4b28      	ldr	r3, [pc, #160]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3304      	adds	r3, #4
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe fa19 	bl	800ea0a <uxListRemove>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10b      	bne.n	80105f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80105de:	4b24      	ldr	r3, [pc, #144]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e4:	2201      	movs	r2, #1
 80105e6:	fa02 f303 	lsl.w	r3, r2, r3
 80105ea:	43da      	mvns	r2, r3
 80105ec:	4b21      	ldr	r3, [pc, #132]	; (8010674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4013      	ands	r3, r2
 80105f2:	4a20      	ldr	r2, [pc, #128]	; (8010674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105fc:	d10a      	bne.n	8010614 <prvAddCurrentTaskToDelayedList+0x58>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d007      	beq.n	8010614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010604:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	3304      	adds	r3, #4
 801060a:	4619      	mov	r1, r3
 801060c:	481a      	ldr	r0, [pc, #104]	; (8010678 <prvAddCurrentTaskToDelayedList+0xbc>)
 801060e:	f7fe f99f 	bl	800e950 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010612:	e026      	b.n	8010662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4413      	add	r3, r2
 801061a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801061c:	4b14      	ldr	r3, [pc, #80]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	429a      	cmp	r2, r3
 801062a:	d209      	bcs.n	8010640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801062c:	4b13      	ldr	r3, [pc, #76]	; (801067c <prvAddCurrentTaskToDelayedList+0xc0>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	4b0f      	ldr	r3, [pc, #60]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3304      	adds	r3, #4
 8010636:	4619      	mov	r1, r3
 8010638:	4610      	mov	r0, r2
 801063a:	f7fe f9ad 	bl	800e998 <vListInsert>
}
 801063e:	e010      	b.n	8010662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010640:	4b0f      	ldr	r3, [pc, #60]	; (8010680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3304      	adds	r3, #4
 801064a:	4619      	mov	r1, r3
 801064c:	4610      	mov	r0, r2
 801064e:	f7fe f9a3 	bl	800e998 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010652:	4b0c      	ldr	r3, [pc, #48]	; (8010684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	429a      	cmp	r2, r3
 801065a:	d202      	bcs.n	8010662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801065c:	4a09      	ldr	r2, [pc, #36]	; (8010684 <prvAddCurrentTaskToDelayedList+0xc8>)
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	6013      	str	r3, [r2, #0]
}
 8010662:	bf00      	nop
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	240001d4 	.word	0x240001d4
 8010670:	240000d0 	.word	0x240000d0
 8010674:	240001d8 	.word	0x240001d8
 8010678:	240001bc 	.word	0x240001bc
 801067c:	2400018c 	.word	0x2400018c
 8010680:	24000188 	.word	0x24000188
 8010684:	240001f0 	.word	0x240001f0

08010688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 801068e:	2300      	movs	r3, #0
 8010690:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010692:	f000 fb31 	bl	8010cf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010696:	4b11      	ldr	r3, [pc, #68]	; (80106dc <xTimerCreateTimerTask+0x54>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00b      	beq.n	80106b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 801069e:	4b10      	ldr	r3, [pc, #64]	; (80106e0 <xTimerCreateTimerTask+0x58>)
 80106a0:	9301      	str	r3, [sp, #4]
 80106a2:	2305      	movs	r3, #5
 80106a4:	9300      	str	r3, [sp, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106ac:	490d      	ldr	r1, [pc, #52]	; (80106e4 <xTimerCreateTimerTask+0x5c>)
 80106ae:	480e      	ldr	r0, [pc, #56]	; (80106e8 <xTimerCreateTimerTask+0x60>)
 80106b0:	f7ff f82c 	bl	800f70c <xTaskCreate>
 80106b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d10a      	bne.n	80106d2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	603b      	str	r3, [r7, #0]
}
 80106ce:	bf00      	nop
 80106d0:	e7fe      	b.n	80106d0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80106d2:	687b      	ldr	r3, [r7, #4]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	2400022c 	.word	0x2400022c
 80106e0:	24000230 	.word	0x24000230
 80106e4:	08012194 	.word	0x08012194
 80106e8:	080108d9 	.word	0x080108d9

080106ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b088      	sub	sp, #32
 80106f0:	af02      	add	r7, sp, #8
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80106fa:	2028      	movs	r0, #40	; 0x28
 80106fc:	f000 fd84 	bl	8011208 <pvPortMalloc>
 8010700:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00d      	beq.n	8010724 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	68b9      	ldr	r1, [r7, #8]
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f000 f805 	bl	801072e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010724:	697b      	ldr	r3, [r7, #20]
	}
 8010726:	4618      	mov	r0, r3
 8010728:	3718      	adds	r7, #24
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b086      	sub	sp, #24
 8010732:	af00      	add	r7, sp, #0
 8010734:	60f8      	str	r0, [r7, #12]
 8010736:	60b9      	str	r1, [r7, #8]
 8010738:	607a      	str	r2, [r7, #4]
 801073a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10a      	bne.n	8010758 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	617b      	str	r3, [r7, #20]
}
 8010754:	bf00      	nop
 8010756:	e7fe      	b.n	8010756 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	2b00      	cmp	r3, #0
 801075c:	d01e      	beq.n	801079c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801075e:	f000 facb 	bl	8010cf8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	6a3a      	ldr	r2, [r7, #32]
 8010778:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	3304      	adds	r3, #4
 801077e:	4618      	mov	r0, r3
 8010780:	f7fe f8d9 	bl	800e936 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d008      	beq.n	801079c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010790:	f043 0304 	orr.w	r3, r3, #4
 8010794:	b2da      	uxtb	r2, r3
 8010796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801079c:	bf00      	nop
 801079e:	3718      	adds	r7, #24
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	; 0x28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80107b2:	2300      	movs	r3, #0
 80107b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10a      	bne.n	80107d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	f383 8811 	msr	BASEPRI, r3
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	623b      	str	r3, [r7, #32]
}
 80107ce:	bf00      	nop
 80107d0:	e7fe      	b.n	80107d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80107d2:	4b1a      	ldr	r3, [pc, #104]	; (801083c <xTimerGenericCommand+0x98>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d02a      	beq.n	8010830 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b05      	cmp	r3, #5
 80107ea:	dc18      	bgt.n	801081e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80107ec:	f7ff fd2a 	bl	8010244 <xTaskGetSchedulerState>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b02      	cmp	r3, #2
 80107f4:	d109      	bne.n	801080a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80107f6:	4b11      	ldr	r3, [pc, #68]	; (801083c <xTimerGenericCommand+0x98>)
 80107f8:	6818      	ldr	r0, [r3, #0]
 80107fa:	f107 0114 	add.w	r1, r7, #20
 80107fe:	2300      	movs	r3, #0
 8010800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010802:	f7fe f9eb 	bl	800ebdc <xQueueGenericSend>
 8010806:	6278      	str	r0, [r7, #36]	; 0x24
 8010808:	e012      	b.n	8010830 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801080a:	4b0c      	ldr	r3, [pc, #48]	; (801083c <xTimerGenericCommand+0x98>)
 801080c:	6818      	ldr	r0, [r3, #0]
 801080e:	f107 0114 	add.w	r1, r7, #20
 8010812:	2300      	movs	r3, #0
 8010814:	2200      	movs	r2, #0
 8010816:	f7fe f9e1 	bl	800ebdc <xQueueGenericSend>
 801081a:	6278      	str	r0, [r7, #36]	; 0x24
 801081c:	e008      	b.n	8010830 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801081e:	4b07      	ldr	r3, [pc, #28]	; (801083c <xTimerGenericCommand+0x98>)
 8010820:	6818      	ldr	r0, [r3, #0]
 8010822:	f107 0114 	add.w	r1, r7, #20
 8010826:	2300      	movs	r3, #0
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	f7fe fad5 	bl	800edd8 <xQueueGenericSendFromISR>
 801082e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010832:	4618      	mov	r0, r3
 8010834:	3728      	adds	r7, #40	; 0x28
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	2400022c 	.word	0x2400022c

08010840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af02      	add	r7, sp, #8
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801084a:	4b22      	ldr	r3, [pc, #136]	; (80108d4 <prvProcessExpiredTimer+0x94>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	3304      	adds	r3, #4
 8010858:	4618      	mov	r0, r3
 801085a:	f7fe f8d6 	bl	800ea0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010864:	f003 0304 	and.w	r3, r3, #4
 8010868:	2b00      	cmp	r3, #0
 801086a:	d022      	beq.n	80108b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	699a      	ldr	r2, [r3, #24]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	18d1      	adds	r1, r2, r3
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	6978      	ldr	r0, [r7, #20]
 801087a:	f000 f8d1 	bl	8010a20 <prvInsertTimerInActiveList>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01f      	beq.n	80108c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010884:	2300      	movs	r3, #0
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	2300      	movs	r3, #0
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	2100      	movs	r1, #0
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f7ff ff88 	bl	80107a4 <xTimerGenericCommand>
 8010894:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d113      	bne.n	80108c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801089c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	60fb      	str	r3, [r7, #12]
}
 80108ae:	bf00      	nop
 80108b0:	e7fe      	b.n	80108b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108b8:	f023 0301 	bic.w	r3, r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	6978      	ldr	r0, [r7, #20]
 80108ca:	4798      	blx	r3
}
 80108cc:	bf00      	nop
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	24000224 	.word	0x24000224

080108d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108e0:	f107 0308 	add.w	r3, r7, #8
 80108e4:	4618      	mov	r0, r3
 80108e6:	f000 f857 	bl	8010998 <prvGetNextExpireTime>
 80108ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	4619      	mov	r1, r3
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f000 f803 	bl	80108fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80108f6:	f000 f8d5 	bl	8010aa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108fa:	e7f1      	b.n	80108e0 <prvTimerTask+0x8>

080108fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010906:	f7ff f8d7 	bl	800fab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	4618      	mov	r0, r3
 8010910:	f000 f866 	bl	80109e0 <prvSampleTimeNow>
 8010914:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d130      	bne.n	801097e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10a      	bne.n	8010938 <prvProcessTimerOrBlockTask+0x3c>
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	429a      	cmp	r2, r3
 8010928:	d806      	bhi.n	8010938 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801092a:	f7ff f8d3 	bl	800fad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801092e:	68f9      	ldr	r1, [r7, #12]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff ff85 	bl	8010840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010936:	e024      	b.n	8010982 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d008      	beq.n	8010950 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801093e:	4b13      	ldr	r3, [pc, #76]	; (801098c <prvProcessTimerOrBlockTask+0x90>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d101      	bne.n	801094c <prvProcessTimerOrBlockTask+0x50>
 8010948:	2301      	movs	r3, #1
 801094a:	e000      	b.n	801094e <prvProcessTimerOrBlockTask+0x52>
 801094c:	2300      	movs	r3, #0
 801094e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010950:	4b0f      	ldr	r3, [pc, #60]	; (8010990 <prvProcessTimerOrBlockTask+0x94>)
 8010952:	6818      	ldr	r0, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	4619      	mov	r1, r3
 801095e:	f7fe fea1 	bl	800f6a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010962:	f7ff f8b7 	bl	800fad4 <xTaskResumeAll>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10a      	bne.n	8010982 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801096c:	4b09      	ldr	r3, [pc, #36]	; (8010994 <prvProcessTimerOrBlockTask+0x98>)
 801096e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010972:	601a      	str	r2, [r3, #0]
 8010974:	f3bf 8f4f 	dsb	sy
 8010978:	f3bf 8f6f 	isb	sy
}
 801097c:	e001      	b.n	8010982 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801097e:	f7ff f8a9 	bl	800fad4 <xTaskResumeAll>
}
 8010982:	bf00      	nop
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	24000228 	.word	0x24000228
 8010990:	2400022c 	.word	0x2400022c
 8010994:	e000ed04 	.word	0xe000ed04

08010998 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80109a0:	4b0e      	ldr	r3, [pc, #56]	; (80109dc <prvGetNextExpireTime+0x44>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <prvGetNextExpireTime+0x16>
 80109aa:	2201      	movs	r2, #1
 80109ac:	e000      	b.n	80109b0 <prvGetNextExpireTime+0x18>
 80109ae:	2200      	movs	r2, #0
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d105      	bne.n	80109c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109bc:	4b07      	ldr	r3, [pc, #28]	; (80109dc <prvGetNextExpireTime+0x44>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	e001      	b.n	80109cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80109c8:	2300      	movs	r3, #0
 80109ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80109cc:	68fb      	ldr	r3, [r7, #12]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3714      	adds	r7, #20
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	24000224 	.word	0x24000224

080109e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80109e8:	f7ff f910 	bl	800fc0c <xTaskGetTickCount>
 80109ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80109ee:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <prvSampleTimeNow+0x3c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d205      	bcs.n	8010a04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80109f8:	f000 f91a 	bl	8010c30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	e002      	b.n	8010a0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010a0a:	4a04      	ldr	r2, [pc, #16]	; (8010a1c <prvSampleTimeNow+0x3c>)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010a10:	68fb      	ldr	r3, [r7, #12]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	24000234 	.word	0x24000234

08010a20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
 8010a2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d812      	bhi.n	8010a6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	1ad2      	subs	r2, r2, r3
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	699b      	ldr	r3, [r3, #24]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d302      	bcc.n	8010a5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a54:	2301      	movs	r3, #1
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	e01b      	b.n	8010a92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a5a:	4b10      	ldr	r3, [pc, #64]	; (8010a9c <prvInsertTimerInActiveList+0x7c>)
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	3304      	adds	r3, #4
 8010a62:	4619      	mov	r1, r3
 8010a64:	4610      	mov	r0, r2
 8010a66:	f7fd ff97 	bl	800e998 <vListInsert>
 8010a6a:	e012      	b.n	8010a92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d206      	bcs.n	8010a82 <prvInsertTimerInActiveList+0x62>
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d302      	bcc.n	8010a82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	617b      	str	r3, [r7, #20]
 8010a80:	e007      	b.n	8010a92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a82:	4b07      	ldr	r3, [pc, #28]	; (8010aa0 <prvInsertTimerInActiveList+0x80>)
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f7fd ff83 	bl	800e998 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a92:	697b      	ldr	r3, [r7, #20]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	24000228 	.word	0x24000228
 8010aa0:	24000224 	.word	0x24000224

08010aa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08c      	sub	sp, #48	; 0x30
 8010aa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010aaa:	e0ae      	b.n	8010c0a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f2c0 80aa 	blt.w	8010c08 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	695b      	ldr	r3, [r3, #20]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d004      	beq.n	8010aca <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd ffa0 	bl	800ea0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010aca:	1d3b      	adds	r3, r7, #4
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff ff87 	bl	80109e0 <prvSampleTimeNow>
 8010ad2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b09      	cmp	r3, #9
 8010ad8:	f200 8097 	bhi.w	8010c0a <prvProcessReceivedCommands+0x166>
 8010adc:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <prvProcessReceivedCommands+0x40>)
 8010ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae2:	bf00      	nop
 8010ae4:	08010b0d 	.word	0x08010b0d
 8010ae8:	08010b0d 	.word	0x08010b0d
 8010aec:	08010b0d 	.word	0x08010b0d
 8010af0:	08010b81 	.word	0x08010b81
 8010af4:	08010b95 	.word	0x08010b95
 8010af8:	08010bdf 	.word	0x08010bdf
 8010afc:	08010b0d 	.word	0x08010b0d
 8010b00:	08010b0d 	.word	0x08010b0d
 8010b04:	08010b81 	.word	0x08010b81
 8010b08:	08010b95 	.word	0x08010b95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b12:	f043 0301 	orr.w	r3, r3, #1
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010b1e:	68fa      	ldr	r2, [r7, #12]
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	699b      	ldr	r3, [r3, #24]
 8010b24:	18d1      	adds	r1, r2, r3
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6a3a      	ldr	r2, [r7, #32]
 8010b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b2c:	f7ff ff78 	bl	8010a20 <prvInsertTimerInActiveList>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d069      	beq.n	8010c0a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b44:	f003 0304 	and.w	r3, r3, #4
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d05e      	beq.n	8010c0a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b50:	699b      	ldr	r3, [r3, #24]
 8010b52:	441a      	add	r2, r3
 8010b54:	2300      	movs	r3, #0
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b5e:	f7ff fe21 	bl	80107a4 <xTimerGenericCommand>
 8010b62:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d14f      	bne.n	8010c0a <prvProcessReceivedCommands+0x166>
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6e:	f383 8811 	msr	BASEPRI, r3
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	61bb      	str	r3, [r7, #24]
}
 8010b7c:	bf00      	nop
 8010b7e:	e7fe      	b.n	8010b7e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b86:	f023 0301 	bic.w	r3, r3, #1
 8010b8a:	b2da      	uxtb	r2, r3
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8010b92:	e03a      	b.n	8010c0a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b9a:	f043 0301 	orr.w	r3, r3, #1
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	699b      	ldr	r3, [r3, #24]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10a      	bne.n	8010bca <prvProcessReceivedCommands+0x126>
	__asm volatile
 8010bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	617b      	str	r3, [r7, #20]
}
 8010bc6:	bf00      	nop
 8010bc8:	e7fe      	b.n	8010bc8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	699a      	ldr	r2, [r3, #24]
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	18d1      	adds	r1, r2, r3
 8010bd2:	6a3b      	ldr	r3, [r7, #32]
 8010bd4:	6a3a      	ldr	r2, [r7, #32]
 8010bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bd8:	f7ff ff22 	bl	8010a20 <prvInsertTimerInActiveList>
					break;
 8010bdc:	e015      	b.n	8010c0a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010be4:	f003 0302 	and.w	r3, r3, #2
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d103      	bne.n	8010bf4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8010bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bee:	f000 fbd7 	bl	80113a0 <vPortFree>
 8010bf2:	e00a      	b.n	8010c0a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010bfa:	f023 0301 	bic.w	r3, r3, #1
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010c06:	e000      	b.n	8010c0a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010c08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c0a:	4b08      	ldr	r3, [pc, #32]	; (8010c2c <prvProcessReceivedCommands+0x188>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f107 0108 	add.w	r1, r7, #8
 8010c12:	2200      	movs	r2, #0
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fe fa07 	bl	800f028 <xQueueReceive>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f47f af45 	bne.w	8010aac <prvProcessReceivedCommands+0x8>
	}
}
 8010c22:	bf00      	nop
 8010c24:	bf00      	nop
 8010c26:	3728      	adds	r7, #40	; 0x28
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	2400022c 	.word	0x2400022c

08010c30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b088      	sub	sp, #32
 8010c34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c36:	e048      	b.n	8010cca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c38:	4b2d      	ldr	r3, [pc, #180]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c42:	4b2b      	ldr	r3, [pc, #172]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	3304      	adds	r3, #4
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fd feda 	bl	800ea0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6a1b      	ldr	r3, [r3, #32]
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d02e      	beq.n	8010cca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	699b      	ldr	r3, [r3, #24]
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	4413      	add	r3, r2
 8010c74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d90e      	bls.n	8010c9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c8a:	4b19      	ldr	r3, [pc, #100]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	3304      	adds	r3, #4
 8010c92:	4619      	mov	r1, r3
 8010c94:	4610      	mov	r0, r2
 8010c96:	f7fd fe7f 	bl	800e998 <vListInsert>
 8010c9a:	e016      	b.n	8010cca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	9300      	str	r3, [sp, #0]
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	693a      	ldr	r2, [r7, #16]
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f7ff fd7c 	bl	80107a4 <xTimerGenericCommand>
 8010cac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d10a      	bne.n	8010cca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb8:	f383 8811 	msr	BASEPRI, r3
 8010cbc:	f3bf 8f6f 	isb	sy
 8010cc0:	f3bf 8f4f 	dsb	sy
 8010cc4:	603b      	str	r3, [r7, #0]
}
 8010cc6:	bf00      	nop
 8010cc8:	e7fe      	b.n	8010cc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010cca:	4b09      	ldr	r3, [pc, #36]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1b1      	bne.n	8010c38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010cd4:	4b06      	ldr	r3, [pc, #24]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010cda:	4b06      	ldr	r3, [pc, #24]	; (8010cf4 <prvSwitchTimerLists+0xc4>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4a04      	ldr	r2, [pc, #16]	; (8010cf0 <prvSwitchTimerLists+0xc0>)
 8010ce0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010ce2:	4a04      	ldr	r2, [pc, #16]	; (8010cf4 <prvSwitchTimerLists+0xc4>)
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	6013      	str	r3, [r2, #0]
}
 8010ce8:	bf00      	nop
 8010cea:	3718      	adds	r7, #24
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	24000224 	.word	0x24000224
 8010cf4:	24000228 	.word	0x24000228

08010cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cfc:	f000 f962 	bl	8010fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010d00:	4b12      	ldr	r3, [pc, #72]	; (8010d4c <prvCheckForValidListAndQueue+0x54>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d11d      	bne.n	8010d44 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010d08:	4811      	ldr	r0, [pc, #68]	; (8010d50 <prvCheckForValidListAndQueue+0x58>)
 8010d0a:	f7fd fdf4 	bl	800e8f6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010d0e:	4811      	ldr	r0, [pc, #68]	; (8010d54 <prvCheckForValidListAndQueue+0x5c>)
 8010d10:	f7fd fdf1 	bl	800e8f6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010d14:	4b10      	ldr	r3, [pc, #64]	; (8010d58 <prvCheckForValidListAndQueue+0x60>)
 8010d16:	4a0e      	ldr	r2, [pc, #56]	; (8010d50 <prvCheckForValidListAndQueue+0x58>)
 8010d18:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010d1a:	4b10      	ldr	r3, [pc, #64]	; (8010d5c <prvCheckForValidListAndQueue+0x64>)
 8010d1c:	4a0d      	ldr	r2, [pc, #52]	; (8010d54 <prvCheckForValidListAndQueue+0x5c>)
 8010d1e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010d20:	2200      	movs	r2, #0
 8010d22:	210c      	movs	r1, #12
 8010d24:	2010      	movs	r0, #16
 8010d26:	f7fd ff03 	bl	800eb30 <xQueueGenericCreate>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	4a07      	ldr	r2, [pc, #28]	; (8010d4c <prvCheckForValidListAndQueue+0x54>)
 8010d2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d30:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <prvCheckForValidListAndQueue+0x54>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d005      	beq.n	8010d44 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d38:	4b04      	ldr	r3, [pc, #16]	; (8010d4c <prvCheckForValidListAndQueue+0x54>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4908      	ldr	r1, [pc, #32]	; (8010d60 <prvCheckForValidListAndQueue+0x68>)
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fe fc86 	bl	800f650 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d44:	f000 f96e 	bl	8011024 <vPortExitCritical>
}
 8010d48:	bf00      	nop
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	2400022c 	.word	0x2400022c
 8010d50:	240001fc 	.word	0x240001fc
 8010d54:	24000210 	.word	0x24000210
 8010d58:	24000224 	.word	0x24000224
 8010d5c:	24000228 	.word	0x24000228
 8010d60:	0801219c 	.word	0x0801219c

08010d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	3b04      	subs	r3, #4
 8010d74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	3b04      	subs	r3, #4
 8010d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	f023 0201 	bic.w	r2, r3, #1
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	3b04      	subs	r3, #4
 8010d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d94:	4a0c      	ldr	r2, [pc, #48]	; (8010dc8 <pxPortInitialiseStack+0x64>)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	3b14      	subs	r3, #20
 8010d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3b04      	subs	r3, #4
 8010daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f06f 0202 	mvn.w	r2, #2
 8010db2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	3b20      	subs	r3, #32
 8010db8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010dba:	68fb      	ldr	r3, [r7, #12]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3714      	adds	r7, #20
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	08010dcd 	.word	0x08010dcd

08010dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b085      	sub	sp, #20
 8010dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010dd6:	4b12      	ldr	r3, [pc, #72]	; (8010e20 <prvTaskExitError+0x54>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dde:	d00a      	beq.n	8010df6 <prvTaskExitError+0x2a>
	__asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	60fb      	str	r3, [r7, #12]
}
 8010df2:	bf00      	nop
 8010df4:	e7fe      	b.n	8010df4 <prvTaskExitError+0x28>
	__asm volatile
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	60bb      	str	r3, [r7, #8]
}
 8010e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e0a:	bf00      	nop
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d0fc      	beq.n	8010e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e12:	bf00      	nop
 8010e14:	bf00      	nop
 8010e16:	3714      	adds	r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	24000014 	.word	0x24000014
	...

08010e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e30:	4b07      	ldr	r3, [pc, #28]	; (8010e50 <pxCurrentTCBConst2>)
 8010e32:	6819      	ldr	r1, [r3, #0]
 8010e34:	6808      	ldr	r0, [r1, #0]
 8010e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3a:	f380 8809 	msr	PSP, r0
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	f04f 0000 	mov.w	r0, #0
 8010e46:	f380 8811 	msr	BASEPRI, r0
 8010e4a:	4770      	bx	lr
 8010e4c:	f3af 8000 	nop.w

08010e50 <pxCurrentTCBConst2>:
 8010e50:	240000d0 	.word	0x240000d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e54:	bf00      	nop
 8010e56:	bf00      	nop

08010e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e58:	4808      	ldr	r0, [pc, #32]	; (8010e7c <prvPortStartFirstTask+0x24>)
 8010e5a:	6800      	ldr	r0, [r0, #0]
 8010e5c:	6800      	ldr	r0, [r0, #0]
 8010e5e:	f380 8808 	msr	MSP, r0
 8010e62:	f04f 0000 	mov.w	r0, #0
 8010e66:	f380 8814 	msr	CONTROL, r0
 8010e6a:	b662      	cpsie	i
 8010e6c:	b661      	cpsie	f
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	df00      	svc	0
 8010e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e7a:	bf00      	nop
 8010e7c:	e000ed08 	.word	0xe000ed08

08010e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e86:	4b46      	ldr	r3, [pc, #280]	; (8010fa0 <xPortStartScheduler+0x120>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4a46      	ldr	r2, [pc, #280]	; (8010fa4 <xPortStartScheduler+0x124>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d10a      	bne.n	8010ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8010e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e94:	f383 8811 	msr	BASEPRI, r3
 8010e98:	f3bf 8f6f 	isb	sy
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	613b      	str	r3, [r7, #16]
}
 8010ea2:	bf00      	nop
 8010ea4:	e7fe      	b.n	8010ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ea6:	4b3e      	ldr	r3, [pc, #248]	; (8010fa0 <xPortStartScheduler+0x120>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a3f      	ldr	r2, [pc, #252]	; (8010fa8 <xPortStartScheduler+0x128>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d10a      	bne.n	8010ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	60fb      	str	r3, [r7, #12]
}
 8010ec2:	bf00      	nop
 8010ec4:	e7fe      	b.n	8010ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ec6:	4b39      	ldr	r3, [pc, #228]	; (8010fac <xPortStartScheduler+0x12c>)
 8010ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	22ff      	movs	r2, #255	; 0xff
 8010ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ee0:	78fb      	ldrb	r3, [r7, #3]
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	4b31      	ldr	r3, [pc, #196]	; (8010fb0 <xPortStartScheduler+0x130>)
 8010eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010eee:	4b31      	ldr	r3, [pc, #196]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010ef0:	2207      	movs	r2, #7
 8010ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ef4:	e009      	b.n	8010f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ef6:	4b2f      	ldr	r3, [pc, #188]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	4a2d      	ldr	r2, [pc, #180]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f00:	78fb      	ldrb	r3, [r7, #3]
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	005b      	lsls	r3, r3, #1
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f0a:	78fb      	ldrb	r3, [r7, #3]
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f12:	2b80      	cmp	r3, #128	; 0x80
 8010f14:	d0ef      	beq.n	8010ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f16:	4b27      	ldr	r3, [pc, #156]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f1c3 0307 	rsb	r3, r3, #7
 8010f1e:	2b04      	cmp	r3, #4
 8010f20:	d00a      	beq.n	8010f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	60bb      	str	r3, [r7, #8]
}
 8010f34:	bf00      	nop
 8010f36:	e7fe      	b.n	8010f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f38:	4b1e      	ldr	r3, [pc, #120]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	021b      	lsls	r3, r3, #8
 8010f3e:	4a1d      	ldr	r2, [pc, #116]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f42:	4b1c      	ldr	r3, [pc, #112]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f4a:	4a1a      	ldr	r2, [pc, #104]	; (8010fb4 <xPortStartScheduler+0x134>)
 8010f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f56:	4b18      	ldr	r3, [pc, #96]	; (8010fb8 <xPortStartScheduler+0x138>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a17      	ldr	r2, [pc, #92]	; (8010fb8 <xPortStartScheduler+0x138>)
 8010f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f62:	4b15      	ldr	r3, [pc, #84]	; (8010fb8 <xPortStartScheduler+0x138>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4a14      	ldr	r2, [pc, #80]	; (8010fb8 <xPortStartScheduler+0x138>)
 8010f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f6e:	f000 f8dd 	bl	801112c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f72:	4b12      	ldr	r3, [pc, #72]	; (8010fbc <xPortStartScheduler+0x13c>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f78:	f000 f8fc 	bl	8011174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f7c:	4b10      	ldr	r3, [pc, #64]	; (8010fc0 <xPortStartScheduler+0x140>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a0f      	ldr	r2, [pc, #60]	; (8010fc0 <xPortStartScheduler+0x140>)
 8010f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f88:	f7ff ff66 	bl	8010e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f8c:	f7fe ff06 	bl	800fd9c <vTaskSwitchContext>
	prvTaskExitError();
 8010f90:	f7ff ff1c 	bl	8010dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3718      	adds	r7, #24
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	e000ed00 	.word	0xe000ed00
 8010fa4:	410fc271 	.word	0x410fc271
 8010fa8:	410fc270 	.word	0x410fc270
 8010fac:	e000e400 	.word	0xe000e400
 8010fb0:	24000238 	.word	0x24000238
 8010fb4:	2400023c 	.word	0x2400023c
 8010fb8:	e000ed20 	.word	0xe000ed20
 8010fbc:	24000014 	.word	0x24000014
 8010fc0:	e000ef34 	.word	0xe000ef34

08010fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8010fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	607b      	str	r3, [r7, #4]
}
 8010fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010fde:	4b0f      	ldr	r3, [pc, #60]	; (801101c <vPortEnterCritical+0x58>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	4a0d      	ldr	r2, [pc, #52]	; (801101c <vPortEnterCritical+0x58>)
 8010fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010fe8:	4b0c      	ldr	r3, [pc, #48]	; (801101c <vPortEnterCritical+0x58>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d10f      	bne.n	8011010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ff0:	4b0b      	ldr	r3, [pc, #44]	; (8011020 <vPortEnterCritical+0x5c>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00a      	beq.n	8011010 <vPortEnterCritical+0x4c>
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	603b      	str	r3, [r7, #0]
}
 801100c:	bf00      	nop
 801100e:	e7fe      	b.n	801100e <vPortEnterCritical+0x4a>
	}
}
 8011010:	bf00      	nop
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	24000014 	.word	0x24000014
 8011020:	e000ed04 	.word	0xe000ed04

08011024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801102a:	4b12      	ldr	r3, [pc, #72]	; (8011074 <vPortExitCritical+0x50>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10a      	bne.n	8011048 <vPortExitCritical+0x24>
	__asm volatile
 8011032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	607b      	str	r3, [r7, #4]
}
 8011044:	bf00      	nop
 8011046:	e7fe      	b.n	8011046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011048:	4b0a      	ldr	r3, [pc, #40]	; (8011074 <vPortExitCritical+0x50>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	3b01      	subs	r3, #1
 801104e:	4a09      	ldr	r2, [pc, #36]	; (8011074 <vPortExitCritical+0x50>)
 8011050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011052:	4b08      	ldr	r3, [pc, #32]	; (8011074 <vPortExitCritical+0x50>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d105      	bne.n	8011066 <vPortExitCritical+0x42>
 801105a:	2300      	movs	r3, #0
 801105c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	f383 8811 	msr	BASEPRI, r3
}
 8011064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011066:	bf00      	nop
 8011068:	370c      	adds	r7, #12
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	24000014 	.word	0x24000014
	...

08011080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011080:	f3ef 8009 	mrs	r0, PSP
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	4b15      	ldr	r3, [pc, #84]	; (80110e0 <pxCurrentTCBConst>)
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	f01e 0f10 	tst.w	lr, #16
 8011090:	bf08      	it	eq
 8011092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109a:	6010      	str	r0, [r2, #0]
 801109c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110a4:	f380 8811 	msr	BASEPRI, r0
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f7fe fe74 	bl	800fd9c <vTaskSwitchContext>
 80110b4:	f04f 0000 	mov.w	r0, #0
 80110b8:	f380 8811 	msr	BASEPRI, r0
 80110bc:	bc09      	pop	{r0, r3}
 80110be:	6819      	ldr	r1, [r3, #0]
 80110c0:	6808      	ldr	r0, [r1, #0]
 80110c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c6:	f01e 0f10 	tst.w	lr, #16
 80110ca:	bf08      	it	eq
 80110cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80110d0:	f380 8809 	msr	PSP, r0
 80110d4:	f3bf 8f6f 	isb	sy
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	f3af 8000 	nop.w

080110e0 <pxCurrentTCBConst>:
 80110e0:	240000d0 	.word	0x240000d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80110e4:	bf00      	nop
 80110e6:	bf00      	nop

080110e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
	__asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f2:	f383 8811 	msr	BASEPRI, r3
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	607b      	str	r3, [r7, #4]
}
 8011100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011102:	f7fe fd93 	bl	800fc2c <xTaskIncrementTick>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801110c:	4b06      	ldr	r3, [pc, #24]	; (8011128 <SysTick_Handler+0x40>)
 801110e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	2300      	movs	r3, #0
 8011116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	f383 8811 	msr	BASEPRI, r3
}
 801111e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	e000ed04 	.word	0xe000ed04

0801112c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801112c:	b480      	push	{r7}
 801112e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011130:	4b0b      	ldr	r3, [pc, #44]	; (8011160 <vPortSetupTimerInterrupt+0x34>)
 8011132:	2200      	movs	r2, #0
 8011134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011136:	4b0b      	ldr	r3, [pc, #44]	; (8011164 <vPortSetupTimerInterrupt+0x38>)
 8011138:	2200      	movs	r2, #0
 801113a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801113c:	4b0a      	ldr	r3, [pc, #40]	; (8011168 <vPortSetupTimerInterrupt+0x3c>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a0a      	ldr	r2, [pc, #40]	; (801116c <vPortSetupTimerInterrupt+0x40>)
 8011142:	fba2 2303 	umull	r2, r3, r2, r3
 8011146:	099b      	lsrs	r3, r3, #6
 8011148:	4a09      	ldr	r2, [pc, #36]	; (8011170 <vPortSetupTimerInterrupt+0x44>)
 801114a:	3b01      	subs	r3, #1
 801114c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801114e:	4b04      	ldr	r3, [pc, #16]	; (8011160 <vPortSetupTimerInterrupt+0x34>)
 8011150:	2207      	movs	r2, #7
 8011152:	601a      	str	r2, [r3, #0]
}
 8011154:	bf00      	nop
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	e000e010 	.word	0xe000e010
 8011164:	e000e018 	.word	0xe000e018
 8011168:	24000004 	.word	0x24000004
 801116c:	10624dd3 	.word	0x10624dd3
 8011170:	e000e014 	.word	0xe000e014

08011174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011184 <vPortEnableVFP+0x10>
 8011178:	6801      	ldr	r1, [r0, #0]
 801117a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801117e:	6001      	str	r1, [r0, #0]
 8011180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011182:	bf00      	nop
 8011184:	e000ed88 	.word	0xe000ed88

08011188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011188:	b480      	push	{r7}
 801118a:	b085      	sub	sp, #20
 801118c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801118e:	f3ef 8305 	mrs	r3, IPSR
 8011192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b0f      	cmp	r3, #15
 8011198:	d914      	bls.n	80111c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801119a:	4a17      	ldr	r2, [pc, #92]	; (80111f8 <vPortValidateInterruptPriority+0x70>)
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	4413      	add	r3, r2
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80111a4:	4b15      	ldr	r3, [pc, #84]	; (80111fc <vPortValidateInterruptPriority+0x74>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	7afa      	ldrb	r2, [r7, #11]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d20a      	bcs.n	80111c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80111ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	607b      	str	r3, [r7, #4]
}
 80111c0:	bf00      	nop
 80111c2:	e7fe      	b.n	80111c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80111c4:	4b0e      	ldr	r3, [pc, #56]	; (8011200 <vPortValidateInterruptPriority+0x78>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80111cc:	4b0d      	ldr	r3, [pc, #52]	; (8011204 <vPortValidateInterruptPriority+0x7c>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d90a      	bls.n	80111ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80111d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d8:	f383 8811 	msr	BASEPRI, r3
 80111dc:	f3bf 8f6f 	isb	sy
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	603b      	str	r3, [r7, #0]
}
 80111e6:	bf00      	nop
 80111e8:	e7fe      	b.n	80111e8 <vPortValidateInterruptPriority+0x60>
	}
 80111ea:	bf00      	nop
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	e000e3f0 	.word	0xe000e3f0
 80111fc:	24000238 	.word	0x24000238
 8011200:	e000ed0c 	.word	0xe000ed0c
 8011204:	2400023c 	.word	0x2400023c

08011208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b08a      	sub	sp, #40	; 0x28
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011210:	2300      	movs	r3, #0
 8011212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011214:	f7fe fc50 	bl	800fab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011218:	4b5b      	ldr	r3, [pc, #364]	; (8011388 <pvPortMalloc+0x180>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d101      	bne.n	8011224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011220:	f000 f920 	bl	8011464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011224:	4b59      	ldr	r3, [pc, #356]	; (801138c <pvPortMalloc+0x184>)
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	4013      	ands	r3, r2
 801122c:	2b00      	cmp	r3, #0
 801122e:	f040 8093 	bne.w	8011358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d01d      	beq.n	8011274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011238:	2208      	movs	r2, #8
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4413      	add	r3, r2
 801123e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f003 0307 	and.w	r3, r3, #7
 8011246:	2b00      	cmp	r3, #0
 8011248:	d014      	beq.n	8011274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f023 0307 	bic.w	r3, r3, #7
 8011250:	3308      	adds	r3, #8
 8011252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f003 0307 	and.w	r3, r3, #7
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00a      	beq.n	8011274 <pvPortMalloc+0x6c>
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	617b      	str	r3, [r7, #20]
}
 8011270:	bf00      	nop
 8011272:	e7fe      	b.n	8011272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d06e      	beq.n	8011358 <pvPortMalloc+0x150>
 801127a:	4b45      	ldr	r3, [pc, #276]	; (8011390 <pvPortMalloc+0x188>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	429a      	cmp	r2, r3
 8011282:	d869      	bhi.n	8011358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011284:	4b43      	ldr	r3, [pc, #268]	; (8011394 <pvPortMalloc+0x18c>)
 8011286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011288:	4b42      	ldr	r3, [pc, #264]	; (8011394 <pvPortMalloc+0x18c>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801128e:	e004      	b.n	801129a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d903      	bls.n	80112ac <pvPortMalloc+0xa4>
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1f1      	bne.n	8011290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80112ac:	4b36      	ldr	r3, [pc, #216]	; (8011388 <pvPortMalloc+0x180>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d050      	beq.n	8011358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2208      	movs	r2, #8
 80112bc:	4413      	add	r3, r2
 80112be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	1ad2      	subs	r2, r2, r3
 80112d0:	2308      	movs	r3, #8
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d91f      	bls.n	8011318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80112d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4413      	add	r3, r2
 80112de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	f003 0307 	and.w	r3, r3, #7
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00a      	beq.n	8011300 <pvPortMalloc+0xf8>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	613b      	str	r3, [r7, #16]
}
 80112fc:	bf00      	nop
 80112fe:	e7fe      	b.n	80112fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	1ad2      	subs	r2, r2, r3
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011312:	69b8      	ldr	r0, [r7, #24]
 8011314:	f000 f90a 	bl	801152c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011318:	4b1d      	ldr	r3, [pc, #116]	; (8011390 <pvPortMalloc+0x188>)
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	4a1b      	ldr	r2, [pc, #108]	; (8011390 <pvPortMalloc+0x188>)
 8011324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011326:	4b1a      	ldr	r3, [pc, #104]	; (8011390 <pvPortMalloc+0x188>)
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	4b1b      	ldr	r3, [pc, #108]	; (8011398 <pvPortMalloc+0x190>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d203      	bcs.n	801133a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011332:	4b17      	ldr	r3, [pc, #92]	; (8011390 <pvPortMalloc+0x188>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4a18      	ldr	r2, [pc, #96]	; (8011398 <pvPortMalloc+0x190>)
 8011338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133c:	685a      	ldr	r2, [r3, #4]
 801133e:	4b13      	ldr	r3, [pc, #76]	; (801138c <pvPortMalloc+0x184>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	431a      	orrs	r2, r3
 8011344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	2200      	movs	r2, #0
 801134c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801134e:	4b13      	ldr	r3, [pc, #76]	; (801139c <pvPortMalloc+0x194>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3301      	adds	r3, #1
 8011354:	4a11      	ldr	r2, [pc, #68]	; (801139c <pvPortMalloc+0x194>)
 8011356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011358:	f7fe fbbc 	bl	800fad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	f003 0307 	and.w	r3, r3, #7
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00a      	beq.n	801137c <pvPortMalloc+0x174>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	60fb      	str	r3, [r7, #12]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <pvPortMalloc+0x172>
	return pvReturn;
 801137c:	69fb      	ldr	r3, [r7, #28]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3728      	adds	r7, #40	; 0x28
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	24027348 	.word	0x24027348
 801138c:	2402735c 	.word	0x2402735c
 8011390:	2402734c 	.word	0x2402734c
 8011394:	24027340 	.word	0x24027340
 8011398:	24027350 	.word	0x24027350
 801139c:	24027354 	.word	0x24027354

080113a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d04d      	beq.n	801144e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113b2:	2308      	movs	r3, #8
 80113b4:	425b      	negs	r3, r3
 80113b6:	697a      	ldr	r2, [r7, #20]
 80113b8:	4413      	add	r3, r2
 80113ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	4b24      	ldr	r3, [pc, #144]	; (8011458 <vPortFree+0xb8>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4013      	ands	r3, r2
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d10a      	bne.n	80113e4 <vPortFree+0x44>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	60fb      	str	r3, [r7, #12]
}
 80113e0:	bf00      	nop
 80113e2:	e7fe      	b.n	80113e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00a      	beq.n	8011402 <vPortFree+0x62>
	__asm volatile
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	60bb      	str	r3, [r7, #8]
}
 80113fe:	bf00      	nop
 8011400:	e7fe      	b.n	8011400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	685a      	ldr	r2, [r3, #4]
 8011406:	4b14      	ldr	r3, [pc, #80]	; (8011458 <vPortFree+0xb8>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4013      	ands	r3, r2
 801140c:	2b00      	cmp	r3, #0
 801140e:	d01e      	beq.n	801144e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d11a      	bne.n	801144e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	685a      	ldr	r2, [r3, #4]
 801141c:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <vPortFree+0xb8>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	43db      	mvns	r3, r3
 8011422:	401a      	ands	r2, r3
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011428:	f7fe fb46 	bl	800fab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	4b0a      	ldr	r3, [pc, #40]	; (801145c <vPortFree+0xbc>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4413      	add	r3, r2
 8011436:	4a09      	ldr	r2, [pc, #36]	; (801145c <vPortFree+0xbc>)
 8011438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801143a:	6938      	ldr	r0, [r7, #16]
 801143c:	f000 f876 	bl	801152c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011440:	4b07      	ldr	r3, [pc, #28]	; (8011460 <vPortFree+0xc0>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	4a06      	ldr	r2, [pc, #24]	; (8011460 <vPortFree+0xc0>)
 8011448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801144a:	f7fe fb43 	bl	800fad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801144e:	bf00      	nop
 8011450:	3718      	adds	r7, #24
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	2402735c 	.word	0x2402735c
 801145c:	2402734c 	.word	0x2402734c
 8011460:	24027358 	.word	0x24027358

08011464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011464:	b480      	push	{r7}
 8011466:	b085      	sub	sp, #20
 8011468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801146a:	4b29      	ldr	r3, [pc, #164]	; (8011510 <prvHeapInit+0xac>)
 801146c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801146e:	4b29      	ldr	r3, [pc, #164]	; (8011514 <prvHeapInit+0xb0>)
 8011470:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f003 0307 	and.w	r3, r3, #7
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00c      	beq.n	8011496 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	3307      	adds	r3, #7
 8011480:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f023 0307 	bic.w	r3, r3, #7
 8011488:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	4a20      	ldr	r2, [pc, #128]	; (8011514 <prvHeapInit+0xb0>)
 8011492:	4413      	add	r3, r2
 8011494:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801149a:	4a1f      	ldr	r2, [pc, #124]	; (8011518 <prvHeapInit+0xb4>)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80114a0:	4b1d      	ldr	r3, [pc, #116]	; (8011518 <prvHeapInit+0xb4>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	4413      	add	r3, r2
 80114ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114ae:	2208      	movs	r2, #8
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	1a9b      	subs	r3, r3, r2
 80114b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f023 0307 	bic.w	r3, r3, #7
 80114bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	4a16      	ldr	r2, [pc, #88]	; (801151c <prvHeapInit+0xb8>)
 80114c2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80114c4:	4b15      	ldr	r3, [pc, #84]	; (801151c <prvHeapInit+0xb8>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2200      	movs	r2, #0
 80114ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80114cc:	4b13      	ldr	r3, [pc, #76]	; (801151c <prvHeapInit+0xb8>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2200      	movs	r2, #0
 80114d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	68fa      	ldr	r2, [r7, #12]
 80114dc:	1ad2      	subs	r2, r2, r3
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80114e2:	4b0e      	ldr	r3, [pc, #56]	; (801151c <prvHeapInit+0xb8>)
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	4a0c      	ldr	r2, [pc, #48]	; (8011520 <prvHeapInit+0xbc>)
 80114f0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	4a0b      	ldr	r2, [pc, #44]	; (8011524 <prvHeapInit+0xc0>)
 80114f8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80114fa:	4b0b      	ldr	r3, [pc, #44]	; (8011528 <prvHeapInit+0xc4>)
 80114fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011500:	601a      	str	r2, [r3, #0]
}
 8011502:	bf00      	nop
 8011504:	3714      	adds	r7, #20
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	00027100 	.word	0x00027100
 8011514:	24000240 	.word	0x24000240
 8011518:	24027340 	.word	0x24027340
 801151c:	24027348 	.word	0x24027348
 8011520:	24027350 	.word	0x24027350
 8011524:	2402734c 	.word	0x2402734c
 8011528:	2402735c 	.word	0x2402735c

0801152c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011534:	4b28      	ldr	r3, [pc, #160]	; (80115d8 <prvInsertBlockIntoFreeList+0xac>)
 8011536:	60fb      	str	r3, [r7, #12]
 8011538:	e002      	b.n	8011540 <prvInsertBlockIntoFreeList+0x14>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	60fb      	str	r3, [r7, #12]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	429a      	cmp	r2, r3
 8011548:	d8f7      	bhi.n	801153a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	68ba      	ldr	r2, [r7, #8]
 8011554:	4413      	add	r3, r2
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	429a      	cmp	r2, r3
 801155a:	d108      	bne.n	801156e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	441a      	add	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	441a      	add	r2, r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d118      	bne.n	80115b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	4b15      	ldr	r3, [pc, #84]	; (80115dc <prvInsertBlockIntoFreeList+0xb0>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d00d      	beq.n	80115aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	441a      	add	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	601a      	str	r2, [r3, #0]
 80115a8:	e008      	b.n	80115bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80115aa:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <prvInsertBlockIntoFreeList+0xb0>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	e003      	b.n	80115bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d002      	beq.n	80115ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115ca:	bf00      	nop
 80115cc:	3714      	adds	r7, #20
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	24027340 	.word	0x24027340
 80115dc:	24027348 	.word	0x24027348

080115e0 <atoi>:
 80115e0:	220a      	movs	r2, #10
 80115e2:	2100      	movs	r1, #0
 80115e4:	f000 b9cc 	b.w	8011980 <strtol>

080115e8 <__errno>:
 80115e8:	4b01      	ldr	r3, [pc, #4]	; (80115f0 <__errno+0x8>)
 80115ea:	6818      	ldr	r0, [r3, #0]
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	24000018 	.word	0x24000018

080115f4 <__libc_init_array>:
 80115f4:	b570      	push	{r4, r5, r6, lr}
 80115f6:	4d0d      	ldr	r5, [pc, #52]	; (801162c <__libc_init_array+0x38>)
 80115f8:	4c0d      	ldr	r4, [pc, #52]	; (8011630 <__libc_init_array+0x3c>)
 80115fa:	1b64      	subs	r4, r4, r5
 80115fc:	10a4      	asrs	r4, r4, #2
 80115fe:	2600      	movs	r6, #0
 8011600:	42a6      	cmp	r6, r4
 8011602:	d109      	bne.n	8011618 <__libc_init_array+0x24>
 8011604:	4d0b      	ldr	r5, [pc, #44]	; (8011634 <__libc_init_array+0x40>)
 8011606:	4c0c      	ldr	r4, [pc, #48]	; (8011638 <__libc_init_array+0x44>)
 8011608:	f000 fd58 	bl	80120bc <_init>
 801160c:	1b64      	subs	r4, r4, r5
 801160e:	10a4      	asrs	r4, r4, #2
 8011610:	2600      	movs	r6, #0
 8011612:	42a6      	cmp	r6, r4
 8011614:	d105      	bne.n	8011622 <__libc_init_array+0x2e>
 8011616:	bd70      	pop	{r4, r5, r6, pc}
 8011618:	f855 3b04 	ldr.w	r3, [r5], #4
 801161c:	4798      	blx	r3
 801161e:	3601      	adds	r6, #1
 8011620:	e7ee      	b.n	8011600 <__libc_init_array+0xc>
 8011622:	f855 3b04 	ldr.w	r3, [r5], #4
 8011626:	4798      	blx	r3
 8011628:	3601      	adds	r6, #1
 801162a:	e7f2      	b.n	8011612 <__libc_init_array+0x1e>
 801162c:	08012380 	.word	0x08012380
 8011630:	08012380 	.word	0x08012380
 8011634:	08012380 	.word	0x08012380
 8011638:	08012384 	.word	0x08012384

0801163c <__retarget_lock_acquire_recursive>:
 801163c:	4770      	bx	lr

0801163e <__retarget_lock_release_recursive>:
 801163e:	4770      	bx	lr

08011640 <memcpy>:
 8011640:	440a      	add	r2, r1
 8011642:	4291      	cmp	r1, r2
 8011644:	f100 33ff 	add.w	r3, r0, #4294967295
 8011648:	d100      	bne.n	801164c <memcpy+0xc>
 801164a:	4770      	bx	lr
 801164c:	b510      	push	{r4, lr}
 801164e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011656:	4291      	cmp	r1, r2
 8011658:	d1f9      	bne.n	801164e <memcpy+0xe>
 801165a:	bd10      	pop	{r4, pc}

0801165c <memset>:
 801165c:	4402      	add	r2, r0
 801165e:	4603      	mov	r3, r0
 8011660:	4293      	cmp	r3, r2
 8011662:	d100      	bne.n	8011666 <memset+0xa>
 8011664:	4770      	bx	lr
 8011666:	f803 1b01 	strb.w	r1, [r3], #1
 801166a:	e7f9      	b.n	8011660 <memset+0x4>

0801166c <_malloc_r>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	1ccd      	adds	r5, r1, #3
 8011670:	f025 0503 	bic.w	r5, r5, #3
 8011674:	3508      	adds	r5, #8
 8011676:	2d0c      	cmp	r5, #12
 8011678:	bf38      	it	cc
 801167a:	250c      	movcc	r5, #12
 801167c:	2d00      	cmp	r5, #0
 801167e:	4606      	mov	r6, r0
 8011680:	db01      	blt.n	8011686 <_malloc_r+0x1a>
 8011682:	42a9      	cmp	r1, r5
 8011684:	d903      	bls.n	801168e <_malloc_r+0x22>
 8011686:	230c      	movs	r3, #12
 8011688:	6033      	str	r3, [r6, #0]
 801168a:	2000      	movs	r0, #0
 801168c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801168e:	f000 f981 	bl	8011994 <__malloc_lock>
 8011692:	4921      	ldr	r1, [pc, #132]	; (8011718 <_malloc_r+0xac>)
 8011694:	680a      	ldr	r2, [r1, #0]
 8011696:	4614      	mov	r4, r2
 8011698:	b99c      	cbnz	r4, 80116c2 <_malloc_r+0x56>
 801169a:	4f20      	ldr	r7, [pc, #128]	; (801171c <_malloc_r+0xb0>)
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	b923      	cbnz	r3, 80116aa <_malloc_r+0x3e>
 80116a0:	4621      	mov	r1, r4
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 f8a6 	bl	80117f4 <_sbrk_r>
 80116a8:	6038      	str	r0, [r7, #0]
 80116aa:	4629      	mov	r1, r5
 80116ac:	4630      	mov	r0, r6
 80116ae:	f000 f8a1 	bl	80117f4 <_sbrk_r>
 80116b2:	1c43      	adds	r3, r0, #1
 80116b4:	d123      	bne.n	80116fe <_malloc_r+0x92>
 80116b6:	230c      	movs	r3, #12
 80116b8:	6033      	str	r3, [r6, #0]
 80116ba:	4630      	mov	r0, r6
 80116bc:	f000 f970 	bl	80119a0 <__malloc_unlock>
 80116c0:	e7e3      	b.n	801168a <_malloc_r+0x1e>
 80116c2:	6823      	ldr	r3, [r4, #0]
 80116c4:	1b5b      	subs	r3, r3, r5
 80116c6:	d417      	bmi.n	80116f8 <_malloc_r+0x8c>
 80116c8:	2b0b      	cmp	r3, #11
 80116ca:	d903      	bls.n	80116d4 <_malloc_r+0x68>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	441c      	add	r4, r3
 80116d0:	6025      	str	r5, [r4, #0]
 80116d2:	e004      	b.n	80116de <_malloc_r+0x72>
 80116d4:	6863      	ldr	r3, [r4, #4]
 80116d6:	42a2      	cmp	r2, r4
 80116d8:	bf0c      	ite	eq
 80116da:	600b      	streq	r3, [r1, #0]
 80116dc:	6053      	strne	r3, [r2, #4]
 80116de:	4630      	mov	r0, r6
 80116e0:	f000 f95e 	bl	80119a0 <__malloc_unlock>
 80116e4:	f104 000b 	add.w	r0, r4, #11
 80116e8:	1d23      	adds	r3, r4, #4
 80116ea:	f020 0007 	bic.w	r0, r0, #7
 80116ee:	1ac2      	subs	r2, r0, r3
 80116f0:	d0cc      	beq.n	801168c <_malloc_r+0x20>
 80116f2:	1a1b      	subs	r3, r3, r0
 80116f4:	50a3      	str	r3, [r4, r2]
 80116f6:	e7c9      	b.n	801168c <_malloc_r+0x20>
 80116f8:	4622      	mov	r2, r4
 80116fa:	6864      	ldr	r4, [r4, #4]
 80116fc:	e7cc      	b.n	8011698 <_malloc_r+0x2c>
 80116fe:	1cc4      	adds	r4, r0, #3
 8011700:	f024 0403 	bic.w	r4, r4, #3
 8011704:	42a0      	cmp	r0, r4
 8011706:	d0e3      	beq.n	80116d0 <_malloc_r+0x64>
 8011708:	1a21      	subs	r1, r4, r0
 801170a:	4630      	mov	r0, r6
 801170c:	f000 f872 	bl	80117f4 <_sbrk_r>
 8011710:	3001      	adds	r0, #1
 8011712:	d1dd      	bne.n	80116d0 <_malloc_r+0x64>
 8011714:	e7cf      	b.n	80116b6 <_malloc_r+0x4a>
 8011716:	bf00      	nop
 8011718:	24027360 	.word	0x24027360
 801171c:	24027364 	.word	0x24027364

08011720 <cleanup_glue>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	460c      	mov	r4, r1
 8011724:	6809      	ldr	r1, [r1, #0]
 8011726:	4605      	mov	r5, r0
 8011728:	b109      	cbz	r1, 801172e <cleanup_glue+0xe>
 801172a:	f7ff fff9 	bl	8011720 <cleanup_glue>
 801172e:	4621      	mov	r1, r4
 8011730:	4628      	mov	r0, r5
 8011732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011736:	f000 b939 	b.w	80119ac <_free_r>
	...

0801173c <_reclaim_reent>:
 801173c:	4b2c      	ldr	r3, [pc, #176]	; (80117f0 <_reclaim_reent+0xb4>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4283      	cmp	r3, r0
 8011742:	b570      	push	{r4, r5, r6, lr}
 8011744:	4604      	mov	r4, r0
 8011746:	d051      	beq.n	80117ec <_reclaim_reent+0xb0>
 8011748:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801174a:	b143      	cbz	r3, 801175e <_reclaim_reent+0x22>
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d14a      	bne.n	80117e8 <_reclaim_reent+0xac>
 8011752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011754:	6819      	ldr	r1, [r3, #0]
 8011756:	b111      	cbz	r1, 801175e <_reclaim_reent+0x22>
 8011758:	4620      	mov	r0, r4
 801175a:	f000 f927 	bl	80119ac <_free_r>
 801175e:	6961      	ldr	r1, [r4, #20]
 8011760:	b111      	cbz	r1, 8011768 <_reclaim_reent+0x2c>
 8011762:	4620      	mov	r0, r4
 8011764:	f000 f922 	bl	80119ac <_free_r>
 8011768:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801176a:	b111      	cbz	r1, 8011772 <_reclaim_reent+0x36>
 801176c:	4620      	mov	r0, r4
 801176e:	f000 f91d 	bl	80119ac <_free_r>
 8011772:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011774:	b111      	cbz	r1, 801177c <_reclaim_reent+0x40>
 8011776:	4620      	mov	r0, r4
 8011778:	f000 f918 	bl	80119ac <_free_r>
 801177c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801177e:	b111      	cbz	r1, 8011786 <_reclaim_reent+0x4a>
 8011780:	4620      	mov	r0, r4
 8011782:	f000 f913 	bl	80119ac <_free_r>
 8011786:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011788:	b111      	cbz	r1, 8011790 <_reclaim_reent+0x54>
 801178a:	4620      	mov	r0, r4
 801178c:	f000 f90e 	bl	80119ac <_free_r>
 8011790:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011792:	b111      	cbz	r1, 801179a <_reclaim_reent+0x5e>
 8011794:	4620      	mov	r0, r4
 8011796:	f000 f909 	bl	80119ac <_free_r>
 801179a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801179c:	b111      	cbz	r1, 80117a4 <_reclaim_reent+0x68>
 801179e:	4620      	mov	r0, r4
 80117a0:	f000 f904 	bl	80119ac <_free_r>
 80117a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117a6:	b111      	cbz	r1, 80117ae <_reclaim_reent+0x72>
 80117a8:	4620      	mov	r0, r4
 80117aa:	f000 f8ff 	bl	80119ac <_free_r>
 80117ae:	69a3      	ldr	r3, [r4, #24]
 80117b0:	b1e3      	cbz	r3, 80117ec <_reclaim_reent+0xb0>
 80117b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80117b4:	4620      	mov	r0, r4
 80117b6:	4798      	blx	r3
 80117b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80117ba:	b1b9      	cbz	r1, 80117ec <_reclaim_reent+0xb0>
 80117bc:	4620      	mov	r0, r4
 80117be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117c2:	f7ff bfad 	b.w	8011720 <cleanup_glue>
 80117c6:	5949      	ldr	r1, [r1, r5]
 80117c8:	b941      	cbnz	r1, 80117dc <_reclaim_reent+0xa0>
 80117ca:	3504      	adds	r5, #4
 80117cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117ce:	2d80      	cmp	r5, #128	; 0x80
 80117d0:	68d9      	ldr	r1, [r3, #12]
 80117d2:	d1f8      	bne.n	80117c6 <_reclaim_reent+0x8a>
 80117d4:	4620      	mov	r0, r4
 80117d6:	f000 f8e9 	bl	80119ac <_free_r>
 80117da:	e7ba      	b.n	8011752 <_reclaim_reent+0x16>
 80117dc:	680e      	ldr	r6, [r1, #0]
 80117de:	4620      	mov	r0, r4
 80117e0:	f000 f8e4 	bl	80119ac <_free_r>
 80117e4:	4631      	mov	r1, r6
 80117e6:	e7ef      	b.n	80117c8 <_reclaim_reent+0x8c>
 80117e8:	2500      	movs	r5, #0
 80117ea:	e7ef      	b.n	80117cc <_reclaim_reent+0x90>
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	bf00      	nop
 80117f0:	24000018 	.word	0x24000018

080117f4 <_sbrk_r>:
 80117f4:	b538      	push	{r3, r4, r5, lr}
 80117f6:	4d06      	ldr	r5, [pc, #24]	; (8011810 <_sbrk_r+0x1c>)
 80117f8:	2300      	movs	r3, #0
 80117fa:	4604      	mov	r4, r0
 80117fc:	4608      	mov	r0, r1
 80117fe:	602b      	str	r3, [r5, #0]
 8011800:	f7f1 fbde 	bl	8002fc0 <_sbrk>
 8011804:	1c43      	adds	r3, r0, #1
 8011806:	d102      	bne.n	801180e <_sbrk_r+0x1a>
 8011808:	682b      	ldr	r3, [r5, #0]
 801180a:	b103      	cbz	r3, 801180e <_sbrk_r+0x1a>
 801180c:	6023      	str	r3, [r4, #0]
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	24027c94 	.word	0x24027c94

08011814 <siprintf>:
 8011814:	b40e      	push	{r1, r2, r3}
 8011816:	b500      	push	{lr}
 8011818:	b09c      	sub	sp, #112	; 0x70
 801181a:	ab1d      	add	r3, sp, #116	; 0x74
 801181c:	9002      	str	r0, [sp, #8]
 801181e:	9006      	str	r0, [sp, #24]
 8011820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011824:	4809      	ldr	r0, [pc, #36]	; (801184c <siprintf+0x38>)
 8011826:	9107      	str	r1, [sp, #28]
 8011828:	9104      	str	r1, [sp, #16]
 801182a:	4909      	ldr	r1, [pc, #36]	; (8011850 <siprintf+0x3c>)
 801182c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011830:	9105      	str	r1, [sp, #20]
 8011832:	6800      	ldr	r0, [r0, #0]
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	a902      	add	r1, sp, #8
 8011838:	f000 f964 	bl	8011b04 <_svfiprintf_r>
 801183c:	9b02      	ldr	r3, [sp, #8]
 801183e:	2200      	movs	r2, #0
 8011840:	701a      	strb	r2, [r3, #0]
 8011842:	b01c      	add	sp, #112	; 0x70
 8011844:	f85d eb04 	ldr.w	lr, [sp], #4
 8011848:	b003      	add	sp, #12
 801184a:	4770      	bx	lr
 801184c:	24000018 	.word	0x24000018
 8011850:	ffff0208 	.word	0xffff0208

08011854 <strncmp>:
 8011854:	b510      	push	{r4, lr}
 8011856:	b16a      	cbz	r2, 8011874 <strncmp+0x20>
 8011858:	3901      	subs	r1, #1
 801185a:	1884      	adds	r4, r0, r2
 801185c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011860:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011864:	4293      	cmp	r3, r2
 8011866:	d103      	bne.n	8011870 <strncmp+0x1c>
 8011868:	42a0      	cmp	r0, r4
 801186a:	d001      	beq.n	8011870 <strncmp+0x1c>
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1f5      	bne.n	801185c <strncmp+0x8>
 8011870:	1a98      	subs	r0, r3, r2
 8011872:	bd10      	pop	{r4, pc}
 8011874:	4610      	mov	r0, r2
 8011876:	e7fc      	b.n	8011872 <strncmp+0x1e>

08011878 <_strtol_l.isra.0>:
 8011878:	2b01      	cmp	r3, #1
 801187a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801187e:	d001      	beq.n	8011884 <_strtol_l.isra.0+0xc>
 8011880:	2b24      	cmp	r3, #36	; 0x24
 8011882:	d906      	bls.n	8011892 <_strtol_l.isra.0+0x1a>
 8011884:	f7ff feb0 	bl	80115e8 <__errno>
 8011888:	2316      	movs	r3, #22
 801188a:	6003      	str	r3, [r0, #0]
 801188c:	2000      	movs	r0, #0
 801188e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011892:	4f3a      	ldr	r7, [pc, #232]	; (801197c <_strtol_l.isra.0+0x104>)
 8011894:	468e      	mov	lr, r1
 8011896:	4676      	mov	r6, lr
 8011898:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801189c:	5de5      	ldrb	r5, [r4, r7]
 801189e:	f015 0508 	ands.w	r5, r5, #8
 80118a2:	d1f8      	bne.n	8011896 <_strtol_l.isra.0+0x1e>
 80118a4:	2c2d      	cmp	r4, #45	; 0x2d
 80118a6:	d134      	bne.n	8011912 <_strtol_l.isra.0+0x9a>
 80118a8:	f89e 4000 	ldrb.w	r4, [lr]
 80118ac:	f04f 0801 	mov.w	r8, #1
 80118b0:	f106 0e02 	add.w	lr, r6, #2
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d05c      	beq.n	8011972 <_strtol_l.isra.0+0xfa>
 80118b8:	2b10      	cmp	r3, #16
 80118ba:	d10c      	bne.n	80118d6 <_strtol_l.isra.0+0x5e>
 80118bc:	2c30      	cmp	r4, #48	; 0x30
 80118be:	d10a      	bne.n	80118d6 <_strtol_l.isra.0+0x5e>
 80118c0:	f89e 4000 	ldrb.w	r4, [lr]
 80118c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80118c8:	2c58      	cmp	r4, #88	; 0x58
 80118ca:	d14d      	bne.n	8011968 <_strtol_l.isra.0+0xf0>
 80118cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80118d0:	2310      	movs	r3, #16
 80118d2:	f10e 0e02 	add.w	lr, lr, #2
 80118d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80118da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80118de:	2600      	movs	r6, #0
 80118e0:	fbbc f9f3 	udiv	r9, ip, r3
 80118e4:	4635      	mov	r5, r6
 80118e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80118ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80118ee:	2f09      	cmp	r7, #9
 80118f0:	d818      	bhi.n	8011924 <_strtol_l.isra.0+0xac>
 80118f2:	463c      	mov	r4, r7
 80118f4:	42a3      	cmp	r3, r4
 80118f6:	dd24      	ble.n	8011942 <_strtol_l.isra.0+0xca>
 80118f8:	2e00      	cmp	r6, #0
 80118fa:	db1f      	blt.n	801193c <_strtol_l.isra.0+0xc4>
 80118fc:	45a9      	cmp	r9, r5
 80118fe:	d31d      	bcc.n	801193c <_strtol_l.isra.0+0xc4>
 8011900:	d101      	bne.n	8011906 <_strtol_l.isra.0+0x8e>
 8011902:	45a2      	cmp	sl, r4
 8011904:	db1a      	blt.n	801193c <_strtol_l.isra.0+0xc4>
 8011906:	fb05 4503 	mla	r5, r5, r3, r4
 801190a:	2601      	movs	r6, #1
 801190c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011910:	e7eb      	b.n	80118ea <_strtol_l.isra.0+0x72>
 8011912:	2c2b      	cmp	r4, #43	; 0x2b
 8011914:	bf08      	it	eq
 8011916:	f89e 4000 	ldrbeq.w	r4, [lr]
 801191a:	46a8      	mov	r8, r5
 801191c:	bf08      	it	eq
 801191e:	f106 0e02 	addeq.w	lr, r6, #2
 8011922:	e7c7      	b.n	80118b4 <_strtol_l.isra.0+0x3c>
 8011924:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011928:	2f19      	cmp	r7, #25
 801192a:	d801      	bhi.n	8011930 <_strtol_l.isra.0+0xb8>
 801192c:	3c37      	subs	r4, #55	; 0x37
 801192e:	e7e1      	b.n	80118f4 <_strtol_l.isra.0+0x7c>
 8011930:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011934:	2f19      	cmp	r7, #25
 8011936:	d804      	bhi.n	8011942 <_strtol_l.isra.0+0xca>
 8011938:	3c57      	subs	r4, #87	; 0x57
 801193a:	e7db      	b.n	80118f4 <_strtol_l.isra.0+0x7c>
 801193c:	f04f 36ff 	mov.w	r6, #4294967295
 8011940:	e7e4      	b.n	801190c <_strtol_l.isra.0+0x94>
 8011942:	2e00      	cmp	r6, #0
 8011944:	da05      	bge.n	8011952 <_strtol_l.isra.0+0xda>
 8011946:	2322      	movs	r3, #34	; 0x22
 8011948:	6003      	str	r3, [r0, #0]
 801194a:	4665      	mov	r5, ip
 801194c:	b942      	cbnz	r2, 8011960 <_strtol_l.isra.0+0xe8>
 801194e:	4628      	mov	r0, r5
 8011950:	e79d      	b.n	801188e <_strtol_l.isra.0+0x16>
 8011952:	f1b8 0f00 	cmp.w	r8, #0
 8011956:	d000      	beq.n	801195a <_strtol_l.isra.0+0xe2>
 8011958:	426d      	negs	r5, r5
 801195a:	2a00      	cmp	r2, #0
 801195c:	d0f7      	beq.n	801194e <_strtol_l.isra.0+0xd6>
 801195e:	b10e      	cbz	r6, 8011964 <_strtol_l.isra.0+0xec>
 8011960:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011964:	6011      	str	r1, [r2, #0]
 8011966:	e7f2      	b.n	801194e <_strtol_l.isra.0+0xd6>
 8011968:	2430      	movs	r4, #48	; 0x30
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1b3      	bne.n	80118d6 <_strtol_l.isra.0+0x5e>
 801196e:	2308      	movs	r3, #8
 8011970:	e7b1      	b.n	80118d6 <_strtol_l.isra.0+0x5e>
 8011972:	2c30      	cmp	r4, #48	; 0x30
 8011974:	d0a4      	beq.n	80118c0 <_strtol_l.isra.0+0x48>
 8011976:	230a      	movs	r3, #10
 8011978:	e7ad      	b.n	80118d6 <_strtol_l.isra.0+0x5e>
 801197a:	bf00      	nop
 801197c:	08012245 	.word	0x08012245

08011980 <strtol>:
 8011980:	4613      	mov	r3, r2
 8011982:	460a      	mov	r2, r1
 8011984:	4601      	mov	r1, r0
 8011986:	4802      	ldr	r0, [pc, #8]	; (8011990 <strtol+0x10>)
 8011988:	6800      	ldr	r0, [r0, #0]
 801198a:	f7ff bf75 	b.w	8011878 <_strtol_l.isra.0>
 801198e:	bf00      	nop
 8011990:	24000018 	.word	0x24000018

08011994 <__malloc_lock>:
 8011994:	4801      	ldr	r0, [pc, #4]	; (801199c <__malloc_lock+0x8>)
 8011996:	f7ff be51 	b.w	801163c <__retarget_lock_acquire_recursive>
 801199a:	bf00      	nop
 801199c:	24027c8c 	.word	0x24027c8c

080119a0 <__malloc_unlock>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__malloc_unlock+0x8>)
 80119a2:	f7ff be4c 	b.w	801163e <__retarget_lock_release_recursive>
 80119a6:	bf00      	nop
 80119a8:	24027c8c 	.word	0x24027c8c

080119ac <_free_r>:
 80119ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ae:	2900      	cmp	r1, #0
 80119b0:	d048      	beq.n	8011a44 <_free_r+0x98>
 80119b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119b6:	9001      	str	r0, [sp, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f1a1 0404 	sub.w	r4, r1, #4
 80119be:	bfb8      	it	lt
 80119c0:	18e4      	addlt	r4, r4, r3
 80119c2:	f7ff ffe7 	bl	8011994 <__malloc_lock>
 80119c6:	4a20      	ldr	r2, [pc, #128]	; (8011a48 <_free_r+0x9c>)
 80119c8:	9801      	ldr	r0, [sp, #4]
 80119ca:	6813      	ldr	r3, [r2, #0]
 80119cc:	4615      	mov	r5, r2
 80119ce:	b933      	cbnz	r3, 80119de <_free_r+0x32>
 80119d0:	6063      	str	r3, [r4, #4]
 80119d2:	6014      	str	r4, [r2, #0]
 80119d4:	b003      	add	sp, #12
 80119d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119da:	f7ff bfe1 	b.w	80119a0 <__malloc_unlock>
 80119de:	42a3      	cmp	r3, r4
 80119e0:	d90b      	bls.n	80119fa <_free_r+0x4e>
 80119e2:	6821      	ldr	r1, [r4, #0]
 80119e4:	1862      	adds	r2, r4, r1
 80119e6:	4293      	cmp	r3, r2
 80119e8:	bf04      	itt	eq
 80119ea:	681a      	ldreq	r2, [r3, #0]
 80119ec:	685b      	ldreq	r3, [r3, #4]
 80119ee:	6063      	str	r3, [r4, #4]
 80119f0:	bf04      	itt	eq
 80119f2:	1852      	addeq	r2, r2, r1
 80119f4:	6022      	streq	r2, [r4, #0]
 80119f6:	602c      	str	r4, [r5, #0]
 80119f8:	e7ec      	b.n	80119d4 <_free_r+0x28>
 80119fa:	461a      	mov	r2, r3
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	b10b      	cbz	r3, 8011a04 <_free_r+0x58>
 8011a00:	42a3      	cmp	r3, r4
 8011a02:	d9fa      	bls.n	80119fa <_free_r+0x4e>
 8011a04:	6811      	ldr	r1, [r2, #0]
 8011a06:	1855      	adds	r5, r2, r1
 8011a08:	42a5      	cmp	r5, r4
 8011a0a:	d10b      	bne.n	8011a24 <_free_r+0x78>
 8011a0c:	6824      	ldr	r4, [r4, #0]
 8011a0e:	4421      	add	r1, r4
 8011a10:	1854      	adds	r4, r2, r1
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	6011      	str	r1, [r2, #0]
 8011a16:	d1dd      	bne.n	80119d4 <_free_r+0x28>
 8011a18:	681c      	ldr	r4, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	6053      	str	r3, [r2, #4]
 8011a1e:	4421      	add	r1, r4
 8011a20:	6011      	str	r1, [r2, #0]
 8011a22:	e7d7      	b.n	80119d4 <_free_r+0x28>
 8011a24:	d902      	bls.n	8011a2c <_free_r+0x80>
 8011a26:	230c      	movs	r3, #12
 8011a28:	6003      	str	r3, [r0, #0]
 8011a2a:	e7d3      	b.n	80119d4 <_free_r+0x28>
 8011a2c:	6825      	ldr	r5, [r4, #0]
 8011a2e:	1961      	adds	r1, r4, r5
 8011a30:	428b      	cmp	r3, r1
 8011a32:	bf04      	itt	eq
 8011a34:	6819      	ldreq	r1, [r3, #0]
 8011a36:	685b      	ldreq	r3, [r3, #4]
 8011a38:	6063      	str	r3, [r4, #4]
 8011a3a:	bf04      	itt	eq
 8011a3c:	1949      	addeq	r1, r1, r5
 8011a3e:	6021      	streq	r1, [r4, #0]
 8011a40:	6054      	str	r4, [r2, #4]
 8011a42:	e7c7      	b.n	80119d4 <_free_r+0x28>
 8011a44:	b003      	add	sp, #12
 8011a46:	bd30      	pop	{r4, r5, pc}
 8011a48:	24027360 	.word	0x24027360

08011a4c <__ssputs_r>:
 8011a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a50:	688e      	ldr	r6, [r1, #8]
 8011a52:	429e      	cmp	r6, r3
 8011a54:	4682      	mov	sl, r0
 8011a56:	460c      	mov	r4, r1
 8011a58:	4690      	mov	r8, r2
 8011a5a:	461f      	mov	r7, r3
 8011a5c:	d838      	bhi.n	8011ad0 <__ssputs_r+0x84>
 8011a5e:	898a      	ldrh	r2, [r1, #12]
 8011a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011a64:	d032      	beq.n	8011acc <__ssputs_r+0x80>
 8011a66:	6825      	ldr	r5, [r4, #0]
 8011a68:	6909      	ldr	r1, [r1, #16]
 8011a6a:	eba5 0901 	sub.w	r9, r5, r1
 8011a6e:	6965      	ldr	r5, [r4, #20]
 8011a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a78:	3301      	adds	r3, #1
 8011a7a:	444b      	add	r3, r9
 8011a7c:	106d      	asrs	r5, r5, #1
 8011a7e:	429d      	cmp	r5, r3
 8011a80:	bf38      	it	cc
 8011a82:	461d      	movcc	r5, r3
 8011a84:	0553      	lsls	r3, r2, #21
 8011a86:	d531      	bpl.n	8011aec <__ssputs_r+0xa0>
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7ff fdef 	bl	801166c <_malloc_r>
 8011a8e:	4606      	mov	r6, r0
 8011a90:	b950      	cbnz	r0, 8011aa8 <__ssputs_r+0x5c>
 8011a92:	230c      	movs	r3, #12
 8011a94:	f8ca 3000 	str.w	r3, [sl]
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a9e:	81a3      	strh	r3, [r4, #12]
 8011aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa8:	6921      	ldr	r1, [r4, #16]
 8011aaa:	464a      	mov	r2, r9
 8011aac:	f7ff fdc8 	bl	8011640 <memcpy>
 8011ab0:	89a3      	ldrh	r3, [r4, #12]
 8011ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aba:	81a3      	strh	r3, [r4, #12]
 8011abc:	6126      	str	r6, [r4, #16]
 8011abe:	6165      	str	r5, [r4, #20]
 8011ac0:	444e      	add	r6, r9
 8011ac2:	eba5 0509 	sub.w	r5, r5, r9
 8011ac6:	6026      	str	r6, [r4, #0]
 8011ac8:	60a5      	str	r5, [r4, #8]
 8011aca:	463e      	mov	r6, r7
 8011acc:	42be      	cmp	r6, r7
 8011ace:	d900      	bls.n	8011ad2 <__ssputs_r+0x86>
 8011ad0:	463e      	mov	r6, r7
 8011ad2:	4632      	mov	r2, r6
 8011ad4:	6820      	ldr	r0, [r4, #0]
 8011ad6:	4641      	mov	r1, r8
 8011ad8:	f000 faa8 	bl	801202c <memmove>
 8011adc:	68a3      	ldr	r3, [r4, #8]
 8011ade:	6822      	ldr	r2, [r4, #0]
 8011ae0:	1b9b      	subs	r3, r3, r6
 8011ae2:	4432      	add	r2, r6
 8011ae4:	60a3      	str	r3, [r4, #8]
 8011ae6:	6022      	str	r2, [r4, #0]
 8011ae8:	2000      	movs	r0, #0
 8011aea:	e7db      	b.n	8011aa4 <__ssputs_r+0x58>
 8011aec:	462a      	mov	r2, r5
 8011aee:	f000 fab7 	bl	8012060 <_realloc_r>
 8011af2:	4606      	mov	r6, r0
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d1e1      	bne.n	8011abc <__ssputs_r+0x70>
 8011af8:	6921      	ldr	r1, [r4, #16]
 8011afa:	4650      	mov	r0, sl
 8011afc:	f7ff ff56 	bl	80119ac <_free_r>
 8011b00:	e7c7      	b.n	8011a92 <__ssputs_r+0x46>
	...

08011b04 <_svfiprintf_r>:
 8011b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b08:	4698      	mov	r8, r3
 8011b0a:	898b      	ldrh	r3, [r1, #12]
 8011b0c:	061b      	lsls	r3, r3, #24
 8011b0e:	b09d      	sub	sp, #116	; 0x74
 8011b10:	4607      	mov	r7, r0
 8011b12:	460d      	mov	r5, r1
 8011b14:	4614      	mov	r4, r2
 8011b16:	d50e      	bpl.n	8011b36 <_svfiprintf_r+0x32>
 8011b18:	690b      	ldr	r3, [r1, #16]
 8011b1a:	b963      	cbnz	r3, 8011b36 <_svfiprintf_r+0x32>
 8011b1c:	2140      	movs	r1, #64	; 0x40
 8011b1e:	f7ff fda5 	bl	801166c <_malloc_r>
 8011b22:	6028      	str	r0, [r5, #0]
 8011b24:	6128      	str	r0, [r5, #16]
 8011b26:	b920      	cbnz	r0, 8011b32 <_svfiprintf_r+0x2e>
 8011b28:	230c      	movs	r3, #12
 8011b2a:	603b      	str	r3, [r7, #0]
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b30:	e0d1      	b.n	8011cd6 <_svfiprintf_r+0x1d2>
 8011b32:	2340      	movs	r3, #64	; 0x40
 8011b34:	616b      	str	r3, [r5, #20]
 8011b36:	2300      	movs	r3, #0
 8011b38:	9309      	str	r3, [sp, #36]	; 0x24
 8011b3a:	2320      	movs	r3, #32
 8011b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b44:	2330      	movs	r3, #48	; 0x30
 8011b46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011cf0 <_svfiprintf_r+0x1ec>
 8011b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b4e:	f04f 0901 	mov.w	r9, #1
 8011b52:	4623      	mov	r3, r4
 8011b54:	469a      	mov	sl, r3
 8011b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b5a:	b10a      	cbz	r2, 8011b60 <_svfiprintf_r+0x5c>
 8011b5c:	2a25      	cmp	r2, #37	; 0x25
 8011b5e:	d1f9      	bne.n	8011b54 <_svfiprintf_r+0x50>
 8011b60:	ebba 0b04 	subs.w	fp, sl, r4
 8011b64:	d00b      	beq.n	8011b7e <_svfiprintf_r+0x7a>
 8011b66:	465b      	mov	r3, fp
 8011b68:	4622      	mov	r2, r4
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	4638      	mov	r0, r7
 8011b6e:	f7ff ff6d 	bl	8011a4c <__ssputs_r>
 8011b72:	3001      	adds	r0, #1
 8011b74:	f000 80aa 	beq.w	8011ccc <_svfiprintf_r+0x1c8>
 8011b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b7a:	445a      	add	r2, fp
 8011b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f000 80a2 	beq.w	8011ccc <_svfiprintf_r+0x1c8>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b92:	f10a 0a01 	add.w	sl, sl, #1
 8011b96:	9304      	str	r3, [sp, #16]
 8011b98:	9307      	str	r3, [sp, #28]
 8011b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8011ba0:	4654      	mov	r4, sl
 8011ba2:	2205      	movs	r2, #5
 8011ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ba8:	4851      	ldr	r0, [pc, #324]	; (8011cf0 <_svfiprintf_r+0x1ec>)
 8011baa:	f7ee fba1 	bl	80002f0 <memchr>
 8011bae:	9a04      	ldr	r2, [sp, #16]
 8011bb0:	b9d8      	cbnz	r0, 8011bea <_svfiprintf_r+0xe6>
 8011bb2:	06d0      	lsls	r0, r2, #27
 8011bb4:	bf44      	itt	mi
 8011bb6:	2320      	movmi	r3, #32
 8011bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bbc:	0711      	lsls	r1, r2, #28
 8011bbe:	bf44      	itt	mi
 8011bc0:	232b      	movmi	r3, #43	; 0x2b
 8011bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011bca:	2b2a      	cmp	r3, #42	; 0x2a
 8011bcc:	d015      	beq.n	8011bfa <_svfiprintf_r+0xf6>
 8011bce:	9a07      	ldr	r2, [sp, #28]
 8011bd0:	4654      	mov	r4, sl
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f04f 0c0a 	mov.w	ip, #10
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bde:	3b30      	subs	r3, #48	; 0x30
 8011be0:	2b09      	cmp	r3, #9
 8011be2:	d94e      	bls.n	8011c82 <_svfiprintf_r+0x17e>
 8011be4:	b1b0      	cbz	r0, 8011c14 <_svfiprintf_r+0x110>
 8011be6:	9207      	str	r2, [sp, #28]
 8011be8:	e014      	b.n	8011c14 <_svfiprintf_r+0x110>
 8011bea:	eba0 0308 	sub.w	r3, r0, r8
 8011bee:	fa09 f303 	lsl.w	r3, r9, r3
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	9304      	str	r3, [sp, #16]
 8011bf6:	46a2      	mov	sl, r4
 8011bf8:	e7d2      	b.n	8011ba0 <_svfiprintf_r+0x9c>
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	1d19      	adds	r1, r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	9103      	str	r1, [sp, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	bfbb      	ittet	lt
 8011c06:	425b      	neglt	r3, r3
 8011c08:	f042 0202 	orrlt.w	r2, r2, #2
 8011c0c:	9307      	strge	r3, [sp, #28]
 8011c0e:	9307      	strlt	r3, [sp, #28]
 8011c10:	bfb8      	it	lt
 8011c12:	9204      	strlt	r2, [sp, #16]
 8011c14:	7823      	ldrb	r3, [r4, #0]
 8011c16:	2b2e      	cmp	r3, #46	; 0x2e
 8011c18:	d10c      	bne.n	8011c34 <_svfiprintf_r+0x130>
 8011c1a:	7863      	ldrb	r3, [r4, #1]
 8011c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c1e:	d135      	bne.n	8011c8c <_svfiprintf_r+0x188>
 8011c20:	9b03      	ldr	r3, [sp, #12]
 8011c22:	1d1a      	adds	r2, r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	9203      	str	r2, [sp, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	bfb8      	it	lt
 8011c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c30:	3402      	adds	r4, #2
 8011c32:	9305      	str	r3, [sp, #20]
 8011c34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d00 <_svfiprintf_r+0x1fc>
 8011c38:	7821      	ldrb	r1, [r4, #0]
 8011c3a:	2203      	movs	r2, #3
 8011c3c:	4650      	mov	r0, sl
 8011c3e:	f7ee fb57 	bl	80002f0 <memchr>
 8011c42:	b140      	cbz	r0, 8011c56 <_svfiprintf_r+0x152>
 8011c44:	2340      	movs	r3, #64	; 0x40
 8011c46:	eba0 000a 	sub.w	r0, r0, sl
 8011c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8011c4e:	9b04      	ldr	r3, [sp, #16]
 8011c50:	4303      	orrs	r3, r0
 8011c52:	3401      	adds	r4, #1
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c5a:	4826      	ldr	r0, [pc, #152]	; (8011cf4 <_svfiprintf_r+0x1f0>)
 8011c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c60:	2206      	movs	r2, #6
 8011c62:	f7ee fb45 	bl	80002f0 <memchr>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d038      	beq.n	8011cdc <_svfiprintf_r+0x1d8>
 8011c6a:	4b23      	ldr	r3, [pc, #140]	; (8011cf8 <_svfiprintf_r+0x1f4>)
 8011c6c:	bb1b      	cbnz	r3, 8011cb6 <_svfiprintf_r+0x1b2>
 8011c6e:	9b03      	ldr	r3, [sp, #12]
 8011c70:	3307      	adds	r3, #7
 8011c72:	f023 0307 	bic.w	r3, r3, #7
 8011c76:	3308      	adds	r3, #8
 8011c78:	9303      	str	r3, [sp, #12]
 8011c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c7c:	4433      	add	r3, r6
 8011c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c80:	e767      	b.n	8011b52 <_svfiprintf_r+0x4e>
 8011c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c86:	460c      	mov	r4, r1
 8011c88:	2001      	movs	r0, #1
 8011c8a:	e7a5      	b.n	8011bd8 <_svfiprintf_r+0xd4>
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	3401      	adds	r4, #1
 8011c90:	9305      	str	r3, [sp, #20]
 8011c92:	4619      	mov	r1, r3
 8011c94:	f04f 0c0a 	mov.w	ip, #10
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c9e:	3a30      	subs	r2, #48	; 0x30
 8011ca0:	2a09      	cmp	r2, #9
 8011ca2:	d903      	bls.n	8011cac <_svfiprintf_r+0x1a8>
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d0c5      	beq.n	8011c34 <_svfiprintf_r+0x130>
 8011ca8:	9105      	str	r1, [sp, #20]
 8011caa:	e7c3      	b.n	8011c34 <_svfiprintf_r+0x130>
 8011cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e7f0      	b.n	8011c98 <_svfiprintf_r+0x194>
 8011cb6:	ab03      	add	r3, sp, #12
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	462a      	mov	r2, r5
 8011cbc:	4b0f      	ldr	r3, [pc, #60]	; (8011cfc <_svfiprintf_r+0x1f8>)
 8011cbe:	a904      	add	r1, sp, #16
 8011cc0:	4638      	mov	r0, r7
 8011cc2:	f3af 8000 	nop.w
 8011cc6:	1c42      	adds	r2, r0, #1
 8011cc8:	4606      	mov	r6, r0
 8011cca:	d1d6      	bne.n	8011c7a <_svfiprintf_r+0x176>
 8011ccc:	89ab      	ldrh	r3, [r5, #12]
 8011cce:	065b      	lsls	r3, r3, #25
 8011cd0:	f53f af2c 	bmi.w	8011b2c <_svfiprintf_r+0x28>
 8011cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cd6:	b01d      	add	sp, #116	; 0x74
 8011cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cdc:	ab03      	add	r3, sp, #12
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	462a      	mov	r2, r5
 8011ce2:	4b06      	ldr	r3, [pc, #24]	; (8011cfc <_svfiprintf_r+0x1f8>)
 8011ce4:	a904      	add	r1, sp, #16
 8011ce6:	4638      	mov	r0, r7
 8011ce8:	f000 f87a 	bl	8011de0 <_printf_i>
 8011cec:	e7eb      	b.n	8011cc6 <_svfiprintf_r+0x1c2>
 8011cee:	bf00      	nop
 8011cf0:	08012345 	.word	0x08012345
 8011cf4:	0801234f 	.word	0x0801234f
 8011cf8:	00000000 	.word	0x00000000
 8011cfc:	08011a4d 	.word	0x08011a4d
 8011d00:	0801234b 	.word	0x0801234b

08011d04 <_printf_common>:
 8011d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d08:	4616      	mov	r6, r2
 8011d0a:	4699      	mov	r9, r3
 8011d0c:	688a      	ldr	r2, [r1, #8]
 8011d0e:	690b      	ldr	r3, [r1, #16]
 8011d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d14:	4293      	cmp	r3, r2
 8011d16:	bfb8      	it	lt
 8011d18:	4613      	movlt	r3, r2
 8011d1a:	6033      	str	r3, [r6, #0]
 8011d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d20:	4607      	mov	r7, r0
 8011d22:	460c      	mov	r4, r1
 8011d24:	b10a      	cbz	r2, 8011d2a <_printf_common+0x26>
 8011d26:	3301      	adds	r3, #1
 8011d28:	6033      	str	r3, [r6, #0]
 8011d2a:	6823      	ldr	r3, [r4, #0]
 8011d2c:	0699      	lsls	r1, r3, #26
 8011d2e:	bf42      	ittt	mi
 8011d30:	6833      	ldrmi	r3, [r6, #0]
 8011d32:	3302      	addmi	r3, #2
 8011d34:	6033      	strmi	r3, [r6, #0]
 8011d36:	6825      	ldr	r5, [r4, #0]
 8011d38:	f015 0506 	ands.w	r5, r5, #6
 8011d3c:	d106      	bne.n	8011d4c <_printf_common+0x48>
 8011d3e:	f104 0a19 	add.w	sl, r4, #25
 8011d42:	68e3      	ldr	r3, [r4, #12]
 8011d44:	6832      	ldr	r2, [r6, #0]
 8011d46:	1a9b      	subs	r3, r3, r2
 8011d48:	42ab      	cmp	r3, r5
 8011d4a:	dc26      	bgt.n	8011d9a <_printf_common+0x96>
 8011d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d50:	1e13      	subs	r3, r2, #0
 8011d52:	6822      	ldr	r2, [r4, #0]
 8011d54:	bf18      	it	ne
 8011d56:	2301      	movne	r3, #1
 8011d58:	0692      	lsls	r2, r2, #26
 8011d5a:	d42b      	bmi.n	8011db4 <_printf_common+0xb0>
 8011d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d60:	4649      	mov	r1, r9
 8011d62:	4638      	mov	r0, r7
 8011d64:	47c0      	blx	r8
 8011d66:	3001      	adds	r0, #1
 8011d68:	d01e      	beq.n	8011da8 <_printf_common+0xa4>
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	68e5      	ldr	r5, [r4, #12]
 8011d6e:	6832      	ldr	r2, [r6, #0]
 8011d70:	f003 0306 	and.w	r3, r3, #6
 8011d74:	2b04      	cmp	r3, #4
 8011d76:	bf08      	it	eq
 8011d78:	1aad      	subeq	r5, r5, r2
 8011d7a:	68a3      	ldr	r3, [r4, #8]
 8011d7c:	6922      	ldr	r2, [r4, #16]
 8011d7e:	bf0c      	ite	eq
 8011d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d84:	2500      	movne	r5, #0
 8011d86:	4293      	cmp	r3, r2
 8011d88:	bfc4      	itt	gt
 8011d8a:	1a9b      	subgt	r3, r3, r2
 8011d8c:	18ed      	addgt	r5, r5, r3
 8011d8e:	2600      	movs	r6, #0
 8011d90:	341a      	adds	r4, #26
 8011d92:	42b5      	cmp	r5, r6
 8011d94:	d11a      	bne.n	8011dcc <_printf_common+0xc8>
 8011d96:	2000      	movs	r0, #0
 8011d98:	e008      	b.n	8011dac <_printf_common+0xa8>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	4652      	mov	r2, sl
 8011d9e:	4649      	mov	r1, r9
 8011da0:	4638      	mov	r0, r7
 8011da2:	47c0      	blx	r8
 8011da4:	3001      	adds	r0, #1
 8011da6:	d103      	bne.n	8011db0 <_printf_common+0xac>
 8011da8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db0:	3501      	adds	r5, #1
 8011db2:	e7c6      	b.n	8011d42 <_printf_common+0x3e>
 8011db4:	18e1      	adds	r1, r4, r3
 8011db6:	1c5a      	adds	r2, r3, #1
 8011db8:	2030      	movs	r0, #48	; 0x30
 8011dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dbe:	4422      	add	r2, r4
 8011dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011dc8:	3302      	adds	r3, #2
 8011dca:	e7c7      	b.n	8011d5c <_printf_common+0x58>
 8011dcc:	2301      	movs	r3, #1
 8011dce:	4622      	mov	r2, r4
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	4638      	mov	r0, r7
 8011dd4:	47c0      	blx	r8
 8011dd6:	3001      	adds	r0, #1
 8011dd8:	d0e6      	beq.n	8011da8 <_printf_common+0xa4>
 8011dda:	3601      	adds	r6, #1
 8011ddc:	e7d9      	b.n	8011d92 <_printf_common+0x8e>
	...

08011de0 <_printf_i>:
 8011de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011de4:	460c      	mov	r4, r1
 8011de6:	4691      	mov	r9, r2
 8011de8:	7e27      	ldrb	r7, [r4, #24]
 8011dea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011dec:	2f78      	cmp	r7, #120	; 0x78
 8011dee:	4680      	mov	r8, r0
 8011df0:	469a      	mov	sl, r3
 8011df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011df6:	d807      	bhi.n	8011e08 <_printf_i+0x28>
 8011df8:	2f62      	cmp	r7, #98	; 0x62
 8011dfa:	d80a      	bhi.n	8011e12 <_printf_i+0x32>
 8011dfc:	2f00      	cmp	r7, #0
 8011dfe:	f000 80d8 	beq.w	8011fb2 <_printf_i+0x1d2>
 8011e02:	2f58      	cmp	r7, #88	; 0x58
 8011e04:	f000 80a3 	beq.w	8011f4e <_printf_i+0x16e>
 8011e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e10:	e03a      	b.n	8011e88 <_printf_i+0xa8>
 8011e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e16:	2b15      	cmp	r3, #21
 8011e18:	d8f6      	bhi.n	8011e08 <_printf_i+0x28>
 8011e1a:	a001      	add	r0, pc, #4	; (adr r0, 8011e20 <_printf_i+0x40>)
 8011e1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011e20:	08011e79 	.word	0x08011e79
 8011e24:	08011e8d 	.word	0x08011e8d
 8011e28:	08011e09 	.word	0x08011e09
 8011e2c:	08011e09 	.word	0x08011e09
 8011e30:	08011e09 	.word	0x08011e09
 8011e34:	08011e09 	.word	0x08011e09
 8011e38:	08011e8d 	.word	0x08011e8d
 8011e3c:	08011e09 	.word	0x08011e09
 8011e40:	08011e09 	.word	0x08011e09
 8011e44:	08011e09 	.word	0x08011e09
 8011e48:	08011e09 	.word	0x08011e09
 8011e4c:	08011f99 	.word	0x08011f99
 8011e50:	08011ebd 	.word	0x08011ebd
 8011e54:	08011f7b 	.word	0x08011f7b
 8011e58:	08011e09 	.word	0x08011e09
 8011e5c:	08011e09 	.word	0x08011e09
 8011e60:	08011fbb 	.word	0x08011fbb
 8011e64:	08011e09 	.word	0x08011e09
 8011e68:	08011ebd 	.word	0x08011ebd
 8011e6c:	08011e09 	.word	0x08011e09
 8011e70:	08011e09 	.word	0x08011e09
 8011e74:	08011f83 	.word	0x08011f83
 8011e78:	680b      	ldr	r3, [r1, #0]
 8011e7a:	1d1a      	adds	r2, r3, #4
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	600a      	str	r2, [r1, #0]
 8011e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e0a3      	b.n	8011fd4 <_printf_i+0x1f4>
 8011e8c:	6825      	ldr	r5, [r4, #0]
 8011e8e:	6808      	ldr	r0, [r1, #0]
 8011e90:	062e      	lsls	r6, r5, #24
 8011e92:	f100 0304 	add.w	r3, r0, #4
 8011e96:	d50a      	bpl.n	8011eae <_printf_i+0xce>
 8011e98:	6805      	ldr	r5, [r0, #0]
 8011e9a:	600b      	str	r3, [r1, #0]
 8011e9c:	2d00      	cmp	r5, #0
 8011e9e:	da03      	bge.n	8011ea8 <_printf_i+0xc8>
 8011ea0:	232d      	movs	r3, #45	; 0x2d
 8011ea2:	426d      	negs	r5, r5
 8011ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ea8:	485e      	ldr	r0, [pc, #376]	; (8012024 <_printf_i+0x244>)
 8011eaa:	230a      	movs	r3, #10
 8011eac:	e019      	b.n	8011ee2 <_printf_i+0x102>
 8011eae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011eb2:	6805      	ldr	r5, [r0, #0]
 8011eb4:	600b      	str	r3, [r1, #0]
 8011eb6:	bf18      	it	ne
 8011eb8:	b22d      	sxthne	r5, r5
 8011eba:	e7ef      	b.n	8011e9c <_printf_i+0xbc>
 8011ebc:	680b      	ldr	r3, [r1, #0]
 8011ebe:	6825      	ldr	r5, [r4, #0]
 8011ec0:	1d18      	adds	r0, r3, #4
 8011ec2:	6008      	str	r0, [r1, #0]
 8011ec4:	0628      	lsls	r0, r5, #24
 8011ec6:	d501      	bpl.n	8011ecc <_printf_i+0xec>
 8011ec8:	681d      	ldr	r5, [r3, #0]
 8011eca:	e002      	b.n	8011ed2 <_printf_i+0xf2>
 8011ecc:	0669      	lsls	r1, r5, #25
 8011ece:	d5fb      	bpl.n	8011ec8 <_printf_i+0xe8>
 8011ed0:	881d      	ldrh	r5, [r3, #0]
 8011ed2:	4854      	ldr	r0, [pc, #336]	; (8012024 <_printf_i+0x244>)
 8011ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8011ed6:	bf0c      	ite	eq
 8011ed8:	2308      	moveq	r3, #8
 8011eda:	230a      	movne	r3, #10
 8011edc:	2100      	movs	r1, #0
 8011ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ee2:	6866      	ldr	r6, [r4, #4]
 8011ee4:	60a6      	str	r6, [r4, #8]
 8011ee6:	2e00      	cmp	r6, #0
 8011ee8:	bfa2      	ittt	ge
 8011eea:	6821      	ldrge	r1, [r4, #0]
 8011eec:	f021 0104 	bicge.w	r1, r1, #4
 8011ef0:	6021      	strge	r1, [r4, #0]
 8011ef2:	b90d      	cbnz	r5, 8011ef8 <_printf_i+0x118>
 8011ef4:	2e00      	cmp	r6, #0
 8011ef6:	d04d      	beq.n	8011f94 <_printf_i+0x1b4>
 8011ef8:	4616      	mov	r6, r2
 8011efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8011efe:	fb03 5711 	mls	r7, r3, r1, r5
 8011f02:	5dc7      	ldrb	r7, [r0, r7]
 8011f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f08:	462f      	mov	r7, r5
 8011f0a:	42bb      	cmp	r3, r7
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	d9f4      	bls.n	8011efa <_printf_i+0x11a>
 8011f10:	2b08      	cmp	r3, #8
 8011f12:	d10b      	bne.n	8011f2c <_printf_i+0x14c>
 8011f14:	6823      	ldr	r3, [r4, #0]
 8011f16:	07df      	lsls	r7, r3, #31
 8011f18:	d508      	bpl.n	8011f2c <_printf_i+0x14c>
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	6861      	ldr	r1, [r4, #4]
 8011f1e:	4299      	cmp	r1, r3
 8011f20:	bfde      	ittt	le
 8011f22:	2330      	movle	r3, #48	; 0x30
 8011f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f2c:	1b92      	subs	r2, r2, r6
 8011f2e:	6122      	str	r2, [r4, #16]
 8011f30:	f8cd a000 	str.w	sl, [sp]
 8011f34:	464b      	mov	r3, r9
 8011f36:	aa03      	add	r2, sp, #12
 8011f38:	4621      	mov	r1, r4
 8011f3a:	4640      	mov	r0, r8
 8011f3c:	f7ff fee2 	bl	8011d04 <_printf_common>
 8011f40:	3001      	adds	r0, #1
 8011f42:	d14c      	bne.n	8011fde <_printf_i+0x1fe>
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295
 8011f48:	b004      	add	sp, #16
 8011f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f4e:	4835      	ldr	r0, [pc, #212]	; (8012024 <_printf_i+0x244>)
 8011f50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f54:	6823      	ldr	r3, [r4, #0]
 8011f56:	680e      	ldr	r6, [r1, #0]
 8011f58:	061f      	lsls	r7, r3, #24
 8011f5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011f5e:	600e      	str	r6, [r1, #0]
 8011f60:	d514      	bpl.n	8011f8c <_printf_i+0x1ac>
 8011f62:	07d9      	lsls	r1, r3, #31
 8011f64:	bf44      	itt	mi
 8011f66:	f043 0320 	orrmi.w	r3, r3, #32
 8011f6a:	6023      	strmi	r3, [r4, #0]
 8011f6c:	b91d      	cbnz	r5, 8011f76 <_printf_i+0x196>
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	f023 0320 	bic.w	r3, r3, #32
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	2310      	movs	r3, #16
 8011f78:	e7b0      	b.n	8011edc <_printf_i+0xfc>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	f043 0320 	orr.w	r3, r3, #32
 8011f80:	6023      	str	r3, [r4, #0]
 8011f82:	2378      	movs	r3, #120	; 0x78
 8011f84:	4828      	ldr	r0, [pc, #160]	; (8012028 <_printf_i+0x248>)
 8011f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f8a:	e7e3      	b.n	8011f54 <_printf_i+0x174>
 8011f8c:	065e      	lsls	r6, r3, #25
 8011f8e:	bf48      	it	mi
 8011f90:	b2ad      	uxthmi	r5, r5
 8011f92:	e7e6      	b.n	8011f62 <_printf_i+0x182>
 8011f94:	4616      	mov	r6, r2
 8011f96:	e7bb      	b.n	8011f10 <_printf_i+0x130>
 8011f98:	680b      	ldr	r3, [r1, #0]
 8011f9a:	6826      	ldr	r6, [r4, #0]
 8011f9c:	6960      	ldr	r0, [r4, #20]
 8011f9e:	1d1d      	adds	r5, r3, #4
 8011fa0:	600d      	str	r5, [r1, #0]
 8011fa2:	0635      	lsls	r5, r6, #24
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	d501      	bpl.n	8011fac <_printf_i+0x1cc>
 8011fa8:	6018      	str	r0, [r3, #0]
 8011faa:	e002      	b.n	8011fb2 <_printf_i+0x1d2>
 8011fac:	0671      	lsls	r1, r6, #25
 8011fae:	d5fb      	bpl.n	8011fa8 <_printf_i+0x1c8>
 8011fb0:	8018      	strh	r0, [r3, #0]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	6123      	str	r3, [r4, #16]
 8011fb6:	4616      	mov	r6, r2
 8011fb8:	e7ba      	b.n	8011f30 <_printf_i+0x150>
 8011fba:	680b      	ldr	r3, [r1, #0]
 8011fbc:	1d1a      	adds	r2, r3, #4
 8011fbe:	600a      	str	r2, [r1, #0]
 8011fc0:	681e      	ldr	r6, [r3, #0]
 8011fc2:	6862      	ldr	r2, [r4, #4]
 8011fc4:	2100      	movs	r1, #0
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f7ee f992 	bl	80002f0 <memchr>
 8011fcc:	b108      	cbz	r0, 8011fd2 <_printf_i+0x1f2>
 8011fce:	1b80      	subs	r0, r0, r6
 8011fd0:	6060      	str	r0, [r4, #4]
 8011fd2:	6863      	ldr	r3, [r4, #4]
 8011fd4:	6123      	str	r3, [r4, #16]
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fdc:	e7a8      	b.n	8011f30 <_printf_i+0x150>
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	4632      	mov	r2, r6
 8011fe2:	4649      	mov	r1, r9
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	47d0      	blx	sl
 8011fe8:	3001      	adds	r0, #1
 8011fea:	d0ab      	beq.n	8011f44 <_printf_i+0x164>
 8011fec:	6823      	ldr	r3, [r4, #0]
 8011fee:	079b      	lsls	r3, r3, #30
 8011ff0:	d413      	bmi.n	801201a <_printf_i+0x23a>
 8011ff2:	68e0      	ldr	r0, [r4, #12]
 8011ff4:	9b03      	ldr	r3, [sp, #12]
 8011ff6:	4298      	cmp	r0, r3
 8011ff8:	bfb8      	it	lt
 8011ffa:	4618      	movlt	r0, r3
 8011ffc:	e7a4      	b.n	8011f48 <_printf_i+0x168>
 8011ffe:	2301      	movs	r3, #1
 8012000:	4632      	mov	r2, r6
 8012002:	4649      	mov	r1, r9
 8012004:	4640      	mov	r0, r8
 8012006:	47d0      	blx	sl
 8012008:	3001      	adds	r0, #1
 801200a:	d09b      	beq.n	8011f44 <_printf_i+0x164>
 801200c:	3501      	adds	r5, #1
 801200e:	68e3      	ldr	r3, [r4, #12]
 8012010:	9903      	ldr	r1, [sp, #12]
 8012012:	1a5b      	subs	r3, r3, r1
 8012014:	42ab      	cmp	r3, r5
 8012016:	dcf2      	bgt.n	8011ffe <_printf_i+0x21e>
 8012018:	e7eb      	b.n	8011ff2 <_printf_i+0x212>
 801201a:	2500      	movs	r5, #0
 801201c:	f104 0619 	add.w	r6, r4, #25
 8012020:	e7f5      	b.n	801200e <_printf_i+0x22e>
 8012022:	bf00      	nop
 8012024:	08012356 	.word	0x08012356
 8012028:	08012367 	.word	0x08012367

0801202c <memmove>:
 801202c:	4288      	cmp	r0, r1
 801202e:	b510      	push	{r4, lr}
 8012030:	eb01 0402 	add.w	r4, r1, r2
 8012034:	d902      	bls.n	801203c <memmove+0x10>
 8012036:	4284      	cmp	r4, r0
 8012038:	4623      	mov	r3, r4
 801203a:	d807      	bhi.n	801204c <memmove+0x20>
 801203c:	1e43      	subs	r3, r0, #1
 801203e:	42a1      	cmp	r1, r4
 8012040:	d008      	beq.n	8012054 <memmove+0x28>
 8012042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012046:	f803 2f01 	strb.w	r2, [r3, #1]!
 801204a:	e7f8      	b.n	801203e <memmove+0x12>
 801204c:	4402      	add	r2, r0
 801204e:	4601      	mov	r1, r0
 8012050:	428a      	cmp	r2, r1
 8012052:	d100      	bne.n	8012056 <memmove+0x2a>
 8012054:	bd10      	pop	{r4, pc}
 8012056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801205a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801205e:	e7f7      	b.n	8012050 <memmove+0x24>

08012060 <_realloc_r>:
 8012060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012062:	4607      	mov	r7, r0
 8012064:	4614      	mov	r4, r2
 8012066:	460e      	mov	r6, r1
 8012068:	b921      	cbnz	r1, 8012074 <_realloc_r+0x14>
 801206a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801206e:	4611      	mov	r1, r2
 8012070:	f7ff bafc 	b.w	801166c <_malloc_r>
 8012074:	b922      	cbnz	r2, 8012080 <_realloc_r+0x20>
 8012076:	f7ff fc99 	bl	80119ac <_free_r>
 801207a:	4625      	mov	r5, r4
 801207c:	4628      	mov	r0, r5
 801207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012080:	f000 f814 	bl	80120ac <_malloc_usable_size_r>
 8012084:	42a0      	cmp	r0, r4
 8012086:	d20f      	bcs.n	80120a8 <_realloc_r+0x48>
 8012088:	4621      	mov	r1, r4
 801208a:	4638      	mov	r0, r7
 801208c:	f7ff faee 	bl	801166c <_malloc_r>
 8012090:	4605      	mov	r5, r0
 8012092:	2800      	cmp	r0, #0
 8012094:	d0f2      	beq.n	801207c <_realloc_r+0x1c>
 8012096:	4631      	mov	r1, r6
 8012098:	4622      	mov	r2, r4
 801209a:	f7ff fad1 	bl	8011640 <memcpy>
 801209e:	4631      	mov	r1, r6
 80120a0:	4638      	mov	r0, r7
 80120a2:	f7ff fc83 	bl	80119ac <_free_r>
 80120a6:	e7e9      	b.n	801207c <_realloc_r+0x1c>
 80120a8:	4635      	mov	r5, r6
 80120aa:	e7e7      	b.n	801207c <_realloc_r+0x1c>

080120ac <_malloc_usable_size_r>:
 80120ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120b0:	1f18      	subs	r0, r3, #4
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	bfbc      	itt	lt
 80120b6:	580b      	ldrlt	r3, [r1, r0]
 80120b8:	18c0      	addlt	r0, r0, r3
 80120ba:	4770      	bx	lr

080120bc <_init>:
 80120bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120be:	bf00      	nop
 80120c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120c2:	bc08      	pop	{r3}
 80120c4:	469e      	mov	lr, r3
 80120c6:	4770      	bx	lr

080120c8 <_fini>:
 80120c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ca:	bf00      	nop
 80120cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120ce:	bc08      	pop	{r3}
 80120d0:	469e      	mov	lr, r3
 80120d2:	4770      	bx	lr

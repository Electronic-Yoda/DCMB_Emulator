
DCMB_emulator_using_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08012114  08012114  00022114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123b4  080123b4  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080123b4  080123b4  000223b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123bc  080123bc  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123bc  080123bc  000223bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123c0  080123c0  000223c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080123c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027d0c  24000078  0801243c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24027d84  0801243c  00037d84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b663  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c41  00000000  00000000  0006b709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  00071350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  000731d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000417b3  00000000  00000000  00074e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000290b6  00000000  00000000  000b663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ac3c8  00000000  00000000  000df6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0028bab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000871c  00000000  00000000  0028bb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080120fc 	.word	0x080120fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080120fc 	.word	0x080120fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <B_tcpStart>:


B_tcpHandle_t* B_tcpStart(B_uartHandle_t** transmitBuarts, 
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	71fb      	strb	r3, [r7, #7]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 8000698:	201c      	movs	r0, #28
 800069a:	f010 fdd5 	bl	8011248 <pvPortMalloc>
 800069e:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	711a      	strb	r2, [r3, #4]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f010 fdcc 	bl	8011248 <pvPortMalloc>
 80006b0:	4602      	mov	r2, r0
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e00d      	b.n	80006d8 <B_tcpStart+0x50>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	441a      	add	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbed      	blt.n	80006bc <B_tcpStart+0x34>
    }
    btcp->rxBuart = rxBuart;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	609a      	str	r2, [r3, #8]
    btcp->tcpSeqNum = 0;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2200      	movs	r2, #0
 80006ea:	731a      	strb	r2, [r3, #12]
    btcp->crc = crc;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	619a      	str	r2, [r3, #24]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 80006f2:	2200      	movs	r2, #0
 80006f4:	210c      	movs	r1, #12
 80006f6:	2040      	movs	r0, #64	; 0x40
 80006f8:	f00e fa3e 	bl	800eb78 <xQueueGenericCreate>
 80006fc:	4602      	mov	r2, r0
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	611a      	str	r2, [r3, #16]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	3314      	adds	r3, #20
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2304      	movs	r3, #4
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000712:	4904      	ldr	r1, [pc, #16]	; (8000724 <B_tcpStart+0x9c>)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <B_tcpStart+0xa0>)
 8000716:	f00f f81d 	bl	800f754 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 800071a:	693b      	ldr	r3, [r7, #16]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08012114 	.word	0x08012114
 8000728:	080008e7 	.word	0x080008e7

0800072c <B_tcpSend>:

void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	71fb      	strb	r3, [r7, #7]
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8));
 800073a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800073e:	f010 fd83 	bl	8011248 <pvPortMalloc>
 8000742:	6178      	str	r0, [r7, #20]
    buf[0] = BSSR_SERIAL_START;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	22a5      	movs	r2, #165	; 0xa5
 8000748:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	701a      	strb	r2, [r3, #0]
    buf[2] = TCP_ID;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3302      	adds	r3, #2
 8000756:	2204      	movs	r2, #4
 8000758:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3303      	adds	r3, #3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	7b12      	ldrb	r2, [r2, #12]
 8000762:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3304      	adds	r3, #4
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f010 ff87 	bl	8011680 <memcpy>
    //uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, buf, length+4);
    //GEN11 change:
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6998      	ldr	r0, [r3, #24]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3304      	adds	r3, #4
 800077a:	461a      	mov	r2, r3
 800077c:	6979      	ldr	r1, [r7, #20]
 800077e:	f003 ff6d 	bl	800465c <HAL_CRC_Calculate>
 8000782:	4603      	mov	r3, r0
 8000784:	43db      	mvns	r3, r3
 8000786:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2ba1      	cmp	r3, #161	; 0xa1
 8000790:	d002      	beq.n	8000798 <B_tcpSend+0x6c>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b56      	cmp	r3, #86	; 0x56
 8000796:	d10c      	bne.n	80007b2 <B_tcpSend+0x86>
        buf_pos++;
 8000798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800079a:	3301      	adds	r3, #1
 800079c:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3303      	adds	r3, #3
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	3204      	adds	r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3302      	adds	r3, #2
 80007ae:	225a      	movs	r2, #90	; 0x5a
 80007b0:	701a      	strb	r2, [r3, #0]
    }
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	7b1b      	ldrb	r3, [r3, #12]
 80007b6:	2ba5      	cmp	r3, #165	; 0xa5
 80007b8:	d003      	beq.n	80007c2 <B_tcpSend+0x96>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	7b1b      	ldrb	r3, [r3, #12]
 80007be:	2b5a      	cmp	r3, #90	; 0x5a
 80007c0:	d108      	bne.n	80007d4 <B_tcpSend+0xa8>
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;
 80007c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c4:	3b01      	subs	r3, #1
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	225a      	movs	r2, #90	; 0x5a
 80007cc:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d0:	3301      	adds	r3, #1
 80007d2:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum;
 80007d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d6:	3b01      	subs	r3, #1
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4413      	add	r3, r2
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	7b12      	ldrb	r2, [r2, #12]
 80007e0:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	731a      	strb	r2, [r3, #12]
    for(int i = 0; i < length; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
 80007f2:	e021      	b.n	8000838 <B_tcpSend+0x10c>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b5a      	cmp	r3, #90	; 0x5a
 80007fe:	d005      	beq.n	800080c <B_tcpSend+0xe0>
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2ba5      	cmp	r3, #165	; 0xa5
 800080a:	d107      	bne.n	800081c <B_tcpSend+0xf0>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	225a      	movs	r2, #90	; 0x5a
 8000814:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000818:	3301      	adds	r3, #1
 800081a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	441a      	add	r2, r3
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	6979      	ldr	r1, [r7, #20]
 8000826:	440b      	add	r3, r1
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 800082c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800082e:	3301      	adds	r3, #1
 8000830:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	3301      	adds	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	6a3a      	ldr	r2, [r7, #32]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbd9      	blt.n	80007f4 <B_tcpSend+0xc8>
    }
    for(int i = 0; i < 4; i++){
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	e02e      	b.n	80008a4 <B_tcpSend+0x178>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	f1c3 0303 	rsb	r3, r3, #3
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	fa22 f103 	lsr.w	r1, r2, r3
 8000854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
        if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b5a      	cmp	r3, #90	; 0x5a
 8000868:	d005      	beq.n	8000876 <B_tcpSend+0x14a>
 800086a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2ba5      	cmp	r3, #165	; 0xa5
 8000874:	d110      	bne.n	8000898 <B_tcpSend+0x16c>
            buf[buf_pos+1] = buf[buf_pos];
 8000876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	441a      	add	r2, r3
 800087c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800087e:	3301      	adds	r3, #1
 8000880:	6979      	ldr	r1, [r7, #20]
 8000882:	440b      	add	r3, r1
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	225a      	movs	r2, #90	; 0x5a
 8000890:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000894:	3301      	adds	r3, #1
 8000896:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 8000898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089a:	3301      	adds	r3, #1
 800089c:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3301      	adds	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	ddcd      	ble.n	8000846 <B_tcpSend+0x11a>
    }
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e00d      	b.n	80008cc <B_tcpSend+0x1a0>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008be:	6979      	ldr	r1, [r7, #20]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa29 	bl	8000d18 <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4293      	cmp	r3, r2
 80008d6:	dbeb      	blt.n	80008b0 <B_tcpSend+0x184>
    }
    vPortFree(buf);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f010 fd81 	bl	80113e0 <vPortFree>
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8000938:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa0b 	bl	8000d5a <B_uartRead>
 8000944:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
        for(int i = 0; i < e->len; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800094e:	e160      	b.n	8000c12 <tcpRxTask+0x32c>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8000950:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800095a:	441a      	add	r2, r3
 800095c:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8000960:	7811      	ldrb	r1, [r2, #0]
 8000962:	f107 0214 	add.w	r2, r7, #20
 8000966:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8000968:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 800096c:	3301      	adds	r3, #1
 800096e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){
 8000972:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b5a      	cmp	r3, #90	; 0x5a
 8000982:	d107      	bne.n	8000994 <tcpRxTask+0xae>
 8000984:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <tcpRxTask+0xae>
                escaped = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
 8000992:	e002      	b.n	800099a <tcpRxTask+0xb4>
            } else {
                escaped = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
            }
            if(!started){
 800099a:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11e      	bne.n	80009e0 <tcpRxTask+0xfa>
                if(e->buf[i] == BSSR_SERIAL_START){
 80009a2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2ba5      	cmp	r3, #165	; 0xa5
 80009b2:	f040 8129 	bne.w	8000c08 <tcpRxTask+0x322>
                    started = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 80009bc:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009c6:	441a      	add	r2, r3
 80009c8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009cc:	7811      	ldrb	r1, [r2, #0]
 80009ce:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80009d2:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 80009d4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009d8:	3301      	adds	r3, #1
 80009da:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80009de:	e113      	b.n	8000c08 <tcpRxTask+0x322>
                }
            } else if(!expected_length){
 80009e0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11a      	bne.n	8000a1e <tcpRxTask+0x138>
                expected_length = e->buf[i];
 80009e8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 80009fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a04:	441a      	add	r2, r3
 8000a06:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a0a:	7811      	ldrb	r1, [r2, #0]
 8000a0c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a10:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a12:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a1c:	e0f4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(!sender){
 8000a1e:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11a      	bne.n	8000a5c <tcpRxTask+0x176>
                sender = e->buf[i];
 8000a26:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8000a38:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a42:	441a      	add	r2, r3
 8000a44:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a48:	7811      	ldrb	r1, [r2, #0]
 8000a4a:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a4e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a50:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a54:	3301      	adds	r3, #1
 8000a56:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a5a:	e0d5      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(seqNum == 0xffff){
 8000a5c:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d11a      	bne.n	8000a9e <tcpRxTask+0x1b8>
                seqNum = e->buf[i];
 8000a68:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
                input_buffer[buf_pos] = e->buf[i];
 8000a7a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a84:	441a      	add	r2, r3
 8000a86:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a8a:	7811      	ldrb	r1, [r2, #0]
 8000a8c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a90:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a92:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a96:	3301      	adds	r3, #1
 8000a98:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a9c:	e0b4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos < expected_length+4){
 8000a9e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000aa2:	1cda      	adds	r2, r3, #3
 8000aa4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db11      	blt.n	8000ad0 <tcpRxTask+0x1ea>
                input_buffer[buf_pos] = e->buf[i];
 8000aac:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000abc:	7811      	ldrb	r1, [r2, #0]
 8000abe:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000ac2:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000ac4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000ace:	e09b      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos + crcAcc < expected_length+8){
 8000ad0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000ad4:	1dda      	adds	r2, r3, #7
 8000ad6:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8000ada:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000ade:	440b      	add	r3, r1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f2c0 8091 	blt.w	8000c08 <tcpRxTask+0x322>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8000ae6:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000afa:	f1c3 0303 	rsb	r3, r3, #3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 8000b10:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b14:	3301      	adds	r3, #1
 8000b16:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8000b1a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d172      	bne.n	8000c08 <tcpRxTask+0x322>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 8000b22:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8000b2c:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fd93 	bl	800465c <HAL_CRC_Calculate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

					if(crcExpected == crc && sender != TCP_ID){
 8000b3e:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8000b42:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d142      	bne.n	8000bd0 <tcpRxTask+0x2ea>
 8000b4a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d03e      	beq.n	8000bd0 <tcpRxTask+0x2ea>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b58:	e013      	b.n	8000b82 <tcpRxTask+0x29c>
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
 8000b5a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 8000b6e:	f107 0114 	add.w	r1, r7, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f8d0 	bl	8000d18 <B_uartSend>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b78:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b82:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	dbe3      	blt.n	8000b5a <tcpRxTask+0x274>
						}
						pkt.length = expected_length;
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 8000b9a:	701a      	strb	r2, [r3, #0]
						pkt.sender = sender;
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8000ba4:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8000ba6:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	709a      	strb	r2, [r3, #2]
						pkt.payload = input_buffer;
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000bba:	605a      	str	r2, [r3, #4]
						pkt.crc = crc;
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000bc4:	609a      	str	r2, [r3, #8]
						serialParse(&pkt);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fb62 	bl	8001294 <serialParse>
					}
					raw_buf_pos = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					sender = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8000c08:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000c12:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f63f ae97 	bhi.w	8000950 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8000c22:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 8000c26:	f000 f8ad 	bl	8000d84 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 8000c2a:	e685      	b.n	8000938 <tcpRxTask+0x52>

08000c2c <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	e01e      	b.n	8000c78 <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 8000c3a:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <B_uartStart+0xd8>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d115      	bne.n	8000c72 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f010 fafe 	bl	8011248 <pvPortMalloc>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	492d      	ldr	r1, [pc, #180]	; (8000d04 <B_uartStart+0xd8>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <B_uartStart+0xd8>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8000c60:	4929      	ldr	r1, [pc, #164]	; (8000d08 <B_uartStart+0xdc>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
            break;
 8000c70:	e005      	b.n	8000c7e <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dddd      	ble.n	8000c3a <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 8000c7e:	2203      	movs	r2, #3
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f00d ff78 	bl	800eb78 <xQueueGenericCreate>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	f00d ff70 	bl	800eb78 <xQueueGenericCreate>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	2040      	movs	r0, #64	; 0x40
 8000ca4:	f00d ff68 	bl	800eb78 <xQueueGenericCreate>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3314      	adds	r3, #20
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	4913      	ldr	r1, [pc, #76]	; (8000d0c <B_uartStart+0xe0>)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <B_uartStart+0xe4>)
 8000cc2:	f00e fd47 	bl	800f754 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2306      	movs	r3, #6
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <B_uartStart+0xe0>)
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <B_uartStart+0xe8>)
 8000cda:	f00e fd3b 	bl	800f754 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000cf8:	bf00      	nop
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000094 	.word	0x24000094
 8000d08:	240000a4 	.word	0x240000a4
 8000d0c:	08012120 	.word	0x08012120
 8000d10:	08000da5 	.word	0x08000da5
 8000d14:	08000ded 	.word	0x08000ded

08000d18 <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f010 fa8f 	bl	8011248 <pvPortMalloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f010 fca3 	bl	8011680 <memcpy>
	e.len = len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6898      	ldr	r0, [r3, #8]
 8000d42:	f107 0114 	add.w	r1, r7, #20
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f00d ff6b 	bl	800ec24 <xQueueGenericSend>
 8000d4e:	61f8      	str	r0, [r7, #28]
	return sent;
 8000d50:	69fb      	ldr	r3, [r7, #28]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8000d62:	2008      	movs	r0, #8
 8000d64:	f010 fa70 	bl	8011248 <pvPortMalloc>
 8000d68:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00e f97b 	bl	800f070 <xQueueReceive>
	return e;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f010 fb25 	bl	80113e0 <vPortFree>
	vPortFree(e);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f010 fb22 	bl	80113e0 <vPortFree>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f107 010c 	add.w	r1, r7, #12
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00e f957 	bl	800f070 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00c f853 	bl	800ce78 <HAL_UART_Transmit_DMA>
		xSemaphoreTake(buart->txSem, portMAX_DELAY);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00e fa28 	bl	800f230 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f010 fafc 	bl	80113e0 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000de8:	e7e2      	b.n	8000db0 <txTask+0xc>
	...

08000dec <rxTask>:
	}
}

static void rxTask(void* pv){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8000df8:	e002      	b.n	8000e00 <rxTask+0x14>
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f00e fdf4 	bl	800f9e8 <vTaskDelay>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e08:	2b20      	cmp	r3, #32
 8000e0a:	d1f6      	bne.n	8000dfa <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e10:	f010 fa1a 	bl	8011248 <pvPortMalloc>
 8000e14:	4602      	mov	r2, r0
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e1a:	e009      	b.n	8000e30 <rxTask+0x44>
		vTaskDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f00e fde3 	bl	800f9e8 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e26:	f010 fa0f 	bl	8011248 <pvPortMalloc>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f1      	beq.n	8000e1c <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e44:	4619      	mov	r1, r3
 8000e46:	f00c f897 	bl	800cf78 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8000e4e:	f010 f8d9 	bl	8011004 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6c      	ldr	r2, [pc, #432]	; (800100c <rxTask+0x220>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d068      	beq.n	8000f32 <rxTask+0x146>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a69      	ldr	r2, [pc, #420]	; (8001010 <rxTask+0x224>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d061      	beq.n	8000f32 <rxTask+0x146>
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a67      	ldr	r2, [pc, #412]	; (8001014 <rxTask+0x228>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d05a      	beq.n	8000f32 <rxTask+0x146>
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a64      	ldr	r2, [pc, #400]	; (8001018 <rxTask+0x22c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d053      	beq.n	8000f32 <rxTask+0x146>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a62      	ldr	r2, [pc, #392]	; (800101c <rxTask+0x230>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <rxTask+0x146>
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a5f      	ldr	r2, [pc, #380]	; (8001020 <rxTask+0x234>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d045      	beq.n	8000f32 <rxTask+0x146>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <rxTask+0x238>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d03e      	beq.n	8000f32 <rxTask+0x146>
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <rxTask+0x23c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d037      	beq.n	8000f32 <rxTask+0x146>
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a58      	ldr	r2, [pc, #352]	; (800102c <rxTask+0x240>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d030      	beq.n	8000f32 <rxTask+0x146>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a55      	ldr	r2, [pc, #340]	; (8001030 <rxTask+0x244>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d029      	beq.n	8000f32 <rxTask+0x146>
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <rxTask+0x248>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d022      	beq.n	8000f32 <rxTask+0x146>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <rxTask+0x24c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01b      	beq.n	8000f32 <rxTask+0x146>
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a4e      	ldr	r2, [pc, #312]	; (800103c <rxTask+0x250>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d014      	beq.n	8000f32 <rxTask+0x146>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <rxTask+0x254>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <rxTask+0x146>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a49      	ldr	r2, [pc, #292]	; (8001044 <rxTask+0x258>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d006      	beq.n	8000f32 <rxTask+0x146>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <rxTask+0x25c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d107      	bne.n	8000f42 <rxTask+0x156>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f40:	e006      	b.n	8000f50 <rxTask+0x164>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d013      	beq.n	8000f86 <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d903      	bls.n	8000f72 <rxTask+0x186>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f7a:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f84:	e00b      	b.n	8000f9e <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d905      	bls.n	8000f9e <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8000f9e:	f010 f861 	bl	8011064 <vPortExitCritical>
		if(e.len){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02c      	beq.n	8001002 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f010 f94c 	bl	8011248 <pvPortMalloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8000fb4:	68b8      	ldr	r0, [r7, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f010 fb5c 	bl	8011680 <memcpy>
			buart->tail += e.len;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	441a      	add	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	6918      	ldr	r0, [r3, #16]
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	f00d fe1a 	bl	800ec24 <xQueueGenericSend>
 8000ff0:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d004      	beq.n	8001002 <rxTask+0x216>
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f825 	bl	800104c <processCriticalFrame>
		}
		vTaskDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f00e fcf0 	bl	800f9e8 <vTaskDelay>
		e.len = 0;
 8001008:	e71f      	b.n	8000e4a <rxTask+0x5e>
 800100a:	bf00      	nop
 800100c:	40020010 	.word	0x40020010
 8001010:	40020028 	.word	0x40020028
 8001014:	40020040 	.word	0x40020040
 8001018:	40020058 	.word	0x40020058
 800101c:	40020070 	.word	0x40020070
 8001020:	40020088 	.word	0x40020088
 8001024:	400200a0 	.word	0x400200a0
 8001028:	400200b8 	.word	0x400200b8
 800102c:	40020410 	.word	0x40020410
 8001030:	40020428 	.word	0x40020428
 8001034:	40020440 	.word	0x40020440
 8001038:	40020458 	.word	0x40020458
 800103c:	40020470 	.word	0x40020470
 8001040:	40020488 	.word	0x40020488
 8001044:	400204a0 	.word	0x400204a0
 8001048:	400204b8 	.word	0x400204b8

0800104c <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e013      	b.n	8001096 <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_UART_TxCpltCallback+0x44>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d109      	bne.n	8001090 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_UART_TxCpltCallback+0x48>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00d ff64 	bl	800ef56 <xQueueGiveFromISR>
			return;
 800108e:	e005      	b.n	800109c <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d9e8      	bls.n	800106e <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000a4 	.word	0x240000a4
 80010a8:	24000094 	.word	0x24000094

080010ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e011      	b.n	80010de <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_UART_RxCpltCallback+0x58>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d107      	bne.n	80010d8 <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_UART_RxCpltCallback+0x5c>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 80010d6:	e010      	b.n	80010fa <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d9ea      	bls.n	80010ba <HAL_UART_RxCpltCallback+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010f6:	bf00      	nop
		}
	}
	configASSERT(NULL);
 80010f8:	e7fe      	b.n	80010f8 <HAL_UART_RxCpltCallback+0x4c>
}
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	240000a4 	.word	0x240000a4
 8001108:	24000094 	.word	0x24000094

0800110c <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <arm_boot+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <arm_boot+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <arm_boot+0x48>)
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <arm_boot+0x50>)
 800111a:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <arm_boot+0x54>)
 800111e:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 8001122:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <arm_boot+0x58>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <arm_boot+0x58>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 8001130:	bf00      	nop
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <arm_boot+0x58>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <arm_boot+0x58>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <arm_boot+0x58>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	52002008 	.word	0x52002008
 8001158:	08192a3b 	.word	0x08192a3b
 800115c:	4c5d6e7f 	.word	0x4c5d6e7f
 8001160:	52002044 	.word	0x52002044
 8001164:	52002018 	.word	0x52002018

08001168 <mc2StateTmr>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */


static void mc2StateTmr(TimerHandle_t xTimer) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	static uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	//first index set to 0x00 since the data ID for MC2 state is 0x00

	//motorState = 0;
	//fwdRevState = 1;
	if (fwdRevState == 1) //reverse
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <mc2StateTmr+0x108>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <mc2StateTmr+0x1c>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	483d      	ldr	r0, [pc, #244]	; (8001274 <mc2StateTmr+0x10c>)
 800117e:	f006 fc09 	bl	8007994 <HAL_GPIO_WritePin>
 8001182:	e008      	b.n	8001196 <mc2StateTmr+0x2e>
	else if (fwdRevState == 0) //forward
 8001184:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <mc2StateTmr+0x108>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <mc2StateTmr+0x2e>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	2102      	movs	r1, #2
 8001190:	4838      	ldr	r0, [pc, #224]	; (8001274 <mc2StateTmr+0x10c>)
 8001192:	f006 fbff 	bl	8007994 <HAL_GPIO_WritePin>
	if (regenValue ==255) {
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <mc2StateTmr+0x110>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d105      	bne.n	80011aa <mc2StateTmr+0x42>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1); // CS1
 800119e:	2201      	movs	r2, #1
 80011a0:	2104      	movs	r1, #4
 80011a2:	4834      	ldr	r0, [pc, #208]	; (8001274 <mc2StateTmr+0x10c>)
 80011a4:	f006 fbf6 	bl	8007994 <HAL_GPIO_WritePin>
 80011a8:	e008      	b.n	80011bc <mc2StateTmr+0x54>
	}
	else if (regenValue < 20) {
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <mc2StateTmr+0x110>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b13      	cmp	r3, #19
 80011b0:	d804      	bhi.n	80011bc <mc2StateTmr+0x54>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0); // CS1
 80011b2:	2200      	movs	r2, #0
 80011b4:	2104      	movs	r1, #4
 80011b6:	482f      	ldr	r0, [pc, #188]	; (8001274 <mc2StateTmr+0x10c>)
 80011b8:	f006 fbec 	bl	8007994 <HAL_GPIO_WritePin>
	}

	buf[1] = (motorState & 0b01)  << 4;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <mc2StateTmr+0x114>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <mc2StateTmr+0x118>)
 80011cc:	705a      	strb	r2, [r3, #1]
	buf[1] |= (fwdRevState & 0b01) << 3;
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <mc2StateTmr+0x118>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <mc2StateTmr+0x108>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <mc2StateTmr+0x118>)
 80011ea:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmUpState & 0b01) << 2;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <mc2StateTmr+0x118>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <mc2StateTmr+0x11c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b25b      	sxtb	r3, r3
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <mc2StateTmr+0x118>)
 8001208:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmDownState & 0b01) << 1;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <mc2StateTmr+0x118>)
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	b25a      	sxtb	r2, r3
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <mc2StateTmr+0x120>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <mc2StateTmr+0x118>)
 8001226:	705a      	strb	r2, [r3, #1]
	buf[2] = accValue;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <mc2StateTmr+0x124>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <mc2StateTmr+0x118>)
 8001230:	709a      	strb	r2, [r3, #2]
	buf[3] = regenValue; // New for GEN11
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <mc2StateTmr+0x110>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <mc2StateTmr+0x118>)
 800123a:	70da      	strb	r2, [r3, #3]
	if(vfmUpState == 1){
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <mc2StateTmr+0x11c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <mc2StateTmr+0xe2>
		vfmUpState = 0;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <mc2StateTmr+0x11c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	}
	if(vfmDownState == 1){
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <mc2StateTmr+0x120>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <mc2StateTmr+0xf0>
		vfmDownState = 0;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <mc2StateTmr+0x120>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	}
	B_tcpSend(btcp, buf, 8);
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <mc2StateTmr+0x128>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2208      	movs	r2, #8
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <mc2StateTmr+0x118>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fa63 	bl	800072c <B_tcpSend>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	240000bc 	.word	0x240000bc
 8001274:	58021800 	.word	0x58021800
 8001278:	240000b8 	.word	0x240000b8
 800127c:	240000ba 	.word	0x240000ba
 8001280:	240000c0 	.word	0x240000c0
 8001284:	240000bb 	.word	0x240000bb
 8001288:	240000bd 	.word	0x240000bd
 800128c:	240000b6 	.word	0x240000b6
 8001290:	240277a8 	.word	0x240277a8

08001294 <serialParse>:

// call back function used to receive from MCMB
// called by btcp functions
void serialParse(B_tcpPacket_t *pkt) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d115      	bne.n	80012d0 <serialParse+0x3c>
		case 0x03:  //MCMB sender ID
			//Check if data ID is motor speed (0x03)
			if(pkt->payload[4] == 0x03){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d104      	bne.n	80012ba <serialParse+0x26>
				motorPWMFrequency = pkt->payload[5];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	795a      	ldrb	r2, [r3, #5]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <serialParse+0x48>)
 80012b8:	701a      	strb	r2, [r3, #0]
			}
			// If data ID is motor temperature (0x05) //New addition
			if (pkt->payload[4] == 0x05) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d104      	bne.n	80012d0 <serialParse+0x3c>
				motorTemperature = pkt->payload[5];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	795a      	ldrb	r2, [r3, #5]
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <serialParse+0x4c>)
 80012ce:	701a      	strb	r2, [r3, #0]
			}

	}
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	240000b5 	.word	0x240000b5
 80012e0:	240000b4 	.word	0x240000b4

080012e4 <task1_handler>:
// This task is used to send motor temperature and speed to the PC
void task1_handler(void* parameters) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	//char *test = "Test1\n";
	//char *test2 = "Test2\n";
	char temperatureBuf[30];
	char speedBuf[30];
	int timeOut = 1000;
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  /* Infinite loop */
	while(1)
	{
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <task1_handler+0x70>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fc:	4916      	ldr	r1, [pc, #88]	; (8001358 <task1_handler+0x74>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f010 faa8 	bl	8011854 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temperatureBuf, strlen(temperatureBuf), timeOut);
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ffe9 	bl	80002e0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001318:	4810      	ldr	r0, [pc, #64]	; (800135c <task1_handler+0x78>)
 800131a:	f00b fc43 	bl	800cba4 <HAL_UART_Transmit>
		//vTaskDelay(pdMS_TO_TICKS(500));
		//Note: delay must be equal or greater than python program's receive delay

		sprintf(speedBuf, "Motor PWM Frequency: %d Hz\n", (int)motorPWMFrequency);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <task1_handler+0x7c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <task1_handler+0x80>)
 800132a:	4618      	mov	r0, r3
 800132c:	f010 fa92 	bl	8011854 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)speedBuf, strlen(speedBuf), timeOut);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ffd3 	bl	80002e0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001340:	f107 010c 	add.w	r1, r7, #12
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <task1_handler+0x78>)
 8001346:	f00b fc2d 	bl	800cba4 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 800134a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134e:	f00e fb4b 	bl	800f9e8 <vTaskDelay>
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 8001352:	e7ce      	b.n	80012f2 <task1_handler+0xe>
 8001354:	240000b4 	.word	0x240000b4
 8001358:	0801212c 	.word	0x0801212c
 800135c:	24027a4c 	.word	0x24027a4c
 8001360:	240000b5 	.word	0x240000b5
 8001364:	0801214c 	.word	0x0801214c

08001368 <task2_handler>:

	}
}

// This task is used to receive motor control signals from PC
void task2_handler(void* parameters) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b095      	sub	sp, #84	; 0x54
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	int rxBufSize = 5;
 8001370:	2305      	movs	r3, #5
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
	int timeout = 2000;
 8001374:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
	char rxBuf[rxBufSize];
 800137a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800137c:	1e63      	subs	r3, r4, #1
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001380:	4623      	mov	r3, r4
 8001382:	4618      	mov	r0, r3
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	00cb      	lsls	r3, r1, #3
 8001392:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001396:	00c2      	lsls	r2, r0, #3
 8001398:	4623      	mov	r3, r4
 800139a:	4618      	mov	r0, r3
 800139c:	f04f 0100 	mov.w	r1, #0
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	00cb      	lsls	r3, r1, #3
 80013aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013ae:	00c2      	lsls	r2, r0, #3
 80013b0:	4623      	mov	r3, r4
 80013b2:	3307      	adds	r3, #7
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	ebad 0d03 	sub.w	sp, sp, r3
 80013bc:	466b      	mov	r3, sp
 80013be:	3300      	adds	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t locFwdRevState;
	uint16_t locAcc;
	uint16_t locReg;
	while (1) {
		//Clear buff
		for (int i=0; i < rxBufSize; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
 80013c6:	e007      	b.n	80013d8 <task2_handler+0x70>
			rxBuf[i] = '\0';
 80013c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013cc:	4413      	add	r3, r2
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
		for (int i=0; i < rxBufSize; i++) {
 80013d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d4:	3301      	adds	r3, #1
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
 80013d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf3      	blt.n	80013c8 <task2_handler+0x60>
		}
		//char rxBuf[rxBufSize];

		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 80013e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e8:	4868      	ldr	r0, [pc, #416]	; (800158c <task2_handler+0x224>)
 80013ea:	f00b fc71 	bl	800ccd0 <HAL_UART_Receive>
		rxBuf[4] = '\0';
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	2200      	movs	r2, #0
 80013f2:	711a      	strb	r2, [r3, #4]
		if (strncmp(rxBuf, "M On", strlen("M On")) == 0) {
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	2204      	movs	r2, #4
 80013f8:	4965      	ldr	r1, [pc, #404]	; (8001590 <task2_handler+0x228>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f010 fa4a 	bl	8011894 <strncmp>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <task2_handler+0xba>
			locMotorState = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if (locMotorState != motorState)
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <task2_handler+0x22c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001414:	429a      	cmp	r2, r3
 8001416:	d0d4      	beq.n	80013c2 <task2_handler+0x5a>
				motorState = locMotorState;
 8001418:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <task2_handler+0x22c>)
 800141a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800141e:	7013      	strb	r3, [r2, #0]
 8001420:	e7cf      	b.n	80013c2 <task2_handler+0x5a>
		}
		else if (strncmp(rxBuf, "MOff", strlen("MOff")) == 0) {
 8001422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001424:	2204      	movs	r2, #4
 8001426:	495c      	ldr	r1, [pc, #368]	; (8001598 <task2_handler+0x230>)
 8001428:	4618      	mov	r0, r3
 800142a:	f010 fa33 	bl	8011894 <strncmp>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10d      	bne.n	8001450 <task2_handler+0xe8>
			locMotorState = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if (locMotorState != motorState)
 800143a:	4b56      	ldr	r3, [pc, #344]	; (8001594 <task2_handler+0x22c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001442:	429a      	cmp	r2, r3
 8001444:	d0bd      	beq.n	80013c2 <task2_handler+0x5a>
				motorState = locMotorState;
 8001446:	4a53      	ldr	r2, [pc, #332]	; (8001594 <task2_handler+0x22c>)
 8001448:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800144c:	7013      	strb	r3, [r2, #0]
 800144e:	e7b8      	b.n	80013c2 <task2_handler+0x5a>
		}
		else if (strncmp(rxBuf, "F wd", strlen("F wd")) == 0) {
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	2204      	movs	r2, #4
 8001454:	4951      	ldr	r1, [pc, #324]	; (800159c <task2_handler+0x234>)
 8001456:	4618      	mov	r0, r3
 8001458:	f010 fa1c 	bl	8011894 <strncmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <task2_handler+0x116>
			locFwdRevState = 0; //Note 0 is forward
 8001462:	2300      	movs	r3, #0
 8001464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (locFwdRevState != fwdRevState)
 8001468:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <task2_handler+0x238>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001470:	429a      	cmp	r2, r3
 8001472:	d0a6      	beq.n	80013c2 <task2_handler+0x5a>
				fwdRevState = locFwdRevState;
 8001474:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <task2_handler+0x238>)
 8001476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147a:	7013      	strb	r3, [r2, #0]
 800147c:	e7a1      	b.n	80013c2 <task2_handler+0x5a>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev

		}
		else if (strncmp(rxBuf, "R ev", strlen("R ev")) == 0) {
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	2204      	movs	r2, #4
 8001482:	4948      	ldr	r1, [pc, #288]	; (80015a4 <task2_handler+0x23c>)
 8001484:	4618      	mov	r0, r3
 8001486:	f010 fa05 	bl	8011894 <strncmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10d      	bne.n	80014ac <task2_handler+0x144>
			locFwdRevState = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (locFwdRevState != fwdRevState)
 8001496:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <task2_handler+0x238>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800149e:	429a      	cmp	r2, r3
 80014a0:	d08f      	beq.n	80013c2 <task2_handler+0x5a>
				fwdRevState = locFwdRevState;
 80014a2:	4a3f      	ldr	r2, [pc, #252]	; (80015a0 <task2_handler+0x238>)
 80014a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a8:	7013      	strb	r3, [r2, #0]
 80014aa:	e78a      	b.n	80013c2 <task2_handler+0x5a>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
		}
		else if (strncmp(rxBuf, "A", 1) == 0) {
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <task2_handler+0x240>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12f      	bne.n	800151a <task2_handler+0x1b2>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev
			//strncpy(val, &rxBuf[strlen("Accel: ")], strlen(rxBuf)-strlen("Accel: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 80014ba:	2301      	movs	r3, #1
 80014bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80014be:	e00d      	b.n	80014dc <task2_handler+0x174>
				val[i-1] = rxBuf[i];
 80014c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014c8:	440a      	add	r2, r1
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014d0:	440b      	add	r3, r1
 80014d2:	f803 2c34 	strb.w	r2, [r3, #-52]
			for (i = 1; i < strlen(rxBuf); i++) {
 80014d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d8:	3301      	adds	r3, #1
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
 80014dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fefe 	bl	80002e0 <strlen>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8e9      	bhi.n	80014c0 <task2_handler+0x158>
			} val[i] = '\0';
 80014ec:	f107 021c 	add.w	r2, r7, #28
 80014f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f2:	4413      	add	r3, r2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			//char *end;
			locAcc = (uint16_t)atoi(val);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f010 f88f 	bl	8011620 <atoi>
 8001502:	4603      	mov	r3, r0
 8001504:	863b      	strh	r3, [r7, #48]	; 0x30
			if (locAcc != accValue)
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <task2_handler+0x244>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800150c:	429a      	cmp	r2, r3
 800150e:	f43f af58 	beq.w	80013c2 <task2_handler+0x5a>
				accValue = locAcc;
 8001512:	4a26      	ldr	r2, [pc, #152]	; (80015ac <task2_handler+0x244>)
 8001514:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001516:	8013      	strh	r3, [r2, #0]
 8001518:	e753      	b.n	80013c2 <task2_handler+0x5a>

		}
		else if (strncmp(rxBuf, "R", 1) == 0) {
 800151a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <task2_handler+0x248>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f af4c 	bne.w	80013c2 <task2_handler+0x5a>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
			//strncpy(val, &rxBuf[strlen("Regen: ")], strlen(rxBuf)-strlen("Regen: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 800152a:	2301      	movs	r3, #1
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800152e:	e00d      	b.n	800154c <task2_handler+0x1e4>
				val[i-1] = rxBuf[i];
 8001530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001532:	3b01      	subs	r3, #1
 8001534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001538:	440a      	add	r2, r1
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001540:	440b      	add	r3, r1
 8001542:	f803 2c44 	strb.w	r2, [r3, #-68]
			for (i = 1; i < strlen(rxBuf); i++) {
 8001546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001548:	3301      	adds	r3, #1
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fec6 	bl	80002e0 <strlen>
 8001554:	4602      	mov	r2, r0
 8001556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001558:	429a      	cmp	r2, r3
 800155a:	d8e9      	bhi.n	8001530 <task2_handler+0x1c8>
			} val[i] = '\0';
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001562:	4413      	add	r3, r2
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			locReg = (uint16_t)atoi(val);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f010 f857 	bl	8011620 <atoi>
 8001572:	4603      	mov	r3, r0
 8001574:	867b      	strh	r3, [r7, #50]	; 0x32
			if (locReg != regenValue)
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <task2_handler+0x24c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800157c:	429a      	cmp	r2, r3
 800157e:	f43f af20 	beq.w	80013c2 <task2_handler+0x5a>
				regenValue = locReg;
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <task2_handler+0x24c>)
 8001584:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001586:	8013      	strh	r3, [r2, #0]
		for (int i=0; i < rxBufSize; i++) {
 8001588:	e71b      	b.n	80013c2 <task2_handler+0x5a>
 800158a:	bf00      	nop
 800158c:	24027a4c 	.word	0x24027a4c
 8001590:	08012168 	.word	0x08012168
 8001594:	240000ba 	.word	0x240000ba
 8001598:	08012170 	.word	0x08012170
 800159c:	08012178 	.word	0x08012178
 80015a0:	240000bc 	.word	0x240000bc
 80015a4:	08012180 	.word	0x08012180
 80015a8:	08012188 	.word	0x08012188
 80015ac:	240000b6 	.word	0x240000b6
 80015b0:	0801218c 	.word	0x0801218c
 80015b4:	240000b8 	.word	0x240000b8

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f001 fe17 	bl	80031f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 80015c2:	f7ff fda3 	bl	800110c <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f8e3 	bl	8001790 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015ca:	f000 f96f 	bl	80018ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fcfd 	bl	8001fcc <MX_GPIO_Init>
  MX_DMA_Init();
 80015d2:	f000 fcb3 	bl	8001f3c <MX_DMA_Init>
  MX_UART4_Init();
 80015d6:	f000 fbcb 	bl	8001d70 <MX_UART4_Init>
  MX_RTC_Init();
 80015da:	f000 fa33 	bl	8001a44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80015de:	f000 fc61 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015e2:	f000 fb03 	bl	8001bec <MX_TIM2_Init>
  MX_TIM12_Init();
 80015e6:	f000 fb55 	bl	8001c94 <MX_TIM12_Init>
  MX_TIM1_Init();
 80015ea:	f000 faab 	bl	8001b44 <MX_TIM1_Init>
  MX_CRC_Init();
 80015ee:	f000 fa07 	bl	8001a00 <MX_CRC_Init>
  MX_SPI3_Init();
 80015f2:	f000 fa4f 	bl	8001a94 <MX_SPI3_Init>
  MX_UART8_Init();
 80015f6:	f000 fc09 	bl	8001e0c <MX_UART8_Init>
  MX_ADC1_Init();
 80015fa:	f000 f989 	bl	8001910 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t SPI_START_VAL = 0b00010001;
 80015fe:	2311      	movs	r3, #17
 8001600:	75fb      	strb	r3, [r7, #23]
  buart = B_uartStart(&huart4); //Note huart4 is for rs485
 8001602:	4850      	ldr	r0, [pc, #320]	; (8001744 <main+0x18c>)
 8001604:	f7ff fb12 	bl	8000c2c <B_uartStart>
 8001608:	4603      	mov	r3, r0
 800160a:	4a4f      	ldr	r2, [pc, #316]	; (8001748 <main+0x190>)
 800160c:	6013      	str	r3, [r2, #0]
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};
  btcp = B_tcpStart(&buart, buart, 1, &hcrc);
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <main+0x190>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	4b4e      	ldr	r3, [pc, #312]	; (800174c <main+0x194>)
 8001614:	2201      	movs	r2, #1
 8001616:	484c      	ldr	r0, [pc, #304]	; (8001748 <main+0x190>)
 8001618:	f7ff f836 	bl	8000688 <B_tcpStart>
 800161c:	4603      	mov	r3, r0
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <main+0x198>)
 8001620:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 8001622:	2201      	movs	r2, #1
 8001624:	2120      	movs	r1, #32
 8001626:	484b      	ldr	r0, [pc, #300]	; (8001754 <main+0x19c>)
 8001628:	f006 f9b4 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	4849      	ldr	r0, [pc, #292]	; (8001758 <main+0x1a0>)
 8001632:	f006 f997 	bl	8007964 <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET); // FwdRev
 8001636:	2201      	movs	r2, #1
 8001638:	2102      	movs	r1, #2
 800163a:	4848      	ldr	r0, [pc, #288]	; (800175c <main+0x1a4>)
 800163c:	f006 f9aa 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	4846      	ldr	r0, [pc, #280]	; (8001760 <main+0x1a8>)
 8001648:	f006 f9a4 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001652:	4843      	ldr	r0, [pc, #268]	; (8001760 <main+0x1a8>)
 8001654:	f006 f99e 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	483f      	ldr	r0, [pc, #252]	; (800175c <main+0x1a4>)
 800165e:	f006 f999 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 8001662:	2201      	movs	r2, #1
 8001664:	2104      	movs	r1, #4
 8001666:	483f      	ldr	r0, [pc, #252]	; (8001764 <main+0x1ac>)
 8001668:	f006 f994 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 800166c:	2201      	movs	r2, #1
 800166e:	2104      	movs	r1, #4
 8001670:	483a      	ldr	r0, [pc, #232]	; (800175c <main+0x1a4>)
 8001672:	f006 f98f 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	4838      	ldr	r0, [pc, #224]	; (8001760 <main+0x1a8>)
 800167e:	f006 f989 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001688:	4835      	ldr	r0, [pc, #212]	; (8001760 <main+0x1a8>)
 800168a:	f006 f983 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 800168e:	2201      	movs	r2, #1
 8001690:	2104      	movs	r1, #4
 8001692:	4835      	ldr	r0, [pc, #212]	; (8001768 <main+0x1b0>)
 8001694:	f006 f97e 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169e:	4830      	ldr	r0, [pc, #192]	; (8001760 <main+0x1a8>)
 80016a0:	f006 f978 	bl	8007994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	4830      	ldr	r0, [pc, #192]	; (800176c <main+0x1b4>)
 80016aa:	f006 f973 	bl	8007994 <HAL_GPIO_WritePin>


  xTimerStart(xTimerCreate("mc2StateTmr", 10, pdTRUE, NULL, mc2StateTmr), 0);
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <main+0x1b8>)
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2201      	movs	r2, #1
 80016b6:	210a      	movs	r1, #10
 80016b8:	482e      	ldr	r0, [pc, #184]	; (8001774 <main+0x1bc>)
 80016ba:	f00f f83b 	bl	8010734 <xTimerCreate>
 80016be:	4604      	mov	r4, r0
 80016c0:	f00e fac8 	bl	800fc54 <xTaskGetTickCount>
 80016c4:	4602      	mov	r2, r0
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2101      	movs	r1, #1
 80016ce:	4620      	mov	r0, r4
 80016d0:	f00f f88c 	bl	80107ec <xTimerGenericCommand>

  HAL_TIM_Base_Start(&htim2);
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <main+0x1c0>)
 80016d6:	f00a f8e5 	bl	800b8a4 <HAL_TIM_Base_Start>
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
	BaseType_t status;

	status = xTaskCreate(task1_handler,  /* Function that implements the task. */
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2304      	movs	r3, #4
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0x1c4>)
 80016e4:	22c8      	movs	r2, #200	; 0xc8
 80016e6:	4926      	ldr	r1, [pc, #152]	; (8001780 <main+0x1c8>)
 80016e8:	4826      	ldr	r0, [pc, #152]	; (8001784 <main+0x1cc>)
 80016ea:	f00e f833 	bl	800f754 <xTaskCreate>
 80016ee:	6138      	str	r0, [r7, #16]
                200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
                "dont need this this time", /* Parameter passed into the task. */
                4, /* Priority at which the task is created. */ //Note must be 4 since btcp is 4
                &task1_handle /* Used to pass out the created task's handle. */
                              );
	configASSERT(status == pdPASS); // Error checking
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d00a      	beq.n	800170c <main+0x154>
	__asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	60fb      	str	r3, [r7, #12]
}
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <main+0x152>

	status = xTaskCreate(task2_handler,  /* Function that implements the task. */
 800170c:	463b      	mov	r3, r7
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2304      	movs	r3, #4
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <main+0x1c4>)
 8001716:	22c8      	movs	r2, #200	; 0xc8
 8001718:	491b      	ldr	r1, [pc, #108]	; (8001788 <main+0x1d0>)
 800171a:	481c      	ldr	r0, [pc, #112]	; (800178c <main+0x1d4>)
 800171c:	f00e f81a 	bl	800f754 <xTaskCreate>
 8001720:	6138      	str	r0, [r7, #16]
	              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
				  "dont need this this time", /* Parameter passed into the task. */
	              4, /* Priority at which the task is created. */
				  &task2_handle /* Used to pass out the created task's handle. */
	                            );
	configASSERT(status == pdPASS); // Error checking
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d00a      	beq.n	800173e <main+0x186>
	__asm volatile
 8001728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172c:	f383 8811 	msr	BASEPRI, r3
 8001730:	f3bf 8f6f 	isb	sy
 8001734:	f3bf 8f4f 	dsb	sy
 8001738:	60bb      	str	r3, [r7, #8]
}
 800173a:	bf00      	nop
 800173c:	e7fe      	b.n	800173c <main+0x184>


  /* Start scheduler */
  vTaskStartScheduler();
 800173e:	f00e f987 	bl	800fa50 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001742:	e7fe      	b.n	8001742 <main+0x18a>
 8001744:	24027924 	.word	0x24027924
 8001748:	24027adc 	.word	0x24027adc
 800174c:	24027458 	.word	0x24027458
 8001750:	240277a8 	.word	0x240277a8
 8001754:	58022400 	.word	0x58022400
 8001758:	58020400 	.word	0x58020400
 800175c:	58021800 	.word	0x58021800
 8001760:	58022000 	.word	0x58022000
 8001764:	58022800 	.word	0x58022800
 8001768:	58021400 	.word	0x58021400
 800176c:	58021000 	.word	0x58021000
 8001770:	08001169 	.word	0x08001169
 8001774:	08012190 	.word	0x08012190
 8001778:	240279b4 	.word	0x240279b4
 800177c:	0801219c 	.word	0x0801219c
 8001780:	080121b8 	.word	0x080121b8
 8001784:	080012e5 	.word	0x080012e5
 8001788:	080121c0 	.word	0x080121c0
 800178c:	08001369 	.word	0x08001369

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b09c      	sub	sp, #112	; 0x70
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	224c      	movs	r2, #76	; 0x4c
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f00f ff7c 	bl	801169c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2220      	movs	r2, #32
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00f ff76 	bl	801169c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017b0:	2002      	movs	r0, #2
 80017b2:	f006 f92d 	bl	8007a10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <SystemClock_Config+0x110>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <SystemClock_Config+0x110>)
 80017c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <SystemClock_Config+0x110>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <SystemClock_Config+0x114>)
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <SystemClock_Config+0x114>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <SystemClock_Config+0x114>)
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017e8:	bf00      	nop
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <SystemClock_Config+0x110>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d1f8      	bne.n	80017ea <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <SystemClock_Config+0x118>)
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <SystemClock_Config+0x118>)
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001804:	232a      	movs	r3, #42	; 0x2a
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001820:	2304      	movs	r3, #4
 8001822:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001824:	2314      	movs	r3, #20
 8001826:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001830:	2302      	movs	r3, #2
 8001832:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001834:	230c      	movs	r3, #12
 8001836:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001838:	2300      	movs	r3, #0
 800183a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4618      	mov	r0, r3
 8001846:	f006 f91d 	bl	8007a84 <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001850:	f000 fe80 	bl	8002554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	233f      	movs	r3, #63	; 0x3f
 8001856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001858:	2303      	movs	r3, #3
 800185a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001860:	2308      	movs	r3, #8
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001864:	2340      	movs	r3, #64	; 0x40
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800186c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001870:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fd12 	bl	80082a4 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001886:	f000 fe65 	bl	8002554 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800188a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800188e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8001892:	2000      	movs	r0, #0
 8001894:	f006 febc 	bl	8008610 <HAL_RCC_MCOConfig>
}
 8001898:	bf00      	nop
 800189a:	3770      	adds	r7, #112	; 0x70
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	58024800 	.word	0x58024800
 80018a4:	58000400 	.word	0x58000400
 80018a8:	58024400 	.word	0x58024400

080018ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0b0      	sub	sp, #192	; 0xc0
 80018b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	22bc      	movs	r2, #188	; 0xbc
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00f feef 	bl	801169c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <PeriphCommonClock_Config+0x60>)
 80018c0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 80018c2:	2308      	movs	r3, #8
 80018c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80018c6:	2320      	movs	r3, #32
 80018c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80018e2:	2320      	movs	r3, #32
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80018e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ea:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f007 f90d 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001900:	f000 fe28 	bl	8002554 <Error_Handler>
  }
}
 8001904:	bf00      	nop
 8001906:	37c0      	adds	r7, #192	; 0xc0
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	02090000 	.word	0x02090000

08001910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <MX_ADC1_Init+0xe8>)
 8001938:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001942:	2208      	movs	r2, #8
 8001944:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800194e:	2204      	movs	r2, #4
 8001950:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001954:	2200      	movs	r2, #0
 8001956:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800195a:	2200      	movs	r2, #0
 800195c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001960:	2201      	movs	r2, #1
 8001962:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001966:	2200      	movs	r2, #0
 8001968:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001978:	2200      	movs	r2, #0
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800197e:	2200      	movs	r2, #0
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_ADC1_Init+0xe4>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <MX_ADC1_Init+0xe4>)
 8001992:	f001 fe21 	bl	80035d8 <HAL_ADC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 fdda 	bl	8002554 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <MX_ADC1_Init+0xe4>)
 80019ac:	f002 fc34 	bl	8004218 <HAL_ADCEx_MultiModeConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80019b6:	f000 fdcd 	bl	8002554 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_ADC1_Init+0xec>)
 80019bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019be:	2306      	movs	r3, #6
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019cc:	2304      	movs	r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_ADC1_Init+0xe4>)
 80019de:	f001 ff9b 	bl	8003918 <HAL_ADC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80019e8:	f000 fdb4 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2402761c 	.word	0x2402761c
 80019f8:	40022000 	.word	0x40022000
 80019fc:	10c00010 	.word	0x10c00010

08001a00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <MX_CRC_Init+0x40>)
 8001a08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a18:	2220      	movs	r2, #32
 8001a1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_CRC_Init+0x3c>)
 8001a2a:	f002 fdb3 	bl	8004594 <HAL_CRC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a34:	f000 fd8e 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24027458 	.word	0x24027458
 8001a40:	58024c00 	.word	0x58024c00

08001a44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <MX_RTC_Init+0x4c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a56:	227f      	movs	r2, #127	; 0x7f
 8001a58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a5c:	22ff      	movs	r2, #255	; 0xff
 8001a5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_RTC_Init+0x48>)
 8001a7a:	f009 f9d1 	bl	800ae20 <HAL_RTC_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001a84:	f000 fd66 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	24027824 	.word	0x24027824
 8001a90:	58004000 	.word	0x58004000

08001a94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001a9a:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <MX_SPI3_Init+0xac>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001aa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aa4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001aca:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ace:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_SPI3_Init+0xa8>)
 8001b28:	f009 fa86 	bl	800b038 <HAL_SPI_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001b32:	f000 fd0f 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	24027590 	.word	0x24027590
 8001b40:	40003c00 	.word	0x40003c00

08001b44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <MX_TIM1_Init+0xa4>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b8e:	4815      	ldr	r0, [pc, #84]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001b90:	f009 fe31 	bl	800b7f6 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b9a:	f000 fcdb 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001bac:	f00a f9e2 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bb6:	f000 fccd 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_TIM1_Init+0xa0>)
 8001bcc:	f00a fef4 	bl	800c9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bd6:	f000 fcbd 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	24027848 	.word	0x24027848
 8001be8:	40010000 	.word	0x40010000

08001bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c32:	4817      	ldr	r0, [pc, #92]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c34:	f009 fddf 	bl	800b7f6 <HAL_TIM_Base_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c3e:	f000 fc89 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c5c:	f00a f98a 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c66:	f000 fc75 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <MX_TIM2_Init+0xa4>)
 8001c78:	f00a fe9e 	bl	800c9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c82:	f000 fc67 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	240279b4 	.word	0x240279b4

08001c94 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <MX_TIM12_Init+0xd8>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ce0:	4821      	ldr	r0, [pc, #132]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001ce2:	f009 fd88 	bl	800b7f6 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001cec:	f000 fc32 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001cfe:	f00a f939 	bl	800bf74 <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001d08:	f000 fc24 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d0c:	4816      	ldr	r0, [pc, #88]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001d0e:	f009 fea1 	bl	800ba54 <HAL_TIM_PWM_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001d18:	f000 fc1c 	bl	8002554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1c:	2360      	movs	r3, #96	; 0x60
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001d34:	f00a f80e 	bl	800bd54 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001d3e:	f000 fc09 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2204      	movs	r2, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001d4a:	f00a f803 	bl	800bd54 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001d54:	f000 fbfe 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <MX_TIM12_Init+0xd4>)
 8001d5a:	f000 fdc1 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24027bd0 	.word	0x24027bd0
 8001d6c:	40001800 	.word	0x40001800

08001d70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <MX_UART4_Init+0x94>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <MX_UART4_Init+0x98>)
 8001d7e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d94:	220c      	movs	r2, #12
 8001d96:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_UART4_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_UART4_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <MX_UART4_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_UART4_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_UART4_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001db6:	4812      	ldr	r0, [pc, #72]	; (8001e00 <MX_UART4_Init+0x90>)
 8001db8:	f00a fea4 	bl	800cb04 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001dc2:	f000 fbc7 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_UART4_Init+0x90>)
 8001dca:	f00c fcef 	bl	800e7ac <HAL_UARTEx_SetTxFifoThreshold>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001dd4:	f000 fbbe 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_UART4_Init+0x90>)
 8001ddc:	f00c fd24 	bl	800e828 <HAL_UARTEx_SetRxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001de6:	f000 fbb5 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_UART4_Init+0x90>)
 8001dec:	f00c fca5 	bl	800e73a <HAL_UARTEx_DisableFifoMode>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001df6:	f000 fbad 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24027924 	.word	0x24027924
 8001e04:	40004c00 	.word	0x40004c00
 8001e08:	001e8480 	.word	0x001e8480

08001e0c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <MX_UART8_Init+0x94>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e18:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001e1c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001e54:	4811      	ldr	r0, [pc, #68]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e56:	f00a fe55 	bl	800cb04 <HAL_UART_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001e60:	f000 fb78 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e68:	f00c fca0 	bl	800e7ac <HAL_UARTEx_SetTxFifoThreshold>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001e72:	f000 fb6f 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e7a:	f00c fcd5 	bl	800e828 <HAL_UARTEx_SetRxFifoThreshold>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001e84:	f000 fb66 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <MX_UART8_Init+0x90>)
 8001e8a:	f00c fc56 	bl	800e73a <HAL_UARTEx_DisableFifoMode>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001e94:	f000 fb5e 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	24027894 	.word	0x24027894
 8001ea0:	40007c00 	.word	0x40007c00

08001ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eec:	4811      	ldr	r0, [pc, #68]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001eee:	f00a fe09 	bl	800cb04 <HAL_UART_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ef8:	f000 fb2c 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efc:	2100      	movs	r1, #0
 8001efe:	480d      	ldr	r0, [pc, #52]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001f00:	f00c fc54 	bl	800e7ac <HAL_UARTEx_SetTxFifoThreshold>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f0a:	f000 fb23 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4808      	ldr	r0, [pc, #32]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001f12:	f00c fc89 	bl	800e828 <HAL_UARTEx_SetRxFifoThreshold>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f1c:	f000 fb1a 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_USART2_UART_Init+0x90>)
 8001f22:	f00c fc0a 	bl	800e73a <HAL_UARTEx_DisableFifoMode>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f2c:	f000 fb12 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	24027a4c 	.word	0x24027a4c
 8001f38:	40004400 	.word	0x40004400

08001f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_DMA_Init+0x8c>)
 8001f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <MX_DMA_Init+0x8c>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <MX_DMA_Init+0x8c>)
 8001f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2105      	movs	r1, #5
 8001f64:	200b      	movs	r0, #11
 8001f66:	f002 faed 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f6a:	200b      	movs	r0, #11
 8001f6c:	f002 fb04 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2105      	movs	r1, #5
 8001f74:	200c      	movs	r0, #12
 8001f76:	f002 fae5 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f7a:	200c      	movs	r0, #12
 8001f7c:	f002 fafc 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2105      	movs	r1, #5
 8001f84:	200d      	movs	r0, #13
 8001f86:	f002 fadd 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001f8a:	200d      	movs	r0, #13
 8001f8c:	f002 faf4 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2105      	movs	r1, #5
 8001f94:	200e      	movs	r0, #14
 8001f96:	f002 fad5 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f9a:	200e      	movs	r0, #14
 8001f9c:	f002 faec 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2105      	movs	r1, #5
 8001fa4:	200f      	movs	r0, #15
 8001fa6:	f002 facd 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001faa:	200f      	movs	r0, #15
 8001fac:	f002 fae4 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	2010      	movs	r0, #16
 8001fb6:	f002 fac5 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f002 fadc 	bl	8004578 <HAL_NVIC_EnableIRQ>

}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58024400 	.word	0x58024400

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	; 0x40
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe2:	4bc0      	ldr	r3, [pc, #768]	; (80022e4 <MX_GPIO_Init+0x318>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe8:	4abe      	ldr	r2, [pc, #760]	; (80022e4 <MX_GPIO_Init+0x318>)
 8001fea:	f043 0310 	orr.w	r3, r3, #16
 8001fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff2:	4bbc      	ldr	r3, [pc, #752]	; (80022e4 <MX_GPIO_Init+0x318>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002000:	4bb8      	ldr	r3, [pc, #736]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	4ab7      	ldr	r2, [pc, #732]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002010:	4bb4      	ldr	r3, [pc, #720]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800201e:	4bb1      	ldr	r3, [pc, #708]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002024:	4aaf      	ldr	r2, [pc, #700]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202e:	4bad      	ldr	r3, [pc, #692]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203c:	4ba9      	ldr	r3, [pc, #676]	; (80022e4 <MX_GPIO_Init+0x318>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	4aa8      	ldr	r2, [pc, #672]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204c:	4ba5      	ldr	r3, [pc, #660]	; (80022e4 <MX_GPIO_Init+0x318>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4ba2      	ldr	r3, [pc, #648]	; (80022e4 <MX_GPIO_Init+0x318>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002060:	4aa0      	ldr	r2, [pc, #640]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206a:	4b9e      	ldr	r3, [pc, #632]	; (80022e4 <MX_GPIO_Init+0x318>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002078:	4b9a      	ldr	r3, [pc, #616]	; (80022e4 <MX_GPIO_Init+0x318>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	4a99      	ldr	r2, [pc, #612]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002088:	4b96      	ldr	r3, [pc, #600]	; (80022e4 <MX_GPIO_Init+0x318>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209c:	4a91      	ldr	r2, [pc, #580]	; (80022e4 <MX_GPIO_Init+0x318>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a6:	4b8f      	ldr	r3, [pc, #572]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020b4:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ba:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c4:	4b87      	ldr	r3, [pc, #540]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b84      	ldr	r3, [pc, #528]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d8:	4a82      	ldr	r2, [pc, #520]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e2:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f0:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	4a7b      	ldr	r2, [pc, #492]	; (80022e4 <MX_GPIO_Init+0x318>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002100:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800210e:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211e:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <MX_GPIO_Init+0x318>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	2109      	movs	r1, #9
 8002130:	486d      	ldr	r0, [pc, #436]	; (80022e8 <MX_GPIO_Init+0x31c>)
 8002132:	f005 fc2f 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002136:	2200      	movs	r2, #0
 8002138:	f24f 2191 	movw	r1, #62097	; 0xf291
 800213c:	486b      	ldr	r0, [pc, #428]	; (80022ec <MX_GPIO_Init+0x320>)
 800213e:	f005 fc29 	bl	8007994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	486a      	ldr	r0, [pc, #424]	; (80022f0 <MX_GPIO_Init+0x324>)
 8002148:	f005 fc24 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800214c:	2200      	movs	r2, #0
 800214e:	f248 013f 	movw	r1, #32831	; 0x803f
 8002152:	4868      	ldr	r0, [pc, #416]	; (80022f4 <MX_GPIO_Init+0x328>)
 8002154:	f005 fc1e 	bl	8007994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f24b 0120 	movw	r1, #45088	; 0xb020
 800215e:	4866      	ldr	r0, [pc, #408]	; (80022f8 <MX_GPIO_Init+0x32c>)
 8002160:	f005 fc18 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216a:	4864      	ldr	r0, [pc, #400]	; (80022fc <MX_GPIO_Init+0x330>)
 800216c:	f005 fc12 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002170:	2200      	movs	r2, #0
 8002172:	21fc      	movs	r1, #252	; 0xfc
 8002174:	4862      	ldr	r0, [pc, #392]	; (8002300 <MX_GPIO_Init+0x334>)
 8002176:	f005 fc0d 	bl	8007994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2108      	movs	r1, #8
 800217e:	4861      	ldr	r0, [pc, #388]	; (8002304 <MX_GPIO_Init+0x338>)
 8002180:	f005 fc08 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8002184:	2309      	movs	r3, #9
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	4853      	ldr	r0, [pc, #332]	; (80022e8 <MX_GPIO_Init+0x31c>)
 800219c:	f005 fa32 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80021a0:	f24f 2391 	movw	r3, #62097	; 0xf291
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b6:	4619      	mov	r1, r3
 80021b8:	484c      	ldr	r0, [pc, #304]	; (80022ec <MX_GPIO_Init+0x320>)
 80021ba:	f005 fa23 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021be:	2304      	movs	r3, #4
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4846      	ldr	r0, [pc, #280]	; (80022f0 <MX_GPIO_Init+0x324>)
 80021d6:	f005 fa15 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 80021da:	2301      	movs	r3, #1
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021de:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <MX_GPIO_Init+0x33c>)
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021e2:	2302      	movs	r3, #2
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ea:	4619      	mov	r1, r3
 80021ec:	4842      	ldr	r0, [pc, #264]	; (80022f8 <MX_GPIO_Init+0x32c>)
 80021ee:	f005 fa09 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80021f2:	23de      	movs	r3, #222	; 0xde
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <MX_GPIO_Init+0x33c>)
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002202:	4619      	mov	r1, r3
 8002204:	483c      	ldr	r0, [pc, #240]	; (80022f8 <MX_GPIO_Init+0x32c>)
 8002206:	f005 f9fd 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800220a:	f248 033f 	movw	r3, #32831	; 0x803f
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002220:	4619      	mov	r1, r3
 8002222:	4834      	ldr	r0, [pc, #208]	; (80022f4 <MX_GPIO_Init+0x328>)
 8002224:	f005 f9ee 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <MX_GPIO_Init+0x33c>)
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800223a:	4619      	mov	r1, r3
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <MX_GPIO_Init+0x31c>)
 800223e:	f005 f9e1 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002242:	f24b 0320 	movw	r3, #45088	; 0xb020
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	2301      	movs	r3, #1
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002258:	4619      	mov	r1, r3
 800225a:	4827      	ldr	r0, [pc, #156]	; (80022f8 <MX_GPIO_Init+0x32c>)
 800225c:	f005 f9d2 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002276:	4619      	mov	r1, r3
 8002278:	4820      	ldr	r0, [pc, #128]	; (80022fc <MX_GPIO_Init+0x330>)
 800227a:	f005 f9c3 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800227e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8002290:	230c      	movs	r3, #12
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002298:	4619      	mov	r1, r3
 800229a:	481c      	ldr	r0, [pc, #112]	; (800230c <MX_GPIO_Init+0x340>)
 800229c:	f005 f9b2 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b2:	4619      	mov	r1, r3
 80022b4:	4815      	ldr	r0, [pc, #84]	; (800230c <MX_GPIO_Init+0x340>)
 80022b6:	f005 f9a5 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022cc:	2307      	movs	r3, #7
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d4:	4619      	mov	r1, r3
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <MX_GPIO_Init+0x338>)
 80022d8:	f005 f994 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 80022dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e0:	e016      	b.n	8002310 <MX_GPIO_Init+0x344>
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58021000 	.word	0x58021000
 80022ec:	58022000 	.word	0x58022000
 80022f0:	58021400 	.word	0x58021400
 80022f4:	58021800 	.word	0x58021800
 80022f8:	58022400 	.word	0x58022400
 80022fc:	58021c00 	.word	0x58021c00
 8002300:	58022800 	.word	0x58022800
 8002304:	58020c00 	.word	0x58020c00
 8002308:	11110000 	.word	0x11110000
 800230c:	58020400 	.word	0x58020400
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002312:	4b7e      	ldr	r3, [pc, #504]	; (800250c <MX_GPIO_Init+0x540>)
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	487b      	ldr	r0, [pc, #492]	; (8002510 <MX_GPIO_Init+0x544>)
 8002322:	f005 f96f 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002326:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002338:	2305      	movs	r3, #5
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800233c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002340:	4619      	mov	r1, r3
 8002342:	4874      	ldr	r0, [pc, #464]	; (8002514 <MX_GPIO_Init+0x548>)
 8002344:	f005 f95e 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002348:	2303      	movs	r3, #3
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002358:	2305      	movs	r3, #5
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800235c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	486d      	ldr	r0, [pc, #436]	; (8002518 <MX_GPIO_Init+0x54c>)
 8002364:	f005 f94e 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002368:	23fc      	movs	r3, #252	; 0xfc
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236c:	2301      	movs	r3, #1
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237c:	4619      	mov	r1, r3
 800237e:	4866      	ldr	r0, [pc, #408]	; (8002518 <MX_GPIO_Init+0x54c>)
 8002380:	f005 f940 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <MX_GPIO_Init+0x540>)
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	4860      	ldr	r0, [pc, #384]	; (800251c <MX_GPIO_Init+0x550>)
 800239a:	f005 f933 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800239e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b8:	4619      	mov	r1, r3
 80023ba:	4859      	ldr	r0, [pc, #356]	; (8002520 <MX_GPIO_Init+0x554>)
 80023bc:	f005 f922 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ce:	2302      	movs	r3, #2
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80023d2:	2309      	movs	r3, #9
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023da:	4619      	mov	r1, r3
 80023dc:	4851      	ldr	r0, [pc, #324]	; (8002524 <MX_GPIO_Init+0x558>)
 80023de:	f005 f911 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI2 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80023e2:	230e      	movs	r3, #14
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023f2:	2305      	movs	r3, #5
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	484a      	ldr	r0, [pc, #296]	; (8002528 <MX_GPIO_Init+0x55c>)
 80023fe:	f005 f901 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8002414:	2307      	movs	r3, #7
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	4619      	mov	r1, r3
 800241e:	4840      	ldr	r0, [pc, #256]	; (8002520 <MX_GPIO_Init+0x554>)
 8002420:	f005 f8f0 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002424:	2308      	movs	r3, #8
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	4835      	ldr	r0, [pc, #212]	; (8002510 <MX_GPIO_Init+0x544>)
 800243c:	f005 f8e2 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002450:	2305      	movs	r3, #5
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	4619      	mov	r1, r3
 800245a:	482d      	ldr	r0, [pc, #180]	; (8002510 <MX_GPIO_Init+0x544>)
 800245c:	f005 f8d2 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002460:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002472:	2305      	movs	r3, #5
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247a:	4619      	mov	r1, r3
 800247c:	4827      	ldr	r0, [pc, #156]	; (800251c <MX_GPIO_Init+0x550>)
 800247e:	f005 f8c1 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002482:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002494:	2305      	movs	r3, #5
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249c:	4619      	mov	r1, r3
 800249e:	481f      	ldr	r0, [pc, #124]	; (800251c <MX_GPIO_Init+0x550>)
 80024a0:	f005 f8b0 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80024b4:	2309      	movs	r3, #9
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	4619      	mov	r1, r3
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <MX_GPIO_Init+0x560>)
 80024c0:	f005 f8a0 	bl	8007604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024d4:	2303      	movs	r3, #3
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	4812      	ldr	r0, [pc, #72]	; (8002528 <MX_GPIO_Init+0x55c>)
 80024e0:	f005 f890 	bl	8007604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2105      	movs	r1, #5
 80024e8:	2006      	movs	r0, #6
 80024ea:	f002 f82b 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024ee:	2006      	movs	r0, #6
 80024f0:	f002 f842 	bl	8004578 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2105      	movs	r1, #5
 80024f8:	2028      	movs	r0, #40	; 0x28
 80024fa:	f002 f823 	bl	8004544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024fe:	2028      	movs	r0, #40	; 0x28
 8002500:	f002 f83a 	bl	8004578 <HAL_NVIC_EnableIRQ>

}
 8002504:	bf00      	nop
 8002506:	3740      	adds	r7, #64	; 0x40
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	11110000 	.word	0x11110000
 8002510:	58020c00 	.word	0x58020c00
 8002514:	58022400 	.word	0x58022400
 8002518:	58022800 	.word	0x58022800
 800251c:	58021800 	.word	0x58021800
 8002520:	58020000 	.word	0x58020000
 8002524:	58021c00 	.word	0x58021c00
 8002528:	58022000 	.word	0x58022000
 800252c:	58020400 	.word	0x58020400

08002530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002542:	f000 fe91 	bl	8003268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40001000 	.word	0x40001000

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_MspInit+0x38>)
 800256c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_MspInit+0x38>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_MspInit+0x38>)
 800257c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	210f      	movs	r1, #15
 800258c:	f06f 0001 	mvn.w	r0, #1
 8002590:	f001 ffd8 	bl	8004544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	58024400 	.word	0x58024400

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_ADC_MspInit+0x80>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d129      	bne.n	8002616 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e6:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_ADC_MspInit+0x84>)
 80025f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025fe:	2310      	movs	r3, #16
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002602:	2303      	movs	r3, #3
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_ADC_MspInit+0x88>)
 8002612:	f004 fff7 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000
 8002624:	58024400 	.word	0x58024400
 8002628:	58020800 	.word	0x58020800

0800262c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_CRC_MspInit+0x3c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_CRC_MspInit+0x40>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_CRC_MspInit+0x40>)
 8002646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_CRC_MspInit+0x40>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	58024c00 	.word	0x58024c00
 800266c:	58024400 	.word	0x58024400

08002670 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0b2      	sub	sp, #200	; 0xc8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	22bc      	movs	r2, #188	; 0xbc
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f00f f80b 	bl	801169c <memset>
  if(hrtc->Instance==RTC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_RTC_MspInit+0x58>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d116      	bne.n	80026be <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002690:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002694:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	4618      	mov	r0, r3
 80026a4:	f006 fa36 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80026ae:	f7ff ff51 	bl	8002554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RTC_MspInit+0x5c>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_RTC_MspInit+0x5c>)
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	37c8      	adds	r7, #200	; 0xc8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	58004000 	.word	0x58004000
 80026cc:	58024400 	.word	0x58024400

080026d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0ba      	sub	sp, #232	; 0xe8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e8:	f107 0318 	add.w	r3, r7, #24
 80026ec:	22bc      	movs	r2, #188	; 0xbc
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00e ffd3 	bl	801169c <memset>
  if(hspi->Instance==SPI3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <HAL_SPI_MspInit+0x114>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d16d      	bne.n	80027dc <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002706:	2300      	movs	r3, #0
 8002708:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270a:	f107 0318 	add.w	r3, r7, #24
 800270e:	4618      	mov	r0, r3
 8002710:	f006 fa00 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800271a:	f7ff ff1b 	bl	8002554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 8002720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002724:	4a30      	ldr	r2, [pc, #192]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 8002730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002742:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_SPI_MspInit+0x118>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002790:	2305      	movs	r3, #5
 8002792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002796:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800279a:	4619      	mov	r1, r3
 800279c:	4813      	ldr	r0, [pc, #76]	; (80027ec <HAL_SPI_MspInit+0x11c>)
 800279e:	f004 ff31 	bl	8007604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027a2:	2308      	movs	r3, #8
 80027a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ba:	2306      	movs	r3, #6
 80027bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027c4:	4619      	mov	r1, r3
 80027c6:	480a      	ldr	r0, [pc, #40]	; (80027f0 <HAL_SPI_MspInit+0x120>)
 80027c8:	f004 ff1c 	bl	8007604 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2105      	movs	r1, #5
 80027d0:	2033      	movs	r0, #51	; 0x33
 80027d2:	f001 feb7 	bl	8004544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80027d6:	2033      	movs	r0, #51	; 0x33
 80027d8:	f001 fece 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	37e8      	adds	r7, #232	; 0xe8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	58024400 	.word	0x58024400
 80027ec:	58020c00 	.word	0x58020c00
 80027f0:	58020400 	.word	0x58020400

080027f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_TIM_Base_MspInit+0xdc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10f      	bne.n	8002836 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002834:	e047      	b.n	80028c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d12e      	bne.n	800289e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002846:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800288c:	2301      	movs	r3, #1
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4810      	ldr	r0, [pc, #64]	; (80028d8 <HAL_TIM_Base_MspInit+0xe4>)
 8002898:	f004 feb4 	bl	8007604 <HAL_GPIO_Init>
}
 800289c:	e013      	b.n	80028c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM12)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_TIM_Base_MspInit+0xe8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10e      	bne.n	80028c6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 80028b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_TIM_Base_MspInit+0xe0>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	bf00      	nop
 80028c8:	3730      	adds	r7, #48	; 0x30
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40010000 	.word	0x40010000
 80028d4:	58024400 	.word	0x58024400
 80028d8:	58020000 	.word	0x58020000
 80028dc:	40001800 	.word	0x40001800

080028e0 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_MspPostInit+0x6c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d11f      	bne.n	8002942 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_TIM_MspPostInit+0x70>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002908:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_TIM_MspPostInit+0x70>)
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_TIM_MspPostInit+0x70>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002920:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002924:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002932:	2302      	movs	r3, #2
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_TIM_MspPostInit+0x74>)
 800293e:	f004 fe61 	bl	8007604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40001800 	.word	0x40001800
 8002950:	58024400 	.word	0x58024400
 8002954:	58021c00 	.word	0x58021c00

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0bc      	sub	sp, #240	; 0xf0
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	22bc      	movs	r2, #188	; 0xbc
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f00e fe8f 	bl	801169c <memset>
  if(huart->Instance==UART4)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4aae      	ldr	r2, [pc, #696]	; (8002c3c <HAL_UART_MspInit+0x2e4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f040 80a9 	bne.w	8002adc <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002994:	f107 0320 	add.w	r3, r7, #32
 8002998:	4618      	mov	r0, r3
 800299a:	f006 f8bb 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80029a4:	f7ff fdd6 	bl	8002554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029a8:	4ba5      	ldr	r3, [pc, #660]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ae:	4aa4      	ldr	r2, [pc, #656]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029b8:	4ba1      	ldr	r3, [pc, #644]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	4a9c      	ldr	r2, [pc, #624]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d6:	4b9a      	ldr	r3, [pc, #616]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80029fe:	2306      	movs	r3, #6
 8002a00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a08:	4619      	mov	r1, r3
 8002a0a:	488e      	ldr	r0, [pc, #568]	; (8002c44 <HAL_UART_MspInit+0x2ec>)
 8002a0c:	f004 fdfa 	bl	8007604 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 8002a10:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a12:	4a8e      	ldr	r2, [pc, #568]	; (8002c4c <HAL_UART_MspInit+0x2f4>)
 8002a14:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a1c:	4b8a      	ldr	r3, [pc, #552]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a22:	4b89      	ldr	r3, [pc, #548]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a2e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a30:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a36:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a42:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a48:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a50:	487d      	ldr	r0, [pc, #500]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a52:	f001 ff9d 	bl	8004990 <HAL_DMA_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002a5c:	f7ff fd7a 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a64:	679a      	str	r2, [r3, #120]	; 0x78
 8002a66:	4a78      	ldr	r2, [pc, #480]	; (8002c48 <HAL_UART_MspInit+0x2f0>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8002a6c:	4b78      	ldr	r3, [pc, #480]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a6e:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <HAL_UART_MspInit+0x2fc>)
 8002a70:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002a72:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a78:	4b75      	ldr	r3, [pc, #468]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b74      	ldr	r3, [pc, #464]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a92:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aa0:	4b6b      	ldr	r3, [pc, #428]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b69      	ldr	r3, [pc, #420]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002aae:	4868      	ldr	r0, [pc, #416]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002ab0:	f001 ff6e 	bl	8004990 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002aba:	f7ff fd4b 	bl	8002554 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a63      	ldr	r2, [pc, #396]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002ac2:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ac4:	4a62      	ldr	r2, [pc, #392]	; (8002c50 <HAL_UART_MspInit+0x2f8>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	2034      	movs	r0, #52	; 0x34
 8002ad0:	f001 fd38 	bl	8004544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ad4:	2034      	movs	r0, #52	; 0x34
 8002ad6:	f001 fd4f 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ada:	e176      	b.n	8002dca <HAL_UART_MspInit+0x472>
  else if(huart->Instance==UART8)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <HAL_UART_MspInit+0x300>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f040 80c4 	bne.w	8002c70 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	4618      	mov	r0, r3
 8002af8:	f006 f80c 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002b02:	f7ff fd27 	bl	8002554 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2a:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_UART_MspInit+0x2e8>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b66:	4619      	mov	r1, r3
 8002b68:	483c      	ldr	r0, [pc, #240]	; (8002c5c <HAL_UART_MspInit+0x304>)
 8002b6a:	f004 fd4b 	bl	8007604 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 8002b6e:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b70:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <HAL_UART_MspInit+0x30c>)
 8002b72:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b76:	2251      	movs	r2, #81	; 0x51
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8c:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba0:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002ba4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba8:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002bb0:	482b      	ldr	r0, [pc, #172]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002bb2:	f001 feed 	bl	8004990 <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8002bbc:	f7ff fcca 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002bc4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bc6:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <HAL_UART_MspInit+0x308>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bce:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_UART_MspInit+0x314>)
 8002bd0:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bd4:	2252      	movs	r2, #82	; 0x52
 8002bd6:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd8:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bea:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002c00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c04:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002c0c:	4816      	ldr	r0, [pc, #88]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002c0e:	f001 febf 	bl	8004990 <HAL_DMA_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002c18:	f7ff fc9c 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002c20:	679a      	str	r2, [r3, #120]	; 0x78
 8002c22:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <HAL_UART_MspInit+0x310>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	2053      	movs	r0, #83	; 0x53
 8002c2e:	f001 fc89 	bl	8004544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002c32:	2053      	movs	r0, #83	; 0x53
 8002c34:	f001 fca0 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 8002c38:	e0c7      	b.n	8002dca <HAL_UART_MspInit+0x472>
 8002c3a:	bf00      	nop
 8002c3c:	40004c00 	.word	0x40004c00
 8002c40:	58024400 	.word	0x58024400
 8002c44:	58020000 	.word	0x58020000
 8002c48:	24027c20 	.word	0x24027c20
 8002c4c:	40020010 	.word	0x40020010
 8002c50:	24027364 	.word	0x24027364
 8002c54:	40020028 	.word	0x40020028
 8002c58:	40007c00 	.word	0x40007c00
 8002c5c:	58022400 	.word	0x58022400
 8002c60:	240276f8 	.word	0x240276f8
 8002c64:	40020040 	.word	0x40020040
 8002c68:	240277ac 	.word	0x240277ac
 8002c6c:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a57      	ldr	r2, [pc, #348]	; (8002dd4 <HAL_UART_MspInit+0x47c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f040 80a7 	bne.w	8002dca <HAL_UART_MspInit+0x472>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c86:	f107 0320 	add.w	r3, r7, #32
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 ff42 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_UART_MspInit+0x342>
      Error_Handler();
 8002c96:	f7ff fc5d 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002caa:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbe:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_UART_MspInit+0x480>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cee:	2307      	movs	r3, #7
 8002cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4838      	ldr	r0, [pc, #224]	; (8002ddc <HAL_UART_MspInit+0x484>)
 8002cfc:	f004 fc82 	bl	8007604 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002d00:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d02:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <HAL_UART_MspInit+0x48c>)
 8002d04:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d08:	222b      	movs	r2, #43	; 0x2b
 8002d0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d20:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d42:	4827      	ldr	r0, [pc, #156]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d44:	f001 fe24 	bl	8004990 <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_MspInit+0x3fa>
      Error_Handler();
 8002d4e:	f7ff fc01 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d56:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_UART_MspInit+0x488>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_UART_MspInit+0x494>)
 8002d62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d66:	222c      	movs	r2, #44	; 0x2c
 8002d68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d96:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d9e:	4812      	ldr	r0, [pc, #72]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002da0:	f001 fdf6 	bl	8004990 <HAL_DMA_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_UART_MspInit+0x456>
      Error_Handler();
 8002daa:	f7ff fbd3 	bl	8002554 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002db2:	679a      	str	r2, [r3, #120]	; 0x78
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_UART_MspInit+0x490>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2105      	movs	r1, #5
 8002dbe:	2026      	movs	r0, #38	; 0x26
 8002dc0:	f001 fbc0 	bl	8004544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dc4:	2026      	movs	r0, #38	; 0x26
 8002dc6:	f001 fbd7 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	37f0      	adds	r7, #240	; 0xf0
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58020000 	.word	0x58020000
 8002de0:	240273e0 	.word	0x240273e0
 8002de4:	40020058 	.word	0x40020058
 8002de8:	24027680 	.word	0x24027680
 8002dec:	40020070 	.word	0x40020070

08002df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d827      	bhi.n	8002e4e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	2036      	movs	r0, #54	; 0x36
 8002e04:	f001 fb9e 	bl	8004544 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e08:	2036      	movs	r0, #54	; 0x36
 8002e0a:	f001 fbb5 	bl	8004578 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_InitTick+0xc4>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1a:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e32:	f107 0210 	add.w	r2, r7, #16
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f005 fe27 	bl	8008a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_InitTick+0x6a>
 8002e4c:	e001      	b.n	8002e52 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e02b      	b.n	8002eaa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e52:	f005 fdf1 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 8002e56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e58:	e004      	b.n	8002e64 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e5a:	f005 fded 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <HAL_InitTick+0xcc>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_InitTick+0xd4>)
 8002e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e92:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e94:	f008 fcaf 	bl	800b7f6 <HAL_TIM_Base_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e9e:	4808      	ldr	r0, [pc, #32]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002ea0:	f008 fd68 	bl	800b974 <HAL_TIM_Base_Start_IT>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	e000      	b.n	8002eaa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3740      	adds	r7, #64	; 0x40
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24000008 	.word	0x24000008
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	431bde83 	.word	0x431bde83
 8002ec0:	24027ce4 	.word	0x24027ce4
 8002ec4:	40001000 	.word	0x40001000

08002ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <NMI_Handler+0x4>

08002ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler+0x4>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <BusFault_Handler+0x4>

08002ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler+0x4>

08002ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f004 fd64 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <DMA1_Stream0_IRQHandler+0x10>)
 8002f0a:	f003 f869 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	24027c20 	.word	0x24027c20

08002f18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <DMA1_Stream1_IRQHandler+0x10>)
 8002f1e:	f003 f85f 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	24027364 	.word	0x24027364

08002f2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <DMA1_Stream2_IRQHandler+0x10>)
 8002f32:	f003 f855 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	240276f8 	.word	0x240276f8

08002f40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <DMA1_Stream3_IRQHandler+0x10>)
 8002f46:	f003 f84b 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	240273e0 	.word	0x240273e0

08002f54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <DMA1_Stream4_IRQHandler+0x10>)
 8002f5a:	f003 f841 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	24027680 	.word	0x24027680

08002f68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <DMA1_Stream5_IRQHandler+0x10>)
 8002f6e:	f003 f837 	bl	8005fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	240277ac 	.word	0x240277ac

08002f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <USART2_IRQHandler+0x10>)
 8002f82:	f00a f83f 	bl	800d004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24027a4c 	.word	0x24027a4c

08002f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f98:	f004 fd15 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002f9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fa0:	f004 fd11 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fa8:	f004 fd0d 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fb0:	f004 fd09 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002fb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb8:	f004 fd05 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fc0:	f004 fd01 	bl	80079c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <SPI3_IRQHandler+0x10>)
 8002fce:	f008 f935 	bl	800b23c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	24027590 	.word	0x24027590

08002fdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <UART4_IRQHandler+0x10>)
 8002fe2:	f00a f80f 	bl	800d004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	24027924 	.word	0x24027924

08002ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <TIM6_DAC_IRQHandler+0x10>)
 8002ff6:	f008 fd8e 	bl	800bb16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	24027ce4 	.word	0x24027ce4

08003004 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <UART8_IRQHandler+0x10>)
 800300a:	f009 fffb 	bl	800d004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24027894 	.word	0x24027894

08003018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <_sbrk+0x5c>)
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <_sbrk+0x60>)
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <_sbrk+0x64>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <_sbrk+0x64>)
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <_sbrk+0x68>)
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003048:	f00e faee 	bl	8011628 <__errno>
 800304c:	4603      	mov	r3, r0
 800304e:	220c      	movs	r2, #12
 8003050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e009      	b.n	800306c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <_sbrk+0x64>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <_sbrk+0x64>)
 8003068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	24080000 	.word	0x24080000
 8003078:	00000400 	.word	0x00000400
 800307c:	240000c8 	.word	0x240000c8
 8003080:	24027d88 	.word	0x24027d88

08003084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <SystemInit+0xec>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	4a38      	ldr	r2, [pc, #224]	; (8003170 <SystemInit+0xec>)
 8003090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <SystemInit+0xf0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d807      	bhi.n	80030b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <SystemInit+0xf0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	4a31      	ldr	r2, [pc, #196]	; (8003174 <SystemInit+0xf0>)
 80030ae:	f043 0307 	orr.w	r3, r3, #7
 80030b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80030b4:	4b30      	ldr	r3, [pc, #192]	; (8003178 <SystemInit+0xf4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <SystemInit+0xf4>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <SystemInit+0xf4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <SystemInit+0xf4>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	492b      	ldr	r1, [pc, #172]	; (8003178 <SystemInit+0xf4>)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <SystemInit+0xf8>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <SystemInit+0xf0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <SystemInit+0xf0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 030f 	bic.w	r3, r3, #15
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <SystemInit+0xf0>)
 80030e8:	f043 0307 	orr.w	r3, r3, #7
 80030ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <SystemInit+0xf4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <SystemInit+0xf4>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <SystemInit+0xf4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <SystemInit+0xf4>)
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <SystemInit+0xfc>)
 8003104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <SystemInit+0xf4>)
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <SystemInit+0x100>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <SystemInit+0xf4>)
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <SystemInit+0x104>)
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <SystemInit+0xf4>)
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <SystemInit+0xf4>)
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <SystemInit+0x104>)
 800311c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <SystemInit+0xf4>)
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <SystemInit+0xf4>)
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <SystemInit+0x104>)
 8003128:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <SystemInit+0xf4>)
 800312c:	2200      	movs	r2, #0
 800312e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <SystemInit+0xf4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a10      	ldr	r2, [pc, #64]	; (8003178 <SystemInit+0xf4>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <SystemInit+0xf4>)
 800313e:	2200      	movs	r2, #0
 8003140:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <SystemInit+0x108>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <SystemInit+0x10c>)
 8003148:	4013      	ands	r3, r2
 800314a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314e:	d202      	bcs.n	8003156 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <SystemInit+0x110>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <SystemInit+0x114>)
 8003158:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800315c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SystemInit+0xec>)
 8003160:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003164:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	52002000 	.word	0x52002000
 8003178:	58024400 	.word	0x58024400
 800317c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003180:	02020200 	.word	0x02020200
 8003184:	01ff0000 	.word	0x01ff0000
 8003188:	01010280 	.word	0x01010280
 800318c:	5c001000 	.word	0x5c001000
 8003190:	ffff0000 	.word	0xffff0000
 8003194:	51008108 	.word	0x51008108
 8003198:	52004000 	.word	0x52004000

0800319c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031a0:	f7ff ff70 	bl	8003084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031a6:	e003      	b.n	80031b0 <LoopCopyDataInit>

080031a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80031aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031ae:	3104      	adds	r1, #4

080031b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031b0:	480a      	ldr	r0, [pc, #40]	; (80031dc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80031b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031b8:	d3f6      	bcc.n	80031a8 <CopyDataInit>
  ldr  r2, =_sbss
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80031bc:	e002      	b.n	80031c4 <LoopFillZerobss>

080031be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031c0:	f842 3b04 	str.w	r3, [r2], #4

080031c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80031c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031c8:	d3f9      	bcc.n	80031be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ca:	f00e fa33 	bl	8011634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ce:	f7fe f9f3 	bl	80015b8 <main>
  bx  lr    
 80031d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80031d8:	080123c4 	.word	0x080123c4
  ldr  r0, =_sdata
 80031dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80031e0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 80031e4:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 80031e8:	24027d84 	.word	0x24027d84

080031ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC3_IRQHandler>
	...

080031f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f6:	2003      	movs	r0, #3
 80031f8:	f001 f999 	bl	800452e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031fc:	f005 fa72 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_Init+0x68>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	4913      	ldr	r1, [pc, #76]	; (800325c <HAL_Init+0x6c>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_Init+0x68>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0e      	ldr	r2, [pc, #56]	; (800325c <HAL_Init+0x6c>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <HAL_Init+0x70>)
 8003232:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <HAL_Init+0x74>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800323a:	2000      	movs	r0, #0
 800323c:	f7ff fdd8 	bl	8002df0 <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e002      	b.n	8003250 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800324a:	f7ff f98b 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	58024400 	.word	0x58024400
 800325c:	080121e0 	.word	0x080121e0
 8003260:	24000004 	.word	0x24000004
 8003264:	24000000 	.word	0x24000000

08003268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x20>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x24>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_IncTick+0x24>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	2400000c 	.word	0x2400000c
 800328c:	24027d30 	.word	0x24027d30

08003290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_GetTick+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	24027d30 	.word	0x24027d30

080032a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_GetREVID+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0c1b      	lsrs	r3, r3, #16
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	5c001000 	.word	0x5c001000

080032c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	611a      	str	r2, [r3, #16]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3360      	adds	r3, #96	; 0x60
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	431a      	orrs	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]
  }
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3330      	adds	r3, #48	; 0x30
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	211f      	movs	r1, #31
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	f003 011f 	and.w	r1, r3, #31
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	431a      	orrs	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3314      	adds	r3, #20
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	0e5b      	lsrs	r3, r3, #25
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	0d1b      	lsrs	r3, r3, #20
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2107      	movs	r1, #7
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	401a      	ands	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	0d1b      	lsrs	r3, r3, #20
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	431a      	orrs	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0318 	and.w	r3, r3, #24
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034a4:	40d9      	lsrs	r1, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	400b      	ands	r3, r1
 80034aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	000fffff 	.word	0x000fffff

080034c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6093      	str	r3, [r2, #8]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	5fffffc0 	.word	0x5fffffc0

080034ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003500:	d101      	bne.n	8003506 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <LL_ADC_EnableInternalRegulator+0x24>)
 8003522:	4013      	ands	r3, r2
 8003524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	6fffffc0 	.word	0x6fffffc0

0800353c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003550:	d101      	bne.n	8003556 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <LL_ADC_IsEnabled+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_IsEnabled+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d101      	bne.n	80035a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d101      	bne.n	80035c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e18e      	b.n	8003910 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fe ffcd 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff67 	bl	80034ec <LL_ADC_IsDeepPowerDownEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff4d 	bl	80034c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff82 	bl	800353c <LL_ADC_IsInternalRegulatorEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d114      	bne.n	8003668 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff66 	bl	8003514 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003648:	4b9a      	ldr	r3, [pc, #616]	; (80038b4 <HAL_ADC_Init+0x2dc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	4a9a      	ldr	r2, [pc, #616]	; (80038b8 <HAL_ADC_Init+0x2e0>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3b01      	subs	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff65 	bl	800353c <LL_ADC_IsInternalRegulatorEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff76 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 800369e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 8128 	bne.w	80038fe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 8124 	bne.w	80038fe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff4a 	bl	8003564 <LL_ADC_IsEnabled>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d136      	bne.n	8003744 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a78      	ldr	r2, [pc, #480]	; (80038bc <HAL_ADC_Init+0x2e4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_ADC_Init+0x112>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a76      	ldr	r2, [pc, #472]	; (80038c0 <HAL_ADC_Init+0x2e8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <HAL_ADC_Init+0x130>
 80036ea:	4874      	ldr	r0, [pc, #464]	; (80038bc <HAL_ADC_Init+0x2e4>)
 80036ec:	f7ff ff3a 	bl	8003564 <LL_ADC_IsEnabled>
 80036f0:	4604      	mov	r4, r0
 80036f2:	4873      	ldr	r0, [pc, #460]	; (80038c0 <HAL_ADC_Init+0x2e8>)
 80036f4:	f7ff ff36 	bl	8003564 <LL_ADC_IsEnabled>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4323      	orrs	r3, r4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e008      	b.n	800371a <HAL_ADC_Init+0x142>
 8003708:	486e      	ldr	r0, [pc, #440]	; (80038c4 <HAL_ADC_Init+0x2ec>)
 800370a:	f7ff ff2b 	bl	8003564 <LL_ADC_IsEnabled>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d012      	beq.n	8003744 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a66      	ldr	r2, [pc, #408]	; (80038bc <HAL_ADC_Init+0x2e4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_ADC_Init+0x15a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a64      	ldr	r2, [pc, #400]	; (80038c0 <HAL_ADC_Init+0x2e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_ADC_Init+0x15e>
 8003732:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_ADC_Init+0x2f0>)
 8003734:	e000      	b.n	8003738 <HAL_ADC_Init+0x160>
 8003736:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_ADC_Init+0x2f4>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f7ff fdbe 	bl	80032c0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003744:	f7ff fdb0 	bl	80032a8 <HAL_GetREVID>
 8003748:	4603      	mov	r3, r0
 800374a:	f241 0203 	movw	r2, #4099	; 0x1003
 800374e:	4293      	cmp	r3, r2
 8003750:	d914      	bls.n	800377c <HAL_ADC_Init+0x1a4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b10      	cmp	r3, #16
 8003758:	d110      	bne.n	800377c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7d5b      	ldrb	r3, [r3, #21]
 800375e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003764:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800376a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7f1b      	ldrb	r3, [r3, #28]
 8003770:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003772:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003774:	f043 030c 	orr.w	r3, r3, #12
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e00d      	b.n	8003798 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7d5b      	ldrb	r3, [r3, #21]
 8003780:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003786:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800378c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7f1b      	ldrb	r3, [r3, #28]
 8003792:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7f1b      	ldrb	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d106      	bne.n	80037ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	045b      	lsls	r3, r3, #17
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_ADC_Init+0x2f8>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	430b      	orrs	r3, r1
 80037dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fed1 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 80037e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fede 	bl	80035b0 <LL_ADC_INJ_IsConversionOngoing>
 80037f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d14a      	bne.n	8003892 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d147      	bne.n	8003892 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7d1b      	ldrb	r3, [r3, #20]
 8003806:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_ADC_Init+0x2fc>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800382a:	2b01      	cmp	r3, #1
 800382c:	d11b      	bne.n	8003866 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_ADC_Init+0x300>)
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003842:	3a01      	subs	r2, #1
 8003844:	0411      	lsls	r1, r2, #16
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800384a:	4311      	orrs	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003850:	4311      	orrs	r1, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003856:	430a      	orrs	r2, r1
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	e007      	b.n	8003876 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb93 	bl	8003fb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d120      	bne.n	80038dc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f023 010f 	bic.w	r1, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
 80038b2:	e01b      	b.n	80038ec <HAL_ADC_Init+0x314>
 80038b4:	24000000 	.word	0x24000000
 80038b8:	053e2d63 	.word	0x053e2d63
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40022100 	.word	0x40022100
 80038c4:	58026000 	.word	0x58026000
 80038c8:	40022300 	.word	0x40022300
 80038cc:	58026300 	.word	0x58026300
 80038d0:	fff0c003 	.word	0xfff0c003
 80038d4:	ffffbffc 	.word	0xffffbffc
 80038d8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020f 	bic.w	r2, r2, #15
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f023 0303 	bic.w	r3, r3, #3
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
 80038fc:	e007      	b.n	800390e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800390e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3724      	adds	r7, #36	; 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}

08003918 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b0a1      	sub	sp, #132	; 0x84
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a9d      	ldr	r2, [pc, #628]	; (8003ba8 <HAL_ADC_ConfigChannel+0x290>)
 8003932:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x2a>
 800393e:	2302      	movs	r3, #2
 8003940:	e321      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x66e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fe1b 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8306 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <HAL_ADC_ConfigChannel+0x62>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	e016      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x90>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800398c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003992:	2320      	movs	r3, #32
 8003994:	e003      	b.n	800399e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	69d1      	ldr	r1, [r2, #28]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	430b      	orrs	r3, r1
 80039b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7ff fd04 	bl	80033d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fddc 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 80039d2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fde9 	bl	80035b0 <LL_ADC_INJ_IsConversionOngoing>
 80039de:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80b3 	bne.w	8003b4e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 80af 	bne.w	8003b4e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7ff fd13 	bl	8003428 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a02:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_ADC_ConfigChannel+0x294>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x110>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	e01d      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x14c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x136>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	e00a      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x14c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d027      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7c:	f7ff fc54 	bl	8003328 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6919      	ldr	r1, [r3, #16]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	7e5b      	ldrb	r3, [r3, #25]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x17e>
 8003a90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a94:	e000      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x180>
 8003a96:	2300      	movs	r3, #0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f7ff fc7e 	bl	800339a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	7e1b      	ldrb	r3, [r3, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x19c>
 8003aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ab2:	e000      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x19e>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7ff fc56 	bl	8003368 <LL_ADC_SetDataRightShift>
 8003abc:	e047      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	069b      	lsls	r3, r3, #26
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	069b      	lsls	r3, r3, #26
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d107      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b04:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	069b      	lsls	r3, r3, #26
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d107      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b28:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	069b      	lsls	r3, r3, #26
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d107      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fd06 	bl	8003564 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 820d 	bne.w	8003f7a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f7ff fc87 	bl	8003480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_ADC_ConfigChannel+0x290>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 8133 	bne.w	8003de4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d110      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x298>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0e9b      	lsrs	r3, r3, #26
 8003b94:	3301      	adds	r3, #1
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	bf94      	ite	ls
 8003b9e:	2301      	movls	r3, #1
 8003ba0:	2300      	movhi	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e01e      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x2cc>
 8003ba6:	bf00      	nop
 8003ba8:	47ff0000 	.word	0x47ff0000
 8003bac:	5c001000 	.word	0x5c001000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	bf94      	ite	ls
 8003bde:	2301      	movls	r3, #1
 8003be0:	2300      	movhi	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d079      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x2ec>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	069b      	lsls	r3, r3, #26
 8003bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c02:	e015      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x318>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e003      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	069b      	lsls	r3, r3, #26
 8003c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x338>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	3301      	adds	r3, #1
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	e017      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x368>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e003      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x38e>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	051b      	lsls	r3, r3, #20
 8003ca4:	e018      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x3c0>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	e07e      	b.n	8003dda <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x3e0>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	3301      	adds	r3, #1
 8003cf0:	069b      	lsls	r3, r3, #26
 8003cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf6:	e015      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x40c>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	e003      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	069b      	lsls	r3, r3, #26
 8003d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x42c>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	0e9b      	lsrs	r3, r3, #26
 8003d36:	3301      	adds	r3, #1
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	e017      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x45c>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	61bb      	str	r3, [r7, #24]
  return result;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e003      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	ea42 0103 	orr.w	r1, r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10d      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x488>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f003 021f 	and.w	r2, r3, #31
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	3b1e      	subs	r3, #30
 8003d98:	051b      	lsls	r3, r3, #20
 8003d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	e01b      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x4c0>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	60fb      	str	r3, [r7, #12]
  return result;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003db8:	2320      	movs	r3, #32
 8003dba:	e003      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f003 021f 	and.w	r2, r3, #31
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b1e      	subs	r3, #30
 8003dd2:	051b      	lsls	r3, r3, #20
 8003dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	6892      	ldr	r2, [r2, #8]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7ff fb22 	bl	8003428 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f280 80c6 	bge.w	8003f7a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a67      	ldr	r2, [pc, #412]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_ADC_ConfigChannel+0x4ea>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a65      	ldr	r2, [pc, #404]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x4ee>
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_ADC_ConfigChannel+0x680>)
 8003e04:	e000      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x4f0>
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_ADC_ConfigChannel+0x684>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fa7f 	bl	800330c <LL_ADC_GetCommonPathInternalCh>
 8003e0e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x50c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5d      	ldr	r2, [pc, #372]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10e      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x52a>
 8003e24:	485a      	ldr	r0, [pc, #360]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003e26:	f7ff fb9d 	bl	8003564 <LL_ADC_IsEnabled>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4859      	ldr	r0, [pc, #356]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003e2e:	f7ff fb99 	bl	8003564 <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4323      	orrs	r3, r4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e008      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x53c>
 8003e42:	4857      	ldr	r0, [pc, #348]	; (8003fa0 <HAL_ADC_ConfigChannel+0x688>)
 8003e44:	f7ff fb8e 	bl	8003564 <LL_ADC_IsEnabled>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d07d      	beq.n	8003f54 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a51      	ldr	r2, [pc, #324]	; (8003fa4 <HAL_ADC_ConfigChannel+0x68c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d130      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x5ac>
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d12b      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_ADC_ConfigChannel+0x688>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	f040 8081 	bne.w	8003f7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a44      	ldr	r2, [pc, #272]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_ADC_ConfigChannel+0x574>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x578>
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_ADC_ConfigChannel+0x680>)
 8003e8e:	e000      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x57a>
 8003e90:	4a42      	ldr	r2, [pc, #264]	; (8003f9c <HAL_ADC_ConfigChannel+0x684>)
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7ff fa23 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea0:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_ADC_ConfigChannel+0x690>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	4a41      	ldr	r2, [pc, #260]	; (8003fac <HAL_ADC_ConfigChannel+0x694>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003eb4:	e002      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f9      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec2:	e05a      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a39      	ldr	r2, [pc, #228]	; (8003fb0 <HAL_ADC_ConfigChannel+0x698>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d11e      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x5f4>
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d119      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a30      	ldr	r2, [pc, #192]	; (8003fa0 <HAL_ADC_ConfigChannel+0x688>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d14b      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_ADC_ConfigChannel+0x5de>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x5e2>
 8003ef6:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_ADC_ConfigChannel+0x680>)
 8003ef8:	e000      	b.n	8003efc <HAL_ADC_ConfigChannel+0x5e4>
 8003efa:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_ADC_ConfigChannel+0x684>)
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7ff f9ee 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f0a:	e036      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_ADC_ConfigChannel+0x69c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d131      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d12c      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <HAL_ADC_ConfigChannel+0x688>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d127      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_ADC_ConfigChannel+0x678>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_ADC_ConfigChannel+0x626>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_ADC_ConfigChannel+0x67c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x62a>
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_ADC_ConfigChannel+0x680>)
 8003f40:	e000      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x62c>
 8003f42:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_ADC_ConfigChannel+0x684>)
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7ff f9ca 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
 8003f52:	e012      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f66:	e008      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3784      	adds	r7, #132	; 0x84
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40022100 	.word	0x40022100
 8003f98:	40022300 	.word	0x40022300
 8003f9c:	58026300 	.word	0x58026300
 8003fa0:	58026000 	.word	0x58026000
 8003fa4:	cb840000 	.word	0xcb840000
 8003fa8:	24000000 	.word	0x24000000
 8003fac:	053e2d63 	.word	0x053e2d63
 8003fb0:	c7520000 	.word	0xc7520000
 8003fb4:	cfb80000 	.word	0xcfb80000

08003fb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a79      	ldr	r2, [pc, #484]	; (80041ac <ADC_ConfigureBoostMode+0x1f4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <ADC_ConfigureBoostMode+0x1c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a78      	ldr	r2, [pc, #480]	; (80041b0 <ADC_ConfigureBoostMode+0x1f8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <ADC_ConfigureBoostMode+0x30>
 8003fd4:	4b77      	ldr	r3, [pc, #476]	; (80041b4 <ADC_ConfigureBoostMode+0x1fc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e008      	b.n	8003ffa <ADC_ConfigureBoostMode+0x42>
 8003fe8:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <ADC_ConfigureBoostMode+0x200>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ffe:	f004 fceb 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8004002:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800400c:	d010      	beq.n	8004030 <ADC_ConfigureBoostMode+0x78>
 800400e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004012:	d871      	bhi.n	80040f8 <ADC_ConfigureBoostMode+0x140>
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d002      	beq.n	8004020 <ADC_ConfigureBoostMode+0x68>
 800401a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800401e:	d16b      	bne.n	80040f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
        break;
 800402e:	e066      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e062      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004038:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800403c:	f005 fcaa 	bl	8009994 <HAL_RCCEx_GetPeriphCLKFreq>
 8004040:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800404a:	d051      	beq.n	80040f0 <ADC_ConfigureBoostMode+0x138>
 800404c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004050:	d854      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 8004052:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004056:	d047      	beq.n	80040e8 <ADC_ConfigureBoostMode+0x130>
 8004058:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800405c:	d84e      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 800405e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004062:	d03d      	beq.n	80040e0 <ADC_ConfigureBoostMode+0x128>
 8004064:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004068:	d848      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 800406a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406e:	d033      	beq.n	80040d8 <ADC_ConfigureBoostMode+0x120>
 8004070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004074:	d842      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 8004076:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800407a:	d029      	beq.n	80040d0 <ADC_ConfigureBoostMode+0x118>
 800407c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004080:	d83c      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 8004082:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004086:	d01a      	beq.n	80040be <ADC_ConfigureBoostMode+0x106>
 8004088:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800408c:	d836      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 800408e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004092:	d014      	beq.n	80040be <ADC_ConfigureBoostMode+0x106>
 8004094:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004098:	d830      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d00e      	beq.n	80040be <ADC_ConfigureBoostMode+0x106>
 80040a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a4:	d82a      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 80040a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040aa:	d008      	beq.n	80040be <ADC_ConfigureBoostMode+0x106>
 80040ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040b0:	d824      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 80040b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040b6:	d002      	beq.n	80040be <ADC_ConfigureBoostMode+0x106>
 80040b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040bc:	d11e      	bne.n	80040fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	60fb      	str	r3, [r7, #12]
        break;
 80040ce:	e016      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
        break;
 80040d6:	e012      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	60fb      	str	r3, [r7, #12]
        break;
 80040de:	e00e      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	60fb      	str	r3, [r7, #12]
        break;
 80040e6:	e00a      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]
        break;
 80040ee:	e006      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	60fb      	str	r3, [r7, #12]
        break;
 80040f6:	e002      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
        break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80040fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80040fe:	f7ff f8d3 	bl	80032a8 <HAL_GetREVID>
 8004102:	4603      	mov	r3, r0
 8004104:	f241 0203 	movw	r2, #4099	; 0x1003
 8004108:	4293      	cmp	r3, r2
 800410a:	d815      	bhi.n	8004138 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a2b      	ldr	r2, [pc, #172]	; (80041bc <ADC_ConfigureBoostMode+0x204>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d908      	bls.n	8004126 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004122:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004124:	e03e      	b.n	80041a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	e035      	b.n	80041a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <ADC_ConfigureBoostMode+0x208>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d808      	bhi.n	8004158 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	e025      	b.n	80041a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <ADC_ConfigureBoostMode+0x20c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d80a      	bhi.n	8004176 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	e016      	b.n	80041a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <ADC_ConfigureBoostMode+0x210>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d80a      	bhi.n	8004194 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	e007      	b.n	80041a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40022100 	.word	0x40022100
 80041b4:	40022300 	.word	0x40022300
 80041b8:	58026300 	.word	0x58026300
 80041bc:	01312d00 	.word	0x01312d00
 80041c0:	005f5e10 	.word	0x005f5e10
 80041c4:	00bebc20 	.word	0x00bebc20
 80041c8:	017d7840 	.word	0x017d7840

080041cc <LL_ADC_IsEnabled>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <LL_ADC_IsEnabled+0x18>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <LL_ADC_IsEnabled+0x1a>
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d101      	bne.n	800420a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b09f      	sub	sp, #124	; 0x7c
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0be      	b.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004242:	2300      	movs	r3, #0
 8004244:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a5c      	ldr	r2, [pc, #368]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d102      	bne.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	e001      	b.n	800425a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10b      	bne.n	8004278 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e09d      	b.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ffb9 	bl	80041f2 <LL_ADC_REG_IsConversionOngoing>
 8004280:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ffb3 	bl	80041f2 <LL_ADC_REG_IsConversionOngoing>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d17f      	bne.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004294:	2b00      	cmp	r3, #0
 8004296:	d17c      	bne.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a47      	ldr	r2, [pc, #284]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042ae:	e000      	b.n	80042b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d039      	beq.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10e      	bne.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042e2:	4836      	ldr	r0, [pc, #216]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042e4:	f7ff ff72 	bl	80041cc <LL_ADC_IsEnabled>
 80042e8:	4604      	mov	r4, r0
 80042ea:	4835      	ldr	r0, [pc, #212]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042ec:	f7ff ff6e 	bl	80041cc <LL_ADC_IsEnabled>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4323      	orrs	r3, r4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e008      	b.n	8004312 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004300:	4832      	ldr	r0, [pc, #200]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004302:	f7ff ff63 	bl	80041cc <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d047      	beq.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800431c:	4013      	ands	r3, r2
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	6811      	ldr	r1, [r2, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	6892      	ldr	r2, [r2, #8]
 8004326:	430a      	orrs	r2, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800432e:	e03a      	b.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10e      	bne.n	800436e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004350:	481a      	ldr	r0, [pc, #104]	; (80043bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004352:	f7ff ff3b 	bl	80041cc <LL_ADC_IsEnabled>
 8004356:	4604      	mov	r4, r0
 8004358:	4819      	ldr	r0, [pc, #100]	; (80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800435a:	f7ff ff37 	bl	80041cc <LL_ADC_IsEnabled>
 800435e:	4603      	mov	r3, r0
 8004360:	4323      	orrs	r3, r4
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e008      	b.n	8004380 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800436e:	4817      	ldr	r0, [pc, #92]	; (80043cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004370:	f7ff ff2c 	bl	80041cc <LL_ADC_IsEnabled>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800438a:	4013      	ands	r3, r2
 800438c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800438e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004390:	e009      	b.n	80043a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80043a4:	e000      	b.n	80043a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	377c      	adds	r7, #124	; 0x7c
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd90      	pop	{r4, r7, pc}
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40022100 	.word	0x40022100
 80043c4:	40022300 	.word	0x40022300
 80043c8:	58026300 	.word	0x58026300
 80043cc:	58026000 	.word	0x58026000
 80043d0:	fffff0e0 	.word	0xfffff0e0

080043d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <__NVIC_SetPriorityGrouping+0x40>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f0:	4013      	ands	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <__NVIC_SetPriorityGrouping+0x40>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	60d3      	str	r3, [r2, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00
 8004418:	05fa0000 	.word	0x05fa0000

0800441c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4907      	ldr	r1, [pc, #28]	; (8004470 <__NVIC_EnableIRQ+0x38>)
 8004452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e100 	.word	0xe000e100

08004474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	; (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0307 	rsb	r3, r3, #7
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf28      	it	cs
 80044e6:	2304      	movcs	r3, #4
 80044e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d902      	bls.n	80044f8 <NVIC_EncodePriority+0x30>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3b03      	subs	r3, #3
 80044f6:	e000      	b.n	80044fa <NVIC_EncodePriority+0x32>
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	401a      	ands	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004510:	f04f 31ff 	mov.w	r1, #4294967295
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43d9      	mvns	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	4313      	orrs	r3, r2
         );
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ff4c 	bl	80043d4 <__NVIC_SetPriorityGrouping>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004552:	f7ff ff63 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004556:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6978      	ldr	r0, [r7, #20]
 800455e:	f7ff ffb3 	bl	80044c8 <NVIC_EncodePriority>
 8004562:	4602      	mov	r2, r0
 8004564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff82 	bl	8004474 <__NVIC_SetPriority>
}
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff56 	bl	8004438 <__NVIC_EnableIRQ>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e054      	b.n	8004650 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7f5b      	ldrb	r3, [r3, #29]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe f838 	bl	800262c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	791b      	ldrb	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_CRC_Init+0xc4>)
 80045d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0218 	bic.w	r2, r2, #24
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	e00c      	b.n	80045fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6899      	ldr	r1, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f948 	bl	8004884 <HAL_CRCEx_Polynomial_Set>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e028      	b.n	8004650 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	795b      	ldrb	r3, [r3, #5]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	611a      	str	r2, [r3, #16]
 8004610:	e004      	b.n	800461c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6912      	ldr	r2, [r2, #16]
 800461a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	04c11db7 	.word	0x04c11db7

0800465c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d006      	beq.n	8004698 <HAL_CRC_Calculate+0x3c>
 800468a:	2b03      	cmp	r3, #3
 800468c:	d829      	bhi.n	80046e2 <HAL_CRC_Calculate+0x86>
 800468e:	2b01      	cmp	r3, #1
 8004690:	d019      	beq.n	80046c6 <HAL_CRC_Calculate+0x6a>
 8004692:	2b02      	cmp	r3, #2
 8004694:	d01e      	beq.n	80046d4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004696:	e024      	b.n	80046e2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e00a      	b.n	80046b4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3f0      	bcc.n	800469e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]
      break;
 80046c4:	e00e      	b.n	80046e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f812 	bl	80046f4 <CRC_Handle_8>
 80046d0:	6138      	str	r0, [r7, #16]
      break;
 80046d2:	e007      	b.n	80046e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f899 	bl	8004810 <CRC_Handle_16>
 80046de:	6138      	str	r0, [r7, #16]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_CRC_Calculate+0x88>
      break;
 80046e2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80046ea:	693b      	ldr	r3, [r7, #16]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e023      	b.n	800474e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	3301      	adds	r3, #1
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	440b      	add	r3, r1
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004720:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3302      	adds	r3, #2
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	440b      	add	r3, r1
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004730:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	3303      	adds	r3, #3
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	440b      	add	r3, r1
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004744:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	d3d6      	bcc.n	8004706 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04d      	beq.n	80047fe <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	4413      	add	r3, r2
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d116      	bne.n	80047b4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	b21a      	sxth	r2, r3
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3301      	adds	r3, #1
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	440b      	add	r3, r1
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b21b      	sxth	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	8b7a      	ldrh	r2, [r7, #26]
 80047b2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d11f      	bne.n	80047fe <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	3301      	adds	r3, #1
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	440b      	add	r3, r1
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b21b      	sxth	r3, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	b21b      	sxth	r3, r3
 80047de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	8b7a      	ldrh	r2, [r7, #26]
 80047ea:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	3302      	adds	r3, #2
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3724      	adds	r7, #36	; 0x24
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e013      	b.n	800484a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	440b      	add	r3, r1
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3e6      	bcc.n	8004822 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4413      	add	r3, r2
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004894:	231f      	movs	r3, #31
 8004896:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004898:	bf00      	nop
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	613a      	str	r2, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_CRCEx_Polynomial_Set+0x16>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b18      	cmp	r3, #24
 80048bc:	d846      	bhi.n	800494c <HAL_CRCEx_Polynomial_Set+0xc8>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	08004953 	.word	0x08004953
 80048c8:	0800494d 	.word	0x0800494d
 80048cc:	0800494d 	.word	0x0800494d
 80048d0:	0800494d 	.word	0x0800494d
 80048d4:	0800494d 	.word	0x0800494d
 80048d8:	0800494d 	.word	0x0800494d
 80048dc:	0800494d 	.word	0x0800494d
 80048e0:	0800494d 	.word	0x0800494d
 80048e4:	08004941 	.word	0x08004941
 80048e8:	0800494d 	.word	0x0800494d
 80048ec:	0800494d 	.word	0x0800494d
 80048f0:	0800494d 	.word	0x0800494d
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800494d 	.word	0x0800494d
 8004904:	08004935 	.word	0x08004935
 8004908:	0800494d 	.word	0x0800494d
 800490c:	0800494d 	.word	0x0800494d
 8004910:	0800494d 	.word	0x0800494d
 8004914:	0800494d 	.word	0x0800494d
 8004918:	0800494d 	.word	0x0800494d
 800491c:	0800494d 	.word	0x0800494d
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004929 	.word	0x08004929
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d913      	bls.n	8004956 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004932:	e010      	b.n	8004956 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d90f      	bls.n	800495a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800493e:	e00c      	b.n	800495a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0f      	cmp	r3, #15
 8004944:	d90b      	bls.n	800495e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800494a:	e008      	b.n	800495e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      break;
 8004950:	e006      	b.n	8004960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800495e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 0118 	bic.w	r1, r3, #24
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004982:	7dfb      	ldrb	r3, [r7, #23]
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7fe fc7a 	bl	8003290 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e316      	b.n	8004fd6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a66      	ldr	r2, [pc, #408]	; (8004b48 <HAL_DMA_Init+0x1b8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d04a      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_DMA_Init+0x1bc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d045      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a63      	ldr	r2, [pc, #396]	; (8004b50 <HAL_DMA_Init+0x1c0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d040      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a62      	ldr	r2, [pc, #392]	; (8004b54 <HAL_DMA_Init+0x1c4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d03b      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a60      	ldr	r2, [pc, #384]	; (8004b58 <HAL_DMA_Init+0x1c8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d036      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5f      	ldr	r2, [pc, #380]	; (8004b5c <HAL_DMA_Init+0x1cc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d031      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <HAL_DMA_Init+0x1d0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d02c      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <HAL_DMA_Init+0x1d4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d027      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5a      	ldr	r2, [pc, #360]	; (8004b68 <HAL_DMA_Init+0x1d8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a59      	ldr	r2, [pc, #356]	; (8004b6c <HAL_DMA_Init+0x1dc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d01d      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <HAL_DMA_Init+0x1e0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_DMA_Init+0x1e4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <HAL_DMA_Init+0x1e8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a53      	ldr	r2, [pc, #332]	; (8004b7c <HAL_DMA_Init+0x1ec>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_DMA_Init+0x1f0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_DMA_Init+0xb8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a50      	ldr	r2, [pc, #320]	; (8004b84 <HAL_DMA_Init+0x1f4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_DMA_Init+0xbc>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_DMA_Init+0xbe>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 813b 	beq.w	8004cca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <HAL_DMA_Init+0x1b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a36      	ldr	r2, [pc, #216]	; (8004b4c <HAL_DMA_Init+0x1bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_DMA_Init+0x1c0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a33      	ldr	r2, [pc, #204]	; (8004b54 <HAL_DMA_Init+0x1c4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <HAL_DMA_Init+0x1c8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <HAL_DMA_Init+0x1cc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <HAL_DMA_Init+0x1d0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <HAL_DMA_Init+0x1d4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	; (8004b68 <HAL_DMA_Init+0x1d8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <HAL_DMA_Init+0x1dc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a28      	ldr	r2, [pc, #160]	; (8004b70 <HAL_DMA_Init+0x1e0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_DMA_Init+0x1e4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	; (8004b78 <HAL_DMA_Init+0x1e8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <HAL_DMA_Init+0x1ec>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <HAL_DMA_Init+0x1f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_DMA_Init+0x174>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <HAL_DMA_Init+0x1f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <HAL_DMA_Init+0x186>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e007      	b.n	8004b26 <HAL_DMA_Init+0x196>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b26:	e02f      	b.n	8004b88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b28:	f7fe fbb2 	bl	8003290 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d928      	bls.n	8004b88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e246      	b.n	8004fd6 <HAL_DMA_Init+0x646>
 8004b48:	40020010 	.word	0x40020010
 8004b4c:	40020028 	.word	0x40020028
 8004b50:	40020040 	.word	0x40020040
 8004b54:	40020058 	.word	0x40020058
 8004b58:	40020070 	.word	0x40020070
 8004b5c:	40020088 	.word	0x40020088
 8004b60:	400200a0 	.word	0x400200a0
 8004b64:	400200b8 	.word	0x400200b8
 8004b68:	40020410 	.word	0x40020410
 8004b6c:	40020428 	.word	0x40020428
 8004b70:	40020440 	.word	0x40020440
 8004b74:	40020458 	.word	0x40020458
 8004b78:	40020470 	.word	0x40020470
 8004b7c:	40020488 	.word	0x40020488
 8004b80:	400204a0 	.word	0x400204a0
 8004b84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1c8      	bne.n	8004b28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4b83      	ldr	r3, [pc, #524]	; (8004db0 <HAL_DMA_Init+0x420>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004bae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d107      	bne.n	8004bec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4313      	orrs	r3, r2
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004bec:	4b71      	ldr	r3, [pc, #452]	; (8004db4 <HAL_DMA_Init+0x424>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b71      	ldr	r3, [pc, #452]	; (8004db8 <HAL_DMA_Init+0x428>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf8:	d328      	bcc.n	8004c4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b28      	cmp	r3, #40	; 0x28
 8004c00:	d903      	bls.n	8004c0a <HAL_DMA_Init+0x27a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b2e      	cmp	r3, #46	; 0x2e
 8004c08:	d917      	bls.n	8004c3a <HAL_DMA_Init+0x2aa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c10:	d903      	bls.n	8004c1a <HAL_DMA_Init+0x28a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b42      	cmp	r3, #66	; 0x42
 8004c18:	d90f      	bls.n	8004c3a <HAL_DMA_Init+0x2aa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b46      	cmp	r3, #70	; 0x46
 8004c20:	d903      	bls.n	8004c2a <HAL_DMA_Init+0x29a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b48      	cmp	r3, #72	; 0x48
 8004c28:	d907      	bls.n	8004c3a <HAL_DMA_Init+0x2aa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8004c30:	d905      	bls.n	8004c3e <HAL_DMA_Init+0x2ae>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b52      	cmp	r3, #82	; 0x52
 8004c38:	d801      	bhi.n	8004c3e <HAL_DMA_Init+0x2ae>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <HAL_DMA_Init+0x2b0>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0307 	bic.w	r3, r3, #7
 8004c62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d117      	bne.n	8004ca6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f002 fb31 	bl	80072f0 <DMA_CheckFifoParam>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e197      	b.n	8004fd6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 fa6c 	bl	800718c <DMA_CalcBaseAndBitshift>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	223f      	movs	r2, #63	; 0x3f
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	e0cd      	b.n	8004e66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_DMA_Init+0x42c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a39      	ldr	r2, [pc, #228]	; (8004dc0 <HAL_DMA_Init+0x430>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a38      	ldr	r2, [pc, #224]	; (8004dc4 <HAL_DMA_Init+0x434>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a36      	ldr	r2, [pc, #216]	; (8004dc8 <HAL_DMA_Init+0x438>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a35      	ldr	r2, [pc, #212]	; (8004dcc <HAL_DMA_Init+0x43c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a33      	ldr	r2, [pc, #204]	; (8004dd0 <HAL_DMA_Init+0x440>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a32      	ldr	r2, [pc, #200]	; (8004dd4 <HAL_DMA_Init+0x444>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_Init+0x38a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a30      	ldr	r2, [pc, #192]	; (8004dd8 <HAL_DMA_Init+0x448>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_DMA_Init+0x38e>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_DMA_Init+0x390>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8097 	beq.w	8004e54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <HAL_DMA_Init+0x42c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d021      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <HAL_DMA_Init+0x430>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01c      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_DMA_Init+0x434>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d017      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_DMA_Init+0x438>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d012      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <HAL_DMA_Init+0x43c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00d      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_DMA_Init+0x440>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d008      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_DMA_Init+0x444>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <HAL_DMA_Init+0x3e4>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_DMA_Init+0x448>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_DMA_Init+0x44c>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d020      	beq.n	8004de0 <HAL_DMA_Init+0x450>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d102      	bne.n	8004dac <HAL_DMA_Init+0x41c>
 8004da6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004daa:	e01a      	b.n	8004de2 <HAL_DMA_Init+0x452>
 8004dac:	2300      	movs	r3, #0
 8004dae:	e018      	b.n	8004de2 <HAL_DMA_Init+0x452>
 8004db0:	fe10803f 	.word	0xfe10803f
 8004db4:	5c001000 	.word	0x5c001000
 8004db8:	ffff0000 	.word	0xffff0000
 8004dbc:	58025408 	.word	0x58025408
 8004dc0:	5802541c 	.word	0x5802541c
 8004dc4:	58025430 	.word	0x58025430
 8004dc8:	58025444 	.word	0x58025444
 8004dcc:	58025458 	.word	0x58025458
 8004dd0:	5802546c 	.word	0x5802546c
 8004dd4:	58025480 	.word	0x58025480
 8004dd8:	58025494 	.word	0x58025494
 8004ddc:	fffe000f 	.word	0xfffe000f
 8004de0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68d2      	ldr	r2, [r2, #12]
 8004de6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b6e      	ldr	r3, [pc, #440]	; (8004fe0 <HAL_DMA_Init+0x650>)
 8004e28:	4413      	add	r3, r2
 8004e2a:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_DMA_Init+0x654>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f002 f9a7 	bl	800718c <DMA_CalcBaseAndBitshift>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e008      	b.n	8004e66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2240      	movs	r2, #64	; 0x40
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0b7      	b.n	8004fd6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a5f      	ldr	r2, [pc, #380]	; (8004fe8 <HAL_DMA_Init+0x658>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d072      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5d      	ldr	r2, [pc, #372]	; (8004fec <HAL_DMA_Init+0x65c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d06d      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5c      	ldr	r2, [pc, #368]	; (8004ff0 <HAL_DMA_Init+0x660>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d068      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5a      	ldr	r2, [pc, #360]	; (8004ff4 <HAL_DMA_Init+0x664>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d063      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a59      	ldr	r2, [pc, #356]	; (8004ff8 <HAL_DMA_Init+0x668>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d05e      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_DMA_Init+0x66c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d059      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_DMA_Init+0x670>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d054      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a54      	ldr	r2, [pc, #336]	; (8005004 <HAL_DMA_Init+0x674>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d04f      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a53      	ldr	r2, [pc, #332]	; (8005008 <HAL_DMA_Init+0x678>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d04a      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a51      	ldr	r2, [pc, #324]	; (800500c <HAL_DMA_Init+0x67c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d045      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a50      	ldr	r2, [pc, #320]	; (8005010 <HAL_DMA_Init+0x680>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d040      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a4e      	ldr	r2, [pc, #312]	; (8005014 <HAL_DMA_Init+0x684>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d03b      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4d      	ldr	r2, [pc, #308]	; (8005018 <HAL_DMA_Init+0x688>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d036      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a4b      	ldr	r2, [pc, #300]	; (800501c <HAL_DMA_Init+0x68c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d031      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <HAL_DMA_Init+0x690>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d02c      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a48      	ldr	r2, [pc, #288]	; (8005024 <HAL_DMA_Init+0x694>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d027      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <HAL_DMA_Init+0x698>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a45      	ldr	r2, [pc, #276]	; (800502c <HAL_DMA_Init+0x69c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01d      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a44      	ldr	r2, [pc, #272]	; (8005030 <HAL_DMA_Init+0x6a0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a42      	ldr	r2, [pc, #264]	; (8005034 <HAL_DMA_Init+0x6a4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a41      	ldr	r2, [pc, #260]	; (8005038 <HAL_DMA_Init+0x6a8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_DMA_Init+0x6ac>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3e      	ldr	r2, [pc, #248]	; (8005040 <HAL_DMA_Init+0x6b0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_DMA_Init+0x5c6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3c      	ldr	r2, [pc, #240]	; (8005044 <HAL_DMA_Init+0x6b4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_DMA_Init+0x5ca>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_DMA_Init+0x5cc>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d032      	beq.n	8004fc6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f002 fa41 	bl	80073e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d102      	bne.n	8004f74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_DMA_Init+0x624>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d80c      	bhi.n	8004fb4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f002 fabe 	bl	800751c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e008      	b.n	8004fc6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	a7fdabf8 	.word	0xa7fdabf8
 8004fe4:	cccccccd 	.word	0xcccccccd
 8004fe8:	40020010 	.word	0x40020010
 8004fec:	40020028 	.word	0x40020028
 8004ff0:	40020040 	.word	0x40020040
 8004ff4:	40020058 	.word	0x40020058
 8004ff8:	40020070 	.word	0x40020070
 8004ffc:	40020088 	.word	0x40020088
 8005000:	400200a0 	.word	0x400200a0
 8005004:	400200b8 	.word	0x400200b8
 8005008:	40020410 	.word	0x40020410
 800500c:	40020428 	.word	0x40020428
 8005010:	40020440 	.word	0x40020440
 8005014:	40020458 	.word	0x40020458
 8005018:	40020470 	.word	0x40020470
 800501c:	40020488 	.word	0x40020488
 8005020:	400204a0 	.word	0x400204a0
 8005024:	400204b8 	.word	0x400204b8
 8005028:	58025408 	.word	0x58025408
 800502c:	5802541c 	.word	0x5802541c
 8005030:	58025430 	.word	0x58025430
 8005034:	58025444 	.word	0x58025444
 8005038:	58025458 	.word	0x58025458
 800503c:	5802546c 	.word	0x5802546c
 8005040:	58025480 	.word	0x58025480
 8005044:	58025494 	.word	0x58025494

08005048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e226      	b.n	80054b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_DMA_Start_IT+0x2a>
 800506e:	2302      	movs	r3, #2
 8005070:	e21f      	b.n	80054b2 <HAL_DMA_Start_IT+0x46a>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 820a 	bne.w	800549c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a68      	ldr	r2, [pc, #416]	; (800523c <HAL_DMA_Start_IT+0x1f4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04a      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a66      	ldr	r2, [pc, #408]	; (8005240 <HAL_DMA_Start_IT+0x1f8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d045      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a65      	ldr	r2, [pc, #404]	; (8005244 <HAL_DMA_Start_IT+0x1fc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d040      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a63      	ldr	r2, [pc, #396]	; (8005248 <HAL_DMA_Start_IT+0x200>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d03b      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a62      	ldr	r2, [pc, #392]	; (800524c <HAL_DMA_Start_IT+0x204>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d036      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a60      	ldr	r2, [pc, #384]	; (8005250 <HAL_DMA_Start_IT+0x208>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5f      	ldr	r2, [pc, #380]	; (8005254 <HAL_DMA_Start_IT+0x20c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d02c      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5d      	ldr	r2, [pc, #372]	; (8005258 <HAL_DMA_Start_IT+0x210>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d027      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5c      	ldr	r2, [pc, #368]	; (800525c <HAL_DMA_Start_IT+0x214>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5a      	ldr	r2, [pc, #360]	; (8005260 <HAL_DMA_Start_IT+0x218>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a59      	ldr	r2, [pc, #356]	; (8005264 <HAL_DMA_Start_IT+0x21c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a57      	ldr	r2, [pc, #348]	; (8005268 <HAL_DMA_Start_IT+0x220>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a56      	ldr	r2, [pc, #344]	; (800526c <HAL_DMA_Start_IT+0x224>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a54      	ldr	r2, [pc, #336]	; (8005270 <HAL_DMA_Start_IT+0x228>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a53      	ldr	r2, [pc, #332]	; (8005274 <HAL_DMA_Start_IT+0x22c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_DMA_Start_IT+0xee>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a51      	ldr	r2, [pc, #324]	; (8005278 <HAL_DMA_Start_IT+0x230>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <HAL_DMA_Start_IT+0x100>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e007      	b.n	8005158 <HAL_DMA_Start_IT+0x110>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 fe68 	bl	8006e34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a34      	ldr	r2, [pc, #208]	; (800523c <HAL_DMA_Start_IT+0x1f4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04a      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a33      	ldr	r2, [pc, #204]	; (8005240 <HAL_DMA_Start_IT+0x1f8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d045      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a31      	ldr	r2, [pc, #196]	; (8005244 <HAL_DMA_Start_IT+0x1fc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a30      	ldr	r2, [pc, #192]	; (8005248 <HAL_DMA_Start_IT+0x200>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d03b      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2e      	ldr	r2, [pc, #184]	; (800524c <HAL_DMA_Start_IT+0x204>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d036      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2d      	ldr	r2, [pc, #180]	; (8005250 <HAL_DMA_Start_IT+0x208>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d031      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <HAL_DMA_Start_IT+0x20c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d02c      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <HAL_DMA_Start_IT+0x210>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d027      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a28      	ldr	r2, [pc, #160]	; (800525c <HAL_DMA_Start_IT+0x214>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a27      	ldr	r2, [pc, #156]	; (8005260 <HAL_DMA_Start_IT+0x218>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01d      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a25      	ldr	r2, [pc, #148]	; (8005264 <HAL_DMA_Start_IT+0x21c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a24      	ldr	r2, [pc, #144]	; (8005268 <HAL_DMA_Start_IT+0x220>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a22      	ldr	r2, [pc, #136]	; (800526c <HAL_DMA_Start_IT+0x224>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a21      	ldr	r2, [pc, #132]	; (8005270 <HAL_DMA_Start_IT+0x228>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_DMA_Start_IT+0x22c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_DMA_Start_IT+0x1bc>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <HAL_DMA_Start_IT+0x230>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_DMA_Start_IT+0x1c0>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_DMA_Start_IT+0x1c2>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d036      	beq.n	800527c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 021e 	bic.w	r2, r3, #30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0216 	orr.w	r2, r2, #22
 8005220:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03e      	beq.n	80052a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0208 	orr.w	r2, r2, #8
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e035      	b.n	80052a8 <HAL_DMA_Start_IT+0x260>
 800523c:	40020010 	.word	0x40020010
 8005240:	40020028 	.word	0x40020028
 8005244:	40020040 	.word	0x40020040
 8005248:	40020058 	.word	0x40020058
 800524c:	40020070 	.word	0x40020070
 8005250:	40020088 	.word	0x40020088
 8005254:	400200a0 	.word	0x400200a0
 8005258:	400200b8 	.word	0x400200b8
 800525c:	40020410 	.word	0x40020410
 8005260:	40020428 	.word	0x40020428
 8005264:	40020440 	.word	0x40020440
 8005268:	40020458 	.word	0x40020458
 800526c:	40020470 	.word	0x40020470
 8005270:	40020488 	.word	0x40020488
 8005274:	400204a0 	.word	0x400204a0
 8005278:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 020e 	bic.w	r2, r3, #14
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 020a 	orr.w	r2, r2, #10
 800528e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0204 	orr.w	r2, r2, #4
 80052a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a83      	ldr	r2, [pc, #524]	; (80054bc <HAL_DMA_Start_IT+0x474>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d072      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a82      	ldr	r2, [pc, #520]	; (80054c0 <HAL_DMA_Start_IT+0x478>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d06d      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a80      	ldr	r2, [pc, #512]	; (80054c4 <HAL_DMA_Start_IT+0x47c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d068      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7f      	ldr	r2, [pc, #508]	; (80054c8 <HAL_DMA_Start_IT+0x480>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d063      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a7d      	ldr	r2, [pc, #500]	; (80054cc <HAL_DMA_Start_IT+0x484>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d05e      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7c      	ldr	r2, [pc, #496]	; (80054d0 <HAL_DMA_Start_IT+0x488>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d059      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a7a      	ldr	r2, [pc, #488]	; (80054d4 <HAL_DMA_Start_IT+0x48c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d054      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a79      	ldr	r2, [pc, #484]	; (80054d8 <HAL_DMA_Start_IT+0x490>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04f      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a77      	ldr	r2, [pc, #476]	; (80054dc <HAL_DMA_Start_IT+0x494>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d04a      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a76      	ldr	r2, [pc, #472]	; (80054e0 <HAL_DMA_Start_IT+0x498>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d045      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a74      	ldr	r2, [pc, #464]	; (80054e4 <HAL_DMA_Start_IT+0x49c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d040      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a73      	ldr	r2, [pc, #460]	; (80054e8 <HAL_DMA_Start_IT+0x4a0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d03b      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a71      	ldr	r2, [pc, #452]	; (80054ec <HAL_DMA_Start_IT+0x4a4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d036      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a70      	ldr	r2, [pc, #448]	; (80054f0 <HAL_DMA_Start_IT+0x4a8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d031      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a6e      	ldr	r2, [pc, #440]	; (80054f4 <HAL_DMA_Start_IT+0x4ac>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02c      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6d      	ldr	r2, [pc, #436]	; (80054f8 <HAL_DMA_Start_IT+0x4b0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d027      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a6b      	ldr	r2, [pc, #428]	; (80054fc <HAL_DMA_Start_IT+0x4b4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6a      	ldr	r2, [pc, #424]	; (8005500 <HAL_DMA_Start_IT+0x4b8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d01d      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a68      	ldr	r2, [pc, #416]	; (8005504 <HAL_DMA_Start_IT+0x4bc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a67      	ldr	r2, [pc, #412]	; (8005508 <HAL_DMA_Start_IT+0x4c0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a65      	ldr	r2, [pc, #404]	; (800550c <HAL_DMA_Start_IT+0x4c4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a64      	ldr	r2, [pc, #400]	; (8005510 <HAL_DMA_Start_IT+0x4c8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a62      	ldr	r2, [pc, #392]	; (8005514 <HAL_DMA_Start_IT+0x4cc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_DMA_Start_IT+0x350>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a61      	ldr	r2, [pc, #388]	; (8005518 <HAL_DMA_Start_IT+0x4d0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d101      	bne.n	800539c <HAL_DMA_Start_IT+0x354>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <HAL_DMA_Start_IT+0x356>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01a      	beq.n	80053d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a37      	ldr	r2, [pc, #220]	; (80054bc <HAL_DMA_Start_IT+0x474>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a36      	ldr	r2, [pc, #216]	; (80054c0 <HAL_DMA_Start_IT+0x478>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a34      	ldr	r2, [pc, #208]	; (80054c4 <HAL_DMA_Start_IT+0x47c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a33      	ldr	r2, [pc, #204]	; (80054c8 <HAL_DMA_Start_IT+0x480>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a31      	ldr	r2, [pc, #196]	; (80054cc <HAL_DMA_Start_IT+0x484>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a30      	ldr	r2, [pc, #192]	; (80054d0 <HAL_DMA_Start_IT+0x488>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2e      	ldr	r2, [pc, #184]	; (80054d4 <HAL_DMA_Start_IT+0x48c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2d      	ldr	r2, [pc, #180]	; (80054d8 <HAL_DMA_Start_IT+0x490>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <HAL_DMA_Start_IT+0x494>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <HAL_DMA_Start_IT+0x498>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <HAL_DMA_Start_IT+0x49c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <HAL_DMA_Start_IT+0x4a0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a25      	ldr	r2, [pc, #148]	; (80054ec <HAL_DMA_Start_IT+0x4a4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a24      	ldr	r2, [pc, #144]	; (80054f0 <HAL_DMA_Start_IT+0x4a8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <HAL_DMA_Start_IT+0x4ac>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_DMA_Start_IT+0x430>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <HAL_DMA_Start_IT+0x4b0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <HAL_DMA_Start_IT+0x442>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e012      	b.n	80054b0 <HAL_DMA_Start_IT+0x468>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e009      	b.n	80054b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40020010 	.word	0x40020010
 80054c0:	40020028 	.word	0x40020028
 80054c4:	40020040 	.word	0x40020040
 80054c8:	40020058 	.word	0x40020058
 80054cc:	40020070 	.word	0x40020070
 80054d0:	40020088 	.word	0x40020088
 80054d4:	400200a0 	.word	0x400200a0
 80054d8:	400200b8 	.word	0x400200b8
 80054dc:	40020410 	.word	0x40020410
 80054e0:	40020428 	.word	0x40020428
 80054e4:	40020440 	.word	0x40020440
 80054e8:	40020458 	.word	0x40020458
 80054ec:	40020470 	.word	0x40020470
 80054f0:	40020488 	.word	0x40020488
 80054f4:	400204a0 	.word	0x400204a0
 80054f8:	400204b8 	.word	0x400204b8
 80054fc:	58025408 	.word	0x58025408
 8005500:	5802541c 	.word	0x5802541c
 8005504:	58025430 	.word	0x58025430
 8005508:	58025444 	.word	0x58025444
 800550c:	58025458 	.word	0x58025458
 8005510:	5802546c 	.word	0x5802546c
 8005514:	58025480 	.word	0x58025480
 8005518:	58025494 	.word	0x58025494

0800551c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005524:	f7fd feb4 	bl	8003290 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e2dc      	b.n	8005aee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d008      	beq.n	8005552 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e2cd      	b.n	8005aee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a76      	ldr	r2, [pc, #472]	; (8005730 <HAL_DMA_Abort+0x214>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d04a      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a74      	ldr	r2, [pc, #464]	; (8005734 <HAL_DMA_Abort+0x218>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d045      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a73      	ldr	r2, [pc, #460]	; (8005738 <HAL_DMA_Abort+0x21c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d040      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a71      	ldr	r2, [pc, #452]	; (800573c <HAL_DMA_Abort+0x220>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d03b      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a70      	ldr	r2, [pc, #448]	; (8005740 <HAL_DMA_Abort+0x224>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d036      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6e      	ldr	r2, [pc, #440]	; (8005744 <HAL_DMA_Abort+0x228>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d031      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6d      	ldr	r2, [pc, #436]	; (8005748 <HAL_DMA_Abort+0x22c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d02c      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6b      	ldr	r2, [pc, #428]	; (800574c <HAL_DMA_Abort+0x230>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d027      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6a      	ldr	r2, [pc, #424]	; (8005750 <HAL_DMA_Abort+0x234>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a68      	ldr	r2, [pc, #416]	; (8005754 <HAL_DMA_Abort+0x238>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01d      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a67      	ldr	r2, [pc, #412]	; (8005758 <HAL_DMA_Abort+0x23c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a65      	ldr	r2, [pc, #404]	; (800575c <HAL_DMA_Abort+0x240>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a64      	ldr	r2, [pc, #400]	; (8005760 <HAL_DMA_Abort+0x244>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a62      	ldr	r2, [pc, #392]	; (8005764 <HAL_DMA_Abort+0x248>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a61      	ldr	r2, [pc, #388]	; (8005768 <HAL_DMA_Abort+0x24c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_DMA_Abort+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a5f      	ldr	r2, [pc, #380]	; (800576c <HAL_DMA_Abort+0x250>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <HAL_DMA_Abort+0xda>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <HAL_DMA_Abort+0xdc>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 021e 	bic.w	r2, r2, #30
 800560a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800561a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e00a      	b.n	800563a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 020e 	bic.w	r2, r2, #14
 8005632:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <HAL_DMA_Abort+0x214>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d072      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a3a      	ldr	r2, [pc, #232]	; (8005734 <HAL_DMA_Abort+0x218>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d06d      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a39      	ldr	r2, [pc, #228]	; (8005738 <HAL_DMA_Abort+0x21c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d068      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a37      	ldr	r2, [pc, #220]	; (800573c <HAL_DMA_Abort+0x220>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d063      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a36      	ldr	r2, [pc, #216]	; (8005740 <HAL_DMA_Abort+0x224>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d05e      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_DMA_Abort+0x228>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d059      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a33      	ldr	r2, [pc, #204]	; (8005748 <HAL_DMA_Abort+0x22c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d054      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a31      	ldr	r2, [pc, #196]	; (800574c <HAL_DMA_Abort+0x230>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04f      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a30      	ldr	r2, [pc, #192]	; (8005750 <HAL_DMA_Abort+0x234>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04a      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2e      	ldr	r2, [pc, #184]	; (8005754 <HAL_DMA_Abort+0x238>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d045      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <HAL_DMA_Abort+0x23c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d040      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	; (800575c <HAL_DMA_Abort+0x240>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <HAL_DMA_Abort+0x244>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d036      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_DMA_Abort+0x248>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d031      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <HAL_DMA_Abort+0x24c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d02c      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_DMA_Abort+0x250>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d027      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a24      	ldr	r2, [pc, #144]	; (8005770 <HAL_DMA_Abort+0x254>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a22      	ldr	r2, [pc, #136]	; (8005774 <HAL_DMA_Abort+0x258>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <HAL_DMA_Abort+0x25c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_DMA_Abort+0x260>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_DMA_Abort+0x264>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_DMA_Abort+0x268>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_DMA_Abort+0x26c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_DMA_Abort+0x20e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_DMA_Abort+0x270>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d132      	bne.n	8005790 <HAL_DMA_Abort+0x274>
 800572a:	2301      	movs	r3, #1
 800572c:	e031      	b.n	8005792 <HAL_DMA_Abort+0x276>
 800572e:	bf00      	nop
 8005730:	40020010 	.word	0x40020010
 8005734:	40020028 	.word	0x40020028
 8005738:	40020040 	.word	0x40020040
 800573c:	40020058 	.word	0x40020058
 8005740:	40020070 	.word	0x40020070
 8005744:	40020088 	.word	0x40020088
 8005748:	400200a0 	.word	0x400200a0
 800574c:	400200b8 	.word	0x400200b8
 8005750:	40020410 	.word	0x40020410
 8005754:	40020428 	.word	0x40020428
 8005758:	40020440 	.word	0x40020440
 800575c:	40020458 	.word	0x40020458
 8005760:	40020470 	.word	0x40020470
 8005764:	40020488 	.word	0x40020488
 8005768:	400204a0 	.word	0x400204a0
 800576c:	400204b8 	.word	0x400204b8
 8005770:	58025408 	.word	0x58025408
 8005774:	5802541c 	.word	0x5802541c
 8005778:	58025430 	.word	0x58025430
 800577c:	58025444 	.word	0x58025444
 8005780:	58025458 	.word	0x58025458
 8005784:	5802546c 	.word	0x5802546c
 8005788:	58025480 	.word	0x58025480
 800578c:	58025494 	.word	0x58025494
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6d      	ldr	r2, [pc, #436]	; (8005960 <HAL_DMA_Abort+0x444>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d04a      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a6b      	ldr	r2, [pc, #428]	; (8005964 <HAL_DMA_Abort+0x448>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d045      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a6a      	ldr	r2, [pc, #424]	; (8005968 <HAL_DMA_Abort+0x44c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d040      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a68      	ldr	r2, [pc, #416]	; (800596c <HAL_DMA_Abort+0x450>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d03b      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a67      	ldr	r2, [pc, #412]	; (8005970 <HAL_DMA_Abort+0x454>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d036      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a65      	ldr	r2, [pc, #404]	; (8005974 <HAL_DMA_Abort+0x458>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d031      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a64      	ldr	r2, [pc, #400]	; (8005978 <HAL_DMA_Abort+0x45c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d02c      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a62      	ldr	r2, [pc, #392]	; (800597c <HAL_DMA_Abort+0x460>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d027      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a61      	ldr	r2, [pc, #388]	; (8005980 <HAL_DMA_Abort+0x464>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5f      	ldr	r2, [pc, #380]	; (8005984 <HAL_DMA_Abort+0x468>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01d      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a5e      	ldr	r2, [pc, #376]	; (8005988 <HAL_DMA_Abort+0x46c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d018      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a5c      	ldr	r2, [pc, #368]	; (800598c <HAL_DMA_Abort+0x470>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a5b      	ldr	r2, [pc, #364]	; (8005990 <HAL_DMA_Abort+0x474>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a59      	ldr	r2, [pc, #356]	; (8005994 <HAL_DMA_Abort+0x478>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a58      	ldr	r2, [pc, #352]	; (8005998 <HAL_DMA_Abort+0x47c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_DMA_Abort+0x32a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a56      	ldr	r2, [pc, #344]	; (800599c <HAL_DMA_Abort+0x480>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <HAL_DMA_Abort+0x33c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e007      	b.n	8005868 <HAL_DMA_Abort+0x34c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005868:	e013      	b.n	8005892 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800586a:	f7fd fd11 	bl	8003290 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b05      	cmp	r3, #5
 8005876:	d90c      	bls.n	8005892 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e12d      	b.n	8005aee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2f      	ldr	r2, [pc, #188]	; (8005960 <HAL_DMA_Abort+0x444>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d04a      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <HAL_DMA_Abort+0x448>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d045      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <HAL_DMA_Abort+0x44c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d040      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2a      	ldr	r2, [pc, #168]	; (800596c <HAL_DMA_Abort+0x450>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d03b      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a29      	ldr	r2, [pc, #164]	; (8005970 <HAL_DMA_Abort+0x454>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d036      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_DMA_Abort+0x458>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d031      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a26      	ldr	r2, [pc, #152]	; (8005978 <HAL_DMA_Abort+0x45c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d02c      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_DMA_Abort+0x460>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d027      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_DMA_Abort+0x464>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d022      	beq.n	800593e <HAL_DMA_Abort+0x422>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a21      	ldr	r2, [pc, #132]	; (8005984 <HAL_DMA_Abort+0x468>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01d      	beq.n	800593e <HAL_DMA_Abort+0x422>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a20      	ldr	r2, [pc, #128]	; (8005988 <HAL_DMA_Abort+0x46c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_DMA_Abort+0x422>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <HAL_DMA_Abort+0x470>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_DMA_Abort+0x422>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <HAL_DMA_Abort+0x474>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_DMA_Abort+0x422>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1b      	ldr	r2, [pc, #108]	; (8005994 <HAL_DMA_Abort+0x478>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_DMA_Abort+0x422>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <HAL_DMA_Abort+0x47c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_DMA_Abort+0x422>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a18      	ldr	r2, [pc, #96]	; (800599c <HAL_DMA_Abort+0x480>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_DMA_Abort+0x426>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_DMA_Abort+0x428>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02b      	beq.n	80059a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	223f      	movs	r2, #63	; 0x3f
 8005958:	409a      	lsls	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	e02a      	b.n	80059b6 <HAL_DMA_Abort+0x49a>
 8005960:	40020010 	.word	0x40020010
 8005964:	40020028 	.word	0x40020028
 8005968:	40020040 	.word	0x40020040
 800596c:	40020058 	.word	0x40020058
 8005970:	40020070 	.word	0x40020070
 8005974:	40020088 	.word	0x40020088
 8005978:	400200a0 	.word	0x400200a0
 800597c:	400200b8 	.word	0x400200b8
 8005980:	40020410 	.word	0x40020410
 8005984:	40020428 	.word	0x40020428
 8005988:	40020440 	.word	0x40020440
 800598c:	40020458 	.word	0x40020458
 8005990:	40020470 	.word	0x40020470
 8005994:	40020488 	.word	0x40020488
 8005998:	400204a0 	.word	0x400204a0
 800599c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	409a      	lsls	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4f      	ldr	r2, [pc, #316]	; (8005af8 <HAL_DMA_Abort+0x5dc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d072      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a4d      	ldr	r2, [pc, #308]	; (8005afc <HAL_DMA_Abort+0x5e0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d06d      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <HAL_DMA_Abort+0x5e4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d068      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a4a      	ldr	r2, [pc, #296]	; (8005b04 <HAL_DMA_Abort+0x5e8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d063      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a49      	ldr	r2, [pc, #292]	; (8005b08 <HAL_DMA_Abort+0x5ec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d05e      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a47      	ldr	r2, [pc, #284]	; (8005b0c <HAL_DMA_Abort+0x5f0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d059      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a46      	ldr	r2, [pc, #280]	; (8005b10 <HAL_DMA_Abort+0x5f4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d054      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a44      	ldr	r2, [pc, #272]	; (8005b14 <HAL_DMA_Abort+0x5f8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04f      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	; (8005b18 <HAL_DMA_Abort+0x5fc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d04a      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a41      	ldr	r2, [pc, #260]	; (8005b1c <HAL_DMA_Abort+0x600>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d045      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <HAL_DMA_Abort+0x604>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d040      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3e      	ldr	r2, [pc, #248]	; (8005b24 <HAL_DMA_Abort+0x608>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d03b      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <HAL_DMA_Abort+0x60c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d036      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3b      	ldr	r2, [pc, #236]	; (8005b2c <HAL_DMA_Abort+0x610>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d031      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <HAL_DMA_Abort+0x614>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d02c      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <HAL_DMA_Abort+0x618>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d027      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a37      	ldr	r2, [pc, #220]	; (8005b38 <HAL_DMA_Abort+0x61c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <HAL_DMA_Abort+0x620>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a34      	ldr	r2, [pc, #208]	; (8005b40 <HAL_DMA_Abort+0x624>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <HAL_DMA_Abort+0x628>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a31      	ldr	r2, [pc, #196]	; (8005b48 <HAL_DMA_Abort+0x62c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2f      	ldr	r2, [pc, #188]	; (8005b4c <HAL_DMA_Abort+0x630>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2e      	ldr	r2, [pc, #184]	; (8005b50 <HAL_DMA_Abort+0x634>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMA_Abort+0x58a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <HAL_DMA_Abort+0x638>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMA_Abort+0x58e>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_DMA_Abort+0x590>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ab8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ada:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40020010 	.word	0x40020010
 8005afc:	40020028 	.word	0x40020028
 8005b00:	40020040 	.word	0x40020040
 8005b04:	40020058 	.word	0x40020058
 8005b08:	40020070 	.word	0x40020070
 8005b0c:	40020088 	.word	0x40020088
 8005b10:	400200a0 	.word	0x400200a0
 8005b14:	400200b8 	.word	0x400200b8
 8005b18:	40020410 	.word	0x40020410
 8005b1c:	40020428 	.word	0x40020428
 8005b20:	40020440 	.word	0x40020440
 8005b24:	40020458 	.word	0x40020458
 8005b28:	40020470 	.word	0x40020470
 8005b2c:	40020488 	.word	0x40020488
 8005b30:	400204a0 	.word	0x400204a0
 8005b34:	400204b8 	.word	0x400204b8
 8005b38:	58025408 	.word	0x58025408
 8005b3c:	5802541c 	.word	0x5802541c
 8005b40:	58025430 	.word	0x58025430
 8005b44:	58025444 	.word	0x58025444
 8005b48:	58025458 	.word	0x58025458
 8005b4c:	5802546c 	.word	0x5802546c
 8005b50:	58025480 	.word	0x58025480
 8005b54:	58025494 	.word	0x58025494

08005b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e205      	b.n	8005f76 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d004      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e1fa      	b.n	8005f76 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a8c      	ldr	r2, [pc, #560]	; (8005db8 <HAL_DMA_Abort_IT+0x260>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d04a      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a8b      	ldr	r2, [pc, #556]	; (8005dbc <HAL_DMA_Abort_IT+0x264>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d045      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a89      	ldr	r2, [pc, #548]	; (8005dc0 <HAL_DMA_Abort_IT+0x268>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d040      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a88      	ldr	r2, [pc, #544]	; (8005dc4 <HAL_DMA_Abort_IT+0x26c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d03b      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a86      	ldr	r2, [pc, #536]	; (8005dc8 <HAL_DMA_Abort_IT+0x270>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d036      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a85      	ldr	r2, [pc, #532]	; (8005dcc <HAL_DMA_Abort_IT+0x274>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a83      	ldr	r2, [pc, #524]	; (8005dd0 <HAL_DMA_Abort_IT+0x278>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02c      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a82      	ldr	r2, [pc, #520]	; (8005dd4 <HAL_DMA_Abort_IT+0x27c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d027      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a80      	ldr	r2, [pc, #512]	; (8005dd8 <HAL_DMA_Abort_IT+0x280>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a7f      	ldr	r2, [pc, #508]	; (8005ddc <HAL_DMA_Abort_IT+0x284>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a7d      	ldr	r2, [pc, #500]	; (8005de0 <HAL_DMA_Abort_IT+0x288>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a7c      	ldr	r2, [pc, #496]	; (8005de4 <HAL_DMA_Abort_IT+0x28c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a7a      	ldr	r2, [pc, #488]	; (8005de8 <HAL_DMA_Abort_IT+0x290>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a79      	ldr	r2, [pc, #484]	; (8005dec <HAL_DMA_Abort_IT+0x294>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a77      	ldr	r2, [pc, #476]	; (8005df0 <HAL_DMA_Abort_IT+0x298>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_Abort_IT+0xc8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a76      	ldr	r2, [pc, #472]	; (8005df4 <HAL_DMA_Abort_IT+0x29c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_DMA_Abort_IT+0xcc>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_DMA_Abort_IT+0xce>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d065      	beq.n	8005cf6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a60      	ldr	r2, [pc, #384]	; (8005db8 <HAL_DMA_Abort_IT+0x260>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d04a      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5e      	ldr	r2, [pc, #376]	; (8005dbc <HAL_DMA_Abort_IT+0x264>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d045      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a5d      	ldr	r2, [pc, #372]	; (8005dc0 <HAL_DMA_Abort_IT+0x268>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d040      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5b      	ldr	r2, [pc, #364]	; (8005dc4 <HAL_DMA_Abort_IT+0x26c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d03b      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5a      	ldr	r2, [pc, #360]	; (8005dc8 <HAL_DMA_Abort_IT+0x270>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d036      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a58      	ldr	r2, [pc, #352]	; (8005dcc <HAL_DMA_Abort_IT+0x274>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d031      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a57      	ldr	r2, [pc, #348]	; (8005dd0 <HAL_DMA_Abort_IT+0x278>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d02c      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a55      	ldr	r2, [pc, #340]	; (8005dd4 <HAL_DMA_Abort_IT+0x27c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d027      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a54      	ldr	r2, [pc, #336]	; (8005dd8 <HAL_DMA_Abort_IT+0x280>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d022      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a52      	ldr	r2, [pc, #328]	; (8005ddc <HAL_DMA_Abort_IT+0x284>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a51      	ldr	r2, [pc, #324]	; (8005de0 <HAL_DMA_Abort_IT+0x288>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a4f      	ldr	r2, [pc, #316]	; (8005de4 <HAL_DMA_Abort_IT+0x28c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a4e      	ldr	r2, [pc, #312]	; (8005de8 <HAL_DMA_Abort_IT+0x290>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a4c      	ldr	r2, [pc, #304]	; (8005dec <HAL_DMA_Abort_IT+0x294>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a4b      	ldr	r2, [pc, #300]	; (8005df0 <HAL_DMA_Abort_IT+0x298>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x17a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a49      	ldr	r2, [pc, #292]	; (8005df4 <HAL_DMA_Abort_IT+0x29c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <HAL_DMA_Abort_IT+0x18c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e147      	b.n	8005f74 <HAL_DMA_Abort_IT+0x41c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	e13e      	b.n	8005f74 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 020e 	bic.w	r2, r2, #14
 8005d04:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2b      	ldr	r2, [pc, #172]	; (8005db8 <HAL_DMA_Abort_IT+0x260>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d04a      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <HAL_DMA_Abort_IT+0x264>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d045      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <HAL_DMA_Abort_IT+0x268>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d040      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <HAL_DMA_Abort_IT+0x26c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d03b      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <HAL_DMA_Abort_IT+0x270>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d036      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a23      	ldr	r2, [pc, #140]	; (8005dcc <HAL_DMA_Abort_IT+0x274>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d031      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a22      	ldr	r2, [pc, #136]	; (8005dd0 <HAL_DMA_Abort_IT+0x278>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d02c      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <HAL_DMA_Abort_IT+0x27c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d027      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_DMA_Abort_IT+0x280>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <HAL_DMA_Abort_IT+0x284>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_DMA_Abort_IT+0x288>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <HAL_DMA_Abort_IT+0x28c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_DMA_Abort_IT+0x290>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <HAL_DMA_Abort_IT+0x294>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <HAL_DMA_Abort_IT+0x298>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x24e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_DMA_Abort_IT+0x29c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d128      	bne.n	8005df8 <HAL_DMA_Abort_IT+0x2a0>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e027      	b.n	8005e08 <HAL_DMA_Abort_IT+0x2b0>
 8005db8:	40020010 	.word	0x40020010
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020040 	.word	0x40020040
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	40020070 	.word	0x40020070
 8005dcc:	40020088 	.word	0x40020088
 8005dd0:	400200a0 	.word	0x400200a0
 8005dd4:	400200b8 	.word	0x400200b8
 8005dd8:	40020410 	.word	0x40020410
 8005ddc:	40020428 	.word	0x40020428
 8005de0:	40020440 	.word	0x40020440
 8005de4:	40020458 	.word	0x40020458
 8005de8:	40020470 	.word	0x40020470
 8005dec:	40020488 	.word	0x40020488
 8005df0:	400204a0 	.word	0x400204a0
 8005df4:	400204b8 	.word	0x400204b8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a5c      	ldr	r2, [pc, #368]	; (8005f80 <HAL_DMA_Abort_IT+0x428>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d072      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a5b      	ldr	r2, [pc, #364]	; (8005f84 <HAL_DMA_Abort_IT+0x42c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d06d      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a59      	ldr	r2, [pc, #356]	; (8005f88 <HAL_DMA_Abort_IT+0x430>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d068      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a58      	ldr	r2, [pc, #352]	; (8005f8c <HAL_DMA_Abort_IT+0x434>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d063      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a56      	ldr	r2, [pc, #344]	; (8005f90 <HAL_DMA_Abort_IT+0x438>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d05e      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a55      	ldr	r2, [pc, #340]	; (8005f94 <HAL_DMA_Abort_IT+0x43c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d059      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a53      	ldr	r2, [pc, #332]	; (8005f98 <HAL_DMA_Abort_IT+0x440>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d054      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a52      	ldr	r2, [pc, #328]	; (8005f9c <HAL_DMA_Abort_IT+0x444>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d04f      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a50      	ldr	r2, [pc, #320]	; (8005fa0 <HAL_DMA_Abort_IT+0x448>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a4f      	ldr	r2, [pc, #316]	; (8005fa4 <HAL_DMA_Abort_IT+0x44c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a4d      	ldr	r2, [pc, #308]	; (8005fa8 <HAL_DMA_Abort_IT+0x450>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4c      	ldr	r2, [pc, #304]	; (8005fac <HAL_DMA_Abort_IT+0x454>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <HAL_DMA_Abort_IT+0x458>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a49      	ldr	r2, [pc, #292]	; (8005fb4 <HAL_DMA_Abort_IT+0x45c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a47      	ldr	r2, [pc, #284]	; (8005fb8 <HAL_DMA_Abort_IT+0x460>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a46      	ldr	r2, [pc, #280]	; (8005fbc <HAL_DMA_Abort_IT+0x464>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a44      	ldr	r2, [pc, #272]	; (8005fc0 <HAL_DMA_Abort_IT+0x468>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a43      	ldr	r2, [pc, #268]	; (8005fc4 <HAL_DMA_Abort_IT+0x46c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a41      	ldr	r2, [pc, #260]	; (8005fc8 <HAL_DMA_Abort_IT+0x470>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a40      	ldr	r2, [pc, #256]	; (8005fcc <HAL_DMA_Abort_IT+0x474>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a3e      	ldr	r2, [pc, #248]	; (8005fd0 <HAL_DMA_Abort_IT+0x478>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a3d      	ldr	r2, [pc, #244]	; (8005fd4 <HAL_DMA_Abort_IT+0x47c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a3b      	ldr	r2, [pc, #236]	; (8005fd8 <HAL_DMA_Abort_IT+0x480>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x3a0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3a      	ldr	r2, [pc, #232]	; (8005fdc <HAL_DMA_Abort_IT+0x484>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_DMA_Abort_IT+0x3a4>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <HAL_DMA_Abort_IT+0x3a6>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40020010 	.word	0x40020010
 8005f84:	40020028 	.word	0x40020028
 8005f88:	40020040 	.word	0x40020040
 8005f8c:	40020058 	.word	0x40020058
 8005f90:	40020070 	.word	0x40020070
 8005f94:	40020088 	.word	0x40020088
 8005f98:	400200a0 	.word	0x400200a0
 8005f9c:	400200b8 	.word	0x400200b8
 8005fa0:	40020410 	.word	0x40020410
 8005fa4:	40020428 	.word	0x40020428
 8005fa8:	40020440 	.word	0x40020440
 8005fac:	40020458 	.word	0x40020458
 8005fb0:	40020470 	.word	0x40020470
 8005fb4:	40020488 	.word	0x40020488
 8005fb8:	400204a0 	.word	0x400204a0
 8005fbc:	400204b8 	.word	0x400204b8
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494

08005fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fec:	4b67      	ldr	r3, [pc, #412]	; (800618c <HAL_DMA_IRQHandler+0x1ac>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a67      	ldr	r2, [pc, #412]	; (8006190 <HAL_DMA_IRQHandler+0x1b0>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	0a9b      	lsrs	r3, r3, #10
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5f      	ldr	r2, [pc, #380]	; (8006194 <HAL_DMA_IRQHandler+0x1b4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d04a      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_DMA_IRQHandler+0x1b8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d045      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a5c      	ldr	r2, [pc, #368]	; (800619c <HAL_DMA_IRQHandler+0x1bc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d040      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a5a      	ldr	r2, [pc, #360]	; (80061a0 <HAL_DMA_IRQHandler+0x1c0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d03b      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a59      	ldr	r2, [pc, #356]	; (80061a4 <HAL_DMA_IRQHandler+0x1c4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d036      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a57      	ldr	r2, [pc, #348]	; (80061a8 <HAL_DMA_IRQHandler+0x1c8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d031      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a56      	ldr	r2, [pc, #344]	; (80061ac <HAL_DMA_IRQHandler+0x1cc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d02c      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <HAL_DMA_IRQHandler+0x1d0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d027      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a53      	ldr	r2, [pc, #332]	; (80061b4 <HAL_DMA_IRQHandler+0x1d4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a51      	ldr	r2, [pc, #324]	; (80061b8 <HAL_DMA_IRQHandler+0x1d8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a50      	ldr	r2, [pc, #320]	; (80061bc <HAL_DMA_IRQHandler+0x1dc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a4e      	ldr	r2, [pc, #312]	; (80061c0 <HAL_DMA_IRQHandler+0x1e0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a4d      	ldr	r2, [pc, #308]	; (80061c4 <HAL_DMA_IRQHandler+0x1e4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a4b      	ldr	r2, [pc, #300]	; (80061c8 <HAL_DMA_IRQHandler+0x1e8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <HAL_DMA_IRQHandler+0x1ec>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xd2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a48      	ldr	r2, [pc, #288]	; (80061d0 <HAL_DMA_IRQHandler+0x1f0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <HAL_DMA_IRQHandler+0xd6>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <HAL_DMA_IRQHandler+0xd8>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 842b 	beq.w	8006914 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2208      	movs	r2, #8
 80060c8:	409a      	lsls	r2, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80a2 	beq.w	8006218 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <HAL_DMA_IRQHandler+0x1b4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d04a      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <HAL_DMA_IRQHandler+0x1b8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d045      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2b      	ldr	r2, [pc, #172]	; (800619c <HAL_DMA_IRQHandler+0x1bc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d040      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <HAL_DMA_IRQHandler+0x1c0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d03b      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <HAL_DMA_IRQHandler+0x1c4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d036      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <HAL_DMA_IRQHandler+0x1c8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d031      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a25      	ldr	r2, [pc, #148]	; (80061ac <HAL_DMA_IRQHandler+0x1cc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02c      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <HAL_DMA_IRQHandler+0x1d0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d027      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <HAL_DMA_IRQHandler+0x1d4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d022      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <HAL_DMA_IRQHandler+0x1d8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d01d      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_DMA_IRQHandler+0x1dc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d018      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <HAL_DMA_IRQHandler+0x1e0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_DMA_IRQHandler+0x1e4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <HAL_DMA_IRQHandler+0x1e8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d009      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_DMA_IRQHandler+0x1ec>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_DMA_IRQHandler+0x194>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <HAL_DMA_IRQHandler+0x1f0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d12f      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x1f4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e02e      	b.n	80061e8 <HAL_DMA_IRQHandler+0x208>
 800618a:	bf00      	nop
 800618c:	24000000 	.word	0x24000000
 8006190:	1b4e81b5 	.word	0x1b4e81b5
 8006194:	40020010 	.word	0x40020010
 8006198:	40020028 	.word	0x40020028
 800619c:	40020040 	.word	0x40020040
 80061a0:	40020058 	.word	0x40020058
 80061a4:	40020070 	.word	0x40020070
 80061a8:	40020088 	.word	0x40020088
 80061ac:	400200a0 	.word	0x400200a0
 80061b0:	400200b8 	.word	0x400200b8
 80061b4:	40020410 	.word	0x40020410
 80061b8:	40020428 	.word	0x40020428
 80061bc:	40020440 	.word	0x40020440
 80061c0:	40020458 	.word	0x40020458
 80061c4:	40020470 	.word	0x40020470
 80061c8:	40020488 	.word	0x40020488
 80061cc:	400204a0 	.word	0x400204a0
 80061d0:	400204b8 	.word	0x400204b8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d015      	beq.n	8006218 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0204 	bic.w	r2, r2, #4
 80061fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2208      	movs	r2, #8
 8006206:	409a      	lsls	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f043 0201 	orr.w	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d06e      	beq.n	800630c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a69      	ldr	r2, [pc, #420]	; (80063d8 <HAL_DMA_IRQHandler+0x3f8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d04a      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a67      	ldr	r2, [pc, #412]	; (80063dc <HAL_DMA_IRQHandler+0x3fc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d045      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a66      	ldr	r2, [pc, #408]	; (80063e0 <HAL_DMA_IRQHandler+0x400>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d040      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a64      	ldr	r2, [pc, #400]	; (80063e4 <HAL_DMA_IRQHandler+0x404>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d03b      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a63      	ldr	r2, [pc, #396]	; (80063e8 <HAL_DMA_IRQHandler+0x408>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d036      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a61      	ldr	r2, [pc, #388]	; (80063ec <HAL_DMA_IRQHandler+0x40c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a60      	ldr	r2, [pc, #384]	; (80063f0 <HAL_DMA_IRQHandler+0x410>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d02c      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a5e      	ldr	r2, [pc, #376]	; (80063f4 <HAL_DMA_IRQHandler+0x414>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d027      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a5d      	ldr	r2, [pc, #372]	; (80063f8 <HAL_DMA_IRQHandler+0x418>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a5b      	ldr	r2, [pc, #364]	; (80063fc <HAL_DMA_IRQHandler+0x41c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a5a      	ldr	r2, [pc, #360]	; (8006400 <HAL_DMA_IRQHandler+0x420>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a58      	ldr	r2, [pc, #352]	; (8006404 <HAL_DMA_IRQHandler+0x424>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_DMA_IRQHandler+0x428>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a55      	ldr	r2, [pc, #340]	; (800640c <HAL_DMA_IRQHandler+0x42c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a54      	ldr	r2, [pc, #336]	; (8006410 <HAL_DMA_IRQHandler+0x430>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_IRQHandler+0x2ee>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a52      	ldr	r2, [pc, #328]	; (8006414 <HAL_DMA_IRQHandler+0x434>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d10a      	bne.n	80062e4 <HAL_DMA_IRQHandler+0x304>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e003      	b.n	80062ec <HAL_DMA_IRQHandler+0x30c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2201      	movs	r2, #1
 80062fa:	409a      	lsls	r2, r3
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006304:	f043 0202 	orr.w	r2, r3, #2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2204      	movs	r2, #4
 8006316:	409a      	lsls	r2, r3
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 808f 	beq.w	8006440 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <HAL_DMA_IRQHandler+0x3f8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d04a      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <HAL_DMA_IRQHandler+0x3fc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d045      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a29      	ldr	r2, [pc, #164]	; (80063e0 <HAL_DMA_IRQHandler+0x400>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d040      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_IRQHandler+0x404>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d03b      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a26      	ldr	r2, [pc, #152]	; (80063e8 <HAL_DMA_IRQHandler+0x408>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d036      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a24      	ldr	r2, [pc, #144]	; (80063ec <HAL_DMA_IRQHandler+0x40c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d031      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <HAL_DMA_IRQHandler+0x410>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d02c      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_DMA_IRQHandler+0x414>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d027      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a20      	ldr	r2, [pc, #128]	; (80063f8 <HAL_DMA_IRQHandler+0x418>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_DMA_IRQHandler+0x41c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01d      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <HAL_DMA_IRQHandler+0x420>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_DMA_IRQHandler+0x424>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <HAL_DMA_IRQHandler+0x428>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a18      	ldr	r2, [pc, #96]	; (800640c <HAL_DMA_IRQHandler+0x42c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a17      	ldr	r2, [pc, #92]	; (8006410 <HAL_DMA_IRQHandler+0x430>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x3e2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a15      	ldr	r2, [pc, #84]	; (8006414 <HAL_DMA_IRQHandler+0x434>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d12a      	bne.n	8006418 <HAL_DMA_IRQHandler+0x438>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e023      	b.n	8006420 <HAL_DMA_IRQHandler+0x440>
 80063d8:	40020010 	.word	0x40020010
 80063dc:	40020028 	.word	0x40020028
 80063e0:	40020040 	.word	0x40020040
 80063e4:	40020058 	.word	0x40020058
 80063e8:	40020070 	.word	0x40020070
 80063ec:	40020088 	.word	0x40020088
 80063f0:	400200a0 	.word	0x400200a0
 80063f4:	400200b8 	.word	0x400200b8
 80063f8:	40020410 	.word	0x40020410
 80063fc:	40020428 	.word	0x40020428
 8006400:	40020440 	.word	0x40020440
 8006404:	40020458 	.word	0x40020458
 8006408:	40020470 	.word	0x40020470
 800640c:	40020488 	.word	0x40020488
 8006410:	400204a0 	.word	0x400204a0
 8006414:	400204b8 	.word	0x400204b8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2204      	movs	r2, #4
 800642e:	409a      	lsls	r2, r3
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f043 0204 	orr.w	r2, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2210      	movs	r2, #16
 800644a:	409a      	lsls	r2, r3
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a6 	beq.w	80065a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a85      	ldr	r2, [pc, #532]	; (8006670 <HAL_DMA_IRQHandler+0x690>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d04a      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a83      	ldr	r2, [pc, #524]	; (8006674 <HAL_DMA_IRQHandler+0x694>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d045      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a82      	ldr	r2, [pc, #520]	; (8006678 <HAL_DMA_IRQHandler+0x698>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d040      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a80      	ldr	r2, [pc, #512]	; (800667c <HAL_DMA_IRQHandler+0x69c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d03b      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a7f      	ldr	r2, [pc, #508]	; (8006680 <HAL_DMA_IRQHandler+0x6a0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d036      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a7d      	ldr	r2, [pc, #500]	; (8006684 <HAL_DMA_IRQHandler+0x6a4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d031      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a7c      	ldr	r2, [pc, #496]	; (8006688 <HAL_DMA_IRQHandler+0x6a8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d02c      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a7a      	ldr	r2, [pc, #488]	; (800668c <HAL_DMA_IRQHandler+0x6ac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d027      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a79      	ldr	r2, [pc, #484]	; (8006690 <HAL_DMA_IRQHandler+0x6b0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a77      	ldr	r2, [pc, #476]	; (8006694 <HAL_DMA_IRQHandler+0x6b4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01d      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a76      	ldr	r2, [pc, #472]	; (8006698 <HAL_DMA_IRQHandler+0x6b8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a74      	ldr	r2, [pc, #464]	; (800669c <HAL_DMA_IRQHandler+0x6bc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a73      	ldr	r2, [pc, #460]	; (80066a0 <HAL_DMA_IRQHandler+0x6c0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a71      	ldr	r2, [pc, #452]	; (80066a4 <HAL_DMA_IRQHandler+0x6c4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a70      	ldr	r2, [pc, #448]	; (80066a8 <HAL_DMA_IRQHandler+0x6c8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x516>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a6e      	ldr	r2, [pc, #440]	; (80066ac <HAL_DMA_IRQHandler+0x6cc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10a      	bne.n	800650c <HAL_DMA_IRQHandler+0x52c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e009      	b.n	8006520 <HAL_DMA_IRQHandler+0x540>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d03e      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2210      	movs	r2, #16
 800652e:	409a      	lsls	r2, r3
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d024      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
 8006560:	e01f      	b.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
 8006572:	e016      	b.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d107      	bne.n	8006592 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0208 	bic.w	r2, r2, #8
 8006590:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2220      	movs	r2, #32
 80065ac:	409a      	lsls	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8110 	beq.w	80067d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a2c      	ldr	r2, [pc, #176]	; (8006670 <HAL_DMA_IRQHandler+0x690>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04a      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a2b      	ldr	r2, [pc, #172]	; (8006674 <HAL_DMA_IRQHandler+0x694>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d045      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a29      	ldr	r2, [pc, #164]	; (8006678 <HAL_DMA_IRQHandler+0x698>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d040      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a28      	ldr	r2, [pc, #160]	; (800667c <HAL_DMA_IRQHandler+0x69c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d03b      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a26      	ldr	r2, [pc, #152]	; (8006680 <HAL_DMA_IRQHandler+0x6a0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d036      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a25      	ldr	r2, [pc, #148]	; (8006684 <HAL_DMA_IRQHandler+0x6a4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d031      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a23      	ldr	r2, [pc, #140]	; (8006688 <HAL_DMA_IRQHandler+0x6a8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02c      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a22      	ldr	r2, [pc, #136]	; (800668c <HAL_DMA_IRQHandler+0x6ac>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d027      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a20      	ldr	r2, [pc, #128]	; (8006690 <HAL_DMA_IRQHandler+0x6b0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d022      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <HAL_DMA_IRQHandler+0x6b4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01d      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <HAL_DMA_IRQHandler+0x6b8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1c      	ldr	r2, [pc, #112]	; (800669c <HAL_DMA_IRQHandler+0x6bc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <HAL_DMA_IRQHandler+0x6c0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <HAL_DMA_IRQHandler+0x6c4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_DMA_IRQHandler+0x6c8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_DMA_IRQHandler+0x678>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a16      	ldr	r2, [pc, #88]	; (80066ac <HAL_DMA_IRQHandler+0x6cc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d12b      	bne.n	80066b0 <HAL_DMA_IRQHandler+0x6d0>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	bf14      	ite	ne
 8006666:	2301      	movne	r3, #1
 8006668:	2300      	moveq	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e02a      	b.n	80066c4 <HAL_DMA_IRQHandler+0x6e4>
 800666e:	bf00      	nop
 8006670:	40020010 	.word	0x40020010
 8006674:	40020028 	.word	0x40020028
 8006678:	40020040 	.word	0x40020040
 800667c:	40020058 	.word	0x40020058
 8006680:	40020070 	.word	0x40020070
 8006684:	40020088 	.word	0x40020088
 8006688:	400200a0 	.word	0x400200a0
 800668c:	400200b8 	.word	0x400200b8
 8006690:	40020410 	.word	0x40020410
 8006694:	40020428 	.word	0x40020428
 8006698:	40020440 	.word	0x40020440
 800669c:	40020458 	.word	0x40020458
 80066a0:	40020470 	.word	0x40020470
 80066a4:	40020488 	.word	0x40020488
 80066a8:	400204a0 	.word	0x400204a0
 80066ac:	400204b8 	.word	0x400204b8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8087 	beq.w	80067d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2220      	movs	r2, #32
 80066d4:	409a      	lsls	r2, r3
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d139      	bne.n	800675a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0216 	bic.w	r2, r2, #22
 80066f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006704:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <HAL_DMA_IRQHandler+0x736>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0208 	bic.w	r2, r2, #8
 8006724:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	223f      	movs	r2, #63	; 0x3f
 8006730:	409a      	lsls	r2, r3
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 834a 	beq.w	8006de4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
          }
          return;
 8006758:	e344      	b.n	8006de4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d018      	beq.n	800679a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	2b00      	cmp	r3, #0
 800677c:	d02c      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	e027      	b.n	80067d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d023      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
 8006798:	e01e      	b.n	80067d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10f      	bne.n	80067c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0210 	bic.w	r2, r2, #16
 80067b6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8306 	beq.w	8006dee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8088 	beq.w	8006900 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2204      	movs	r2, #4
 80067f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a7a      	ldr	r2, [pc, #488]	; (80069e8 <HAL_DMA_IRQHandler+0xa08>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d04a      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a79      	ldr	r2, [pc, #484]	; (80069ec <HAL_DMA_IRQHandler+0xa0c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d045      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a77      	ldr	r2, [pc, #476]	; (80069f0 <HAL_DMA_IRQHandler+0xa10>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d040      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a76      	ldr	r2, [pc, #472]	; (80069f4 <HAL_DMA_IRQHandler+0xa14>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d03b      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a74      	ldr	r2, [pc, #464]	; (80069f8 <HAL_DMA_IRQHandler+0xa18>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d036      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a73      	ldr	r2, [pc, #460]	; (80069fc <HAL_DMA_IRQHandler+0xa1c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d031      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a71      	ldr	r2, [pc, #452]	; (8006a00 <HAL_DMA_IRQHandler+0xa20>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d02c      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a70      	ldr	r2, [pc, #448]	; (8006a04 <HAL_DMA_IRQHandler+0xa24>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d027      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a6e      	ldr	r2, [pc, #440]	; (8006a08 <HAL_DMA_IRQHandler+0xa28>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d022      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a6d      	ldr	r2, [pc, #436]	; (8006a0c <HAL_DMA_IRQHandler+0xa2c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d01d      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6b      	ldr	r2, [pc, #428]	; (8006a10 <HAL_DMA_IRQHandler+0xa30>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d018      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a6a      	ldr	r2, [pc, #424]	; (8006a14 <HAL_DMA_IRQHandler+0xa34>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a68      	ldr	r2, [pc, #416]	; (8006a18 <HAL_DMA_IRQHandler+0xa38>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00e      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a67      	ldr	r2, [pc, #412]	; (8006a1c <HAL_DMA_IRQHandler+0xa3c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d009      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a65      	ldr	r2, [pc, #404]	; (8006a20 <HAL_DMA_IRQHandler+0xa40>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d004      	beq.n	8006898 <HAL_DMA_IRQHandler+0x8b8>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a64      	ldr	r2, [pc, #400]	; (8006a24 <HAL_DMA_IRQHandler+0xa44>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d108      	bne.n	80068aa <HAL_DMA_IRQHandler+0x8ca>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e007      	b.n	80068ba <HAL_DMA_IRQHandler+0x8da>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d307      	bcc.n	80068d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f2      	bne.n	80068ba <HAL_DMA_IRQHandler+0x8da>
 80068d4:	e000      	b.n	80068d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068d6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2203      	movs	r2, #3
 80068f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068f6:	e003      	b.n	8006900 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8272 	beq.w	8006dee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
 8006912:	e26c      	b.n	8006dee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a43      	ldr	r2, [pc, #268]	; (8006a28 <HAL_DMA_IRQHandler+0xa48>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d022      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a42      	ldr	r2, [pc, #264]	; (8006a2c <HAL_DMA_IRQHandler+0xa4c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01d      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <HAL_DMA_IRQHandler+0xa50>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <HAL_DMA_IRQHandler+0xa54>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a3d      	ldr	r2, [pc, #244]	; (8006a38 <HAL_DMA_IRQHandler+0xa58>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3c      	ldr	r2, [pc, #240]	; (8006a3c <HAL_DMA_IRQHandler+0xa5c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3a      	ldr	r2, [pc, #232]	; (8006a40 <HAL_DMA_IRQHandler+0xa60>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_DMA_IRQHandler+0x984>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a39      	ldr	r2, [pc, #228]	; (8006a44 <HAL_DMA_IRQHandler+0xa64>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d101      	bne.n	8006968 <HAL_DMA_IRQHandler+0x988>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_DMA_IRQHandler+0x98a>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 823f 	beq.w	8006dee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2204      	movs	r2, #4
 8006982:	409a      	lsls	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80cd 	beq.w	8006b28 <HAL_DMA_IRQHandler+0xb48>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80c7 	beq.w	8006b28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2204      	movs	r2, #4
 80069a4:	409a      	lsls	r2, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d049      	beq.n	8006a48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d109      	bne.n	80069d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8210 	beq.w	8006de8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069d0:	e20a      	b.n	8006de8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8206 	beq.w	8006de8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e4:	e200      	b.n	8006de8 <HAL_DMA_IRQHandler+0xe08>
 80069e6:	bf00      	nop
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	40020040 	.word	0x40020040
 80069f4:	40020058 	.word	0x40020058
 80069f8:	40020070 	.word	0x40020070
 80069fc:	40020088 	.word	0x40020088
 8006a00:	400200a0 	.word	0x400200a0
 8006a04:	400200b8 	.word	0x400200b8
 8006a08:	40020410 	.word	0x40020410
 8006a0c:	40020428 	.word	0x40020428
 8006a10:	40020440 	.word	0x40020440
 8006a14:	40020458 	.word	0x40020458
 8006a18:	40020470 	.word	0x40020470
 8006a1c:	40020488 	.word	0x40020488
 8006a20:	400204a0 	.word	0x400204a0
 8006a24:	400204b8 	.word	0x400204b8
 8006a28:	58025408 	.word	0x58025408
 8006a2c:	5802541c 	.word	0x5802541c
 8006a30:	58025430 	.word	0x58025430
 8006a34:	58025444 	.word	0x58025444
 8006a38:	58025458 	.word	0x58025458
 8006a3c:	5802546c 	.word	0x5802546c
 8006a40:	58025480 	.word	0x58025480
 8006a44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d160      	bne.n	8006b14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a8c      	ldr	r2, [pc, #560]	; (8006c88 <HAL_DMA_IRQHandler+0xca8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d04a      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a8a      	ldr	r2, [pc, #552]	; (8006c8c <HAL_DMA_IRQHandler+0xcac>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d045      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a89      	ldr	r2, [pc, #548]	; (8006c90 <HAL_DMA_IRQHandler+0xcb0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d040      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a87      	ldr	r2, [pc, #540]	; (8006c94 <HAL_DMA_IRQHandler+0xcb4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d03b      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a86      	ldr	r2, [pc, #536]	; (8006c98 <HAL_DMA_IRQHandler+0xcb8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d036      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a84      	ldr	r2, [pc, #528]	; (8006c9c <HAL_DMA_IRQHandler+0xcbc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d031      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a83      	ldr	r2, [pc, #524]	; (8006ca0 <HAL_DMA_IRQHandler+0xcc0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d02c      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a81      	ldr	r2, [pc, #516]	; (8006ca4 <HAL_DMA_IRQHandler+0xcc4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d027      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a80      	ldr	r2, [pc, #512]	; (8006ca8 <HAL_DMA_IRQHandler+0xcc8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d022      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a7e      	ldr	r2, [pc, #504]	; (8006cac <HAL_DMA_IRQHandler+0xccc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01d      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7d      	ldr	r2, [pc, #500]	; (8006cb0 <HAL_DMA_IRQHandler+0xcd0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d018      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a7b      	ldr	r2, [pc, #492]	; (8006cb4 <HAL_DMA_IRQHandler+0xcd4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a7a      	ldr	r2, [pc, #488]	; (8006cb8 <HAL_DMA_IRQHandler+0xcd8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a78      	ldr	r2, [pc, #480]	; (8006cbc <HAL_DMA_IRQHandler+0xcdc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a77      	ldr	r2, [pc, #476]	; (8006cc0 <HAL_DMA_IRQHandler+0xce0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_DMA_IRQHandler+0xb12>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a75      	ldr	r2, [pc, #468]	; (8006cc4 <HAL_DMA_IRQHandler+0xce4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d108      	bne.n	8006b04 <HAL_DMA_IRQHandler+0xb24>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0208 	bic.w	r2, r2, #8
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e007      	b.n	8006b14 <HAL_DMA_IRQHandler+0xb34>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0204 	bic.w	r2, r2, #4
 8006b12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8165 	beq.w	8006de8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b26:	e15f      	b.n	8006de8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	2202      	movs	r2, #2
 8006b32:	409a      	lsls	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80c5 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xce8>
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80bf 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	2202      	movs	r2, #2
 8006b54:	409a      	lsls	r2, r3
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 813a 	beq.w	8006dec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b80:	e134      	b.n	8006dec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 8130 	beq.w	8006dec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b94:	e12a      	b.n	8006dec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d168      	bne.n	8006c72 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a38      	ldr	r2, [pc, #224]	; (8006c88 <HAL_DMA_IRQHandler+0xca8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d04a      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a37      	ldr	r2, [pc, #220]	; (8006c8c <HAL_DMA_IRQHandler+0xcac>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	; (8006c90 <HAL_DMA_IRQHandler+0xcb0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d040      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a34      	ldr	r2, [pc, #208]	; (8006c94 <HAL_DMA_IRQHandler+0xcb4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d03b      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a32      	ldr	r2, [pc, #200]	; (8006c98 <HAL_DMA_IRQHandler+0xcb8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d036      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a31      	ldr	r2, [pc, #196]	; (8006c9c <HAL_DMA_IRQHandler+0xcbc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d031      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a2f      	ldr	r2, [pc, #188]	; (8006ca0 <HAL_DMA_IRQHandler+0xcc0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2e      	ldr	r2, [pc, #184]	; (8006ca4 <HAL_DMA_IRQHandler+0xcc4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d027      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <HAL_DMA_IRQHandler+0xcc8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2b      	ldr	r2, [pc, #172]	; (8006cac <HAL_DMA_IRQHandler+0xccc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01d      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <HAL_DMA_IRQHandler+0xcd0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <HAL_DMA_IRQHandler+0xcd4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_DMA_IRQHandler+0xcd8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a25      	ldr	r2, [pc, #148]	; (8006cbc <HAL_DMA_IRQHandler+0xcdc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <HAL_DMA_IRQHandler+0xce0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_DMA_IRQHandler+0xc60>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a22      	ldr	r2, [pc, #136]	; (8006cc4 <HAL_DMA_IRQHandler+0xce4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <HAL_DMA_IRQHandler+0xc72>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0214 	bic.w	r2, r2, #20
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e007      	b.n	8006c62 <HAL_DMA_IRQHandler+0xc82>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 020a 	bic.w	r2, r2, #10
 8006c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80b8 	beq.w	8006dec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c84:	e0b2      	b.n	8006dec <HAL_DMA_IRQHandler+0xe0c>
 8006c86:	bf00      	nop
 8006c88:	40020010 	.word	0x40020010
 8006c8c:	40020028 	.word	0x40020028
 8006c90:	40020040 	.word	0x40020040
 8006c94:	40020058 	.word	0x40020058
 8006c98:	40020070 	.word	0x40020070
 8006c9c:	40020088 	.word	0x40020088
 8006ca0:	400200a0 	.word	0x400200a0
 8006ca4:	400200b8 	.word	0x400200b8
 8006ca8:	40020410 	.word	0x40020410
 8006cac:	40020428 	.word	0x40020428
 8006cb0:	40020440 	.word	0x40020440
 8006cb4:	40020458 	.word	0x40020458
 8006cb8:	40020470 	.word	0x40020470
 8006cbc:	40020488 	.word	0x40020488
 8006cc0:	400204a0 	.word	0x400204a0
 8006cc4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ccc:	f003 031f 	and.w	r3, r3, #31
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8088 	beq.w	8006dee <HAL_DMA_IRQHandler+0xe0e>
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8082 	beq.w	8006dee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a41      	ldr	r2, [pc, #260]	; (8006df4 <HAL_DMA_IRQHandler+0xe14>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d04a      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a3f      	ldr	r2, [pc, #252]	; (8006df8 <HAL_DMA_IRQHandler+0xe18>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d045      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3e      	ldr	r2, [pc, #248]	; (8006dfc <HAL_DMA_IRQHandler+0xe1c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d040      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	; (8006e00 <HAL_DMA_IRQHandler+0xe20>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d03b      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a3b      	ldr	r2, [pc, #236]	; (8006e04 <HAL_DMA_IRQHandler+0xe24>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d036      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a39      	ldr	r2, [pc, #228]	; (8006e08 <HAL_DMA_IRQHandler+0xe28>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d031      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a38      	ldr	r2, [pc, #224]	; (8006e0c <HAL_DMA_IRQHandler+0xe2c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d02c      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a36      	ldr	r2, [pc, #216]	; (8006e10 <HAL_DMA_IRQHandler+0xe30>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d027      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a35      	ldr	r2, [pc, #212]	; (8006e14 <HAL_DMA_IRQHandler+0xe34>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d022      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a33      	ldr	r2, [pc, #204]	; (8006e18 <HAL_DMA_IRQHandler+0xe38>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01d      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a32      	ldr	r2, [pc, #200]	; (8006e1c <HAL_DMA_IRQHandler+0xe3c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a30      	ldr	r2, [pc, #192]	; (8006e20 <HAL_DMA_IRQHandler+0xe40>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2f      	ldr	r2, [pc, #188]	; (8006e24 <HAL_DMA_IRQHandler+0xe44>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a2d      	ldr	r2, [pc, #180]	; (8006e28 <HAL_DMA_IRQHandler+0xe48>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2c      	ldr	r2, [pc, #176]	; (8006e2c <HAL_DMA_IRQHandler+0xe4c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_DMA_IRQHandler+0xdaa>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <HAL_DMA_IRQHandler+0xe50>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <HAL_DMA_IRQHandler+0xdbc>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 021c 	bic.w	r2, r2, #28
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e007      	b.n	8006dac <HAL_DMA_IRQHandler+0xdcc>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 020e 	bic.w	r2, r2, #14
 8006daa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2201      	movs	r2, #1
 8006db6:	409a      	lsls	r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
 8006de2:	e004      	b.n	8006dee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006de4:	bf00      	nop
 8006de6:	e002      	b.n	8006dee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006dee:	3728      	adds	r7, #40	; 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40020010 	.word	0x40020010
 8006df8:	40020028 	.word	0x40020028
 8006dfc:	40020040 	.word	0x40020040
 8006e00:	40020058 	.word	0x40020058
 8006e04:	40020070 	.word	0x40020070
 8006e08:	40020088 	.word	0x40020088
 8006e0c:	400200a0 	.word	0x400200a0
 8006e10:	400200b8 	.word	0x400200b8
 8006e14:	40020410 	.word	0x40020410
 8006e18:	40020428 	.word	0x40020428
 8006e1c:	40020440 	.word	0x40020440
 8006e20:	40020458 	.word	0x40020458
 8006e24:	40020470 	.word	0x40020470
 8006e28:	40020488 	.word	0x40020488
 8006e2c:	400204a0 	.word	0x400204a0
 8006e30:	400204b8 	.word	0x400204b8

08006e34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a84      	ldr	r2, [pc, #528]	; (8007064 <DMA_SetConfig+0x230>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d072      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a82      	ldr	r2, [pc, #520]	; (8007068 <DMA_SetConfig+0x234>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d06d      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a81      	ldr	r2, [pc, #516]	; (800706c <DMA_SetConfig+0x238>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d068      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a7f      	ldr	r2, [pc, #508]	; (8007070 <DMA_SetConfig+0x23c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d063      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a7e      	ldr	r2, [pc, #504]	; (8007074 <DMA_SetConfig+0x240>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d05e      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a7c      	ldr	r2, [pc, #496]	; (8007078 <DMA_SetConfig+0x244>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d059      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a7b      	ldr	r2, [pc, #492]	; (800707c <DMA_SetConfig+0x248>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d054      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a79      	ldr	r2, [pc, #484]	; (8007080 <DMA_SetConfig+0x24c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d04f      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a78      	ldr	r2, [pc, #480]	; (8007084 <DMA_SetConfig+0x250>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04a      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a76      	ldr	r2, [pc, #472]	; (8007088 <DMA_SetConfig+0x254>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d045      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a75      	ldr	r2, [pc, #468]	; (800708c <DMA_SetConfig+0x258>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d040      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a73      	ldr	r2, [pc, #460]	; (8007090 <DMA_SetConfig+0x25c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d03b      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a72      	ldr	r2, [pc, #456]	; (8007094 <DMA_SetConfig+0x260>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d036      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a70      	ldr	r2, [pc, #448]	; (8007098 <DMA_SetConfig+0x264>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d031      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a6f      	ldr	r2, [pc, #444]	; (800709c <DMA_SetConfig+0x268>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d02c      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a6d      	ldr	r2, [pc, #436]	; (80070a0 <DMA_SetConfig+0x26c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d027      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6c      	ldr	r2, [pc, #432]	; (80070a4 <DMA_SetConfig+0x270>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d022      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a6a      	ldr	r2, [pc, #424]	; (80070a8 <DMA_SetConfig+0x274>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01d      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a69      	ldr	r2, [pc, #420]	; (80070ac <DMA_SetConfig+0x278>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a67      	ldr	r2, [pc, #412]	; (80070b0 <DMA_SetConfig+0x27c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a66      	ldr	r2, [pc, #408]	; (80070b4 <DMA_SetConfig+0x280>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a64      	ldr	r2, [pc, #400]	; (80070b8 <DMA_SetConfig+0x284>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a63      	ldr	r2, [pc, #396]	; (80070bc <DMA_SetConfig+0x288>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <DMA_SetConfig+0x10a>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a61      	ldr	r2, [pc, #388]	; (80070c0 <DMA_SetConfig+0x28c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <DMA_SetConfig+0x10e>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <DMA_SetConfig+0x110>
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a3e      	ldr	r2, [pc, #248]	; (8007064 <DMA_SetConfig+0x230>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04a      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a3d      	ldr	r2, [pc, #244]	; (8007068 <DMA_SetConfig+0x234>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d045      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3b      	ldr	r2, [pc, #236]	; (800706c <DMA_SetConfig+0x238>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d040      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3a      	ldr	r2, [pc, #232]	; (8007070 <DMA_SetConfig+0x23c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d03b      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a38      	ldr	r2, [pc, #224]	; (8007074 <DMA_SetConfig+0x240>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d036      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a37      	ldr	r2, [pc, #220]	; (8007078 <DMA_SetConfig+0x244>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d031      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a35      	ldr	r2, [pc, #212]	; (800707c <DMA_SetConfig+0x248>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02c      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a34      	ldr	r2, [pc, #208]	; (8007080 <DMA_SetConfig+0x24c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d027      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a32      	ldr	r2, [pc, #200]	; (8007084 <DMA_SetConfig+0x250>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a31      	ldr	r2, [pc, #196]	; (8007088 <DMA_SetConfig+0x254>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01d      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <DMA_SetConfig+0x258>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2e      	ldr	r2, [pc, #184]	; (8007090 <DMA_SetConfig+0x25c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a2c      	ldr	r2, [pc, #176]	; (8007094 <DMA_SetConfig+0x260>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2b      	ldr	r2, [pc, #172]	; (8007098 <DMA_SetConfig+0x264>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a29      	ldr	r2, [pc, #164]	; (800709c <DMA_SetConfig+0x268>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <DMA_SetConfig+0x1d0>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <DMA_SetConfig+0x26c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d101      	bne.n	8007008 <DMA_SetConfig+0x1d4>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <DMA_SetConfig+0x1d6>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d05a      	beq.n	80070c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	223f      	movs	r2, #63	; 0x3f
 8007018:	409a      	lsls	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800702c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d108      	bne.n	8007050 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800704e:	e087      	b.n	8007160 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
}
 8007060:	e07e      	b.n	8007160 <DMA_SetConfig+0x32c>
 8007062:	bf00      	nop
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	40020040 	.word	0x40020040
 8007070:	40020058 	.word	0x40020058
 8007074:	40020070 	.word	0x40020070
 8007078:	40020088 	.word	0x40020088
 800707c:	400200a0 	.word	0x400200a0
 8007080:	400200b8 	.word	0x400200b8
 8007084:	40020410 	.word	0x40020410
 8007088:	40020428 	.word	0x40020428
 800708c:	40020440 	.word	0x40020440
 8007090:	40020458 	.word	0x40020458
 8007094:	40020470 	.word	0x40020470
 8007098:	40020488 	.word	0x40020488
 800709c:	400204a0 	.word	0x400204a0
 80070a0:	400204b8 	.word	0x400204b8
 80070a4:	58025408 	.word	0x58025408
 80070a8:	5802541c 	.word	0x5802541c
 80070ac:	58025430 	.word	0x58025430
 80070b0:	58025444 	.word	0x58025444
 80070b4:	58025458 	.word	0x58025458
 80070b8:	5802546c 	.word	0x5802546c
 80070bc:	58025480 	.word	0x58025480
 80070c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a28      	ldr	r2, [pc, #160]	; (800716c <DMA_SetConfig+0x338>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d022      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a27      	ldr	r2, [pc, #156]	; (8007170 <DMA_SetConfig+0x33c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d01d      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a25      	ldr	r2, [pc, #148]	; (8007174 <DMA_SetConfig+0x340>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d018      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a24      	ldr	r2, [pc, #144]	; (8007178 <DMA_SetConfig+0x344>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d013      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a22      	ldr	r2, [pc, #136]	; (800717c <DMA_SetConfig+0x348>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00e      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a21      	ldr	r2, [pc, #132]	; (8007180 <DMA_SetConfig+0x34c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d009      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <DMA_SetConfig+0x350>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <DMA_SetConfig+0x2e0>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <DMA_SetConfig+0x354>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d101      	bne.n	8007118 <DMA_SetConfig+0x2e4>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <DMA_SetConfig+0x2e6>
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2201      	movs	r2, #1
 8007128:	409a      	lsls	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d108      	bne.n	8007150 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	60da      	str	r2, [r3, #12]
}
 800714e:	e007      	b.n	8007160 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	58025408 	.word	0x58025408
 8007170:	5802541c 	.word	0x5802541c
 8007174:	58025430 	.word	0x58025430
 8007178:	58025444 	.word	0x58025444
 800717c:	58025458 	.word	0x58025458
 8007180:	5802546c 	.word	0x5802546c
 8007184:	58025480 	.word	0x58025480
 8007188:	58025494 	.word	0x58025494

0800718c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a42      	ldr	r2, [pc, #264]	; (80072a4 <DMA_CalcBaseAndBitshift+0x118>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a3f      	ldr	r2, [pc, #252]	; (80072ac <DMA_CalcBaseAndBitshift+0x120>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a3e      	ldr	r2, [pc, #248]	; (80072b0 <DMA_CalcBaseAndBitshift+0x124>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3c      	ldr	r2, [pc, #240]	; (80072b4 <DMA_CalcBaseAndBitshift+0x128>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3b      	ldr	r2, [pc, #236]	; (80072b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a39      	ldr	r2, [pc, #228]	; (80072bc <DMA_CalcBaseAndBitshift+0x130>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a38      	ldr	r2, [pc, #224]	; (80072c0 <DMA_CalcBaseAndBitshift+0x134>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a36      	ldr	r2, [pc, #216]	; (80072c4 <DMA_CalcBaseAndBitshift+0x138>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a35      	ldr	r2, [pc, #212]	; (80072c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a33      	ldr	r2, [pc, #204]	; (80072cc <DMA_CalcBaseAndBitshift+0x140>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a32      	ldr	r2, [pc, #200]	; (80072d0 <DMA_CalcBaseAndBitshift+0x144>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a30      	ldr	r2, [pc, #192]	; (80072d4 <DMA_CalcBaseAndBitshift+0x148>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <DMA_CalcBaseAndBitshift+0x150>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <DMA_CalcBaseAndBitshift+0xa8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <DMA_CalcBaseAndBitshift+0x154>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d101      	bne.n	8007238 <DMA_CalcBaseAndBitshift+0xac>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <DMA_CalcBaseAndBitshift+0xae>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d024      	beq.n	8007288 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3b10      	subs	r3, #16
 8007246:	4a27      	ldr	r2, [pc, #156]	; (80072e4 <DMA_CalcBaseAndBitshift+0x158>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	4a24      	ldr	r2, [pc, #144]	; (80072e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007258:	5cd3      	ldrb	r3, [r2, r3]
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b03      	cmp	r3, #3
 8007264:	d908      	bls.n	8007278 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <DMA_CalcBaseAndBitshift+0x160>)
 800726e:	4013      	ands	r3, r2
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	659a      	str	r2, [r3, #88]	; 0x58
 8007276:	e00d      	b.n	8007294 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	4b1b      	ldr	r3, [pc, #108]	; (80072ec <DMA_CalcBaseAndBitshift+0x160>)
 8007280:	4013      	ands	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6593      	str	r3, [r2, #88]	; 0x58
 8007286:	e005      	b.n	8007294 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40020010 	.word	0x40020010
 80072a8:	40020028 	.word	0x40020028
 80072ac:	40020040 	.word	0x40020040
 80072b0:	40020058 	.word	0x40020058
 80072b4:	40020070 	.word	0x40020070
 80072b8:	40020088 	.word	0x40020088
 80072bc:	400200a0 	.word	0x400200a0
 80072c0:	400200b8 	.word	0x400200b8
 80072c4:	40020410 	.word	0x40020410
 80072c8:	40020428 	.word	0x40020428
 80072cc:	40020440 	.word	0x40020440
 80072d0:	40020458 	.word	0x40020458
 80072d4:	40020470 	.word	0x40020470
 80072d8:	40020488 	.word	0x40020488
 80072dc:	400204a0 	.word	0x400204a0
 80072e0:	400204b8 	.word	0x400204b8
 80072e4:	aaaaaaab 	.word	0xaaaaaaab
 80072e8:	080121f0 	.word	0x080121f0
 80072ec:	fffffc00 	.word	0xfffffc00

080072f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d120      	bne.n	8007346 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	2b03      	cmp	r3, #3
 800730a:	d858      	bhi.n	80073be <DMA_CheckFifoParam+0xce>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <DMA_CheckFifoParam+0x24>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007325 	.word	0x08007325
 8007318:	08007337 	.word	0x08007337
 800731c:	08007325 	.word	0x08007325
 8007320:	080073bf 	.word	0x080073bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d048      	beq.n	80073c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007334:	e045      	b.n	80073c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800733e:	d142      	bne.n	80073c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007344:	e03f      	b.n	80073c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734e:	d123      	bne.n	8007398 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	2b03      	cmp	r3, #3
 8007356:	d838      	bhi.n	80073ca <DMA_CheckFifoParam+0xda>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <DMA_CheckFifoParam+0x70>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007371 	.word	0x08007371
 8007364:	08007377 	.word	0x08007377
 8007368:	08007371 	.word	0x08007371
 800736c:	08007389 	.word	0x08007389
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
        break;
 8007374:	e030      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d025      	beq.n	80073ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007386:	e022      	b.n	80073ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007390:	d11f      	bne.n	80073d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007396:	e01c      	b.n	80073d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	2b02      	cmp	r3, #2
 800739e:	d902      	bls.n	80073a6 <DMA_CheckFifoParam+0xb6>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d003      	beq.n	80073ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80073a4:	e018      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	73fb      	strb	r3, [r7, #15]
        break;
 80073aa:	e015      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00e      	beq.n	80073d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
    break;
 80073bc:	e00b      	b.n	80073d6 <DMA_CheckFifoParam+0xe6>
        break;
 80073be:	bf00      	nop
 80073c0:	e00a      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        break;
 80073c2:	bf00      	nop
 80073c4:	e008      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        break;
 80073c6:	bf00      	nop
 80073c8:	e006      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        break;
 80073ca:	bf00      	nop
 80073cc:	e004      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        break;
 80073ce:	bf00      	nop
 80073d0:	e002      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
        break;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <DMA_CheckFifoParam+0xe8>
    break;
 80073d6:	bf00      	nop
    }
  }

  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop

080073e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a38      	ldr	r2, [pc, #224]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d022      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a36      	ldr	r2, [pc, #216]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01d      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a35      	ldr	r2, [pc, #212]	; (80074e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d018      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a33      	ldr	r2, [pc, #204]	; (80074e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d013      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a32      	ldr	r2, [pc, #200]	; (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00e      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a30      	ldr	r2, [pc, #192]	; (80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d009      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2f      	ldr	r2, [pc, #188]	; (80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d004      	beq.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2d      	ldr	r2, [pc, #180]	; (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d101      	bne.n	800744a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800744a:	2300      	movs	r3, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01a      	beq.n	8007486 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	3b08      	subs	r3, #8
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	091b      	lsrs	r3, r3, #4
 8007460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4b26      	ldr	r3, [pc, #152]	; (8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a24      	ldr	r2, [pc, #144]	; (8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007484:	e024      	b.n	80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	3b10      	subs	r3, #16
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a1c      	ldr	r2, [pc, #112]	; (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d806      	bhi.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d902      	bls.n	80074ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3308      	adds	r3, #8
 80074ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4b18      	ldr	r3, [pc, #96]	; (8007514 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a16      	ldr	r2, [pc, #88]	; (8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2201      	movs	r2, #1
 80074ca:	409a      	lsls	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074d0:	bf00      	nop
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	58025408 	.word	0x58025408
 80074e0:	5802541c 	.word	0x5802541c
 80074e4:	58025430 	.word	0x58025430
 80074e8:	58025444 	.word	0x58025444
 80074ec:	58025458 	.word	0x58025458
 80074f0:	5802546c 	.word	0x5802546c
 80074f4:	58025480 	.word	0x58025480
 80074f8:	58025494 	.word	0x58025494
 80074fc:	cccccccd 	.word	0xcccccccd
 8007500:	16009600 	.word	0x16009600
 8007504:	58025880 	.word	0x58025880
 8007508:	aaaaaaab 	.word	0xaaaaaaab
 800750c:	400204b8 	.word	0x400204b8
 8007510:	4002040f 	.word	0x4002040f
 8007514:	10008200 	.word	0x10008200
 8007518:	40020880 	.word	0x40020880

0800751c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d04a      	beq.n	80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b08      	cmp	r3, #8
 8007536:	d847      	bhi.n	80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a25      	ldr	r2, [pc, #148]	; (80075d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d022      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a24      	ldr	r2, [pc, #144]	; (80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d01d      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a22      	ldr	r2, [pc, #136]	; (80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1e      	ldr	r2, [pc, #120]	; (80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d101      	bne.n	800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80075a4:	671a      	str	r2, [r3, #112]	; 0x70
 80075a6:	e009      	b.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4b14      	ldr	r3, [pc, #80]	; (80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a11      	ldr	r2, [pc, #68]	; (8007600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3b01      	subs	r3, #1
 80075c0:	2201      	movs	r2, #1
 80075c2:	409a      	lsls	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	58025408 	.word	0x58025408
 80075d8:	5802541c 	.word	0x5802541c
 80075dc:	58025430 	.word	0x58025430
 80075e0:	58025444 	.word	0x58025444
 80075e4:	58025458 	.word	0x58025458
 80075e8:	5802546c 	.word	0x5802546c
 80075ec:	58025480 	.word	0x58025480
 80075f0:	58025494 	.word	0x58025494
 80075f4:	1600963f 	.word	0x1600963f
 80075f8:	58025940 	.word	0x58025940
 80075fc:	1000823f 	.word	0x1000823f
 8007600:	40020940 	.word	0x40020940

08007604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007612:	4b89      	ldr	r3, [pc, #548]	; (8007838 <HAL_GPIO_Init+0x234>)
 8007614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007616:	e194      	b.n	8007942 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	2101      	movs	r1, #1
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	4013      	ands	r3, r2
 8007626:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8186 	beq.w	800793c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d00b      	beq.n	8007650 <HAL_GPIO_Init+0x4c>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d007      	beq.n	8007650 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007644:	2b11      	cmp	r3, #17
 8007646:	d003      	beq.n	8007650 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b12      	cmp	r3, #18
 800764e:	d130      	bne.n	80076b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	2203      	movs	r2, #3
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	43db      	mvns	r3, r3
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	4013      	ands	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4313      	orrs	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007686:	2201      	movs	r2, #1
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4013      	ands	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 0201 	and.w	r2, r3, #1
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	2203      	movs	r2, #3
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d003      	beq.n	80076f2 <HAL_GPIO_Init+0xee>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b12      	cmp	r3, #18
 80076f0:	d123      	bne.n	800773a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	08da      	lsrs	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3208      	adds	r2, #8
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	220f      	movs	r2, #15
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	43db      	mvns	r3, r3
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4013      	ands	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	4313      	orrs	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	08da      	lsrs	r2, r3, #3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3208      	adds	r2, #8
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	2203      	movs	r2, #3
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	4013      	ands	r3, r2
 8007750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f003 0203 	and.w	r2, r3, #3
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	4313      	orrs	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80e0 	beq.w	800793c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800777c:	4b2f      	ldr	r3, [pc, #188]	; (800783c <HAL_GPIO_Init+0x238>)
 800777e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007782:	4a2e      	ldr	r2, [pc, #184]	; (800783c <HAL_GPIO_Init+0x238>)
 8007784:	f043 0302 	orr.w	r3, r3, #2
 8007788:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800778c:	4b2b      	ldr	r3, [pc, #172]	; (800783c <HAL_GPIO_Init+0x238>)
 800778e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800779a:	4a29      	ldr	r2, [pc, #164]	; (8007840 <HAL_GPIO_Init+0x23c>)
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	089b      	lsrs	r3, r3, #2
 80077a0:	3302      	adds	r3, #2
 80077a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	220f      	movs	r2, #15
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	43db      	mvns	r3, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4013      	ands	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a20      	ldr	r2, [pc, #128]	; (8007844 <HAL_GPIO_Init+0x240>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d052      	beq.n	800786c <HAL_GPIO_Init+0x268>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a1f      	ldr	r2, [pc, #124]	; (8007848 <HAL_GPIO_Init+0x244>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d031      	beq.n	8007832 <HAL_GPIO_Init+0x22e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1e      	ldr	r2, [pc, #120]	; (800784c <HAL_GPIO_Init+0x248>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d02b      	beq.n	800782e <HAL_GPIO_Init+0x22a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <HAL_GPIO_Init+0x24c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d025      	beq.n	800782a <HAL_GPIO_Init+0x226>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <HAL_GPIO_Init+0x250>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d01f      	beq.n	8007826 <HAL_GPIO_Init+0x222>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1b      	ldr	r2, [pc, #108]	; (8007858 <HAL_GPIO_Init+0x254>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d019      	beq.n	8007822 <HAL_GPIO_Init+0x21e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1a      	ldr	r2, [pc, #104]	; (800785c <HAL_GPIO_Init+0x258>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_GPIO_Init+0x21a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a19      	ldr	r2, [pc, #100]	; (8007860 <HAL_GPIO_Init+0x25c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00d      	beq.n	800781a <HAL_GPIO_Init+0x216>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a18      	ldr	r2, [pc, #96]	; (8007864 <HAL_GPIO_Init+0x260>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d007      	beq.n	8007816 <HAL_GPIO_Init+0x212>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a17      	ldr	r2, [pc, #92]	; (8007868 <HAL_GPIO_Init+0x264>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d101      	bne.n	8007812 <HAL_GPIO_Init+0x20e>
 800780e:	2309      	movs	r3, #9
 8007810:	e02d      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007812:	230a      	movs	r3, #10
 8007814:	e02b      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007816:	2308      	movs	r3, #8
 8007818:	e029      	b.n	800786e <HAL_GPIO_Init+0x26a>
 800781a:	2307      	movs	r3, #7
 800781c:	e027      	b.n	800786e <HAL_GPIO_Init+0x26a>
 800781e:	2306      	movs	r3, #6
 8007820:	e025      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007822:	2305      	movs	r3, #5
 8007824:	e023      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007826:	2304      	movs	r3, #4
 8007828:	e021      	b.n	800786e <HAL_GPIO_Init+0x26a>
 800782a:	2303      	movs	r3, #3
 800782c:	e01f      	b.n	800786e <HAL_GPIO_Init+0x26a>
 800782e:	2302      	movs	r3, #2
 8007830:	e01d      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007832:	2301      	movs	r3, #1
 8007834:	e01b      	b.n	800786e <HAL_GPIO_Init+0x26a>
 8007836:	bf00      	nop
 8007838:	58000080 	.word	0x58000080
 800783c:	58024400 	.word	0x58024400
 8007840:	58000400 	.word	0x58000400
 8007844:	58020000 	.word	0x58020000
 8007848:	58020400 	.word	0x58020400
 800784c:	58020800 	.word	0x58020800
 8007850:	58020c00 	.word	0x58020c00
 8007854:	58021000 	.word	0x58021000
 8007858:	58021400 	.word	0x58021400
 800785c:	58021800 	.word	0x58021800
 8007860:	58021c00 	.word	0x58021c00
 8007864:	58022000 	.word	0x58022000
 8007868:	58022400 	.word	0x58022400
 800786c:	2300      	movs	r3, #0
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	f002 0203 	and.w	r2, r2, #3
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	4093      	lsls	r3, r2
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4313      	orrs	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800787e:	4938      	ldr	r1, [pc, #224]	; (8007960 <HAL_GPIO_Init+0x35c>)
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	089b      	lsrs	r3, r3, #2
 8007884:	3302      	adds	r3, #2
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	43db      	mvns	r3, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4013      	ands	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	43db      	mvns	r3, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4013      	ands	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800790e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	43db      	mvns	r3, r3
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	4013      	ands	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	f47f ae63 	bne.w	8007618 <HAL_GPIO_Init+0x14>
  }
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	3724      	adds	r7, #36	; 0x24
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	58000400 	.word	0x58000400

08007964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e001      	b.n	8007986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079a4:	787b      	ldrb	r3, [r7, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80079b0:	e003      	b.n	80079ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	4603      	mov	r3, r0
 80079ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80079d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d008      	beq.n	80079f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f804 	bl	80079fa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	4603      	mov	r3, r0
 8007a02:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a18:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <HAL_PWREx_ConfigSupply+0x70>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d00a      	beq.n	8007a3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a24:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <HAL_PWREx_ConfigSupply+0x70>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d001      	beq.n	8007a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e01f      	b.n	8007a76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e01d      	b.n	8007a76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <HAL_PWREx_ConfigSupply+0x70>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f023 0207 	bic.w	r2, r3, #7
 8007a42:	490f      	ldr	r1, [pc, #60]	; (8007a80 <HAL_PWREx_ConfigSupply+0x70>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a4a:	f7fb fc21 	bl	8003290 <HAL_GetTick>
 8007a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a50:	e009      	b.n	8007a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a52:	f7fb fc1d 	bl	8003290 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a60:	d901      	bls.n	8007a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e007      	b.n	8007a76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_PWREx_ConfigSupply+0x70>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a72:	d1ee      	bne.n	8007a52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	58024800 	.word	0x58024800

08007a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08c      	sub	sp, #48	; 0x30
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e3ff      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8087 	beq.w	8007bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aa4:	4b99      	ldr	r3, [pc, #612]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aae:	4b97      	ldr	r3, [pc, #604]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b10      	cmp	r3, #16
 8007ab8:	d007      	beq.n	8007aca <HAL_RCC_OscConfig+0x46>
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	2b18      	cmp	r3, #24
 8007abe:	d110      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x5e>
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d10b      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aca:	4b90      	ldr	r3, [pc, #576]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d06c      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x12c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d168      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e3d9      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aea:	d106      	bne.n	8007afa <HAL_RCC_OscConfig+0x76>
 8007aec:	4b87      	ldr	r3, [pc, #540]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a86      	ldr	r2, [pc, #536]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	e02e      	b.n	8007b58 <HAL_RCC_OscConfig+0xd4>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10c      	bne.n	8007b1c <HAL_RCC_OscConfig+0x98>
 8007b02:	4b82      	ldr	r3, [pc, #520]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a81      	ldr	r2, [pc, #516]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4b7f      	ldr	r3, [pc, #508]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a7e      	ldr	r2, [pc, #504]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e01d      	b.n	8007b58 <HAL_RCC_OscConfig+0xd4>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b24:	d10c      	bne.n	8007b40 <HAL_RCC_OscConfig+0xbc>
 8007b26:	4b79      	ldr	r3, [pc, #484]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a78      	ldr	r2, [pc, #480]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	4b76      	ldr	r3, [pc, #472]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a75      	ldr	r2, [pc, #468]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e00b      	b.n	8007b58 <HAL_RCC_OscConfig+0xd4>
 8007b40:	4b72      	ldr	r3, [pc, #456]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a71      	ldr	r2, [pc, #452]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	4b6f      	ldr	r3, [pc, #444]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6e      	ldr	r2, [pc, #440]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d013      	beq.n	8007b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fb fb96 	bl	8003290 <HAL_GetTick>
 8007b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b68:	f7fb fb92 	bl	8003290 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e38d      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b7a:	4b64      	ldr	r3, [pc, #400]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0xe4>
 8007b86:	e014      	b.n	8007bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fb fb82 	bl	8003290 <HAL_GetTick>
 8007b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b90:	f7fb fb7e 	bl	8003290 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b64      	cmp	r3, #100	; 0x64
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e379      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ba2:	4b5a      	ldr	r3, [pc, #360]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x10c>
 8007bae:	e000      	b.n	8007bb2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80ae 	beq.w	8007d1c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bc0:	4b52      	ldr	r3, [pc, #328]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bca:	4b50      	ldr	r3, [pc, #320]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_RCC_OscConfig+0x162>
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	2b18      	cmp	r3, #24
 8007bda:	d13a      	bne.n	8007c52 <HAL_RCC_OscConfig+0x1ce>
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d135      	bne.n	8007c52 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be6:	4b49      	ldr	r3, [pc, #292]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_RCC_OscConfig+0x17a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e34b      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bfe:	f7fb fb53 	bl	80032a8 <HAL_GetREVID>
 8007c02:	4603      	mov	r3, r0
 8007c04:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d817      	bhi.n	8007c3c <HAL_RCC_OscConfig+0x1b8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d108      	bne.n	8007c26 <HAL_RCC_OscConfig+0x1a2>
 8007c14:	4b3d      	ldr	r3, [pc, #244]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c1c:	4a3b      	ldr	r2, [pc, #236]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c22:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c24:	e07a      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	031b      	lsls	r3, r3, #12
 8007c34:	4935      	ldr	r1, [pc, #212]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c3a:	e06f      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3c:	4b33      	ldr	r3, [pc, #204]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	4930      	ldr	r1, [pc, #192]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c50:	e064      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d045      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c5a:	4b2c      	ldr	r3, [pc, #176]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 0219 	bic.w	r2, r3, #25
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4929      	ldr	r1, [pc, #164]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6c:	f7fb fb10 	bl	8003290 <HAL_GetTick>
 8007c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c72:	e008      	b.n	8007c86 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c74:	f7fb fb0c 	bl	8003290 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e307      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c86:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f0      	beq.n	8007c74 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c92:	f7fb fb09 	bl	80032a8 <HAL_GetREVID>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d817      	bhi.n	8007cd0 <HAL_RCC_OscConfig+0x24c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b40      	cmp	r3, #64	; 0x40
 8007ca6:	d108      	bne.n	8007cba <HAL_RCC_OscConfig+0x236>
 8007ca8:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cb0:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb6:	6053      	str	r3, [r2, #4]
 8007cb8:	e030      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
 8007cba:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	031b      	lsls	r3, r3, #12
 8007cc8:	4910      	ldr	r1, [pc, #64]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	604b      	str	r3, [r1, #4]
 8007cce:	e025      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	061b      	lsls	r3, r3, #24
 8007cde:	490b      	ldr	r1, [pc, #44]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	604b      	str	r3, [r1, #4]
 8007ce4:	e01a      	b.n	8007d1c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a08      	ldr	r2, [pc, #32]	; (8007d0c <HAL_RCC_OscConfig+0x288>)
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf2:	f7fb facd 	bl	8003290 <HAL_GetTick>
 8007cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cf8:	e00a      	b.n	8007d10 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cfa:	f7fb fac9 	bl	8003290 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d903      	bls.n	8007d10 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e2c4      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
 8007d0c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d10:	4ba4      	ldr	r3, [pc, #656]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1ee      	bne.n	8007cfa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80a9 	beq.w	8007e7c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d2a:	4b9e      	ldr	r3, [pc, #632]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d34:	4b9b      	ldr	r3, [pc, #620]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d007      	beq.n	8007d50 <HAL_RCC_OscConfig+0x2cc>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b18      	cmp	r3, #24
 8007d44:	d13a      	bne.n	8007dbc <HAL_RCC_OscConfig+0x338>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d135      	bne.n	8007dbc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d50:	4b94      	ldr	r3, [pc, #592]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_RCC_OscConfig+0x2e4>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	2b80      	cmp	r3, #128	; 0x80
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e296      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d68:	f7fb fa9e 	bl	80032a8 <HAL_GetREVID>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d817      	bhi.n	8007da6 <HAL_RCC_OscConfig+0x322>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d108      	bne.n	8007d90 <HAL_RCC_OscConfig+0x30c>
 8007d7e:	4b89      	ldr	r3, [pc, #548]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d86:	4a87      	ldr	r2, [pc, #540]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d8e:	e075      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d90:	4b84      	ldr	r3, [pc, #528]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	069b      	lsls	r3, r3, #26
 8007d9e:	4981      	ldr	r1, [pc, #516]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007da4:	e06a      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007da6:	4b7f      	ldr	r3, [pc, #508]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	061b      	lsls	r3, r3, #24
 8007db4:	497b      	ldr	r1, [pc, #492]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dba:	e05f      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d042      	beq.n	8007e4a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007dc4:	4b77      	ldr	r3, [pc, #476]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a76      	ldr	r2, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fb fa5e 	bl	8003290 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007dd8:	f7fb fa5a 	bl	8003290 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e255      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dea:	4b6e      	ldr	r3, [pc, #440]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007df6:	f7fb fa57 	bl	80032a8 <HAL_GetREVID>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d817      	bhi.n	8007e34 <HAL_RCC_OscConfig+0x3b0>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d108      	bne.n	8007e1e <HAL_RCC_OscConfig+0x39a>
 8007e0c:	4b65      	ldr	r3, [pc, #404]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e14:	4a63      	ldr	r2, [pc, #396]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e1a:	6053      	str	r3, [r2, #4]
 8007e1c:	e02e      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
 8007e1e:	4b61      	ldr	r3, [pc, #388]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	069b      	lsls	r3, r3, #26
 8007e2c:	495d      	ldr	r1, [pc, #372]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]
 8007e32:	e023      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
 8007e34:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	4958      	ldr	r1, [pc, #352]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60cb      	str	r3, [r1, #12]
 8007e48:	e018      	b.n	8007e7c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e4a:	4b56      	ldr	r3, [pc, #344]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a55      	ldr	r2, [pc, #340]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e56:	f7fb fa1b 	bl	8003290 <HAL_GetTick>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e5e:	f7fb fa17 	bl	8003290 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e212      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e70:	4b4c      	ldr	r3, [pc, #304]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f0      	bne.n	8007e5e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d036      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d019      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e90:	4b44      	ldr	r3, [pc, #272]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e94:	4a43      	ldr	r2, [pc, #268]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9c:	f7fb f9f8 	bl	8003290 <HAL_GetTick>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea4:	f7fb f9f4 	bl	8003290 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e1ef      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007eb6:	4b3b      	ldr	r3, [pc, #236]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x420>
 8007ec2:	e018      	b.n	8007ef6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec4:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec8:	4a36      	ldr	r2, [pc, #216]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed0:	f7fb f9de 	bl	8003290 <HAL_GetTick>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed8:	f7fb f9da 	bl	8003290 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e1d5      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d036      	beq.n	8007f70 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d019      	beq.n	8007f3e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f0a:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a25      	ldr	r2, [pc, #148]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f16:	f7fb f9bb 	bl	8003290 <HAL_GetTick>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f1e:	f7fb f9b7 	bl	8003290 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e1b2      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <HAL_RCC_OscConfig+0x49a>
 8007f3c:	e018      	b.n	8007f70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f3e:	4b19      	ldr	r3, [pc, #100]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f4a:	f7fb f9a1 	bl	8003290 <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f52:	f7fb f99d 	bl	8003290 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e198      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <HAL_RCC_OscConfig+0x520>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1f0      	bne.n	8007f52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8085 	beq.w	8008088 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <HAL_RCC_OscConfig+0x524>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <HAL_RCC_OscConfig+0x524>)
 8007f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f8a:	f7fb f981 	bl	8003290 <HAL_GetTick>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f90:	e00c      	b.n	8007fac <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f92:	f7fb f97d 	bl	8003290 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b64      	cmp	r3, #100	; 0x64
 8007f9e:	d905      	bls.n	8007fac <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e178      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fac:	4b96      	ldr	r3, [pc, #600]	; (8008208 <HAL_RCC_OscConfig+0x784>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0ec      	beq.n	8007f92 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d106      	bne.n	8007fce <HAL_RCC_OscConfig+0x54a>
 8007fc0:	4b92      	ldr	r3, [pc, #584]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	4a91      	ldr	r2, [pc, #580]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fc6:	f043 0301 	orr.w	r3, r3, #1
 8007fca:	6713      	str	r3, [r2, #112]	; 0x70
 8007fcc:	e02d      	b.n	800802a <HAL_RCC_OscConfig+0x5a6>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x56c>
 8007fd6:	4b8d      	ldr	r3, [pc, #564]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	4a8c      	ldr	r2, [pc, #560]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe2:	4b8a      	ldr	r3, [pc, #552]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	4a89      	ldr	r2, [pc, #548]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	6713      	str	r3, [r2, #112]	; 0x70
 8007fee:	e01c      	b.n	800802a <HAL_RCC_OscConfig+0x5a6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	d10c      	bne.n	8008012 <HAL_RCC_OscConfig+0x58e>
 8007ff8:	4b84      	ldr	r3, [pc, #528]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	4a83      	ldr	r2, [pc, #524]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	6713      	str	r3, [r2, #112]	; 0x70
 8008004:	4b81      	ldr	r3, [pc, #516]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008008:	4a80      	ldr	r2, [pc, #512]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6713      	str	r3, [r2, #112]	; 0x70
 8008010:	e00b      	b.n	800802a <HAL_RCC_OscConfig+0x5a6>
 8008012:	4b7e      	ldr	r3, [pc, #504]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4a7d      	ldr	r2, [pc, #500]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	6713      	str	r3, [r2, #112]	; 0x70
 800801e:	4b7b      	ldr	r3, [pc, #492]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	4a7a      	ldr	r2, [pc, #488]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008024:	f023 0304 	bic.w	r3, r3, #4
 8008028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d015      	beq.n	800805e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008032:	f7fb f92d 	bl	8003290 <HAL_GetTick>
 8008036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008038:	e00a      	b.n	8008050 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803a:	f7fb f929 	bl	8003290 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f241 3288 	movw	r2, #5000	; 0x1388
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e122      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008050:	4b6e      	ldr	r3, [pc, #440]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0ee      	beq.n	800803a <HAL_RCC_OscConfig+0x5b6>
 800805c:	e014      	b.n	8008088 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805e:	f7fb f917 	bl	8003290 <HAL_GetTick>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008064:	e00a      	b.n	800807c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008066:	f7fb f913 	bl	8003290 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f241 3288 	movw	r2, #5000	; 0x1388
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e10c      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800807c:	4b63      	ldr	r3, [pc, #396]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800807e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1ee      	bne.n	8008066 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8101 	beq.w	8008294 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008092:	4b5e      	ldr	r3, [pc, #376]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800809a:	2b18      	cmp	r3, #24
 800809c:	f000 80bc 	beq.w	8008218 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f040 8095 	bne.w	80081d4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080aa:	4b58      	ldr	r3, [pc, #352]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a57      	ldr	r2, [pc, #348]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80080b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b6:	f7fb f8eb 	bl	8003290 <HAL_GetTick>
 80080ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080be:	f7fb f8e7 	bl	8003290 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0e2      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d0:	4b4e      	ldr	r3, [pc, #312]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f0      	bne.n	80080be <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080dc:	4b4b      	ldr	r3, [pc, #300]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80080de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080e0:	4b4b      	ldr	r3, [pc, #300]	; (8008210 <HAL_RCC_OscConfig+0x78c>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080ec:	0112      	lsls	r2, r2, #4
 80080ee:	430a      	orrs	r2, r1
 80080f0:	4946      	ldr	r1, [pc, #280]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	628b      	str	r3, [r1, #40]	; 0x28
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	3b01      	subs	r3, #1
 80080fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	3b01      	subs	r3, #1
 8008106:	025b      	lsls	r3, r3, #9
 8008108:	b29b      	uxth	r3, r3
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	3b01      	subs	r3, #1
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	3b01      	subs	r3, #1
 8008120:	061b      	lsls	r3, r3, #24
 8008122:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008126:	4939      	ldr	r1, [pc, #228]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008128:	4313      	orrs	r3, r2
 800812a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800812c:	4b37      	ldr	r3, [pc, #220]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	4a36      	ldr	r2, [pc, #216]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008132:	f023 0301 	bic.w	r3, r3, #1
 8008136:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008138:	4b34      	ldr	r3, [pc, #208]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800813a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813c:	4b35      	ldr	r3, [pc, #212]	; (8008214 <HAL_RCC_OscConfig+0x790>)
 800813e:	4013      	ands	r3, r2
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008144:	00d2      	lsls	r2, r2, #3
 8008146:	4931      	ldr	r1, [pc, #196]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008148:	4313      	orrs	r3, r2
 800814a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800814c:	4b2f      	ldr	r3, [pc, #188]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f023 020c 	bic.w	r2, r3, #12
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	492c      	ldr	r1, [pc, #176]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800815a:	4313      	orrs	r3, r2
 800815c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800815e:	4b2b      	ldr	r3, [pc, #172]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	f023 0202 	bic.w	r2, r3, #2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816a:	4928      	ldr	r1, [pc, #160]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800816c:	4313      	orrs	r3, r2
 800816e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008170:	4b26      	ldr	r3, [pc, #152]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	4a25      	ldr	r2, [pc, #148]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800817a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	4a22      	ldr	r2, [pc, #136]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008188:	4b20      	ldr	r3, [pc, #128]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	4a1f      	ldr	r2, [pc, #124]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800818e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008194:	4b1d      	ldr	r3, [pc, #116]	; (800820c <HAL_RCC_OscConfig+0x788>)
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_RCC_OscConfig+0x788>)
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ac:	f7fb f870 	bl	8003290 <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b4:	f7fb f86c 	bl	8003290 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e067      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0f0      	beq.n	80081b4 <HAL_RCC_OscConfig+0x730>
 80081d2:	e05f      	b.n	8008294 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fb f856 	bl	8003290 <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081e8:	f7fb f852 	bl	8003290 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e04d      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081fa:	4b04      	ldr	r3, [pc, #16]	; (800820c <HAL_RCC_OscConfig+0x788>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x764>
 8008206:	e045      	b.n	8008294 <HAL_RCC_OscConfig+0x810>
 8008208:	58024800 	.word	0x58024800
 800820c:	58024400 	.word	0x58024400
 8008210:	fffffc0c 	.word	0xfffffc0c
 8008214:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008218:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <HAL_RCC_OscConfig+0x81c>)
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800821e:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <HAL_RCC_OscConfig+0x81c>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b01      	cmp	r3, #1
 800822a:	d031      	beq.n	8008290 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f003 0203 	and.w	r2, r3, #3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008236:	429a      	cmp	r2, r3
 8008238:	d12a      	bne.n	8008290 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008246:	429a      	cmp	r2, r3
 8008248:	d122      	bne.n	8008290 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008256:	429a      	cmp	r2, r3
 8008258:	d11a      	bne.n	8008290 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	0a5b      	lsrs	r3, r3, #9
 800825e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008268:	429a      	cmp	r2, r3
 800826a:	d111      	bne.n	8008290 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800827a:	429a      	cmp	r2, r3
 800827c:	d108      	bne.n	8008290 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	0e1b      	lsrs	r3, r3, #24
 8008282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800828c:	429a      	cmp	r2, r3
 800828e:	d001      	beq.n	8008294 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	; 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	58024400 	.word	0x58024400

080082a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e19c      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082b8:	4b8a      	ldr	r3, [pc, #552]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d910      	bls.n	80082e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b87      	ldr	r3, [pc, #540]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 020f 	bic.w	r2, r3, #15
 80082ce:	4985      	ldr	r1, [pc, #532]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d6:	4b83      	ldr	r3, [pc, #524]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d001      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e184      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	4b7b      	ldr	r3, [pc, #492]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008300:	429a      	cmp	r2, r3
 8008302:	d908      	bls.n	8008316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008304:	4b78      	ldr	r3, [pc, #480]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4975      	ldr	r1, [pc, #468]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008312:	4313      	orrs	r3, r2
 8008314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	4b70      	ldr	r3, [pc, #448]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800832e:	429a      	cmp	r2, r3
 8008330:	d908      	bls.n	8008344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008332:	4b6d      	ldr	r3, [pc, #436]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	496a      	ldr	r1, [pc, #424]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008340:	4313      	orrs	r3, r2
 8008342:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d010      	beq.n	8008372 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	699a      	ldr	r2, [r3, #24]
 8008354:	4b64      	ldr	r3, [pc, #400]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800835c:	429a      	cmp	r2, r3
 800835e:	d908      	bls.n	8008372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008360:	4b61      	ldr	r3, [pc, #388]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	495e      	ldr	r1, [pc, #376]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800836e:	4313      	orrs	r3, r2
 8008370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69da      	ldr	r2, [r3, #28]
 8008382:	4b59      	ldr	r3, [pc, #356]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800838a:	429a      	cmp	r2, r3
 800838c:	d908      	bls.n	80083a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800838e:	4b56      	ldr	r3, [pc, #344]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	4953      	ldr	r1, [pc, #332]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800839c:	4313      	orrs	r3, r2
 800839e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d908      	bls.n	80083ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083bc:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f023 020f 	bic.w	r2, r3, #15
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	4947      	ldr	r1, [pc, #284]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d055      	beq.n	8008486 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083da:	4b43      	ldr	r3, [pc, #268]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	4940      	ldr	r1, [pc, #256]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083f4:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d121      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0f6      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b03      	cmp	r3, #3
 800840a:	d107      	bne.n	800841c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800840c:	4b36      	ldr	r3, [pc, #216]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d115      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e0ea      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d107      	bne.n	8008434 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008424:	4b30      	ldr	r3, [pc, #192]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e0de      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008434:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e0d6      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008444:	4b28      	ldr	r3, [pc, #160]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f023 0207 	bic.w	r2, r3, #7
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4925      	ldr	r1, [pc, #148]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008452:	4313      	orrs	r3, r2
 8008454:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008456:	f7fa ff1b 	bl	8003290 <HAL_GetTick>
 800845a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845c:	e00a      	b.n	8008474 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800845e:	f7fa ff17 	bl	8003290 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f241 3288 	movw	r2, #5000	; 0x1388
 800846c:	4293      	cmp	r3, r2
 800846e:	d901      	bls.n	8008474 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e0be      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	429a      	cmp	r2, r3
 8008484:	d1eb      	bne.n	800845e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d010      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	429a      	cmp	r2, r3
 80084a0:	d208      	bcs.n	80084b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f023 020f 	bic.w	r2, r3, #15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	490e      	ldr	r1, [pc, #56]	; (80084e8 <HAL_RCC_ClockConfig+0x244>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d214      	bcs.n	80084ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f023 020f 	bic.w	r2, r3, #15
 80084ca:	4906      	ldr	r1, [pc, #24]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <HAL_RCC_ClockConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d005      	beq.n	80084ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e086      	b.n	80085f2 <HAL_RCC_ClockConfig+0x34e>
 80084e4:	52002000 	.word	0x52002000
 80084e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d010      	beq.n	800851a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	4b3f      	ldr	r3, [pc, #252]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008504:	429a      	cmp	r2, r3
 8008506:	d208      	bcs.n	800851a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008508:	4b3c      	ldr	r3, [pc, #240]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	4939      	ldr	r1, [pc, #228]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008516:	4313      	orrs	r3, r2
 8008518:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d010      	beq.n	8008548 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	4b34      	ldr	r3, [pc, #208]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008532:	429a      	cmp	r2, r3
 8008534:	d208      	bcs.n	8008548 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008536:	4b31      	ldr	r3, [pc, #196]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	492e      	ldr	r1, [pc, #184]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008544:	4313      	orrs	r3, r2
 8008546:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699a      	ldr	r2, [r3, #24]
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008560:	429a      	cmp	r2, r3
 8008562:	d208      	bcs.n	8008576 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	4922      	ldr	r1, [pc, #136]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008572:	4313      	orrs	r3, r2
 8008574:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800858e:	429a      	cmp	r2, r3
 8008590:	d208      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008592:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	4917      	ldr	r1, [pc, #92]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80085a4:	f000 f89e 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	4912      	ldr	r1, [pc, #72]	; (8008600 <HAL_RCC_ClockConfig+0x35c>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	fa22 f303 	lsr.w	r3, r2, r3
 80085c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <HAL_RCC_ClockConfig+0x358>)
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <HAL_RCC_ClockConfig+0x35c>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	4a0a      	ldr	r2, [pc, #40]	; (8008604 <HAL_RCC_ClockConfig+0x360>)
 80085da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085dc:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <HAL_RCC_ClockConfig+0x364>)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_RCC_ClockConfig+0x368>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fa fc02 	bl	8002df0 <HAL_InitTick>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	080121e0 	.word	0x080121e0
 8008604:	24000004 	.word	0x24000004
 8008608:	24000000 	.word	0x24000000
 800860c:	24000008 	.word	0x24000008

08008610 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08c      	sub	sp, #48	; 0x30
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12a      	bne.n	8008678 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008622:	4b2d      	ldr	r3, [pc, #180]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 8008624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008628:	4a2b      	ldr	r2, [pc, #172]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008632:	4b29      	ldr	r3, [pc, #164]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 8008634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008646:	2302      	movs	r3, #2
 8008648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800864a:	2303      	movs	r3, #3
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864e:	2300      	movs	r3, #0
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008652:	2300      	movs	r3, #0
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008656:	f107 031c 	add.w	r3, r7, #28
 800865a:	4619      	mov	r1, r3
 800865c:	481f      	ldr	r0, [pc, #124]	; (80086dc <HAL_RCC_MCOConfig+0xcc>)
 800865e:	f7fe ffd1 	bl	8007604 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	430b      	orrs	r3, r1
 8008670:	4919      	ldr	r1, [pc, #100]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 8008672:	4313      	orrs	r3, r2
 8008674:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008676:	e02a      	b.n	80086ce <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 800867a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800867e:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 8008680:	f043 0304 	orr.w	r3, r3, #4
 8008684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008688:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 800868a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800869a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869c:	2302      	movs	r3, #2
 800869e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a0:	2303      	movs	r3, #3
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80086a8:	2300      	movs	r3, #0
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80086ac:	f107 031c 	add.w	r3, r7, #28
 80086b0:	4619      	mov	r1, r3
 80086b2:	480b      	ldr	r0, [pc, #44]	; (80086e0 <HAL_RCC_MCOConfig+0xd0>)
 80086b4:	f7fe ffa6 	bl	8007604 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	01d9      	lsls	r1, r3, #7
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	430b      	orrs	r3, r1
 80086c8:	4903      	ldr	r1, [pc, #12]	; (80086d8 <HAL_RCC_MCOConfig+0xc8>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	610b      	str	r3, [r1, #16]
}
 80086ce:	bf00      	nop
 80086d0:	3730      	adds	r7, #48	; 0x30
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58024400 	.word	0x58024400
 80086dc:	58020000 	.word	0x58020000
 80086e0:	58020800 	.word	0x58020800

080086e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086ea:	4bb3      	ldr	r3, [pc, #716]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f2:	2b18      	cmp	r3, #24
 80086f4:	f200 8155 	bhi.w	80089a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008765 	.word	0x08008765
 8008704:	080089a3 	.word	0x080089a3
 8008708:	080089a3 	.word	0x080089a3
 800870c:	080089a3 	.word	0x080089a3
 8008710:	080089a3 	.word	0x080089a3
 8008714:	080089a3 	.word	0x080089a3
 8008718:	080089a3 	.word	0x080089a3
 800871c:	080089a3 	.word	0x080089a3
 8008720:	0800878b 	.word	0x0800878b
 8008724:	080089a3 	.word	0x080089a3
 8008728:	080089a3 	.word	0x080089a3
 800872c:	080089a3 	.word	0x080089a3
 8008730:	080089a3 	.word	0x080089a3
 8008734:	080089a3 	.word	0x080089a3
 8008738:	080089a3 	.word	0x080089a3
 800873c:	080089a3 	.word	0x080089a3
 8008740:	08008791 	.word	0x08008791
 8008744:	080089a3 	.word	0x080089a3
 8008748:	080089a3 	.word	0x080089a3
 800874c:	080089a3 	.word	0x080089a3
 8008750:	080089a3 	.word	0x080089a3
 8008754:	080089a3 	.word	0x080089a3
 8008758:	080089a3 	.word	0x080089a3
 800875c:	080089a3 	.word	0x080089a3
 8008760:	08008797 	.word	0x08008797
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008764:	4b94      	ldr	r3, [pc, #592]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008770:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a90      	ldr	r2, [pc, #576]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008782:	e111      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008784:	4b8d      	ldr	r3, [pc, #564]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008786:	61bb      	str	r3, [r7, #24]
    break;
 8008788:	e10e      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800878a:	4b8d      	ldr	r3, [pc, #564]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800878c:	61bb      	str	r3, [r7, #24]
    break;
 800878e:	e10b      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008790:	4b8c      	ldr	r3, [pc, #560]	; (80089c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008792:	61bb      	str	r3, [r7, #24]
    break;
 8008794:	e108      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008796:	4b88      	ldr	r3, [pc, #544]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087a0:	4b85      	ldr	r3, [pc, #532]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087ac:	4b82      	ldr	r3, [pc, #520]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087b6:	4b80      	ldr	r3, [pc, #512]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 80e1 	beq.w	800899c <HAL_RCC_GetSysClockFreq+0x2b8>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	f000 8083 	beq.w	80088e8 <HAL_RCC_GetSysClockFreq+0x204>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	f200 80a1 	bhi.w	800892c <HAL_RCC_GetSysClockFreq+0x248>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0x114>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d056      	beq.n	80088a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087f6:	e099      	b.n	800892c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f8:	4b6f      	ldr	r3, [pc, #444]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02d      	beq.n	8008860 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008804:	4b6c      	ldr	r3, [pc, #432]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	08db      	lsrs	r3, r3, #3
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	4a6b      	ldr	r2, [pc, #428]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008810:	fa22 f303 	lsr.w	r3, r2, r3
 8008814:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882e:	4b62      	ldr	r3, [pc, #392]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008842:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800885e:	e087      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800886e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008872:	4b51      	ldr	r3, [pc, #324]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008882:	ed97 6a02 	vldr	s12, [r7, #8]
 8008886:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800888a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088a2:	e065      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b6:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e6:	e043      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890a:	ed97 6a02 	vldr	s12, [r7, #8]
 800890e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800892a:	e021      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008936:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800893a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893e:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008952:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	0a5b      	lsrs	r3, r3, #9
 8008976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897a:	3301      	adds	r3, #1
 800897c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008988:	edd7 6a07 	vldr	s13, [r7, #28]
 800898c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008994:	ee17 3a90 	vmov	r3, s15
 8008998:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800899a:	e005      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
    break;
 80089a0:	e002      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80089a2:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089a4:	61bb      	str	r3, [r7, #24]
    break;
 80089a6:	bf00      	nop
  }

  return sysclockfreq;
 80089a8:	69bb      	ldr	r3, [r7, #24]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3724      	adds	r7, #36	; 0x24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	03d09000 	.word	0x03d09000
 80089c0:	003d0900 	.word	0x003d0900
 80089c4:	01e84800 	.word	0x01e84800
 80089c8:	46000000 	.word	0x46000000
 80089cc:	4c742400 	.word	0x4c742400
 80089d0:	4a742400 	.word	0x4a742400
 80089d4:	4bf42400 	.word	0x4bf42400

080089d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089de:	f7ff fe81 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	490f      	ldr	r1, [pc, #60]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x54>)
 80089f0:	5ccb      	ldrb	r3, [r1, r3]
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	fa22 f303 	lsr.w	r3, r2, r3
 80089fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008a06:	5cd3      	ldrb	r3, [r2, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a12:	4a07      	ldr	r2, [pc, #28]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a16:	4a07      	ldr	r2, [pc, #28]	; (8008a34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a1c:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	080121e0 	.word	0x080121e0
 8008a30:	24000004 	.word	0x24000004
 8008a34:	24000000 	.word	0x24000000

08008a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a3c:	f7ff ffcc 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8008a40:	4602      	mov	r2, r0
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	4904      	ldr	r1, [pc, #16]	; (8008a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a4e:	5ccb      	ldrb	r3, [r1, r3]
 8008a50:	f003 031f 	and.w	r3, r3, #31
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	080121e0 	.word	0x080121e0

08008a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a68:	f7ff ffb6 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	4904      	ldr	r1, [pc, #16]	; (8008a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a7a:	5ccb      	ldrb	r3, [r1, r3]
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	080121e0 	.word	0x080121e0

08008a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	223f      	movs	r2, #63	; 0x3f
 8008a9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008aa0:	4b1a      	ldr	r3, [pc, #104]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f003 0207 	and.w	r2, r3, #7
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008aac:	4b17      	ldr	r3, [pc, #92]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008ab8:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008ac4:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ad0:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ae8:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <HAL_RCC_GetClockConfig+0x7c>)
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <HAL_RCC_GetClockConfig+0x80>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	601a      	str	r2, [r3, #0]
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	52002000 	.word	0x52002000

08008b14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b20:	2300      	movs	r3, #0
 8008b22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d03f      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b38:	d02a      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b3e:	d824      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b44:	d018      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b4a:	d81e      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b54:	d007      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b56:	e018      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b58:	4bab      	ldr	r3, [pc, #684]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4aaa      	ldr	r2, [pc, #680]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b64:	e015      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fff3 	bl	800ab58 <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b76:	e00c      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3324      	adds	r3, #36	; 0x24
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f002 f89c 	bl	800acbc <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b98:	4b9b      	ldr	r3, [pc, #620]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba4:	4998      	ldr	r1, [pc, #608]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8008baa:	e001      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d03d      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d826      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008bef 	.word	0x08008bef
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c19 	.word	0x08008c19
 8008bdc:	08008c19 	.word	0x08008c19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be0:	4b89      	ldr	r3, [pc, #548]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a88      	ldr	r2, [pc, #544]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bec:	e015      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 ffaf 	bl	800ab58 <RCCEx_PLL2_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bfe:	e00c      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 f858 	bl	800acbc <RCCEx_PLL3_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
      break;
 8008c16:	e000      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c20:	4b79      	ldr	r3, [pc, #484]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c24:	f023 0207 	bic.w	r2, r3, #7
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2c:	4976      	ldr	r1, [pc, #472]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	650b      	str	r3, [r1, #80]	; 0x50
 8008c32:	e001      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d042      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	d02b      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c52:	d825      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c54:	2bc0      	cmp	r3, #192	; 0xc0
 8008c56:	d028      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c58:	2bc0      	cmp	r3, #192	; 0xc0
 8008c5a:	d821      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c5c:	2b80      	cmp	r3, #128	; 0x80
 8008c5e:	d016      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d81d      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008c68:	2b40      	cmp	r3, #64	; 0x40
 8008c6a:	d007      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008c6c:	e018      	b.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6e:	4b66      	ldr	r3, [pc, #408]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	4a65      	ldr	r2, [pc, #404]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c7a:	e017      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 ff68 	bl	800ab58 <RCCEx_PLL2_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c8c:	e00e      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3324      	adds	r3, #36	; 0x24
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f002 f811 	bl	800acbc <RCCEx_PLL3_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c9e:	e005      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cb2:	4b55      	ldr	r3, [pc, #340]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	4952      	ldr	r1, [pc, #328]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	650b      	str	r3, [r1, #80]	; 0x50
 8008cc4:	e001      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d049      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce0:	d030      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce6:	d82a      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cec:	d02c      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008cee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cf2:	d824      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf8:	d018      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cfe:	d81e      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d08:	d007      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d0a:	e018      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d0c:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a3d      	ldr	r2, [pc, #244]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d18:	e017      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 ff19 	bl	800ab58 <RCCEx_PLL2_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d2a:	e00e      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3324      	adds	r3, #36	; 0x24
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 ffc2 	bl	800acbc <RCCEx_PLL3_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
      break;
 8008d42:	e002      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d50:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d5e:	492a      	ldr	r1, [pc, #168]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	658b      	str	r3, [r1, #88]	; 0x58
 8008d64:	e001      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d04c      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d80:	d030      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d86:	d82a      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d8c:	d02c      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008d8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d92:	d824      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d98:	d018      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d9e:	d81e      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008da8:	d007      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008daa:	e018      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dac:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008db8:	e017      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 fec9 	bl	800ab58 <RCCEx_PLL2_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dca:	e00e      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3324      	adds	r3, #36	; 0x24
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 ff72 	bl	800acbc <RCCEx_PLL3_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ddc:	e005      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	75fb      	strb	r3, [r7, #23]
      break;
 8008de2:	e002      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008de4:	bf00      	nop
 8008de6:	e000      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10d      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dfe:	4902      	ldr	r1, [pc, #8]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	658b      	str	r3, [r1, #88]	; 0x58
 8008e04:	e004      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d032      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e20:	2b30      	cmp	r3, #48	; 0x30
 8008e22:	d01c      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e24:	2b30      	cmp	r3, #48	; 0x30
 8008e26:	d817      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	d00c      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	d813      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d016      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d10f      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e38:	4baf      	ldr	r3, [pc, #700]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4aae      	ldr	r2, [pc, #696]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e44:	e00e      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	2102      	movs	r1, #2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 fe83 	bl	800ab58 <RCCEx_PLL2_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e56:	e005      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5c:	e002      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e6a:	4ba3      	ldr	r3, [pc, #652]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e76:	49a0      	ldr	r1, [pc, #640]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e7c:	e001      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d047      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e96:	d030      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e9c:	d82a      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ea2:	d02c      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008ea4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ea8:	d824      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eae:	d018      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb4:	d81e      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ebe:	d007      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008ec0:	e018      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4a8c      	ldr	r2, [pc, #560]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ece:	e017      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fe3e 	bl	800ab58 <RCCEx_PLL2_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ee0:	e00e      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 fee7 	bl	800acbc <RCCEx_PLL3_Config>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ef2:	e005      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008efa:	bf00      	nop
 8008efc:	e000      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f06:	4b7c      	ldr	r3, [pc, #496]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f12:	4979      	ldr	r1, [pc, #484]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	650b      	str	r3, [r1, #80]	; 0x50
 8008f18:	e001      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d049      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f32:	d02e      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f38:	d828      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f3e:	d02a      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f44:	d822      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f4a:	d026      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f50:	d81c      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f56:	d010      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f5c:	d816      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01d      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f66:	d111      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fdf2 	bl	800ab58 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f78:	e012      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3324      	adds	r3, #36	; 0x24
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 fe9b 	bl	800acbc <RCCEx_PLL3_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f8a:	e009      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f90:	e006      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f92:	bf00      	nop
 8008f94:	e004      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f96:	bf00      	nop
 8008f98:	e002      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f9a:	bf00      	nop
 8008f9c:	e000      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fa6:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb2:	4951      	ldr	r1, [pc, #324]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	650b      	str	r3, [r1, #80]	; 0x50
 8008fb8:	e001      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d04b      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fd4:	d02e      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fda:	d828      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d02a      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe6:	d822      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fec:	d026      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ff2:	d81c      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d010      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffe:	d816      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01d      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009008:	d111      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2101      	movs	r1, #1
 8009010:	4618      	mov	r0, r3
 8009012:	f001 fda1 	bl	800ab58 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800901a:	e012      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	2101      	movs	r1, #1
 8009022:	4618      	mov	r0, r3
 8009024:	f001 fe4a 	bl	800acbc <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800902c:	e009      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
      break;
 8009032:	e006      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009048:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009056:	4928      	ldr	r1, [pc, #160]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009058:	4313      	orrs	r3, r2
 800905a:	658b      	str	r3, [r1, #88]	; 0x58
 800905c:	e001      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02f      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009076:	d00e      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907c:	d814      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d015      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009086:	d10f      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800908e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009094:	e00c      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3304      	adds	r3, #4
 800909a:	2101      	movs	r1, #1
 800909c:	4618      	mov	r0, r3
 800909e:	f001 fd5b 	bl	800ab58 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090a6:	e003      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	75fb      	strb	r3, [r7, #23]
      break;
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80090ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c2:	490d      	ldr	r1, [pc, #52]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	650b      	str	r3, [r1, #80]	; 0x50
 80090c8:	e001      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d033      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d81c      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	08009123 	.word	0x08009123
 80090ec:	080090fd 	.word	0x080090fd
 80090f0:	0800910b 	.word	0x0800910b
 80090f4:	08009123 	.word	0x08009123
 80090f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fc:	4bb8      	ldr	r3, [pc, #736]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	4ab7      	ldr	r2, [pc, #732]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009108:	e00c      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	2102      	movs	r1, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fd21 	bl	800ab58 <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800911a:	e003      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]
      break;
 8009120:	e000      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800912a:	4bad      	ldr	r3, [pc, #692]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800912c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912e:	f023 0203 	bic.w	r2, r3, #3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009136:	49aa      	ldr	r1, [pc, #680]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009138:	4313      	orrs	r3, r2
 800913a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800913c:	e001      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8086 	beq.w	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009150:	4ba4      	ldr	r3, [pc, #656]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4aa3      	ldr	r2, [pc, #652]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800915c:	f7fa f898 	bl	8003290 <HAL_GetTick>
 8009160:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009162:	e009      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009164:	f7fa f894 	bl	8003290 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b64      	cmp	r3, #100	; 0x64
 8009170:	d902      	bls.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	75fb      	strb	r3, [r7, #23]
        break;
 8009176:	e005      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009178:	4b9a      	ldr	r3, [pc, #616]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0ef      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d166      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800918a:	4b95      	ldr	r3, [pc, #596]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800918c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009194:	4053      	eors	r3, r2
 8009196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d013      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800919e:	4b90      	ldr	r3, [pc, #576]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091a8:	4b8d      	ldr	r3, [pc, #564]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ac:	4a8c      	ldr	r2, [pc, #560]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091b4:	4b8a      	ldr	r3, [pc, #552]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b8:	4a89      	ldr	r2, [pc, #548]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091c0:	4a87      	ldr	r2, [pc, #540]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d0:	d115      	bne.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7fa f85d 	bl	8003290 <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d8:	e00b      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091da:	f7fa f859 	bl	8003290 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d902      	bls.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
            break;
 80091f0:	e005      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091f2:	4b7b      	ldr	r3, [pc, #492]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0ed      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d126      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800920a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009212:	d10d      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009214:	4b72      	ldr	r3, [pc, #456]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009222:	0919      	lsrs	r1, r3, #4
 8009224:	4b70      	ldr	r3, [pc, #448]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009226:	400b      	ands	r3, r1
 8009228:	496d      	ldr	r1, [pc, #436]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800922a:	4313      	orrs	r3, r2
 800922c:	610b      	str	r3, [r1, #16]
 800922e:	e005      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009230:	4b6b      	ldr	r3, [pc, #428]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4a6a      	ldr	r2, [pc, #424]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009236:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800923a:	6113      	str	r3, [r2, #16]
 800923c:	4b68      	ldr	r3, [pc, #416]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800923e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924a:	4965      	ldr	r1, [pc, #404]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800924c:	4313      	orrs	r3, r2
 800924e:	670b      	str	r3, [r1, #112]	; 0x70
 8009250:	e004      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	75bb      	strb	r3, [r7, #22]
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	d07e      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926c:	2b28      	cmp	r3, #40	; 0x28
 800926e:	d867      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	08009347 	.word	0x08009347
 800927c:	08009341 	.word	0x08009341
 8009280:	08009341 	.word	0x08009341
 8009284:	08009341 	.word	0x08009341
 8009288:	08009341 	.word	0x08009341
 800928c:	08009341 	.word	0x08009341
 8009290:	08009341 	.word	0x08009341
 8009294:	08009341 	.word	0x08009341
 8009298:	0800931d 	.word	0x0800931d
 800929c:	08009341 	.word	0x08009341
 80092a0:	08009341 	.word	0x08009341
 80092a4:	08009341 	.word	0x08009341
 80092a8:	08009341 	.word	0x08009341
 80092ac:	08009341 	.word	0x08009341
 80092b0:	08009341 	.word	0x08009341
 80092b4:	08009341 	.word	0x08009341
 80092b8:	0800932f 	.word	0x0800932f
 80092bc:	08009341 	.word	0x08009341
 80092c0:	08009341 	.word	0x08009341
 80092c4:	08009341 	.word	0x08009341
 80092c8:	08009341 	.word	0x08009341
 80092cc:	08009341 	.word	0x08009341
 80092d0:	08009341 	.word	0x08009341
 80092d4:	08009341 	.word	0x08009341
 80092d8:	08009347 	.word	0x08009347
 80092dc:	08009341 	.word	0x08009341
 80092e0:	08009341 	.word	0x08009341
 80092e4:	08009341 	.word	0x08009341
 80092e8:	08009341 	.word	0x08009341
 80092ec:	08009341 	.word	0x08009341
 80092f0:	08009341 	.word	0x08009341
 80092f4:	08009341 	.word	0x08009341
 80092f8:	08009347 	.word	0x08009347
 80092fc:	08009341 	.word	0x08009341
 8009300:	08009341 	.word	0x08009341
 8009304:	08009341 	.word	0x08009341
 8009308:	08009341 	.word	0x08009341
 800930c:	08009341 	.word	0x08009341
 8009310:	08009341 	.word	0x08009341
 8009314:	08009341 	.word	0x08009341
 8009318:	08009347 	.word	0x08009347
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	2101      	movs	r1, #1
 8009322:	4618      	mov	r0, r3
 8009324:	f001 fc18 	bl	800ab58 <RCCEx_PLL2_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800932c:	e00c      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3324      	adds	r3, #36	; 0x24
 8009332:	2101      	movs	r1, #1
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fcc1 	bl	800acbc <RCCEx_PLL3_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800933e:	e003      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]
      break;
 8009344:	e000      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800934e:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009352:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800935a:	4921      	ldr	r1, [pc, #132]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	654b      	str	r3, [r1, #84]	; 0x54
 8009360:	e001      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d03e      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009376:	2b05      	cmp	r3, #5
 8009378:	d820      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	080093c3 	.word	0x080093c3
 8009384:	08009399 	.word	0x08009399
 8009388:	080093ab 	.word	0x080093ab
 800938c:	080093c3 	.word	0x080093c3
 8009390:	080093c3 	.word	0x080093c3
 8009394:	080093c3 	.word	0x080093c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	2101      	movs	r1, #1
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fbda 	bl	800ab58 <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093a8:	e00c      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3324      	adds	r3, #36	; 0x24
 80093ae:	2101      	movs	r1, #1
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 fc83 	bl	800acbc <RCCEx_PLL3_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093ba:	e003      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e000      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80093c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d110      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ce:	f023 0207 	bic.w	r2, r3, #7
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d6:	4902      	ldr	r1, [pc, #8]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	654b      	str	r3, [r1, #84]	; 0x54
 80093dc:	e008      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
 80093e4:	58024800 	.word	0x58024800
 80093e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d039      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009402:	2b05      	cmp	r3, #5
 8009404:	d820      	bhi.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009406:	a201      	add	r2, pc, #4	; (adr r2, 800940c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	0800944f 	.word	0x0800944f
 8009410:	08009425 	.word	0x08009425
 8009414:	08009437 	.word	0x08009437
 8009418:	0800944f 	.word	0x0800944f
 800941c:	0800944f 	.word	0x0800944f
 8009420:	0800944f 	.word	0x0800944f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3304      	adds	r3, #4
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f001 fb94 	bl	800ab58 <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009434:	e00c      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3324      	adds	r3, #36	; 0x24
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f001 fc3d 	bl	800acbc <RCCEx_PLL3_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009446:	e003      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
      break;
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800944e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009456:	4bb7      	ldr	r3, [pc, #732]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	f023 0207 	bic.w	r2, r3, #7
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009464:	49b3      	ldr	r1, [pc, #716]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009466:	4313      	orrs	r3, r2
 8009468:	658b      	str	r3, [r1, #88]	; 0x58
 800946a:	e001      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d04b      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009486:	d02e      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800948c:	d828      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d02a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d822      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800949a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800949e:	d026      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80094a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094a4:	d81c      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80094a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094aa:	d010      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80094ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b0:	d816      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01d      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80094b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ba:	d111      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fb48 	bl	800ab58 <RCCEx_PLL2_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094cc:	e012      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 fbf1 	bl	800acbc <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094de:	e009      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
      break;
 80094e4:	e006      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094e6:	bf00      	nop
 80094e8:	e004      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094ea:	bf00      	nop
 80094ec:	e002      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fa:	4b8e      	ldr	r3, [pc, #568]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009508:	498a      	ldr	r1, [pc, #552]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800950a:	4313      	orrs	r3, r2
 800950c:	654b      	str	r3, [r1, #84]	; 0x54
 800950e:	e001      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d04b      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800952a:	d02e      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800952c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009530:	d828      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009536:	d02a      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953c:	d822      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800953e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009542:	d026      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009548:	d81c      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800954a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800954e:	d010      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009554:	d816      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01d      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800955a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955e:	d111      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f001 faf6 	bl	800ab58 <RCCEx_PLL2_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009570:	e012      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3324      	adds	r3, #36	; 0x24
 8009576:	2102      	movs	r1, #2
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fb9f 	bl	800acbc <RCCEx_PLL3_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009582:	e009      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
      break;
 8009588:	e006      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800958a:	bf00      	nop
 800958c:	e004      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800958e:	bf00      	nop
 8009590:	e002      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009592:	bf00      	nop
 8009594:	e000      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800959e:	4b65      	ldr	r3, [pc, #404]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095ac:	4961      	ldr	r1, [pc, #388]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	658b      	str	r3, [r1, #88]	; 0x58
 80095b2:	e001      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d04b      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095ce:	d02e      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80095d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095d4:	d828      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095da:	d02a      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80095dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e0:	d822      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095e6:	d026      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80095e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095ec:	d81c      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f2:	d010      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80095f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f8:	d816      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01d      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009602:	d111      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f001 faa4 	bl	800ab58 <RCCEx_PLL2_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009614:	e012      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3324      	adds	r3, #36	; 0x24
 800961a:	2102      	movs	r1, #2
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fb4d 	bl	800acbc <RCCEx_PLL3_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009626:	e009      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
      break;
 800962c:	e006      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800962e:	bf00      	nop
 8009630:	e004      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009632:	bf00      	nop
 8009634:	e002      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009636:	bf00      	nop
 8009638:	e000      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800963a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009642:	4b3c      	ldr	r3, [pc, #240]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009650:	4938      	ldr	r1, [pc, #224]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009652:	4313      	orrs	r3, r2
 8009654:	658b      	str	r3, [r1, #88]	; 0x58
 8009656:	e001      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01a      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009672:	d10a      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3324      	adds	r3, #36	; 0x24
 8009678:	2102      	movs	r1, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fb1e 	bl	800acbc <RCCEx_PLL3_Config>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800968a:	4b2a      	ldr	r3, [pc, #168]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009698:	4926      	ldr	r1, [pc, #152]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800969a:	4313      	orrs	r3, r2
 800969c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d01a      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b4:	d10a      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3324      	adds	r3, #36	; 0x24
 80096ba:	2102      	movs	r1, #2
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fafd 	bl	800acbc <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096cc:	4b19      	ldr	r3, [pc, #100]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096da:	4916      	ldr	r1, [pc, #88]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d036      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f6:	d01f      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80096f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fc:	d817      	bhi.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009706:	d009      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009708:	e011      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3304      	adds	r3, #4
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fa21 	bl	800ab58 <RCCEx_PLL2_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800971a:	e00e      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3324      	adds	r3, #36	; 0x24
 8009720:	2102      	movs	r1, #2
 8009722:	4618      	mov	r0, r3
 8009724:	f001 faca 	bl	800acbc <RCCEx_PLL3_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800972c:	e005      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
      break;
 8009732:	e002      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009734:	58024400 	.word	0x58024400
      break;
 8009738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009740:	4b93      	ldr	r3, [pc, #588]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800974e:	4990      	ldr	r1, [pc, #576]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009750:	4313      	orrs	r3, r2
 8009752:	658b      	str	r3, [r1, #88]	; 0x58
 8009754:	e001      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d033      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009770:	d01c      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009776:	d816      	bhi.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977c:	d003      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800977e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009782:	d007      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009784:	e00f      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009786:	4b82      	ldr	r3, [pc, #520]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a81      	ldr	r2, [pc, #516]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800978c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009792:	e00c      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3324      	adds	r3, #36	; 0x24
 8009798:	2101      	movs	r1, #1
 800979a:	4618      	mov	r0, r3
 800979c:	f001 fa8e 	bl	800acbc <RCCEx_PLL3_Config>
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
      break;
 80097aa:	e000      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80097ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097b4:	4b76      	ldr	r3, [pc, #472]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c2:	4973      	ldr	r1, [pc, #460]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	654b      	str	r3, [r1, #84]	; 0x54
 80097c8:	e001      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d029      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80097e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e6:	d007      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80097e8:	e00f      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ea:	4b69      	ldr	r3, [pc, #420]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	4a68      	ldr	r2, [pc, #416]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097f6:	e00b      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	2102      	movs	r1, #2
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 f9aa 	bl	800ab58 <RCCEx_PLL2_Config>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009808:	e002      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
      break;
 800980e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009816:	4b5e      	ldr	r3, [pc, #376]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009822:	495b      	ldr	r1, [pc, #364]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009828:	e001      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3324      	adds	r3, #36	; 0x24
 800983e:	2102      	movs	r1, #2
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fa3b 	bl	800acbc <RCCEx_PLL3_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d030      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009864:	d017      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800986a:	d811      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800986c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009870:	d013      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009876:	d80b      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d010      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800987c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009880:	d106      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009882:	4b43      	ldr	r3, [pc, #268]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	4a42      	ldr	r2, [pc, #264]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800988e:	e007      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
      break;
 8009894:	e004      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800989e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098a6:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b2:	4937      	ldr	r1, [pc, #220]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	654b      	str	r3, [r1, #84]	; 0x54
 80098b8:	e001      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d008      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098ca:	4b31      	ldr	r3, [pc, #196]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	492e      	ldr	r1, [pc, #184]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098e8:	4b29      	ldr	r3, [pc, #164]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098f6:	4926      	ldr	r1, [pc, #152]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009908:	4b21      	ldr	r3, [pc, #132]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800990a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009914:	491e      	ldr	r1, [pc, #120]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009916:	4313      	orrs	r3, r2
 8009918:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009926:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	4a19      	ldr	r2, [pc, #100]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800992c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009930:	6113      	str	r3, [r2, #16]
 8009932:	4b17      	ldr	r3, [pc, #92]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800993c:	4914      	ldr	r1, [pc, #80]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800993e:	4313      	orrs	r3, r2
 8009940:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	da08      	bge.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800994c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	490e      	ldr	r1, [pc, #56]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009958:	4313      	orrs	r3, r2
 800995a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009968:	4b09      	ldr	r3, [pc, #36]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800996a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009976:	4906      	ldr	r1, [pc, #24]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009978:	4313      	orrs	r3, r2
 800997a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800997c:	7dbb      	ldrb	r3, [r7, #22]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	e000      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	58024400 	.word	0x58024400

08009994 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b090      	sub	sp, #64	; 0x40
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a2:	f040 8095 	bne.w	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80099a6:	4bae      	ldr	r3, [pc, #696]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	633b      	str	r3, [r7, #48]	; 0x30
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	f200 8088 	bhi.w	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80099b8:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080099d5 	.word	0x080099d5
 80099c4:	080099fd 	.word	0x080099fd
 80099c8:	08009a25 	.word	0x08009a25
 80099cc:	08009ac1 	.word	0x08009ac1
 80099d0:	08009a4d 	.word	0x08009a4d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099d4:	4ba2      	ldr	r3, [pc, #648]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099e0:	d108      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 ff64 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099f0:	f000 bc95 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f8:	f000 bc91 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099fc:	4b98      	ldr	r3, [pc, #608]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a08:	d108      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a0a:	f107 0318 	add.w	r3, r7, #24
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fca8 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a18:	f000 bc81 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a20:	f000 bc7d 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a24:	4b8e      	ldr	r3, [pc, #568]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a30:	d108      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fde8 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a40:	f000 bc6d 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a48:	f000 bc69 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a4c:	4b84      	ldr	r3, [pc, #528]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a56:	4b82      	ldr	r3, [pc, #520]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d10c      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d109      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a68:	4b7d      	ldr	r3, [pc, #500]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	08db      	lsrs	r3, r3, #3
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	4a7c      	ldr	r2, [pc, #496]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a7a:	e01f      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a7c:	4b78      	ldr	r3, [pc, #480]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a88:	d106      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a90:	d102      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a92:	4b75      	ldr	r3, [pc, #468]	; (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a96:	e011      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a98:	4b71      	ldr	r3, [pc, #452]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aa4:	d106      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aac:	d102      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009aae:	4b6f      	ldr	r3, [pc, #444]	; (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ab2:	e003      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ab8:	f000 bc31 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009abc:	f000 bc2f 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ac0:	4b6b      	ldr	r3, [pc, #428]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac4:	f000 bc2b 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009acc:	f000 bc27 	b.w	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad6:	f040 8095 	bne.w	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009ada:	4b61      	ldr	r3, [pc, #388]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ade:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009ae2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aea:	d04d      	beq.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009af2:	f200 8084 	bhi.w	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	2bc0      	cmp	r3, #192	; 0xc0
 8009afa:	d07d      	beq.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	2bc0      	cmp	r3, #192	; 0xc0
 8009b00:	d87d      	bhi.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	2b80      	cmp	r3, #128	; 0x80
 8009b06:	d02d      	beq.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	2b80      	cmp	r3, #128	; 0x80
 8009b0c:	d877      	bhi.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	2b40      	cmp	r3, #64	; 0x40
 8009b18:	d012      	beq.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009b1a:	e070      	b.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b1c:	4b50      	ldr	r3, [pc, #320]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b28:	d107      	bne.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fec0 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b38:	e3f1      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b3e:	e3ee      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b40:	4b47      	ldr	r3, [pc, #284]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b4c:	d107      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4e:	f107 0318 	add.w	r3, r7, #24
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fc06 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b5c:	e3df      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b62:	e3dc      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b64:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b70:	d107      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fd48 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b80:	e3cd      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b86:	e3ca      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b88:	4b35      	ldr	r3, [pc, #212]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b92:	4b33      	ldr	r3, [pc, #204]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d109      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba4:	4b2e      	ldr	r3, [pc, #184]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4a2d      	ldr	r2, [pc, #180]	; (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb6:	e01e      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bb8:	4b29      	ldr	r3, [pc, #164]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc4:	d106      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bcc:	d102      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009bce:	4b26      	ldr	r3, [pc, #152]	; (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bd2:	e010      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bd4:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be0:	d106      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009be8:	d102      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009bea:	4b20      	ldr	r3, [pc, #128]	; (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bee:	e002      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009bf4:	e393      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009bf6:	e392      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009bf8:	4b1d      	ldr	r3, [pc, #116]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bfc:	e38f      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c02:	e38c      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0a:	f040 80a7 	bne.w	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009c0e:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009c16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c1e:	d05f      	beq.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c26:	f200 8096 	bhi.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c30:	f000 808e 	beq.w	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c3a:	f200 808c 	bhi.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c44:	d03a      	beq.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c4c:	f200 8083 	bhi.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00e      	beq.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c5c:	d01c      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009c5e:	e07a      	b.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009c60:	58024400 	.word	0x58024400
 8009c64:	03d09000 	.word	0x03d09000
 8009c68:	003d0900 	.word	0x003d0900
 8009c6c:	01e84800 	.word	0x01e84800
 8009c70:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c74:	4baa      	ldr	r3, [pc, #680]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c80:	d107      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fe14 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c90:	e345      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c96:	e342      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c98:	4ba1      	ldr	r3, [pc, #644]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ca6:	f107 0318 	add.w	r3, r7, #24
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fb5a 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cb4:	e333      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cba:	e330      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cbc:	4b98      	ldr	r3, [pc, #608]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc8:	d107      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cca:	f107 030c 	add.w	r3, r7, #12
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fc9c 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cd8:	e321      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cde:	e31e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ce0:	4b8f      	ldr	r3, [pc, #572]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ce8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cea:	4b8d      	ldr	r3, [pc, #564]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d10c      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d109      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cfc:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	08db      	lsrs	r3, r3, #3
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	4a87      	ldr	r2, [pc, #540]	; (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009d08:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d0e:	e01e      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d10:	4b83      	ldr	r3, [pc, #524]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d24:	d102      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d26:	4b80      	ldr	r3, [pc, #512]	; (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2a:	e010      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d2c:	4b7c      	ldr	r3, [pc, #496]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d38:	d106      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d40:	d102      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d42:	4b7a      	ldr	r3, [pc, #488]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d46:	e002      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d4c:	e2e7      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d4e:	e2e6      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d50:	4b77      	ldr	r3, [pc, #476]	; (8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d54:	e2e3      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d5a:	e2e0      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d62:	f040 809c 	bne.w	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009d66:	4b6e      	ldr	r3, [pc, #440]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d6e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d76:	d054      	beq.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d7e:	f200 808b 	bhi.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d88:	f000 8083 	beq.w	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d92:	f200 8081 	bhi.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d9c:	d02f      	beq.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009da4:	d878      	bhi.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009db2:	d012      	beq.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009db4:	e070      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009db6:	4b5a      	ldr	r3, [pc, #360]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dc2:	d107      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fd73 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dd2:	e2a4      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dd8:	e2a1      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dda:	4b51      	ldr	r3, [pc, #324]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009de6:	d107      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de8:	f107 0318 	add.w	r3, r7, #24
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fab9 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009df6:	e292      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dfc:	e28f      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dfe:	4b48      	ldr	r3, [pc, #288]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e0a:	d107      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0c:	f107 030c 	add.w	r3, r7, #12
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fbfb 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e1a:	e280      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e20:	e27d      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e22:	4b3f      	ldr	r3, [pc, #252]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e2c:	4b3c      	ldr	r3, [pc, #240]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d10c      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e3e:	4b38      	ldr	r3, [pc, #224]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	08db      	lsrs	r3, r3, #3
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	4a36      	ldr	r2, [pc, #216]	; (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e50:	e01e      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e52:	4b33      	ldr	r3, [pc, #204]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5e:	d106      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e66:	d102      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e68:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e6c:	e010      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e6e:	4b2c      	ldr	r3, [pc, #176]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e7a:	d106      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e82:	d102      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e84:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e88:	e002      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e8e:	e246      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e90:	e245      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e96:	e242      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e9c:	e23f      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea4:	f040 80a8 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009eb0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eb8:	d060      	beq.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ec0:	f200 8097 	bhi.w	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009eca:	f000 808f 	beq.w	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ed4:	f200 808d 	bhi.w	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ede:	d03b      	beq.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ee6:	f200 8084 	bhi.w	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef6:	d01d      	beq.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009ef8:	e07b      	b.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f06:	d107      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 fcd1 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f16:	e202      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f1c:	e1ff      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
 8009f24:	03d09000 	.word	0x03d09000
 8009f28:	003d0900 	.word	0x003d0900
 8009f2c:	01e84800 	.word	0x01e84800
 8009f30:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f34:	4ba3      	ldr	r3, [pc, #652]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fa0c 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f50:	e1e5      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f56:	e1e2      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f58:	4b9a      	ldr	r3, [pc, #616]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f64:	d107      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f66:	f107 030c 	add.w	r3, r7, #12
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fb4e 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f74:	e1d3      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f7a:	e1d0      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f7c:	4b91      	ldr	r3, [pc, #580]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f86:	4b8f      	ldr	r3, [pc, #572]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d10c      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f98:	4b8a      	ldr	r3, [pc, #552]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	08db      	lsrs	r3, r3, #3
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	4a89      	ldr	r2, [pc, #548]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009faa:	e01e      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fac:	4b85      	ldr	r3, [pc, #532]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc0:	d102      	bne.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fc2:	4b82      	ldr	r3, [pc, #520]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc6:	e010      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc8:	4b7e      	ldr	r3, [pc, #504]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd4:	d106      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fdc:	d102      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fde:	4b7c      	ldr	r3, [pc, #496]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe2:	e002      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009fe8:	e199      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fea:	e198      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009fec:	4b79      	ldr	r3, [pc, #484]	; (800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff0:	e195      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff6:	e192      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ffe:	d173      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a000:	4b70      	ldr	r3, [pc, #448]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a008:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a010:	d02f      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a018:	d863      	bhi.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a026:	d012      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a028:	e05b      	b.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a02a:	4b66      	ldr	r3, [pc, #408]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a036:	d107      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a038:	f107 0318 	add.w	r3, r7, #24
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f991 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a046:	e16a      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a04c:	e167      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a04e:	4b5d      	ldr	r3, [pc, #372]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a05a:	d107      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05c:	f107 030c 	add.w	r3, r7, #12
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fad3 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a06a:	e158      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a070:	e155      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a072:	4b54      	ldr	r3, [pc, #336]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a07c:	4b51      	ldr	r3, [pc, #324]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b04      	cmp	r3, #4
 800a086:	d10c      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a08e:	4b4d      	ldr	r3, [pc, #308]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	08db      	lsrs	r3, r3, #3
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	4a4b      	ldr	r2, [pc, #300]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a09a:	fa22 f303 	lsr.w	r3, r2, r3
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a0:	e01e      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0a2:	4b48      	ldr	r3, [pc, #288]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ae:	d106      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0b6:	d102      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a0b8:	4b44      	ldr	r3, [pc, #272]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0bc:	e010      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0be:	4b41      	ldr	r3, [pc, #260]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0ca:	d106      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d2:	d102      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a0d4:	4b3e      	ldr	r3, [pc, #248]	; (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0d8:	e002      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a0de:	e11e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0e0:	e11d      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0e6:	e11a      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ee:	d133      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a0f0:	4b34      	ldr	r3, [pc, #208]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a106:	d012      	beq.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a108:	e023      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a10a:	4b2e      	ldr	r3, [pc, #184]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a116:	d107      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 fbc9 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a126:	e0fa      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a12c:	e0f7      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a12e:	4b25      	ldr	r3, [pc, #148]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a13a:	d107      	bne.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13c:	f107 0318 	add.w	r3, r7, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f90f 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a14a:	e0e8      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a150:	e0e5      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a156:	e0e2      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a15e:	f040 808f 	bne.w	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a162:	4b18      	ldr	r3, [pc, #96]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a166:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a16a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a172:	d075      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a17a:	d87e      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a182:	d060      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18a:	d876      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a192:	d045      	beq.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a19a:	d86e      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a2:	d02b      	beq.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1aa:	d866      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1b8:	d00e      	beq.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a1ba:	e05e      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a1bc:	f000 f8bc 	bl	800a338 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1c0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a1c2:	e0ac      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
 800a1d0:	01e84800 	.word	0x01e84800
 800a1d4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1d8:	4b53      	ldr	r3, [pc, #332]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1e4:	d107      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e6:	f107 0318 	add.w	r3, r7, #24
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f8ba 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1f4:	e093      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1fa:	e090      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1fc:	4b4a      	ldr	r3, [pc, #296]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a208:	d107      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a20a:	f107 030c 	add.w	r3, r7, #12
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f9fc 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a218:	e081      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a21e:	e07e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a220:	4b41      	ldr	r3, [pc, #260]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d109      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a22c:	4b3e      	ldr	r3, [pc, #248]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	4a3d      	ldr	r2, [pc, #244]	; (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a23e:	e06e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a244:	e06b      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a246:	4b38      	ldr	r3, [pc, #224]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800a254:	4b36      	ldr	r3, [pc, #216]	; (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a258:	e061      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a25e:	e05e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a260:	4b31      	ldr	r3, [pc, #196]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a26c:	d102      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a26e:	4b31      	ldr	r3, [pc, #196]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a270:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a272:	e054      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a278:	e051      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a27e:	e04e      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a286:	d148      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a288:	4b27      	ldr	r3, [pc, #156]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a298:	d02a      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a0:	d838      	bhi.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2ae:	d00d      	beq.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a2b0:	e030      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a2b2:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2be:	d102      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a2c0:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a2c4:	e02b      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ca:	e028      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2cc:	4b16      	ldr	r3, [pc, #88]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d8:	d107      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fae8 	bl	800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a2e8:	e019      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ee:	e016      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fe:	f107 0318 	add.w	r3, r7, #24
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f82e 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a30c:	e007      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a312:	e004      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a318:	e001      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a320:	4618      	mov	r0, r3
 800a322:	3740      	adds	r7, #64	; 0x40
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	58024400 	.word	0x58024400
 800a32c:	03d09000 	.word	0x03d09000
 800a330:	003d0900 	.word	0x003d0900
 800a334:	01e84800 	.word	0x01e84800

0800a338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a33c:	f7fe fb4c 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 800a340:	4602      	mov	r2, r0
 800a342:	4b06      	ldr	r3, [pc, #24]	; (800a35c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	091b      	lsrs	r3, r3, #4
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	4904      	ldr	r1, [pc, #16]	; (800a360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a34e:	5ccb      	ldrb	r3, [r1, r3]
 800a350:	f003 031f 	and.w	r3, r3, #31
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a358:	4618      	mov	r0, r3
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	58024400 	.word	0x58024400
 800a360:	080121e0 	.word	0x080121e0

0800a364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a364:	b480      	push	{r7}
 800a366:	b089      	sub	sp, #36	; 0x24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a36c:	4ba1      	ldr	r3, [pc, #644]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a376:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37a:	0b1b      	lsrs	r3, r3, #12
 800a37c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a382:	4b9c      	ldr	r3, [pc, #624]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	091b      	lsrs	r3, r3, #4
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a38e:	4b99      	ldr	r3, [pc, #612]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 8111 	beq.w	800a5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	f000 8083 	beq.w	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	f200 80a1 	bhi.w	800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d056      	beq.n	800a47c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a3ce:	e099      	b.n	800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d0:	4b88      	ldr	r3, [pc, #544]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02d      	beq.n	800a438 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3dc:	4b85      	ldr	r3, [pc, #532]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	08db      	lsrs	r3, r3, #3
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	4a84      	ldr	r2, [pc, #528]	; (800a5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	ee07 3a90 	vmov	s15, r3
 800a3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a406:	4b7b      	ldr	r3, [pc, #492]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a416:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a432:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a436:	e087      	b.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a600 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44a:	4b6a      	ldr	r3, [pc, #424]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a45e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a47a:	e065      	b.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48e:	4b59      	ldr	r3, [pc, #356]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4be:	e043      	b.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d2:	4b48      	ldr	r3, [pc, #288]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a502:	e021      	b.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a516:	4b37      	ldr	r3, [pc, #220]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a526:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a546:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a548:	4b2a      	ldr	r3, [pc, #168]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	0a5b      	lsrs	r3, r3, #9
 800a54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a55e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a562:	edd7 6a07 	vldr	s13, [r7, #28]
 800a566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a56a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a56e:	ee17 2a90 	vmov	r2, s15
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a576:	4b1f      	ldr	r3, [pc, #124]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	0c1b      	lsrs	r3, r3, #16
 800a57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a590:	edd7 6a07 	vldr	s13, [r7, #28]
 800a594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a59c:	ee17 2a90 	vmov	r2, s15
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a5a4:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	0e1b      	lsrs	r3, r3, #24
 800a5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ca:	ee17 2a90 	vmov	r2, s15
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	609a      	str	r2, [r3, #8]
}
 800a5e6:	bf00      	nop
 800a5e8:	3724      	adds	r7, #36	; 0x24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	58024400 	.word	0x58024400
 800a5f8:	03d09000 	.word	0x03d09000
 800a5fc:	46000000 	.word	0x46000000
 800a600:	4c742400 	.word	0x4c742400
 800a604:	4a742400 	.word	0x4a742400
 800a608:	4bf42400 	.word	0x4bf42400

0800a60c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b089      	sub	sp, #36	; 0x24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a614:	4ba1      	ldr	r3, [pc, #644]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a61e:	4b9f      	ldr	r3, [pc, #636]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	0d1b      	lsrs	r3, r3, #20
 800a624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a628:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a62a:	4b9c      	ldr	r3, [pc, #624]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	0a1b      	lsrs	r3, r3, #8
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a636:	4b99      	ldr	r3, [pc, #612]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63a:	08db      	lsrs	r3, r3, #3
 800a63c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8111 	beq.w	800a87c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	f000 8083 	beq.w	800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	2b02      	cmp	r3, #2
 800a666:	f200 80a1 	bhi.w	800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d056      	beq.n	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a676:	e099      	b.n	800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a678:	4b88      	ldr	r3, [pc, #544]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02d      	beq.n	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a684:	4b85      	ldr	r3, [pc, #532]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	4a84      	ldr	r2, [pc, #528]	; (800a8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ae:	4b7b      	ldr	r3, [pc, #492]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a6de:	e087      	b.n	800a7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f2:	4b6a      	ldr	r3, [pc, #424]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a702:	ed97 6a03 	vldr	s12, [r7, #12]
 800a706:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a722:	e065      	b.n	800a7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a736:	4b59      	ldr	r3, [pc, #356]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a746:	ed97 6a03 	vldr	s12, [r7, #12]
 800a74a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a766:	e043      	b.n	800a7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77a:	4b48      	ldr	r3, [pc, #288]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7aa:	e021      	b.n	800a7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7be:	4b37      	ldr	r3, [pc, #220]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a7f0:	4b2a      	ldr	r3, [pc, #168]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f4:	0a5b      	lsrs	r3, r3, #9
 800a7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a80a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a816:	ee17 2a90 	vmov	r2, s15
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a81e:	4b1f      	ldr	r3, [pc, #124]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	0c1b      	lsrs	r3, r3, #16
 800a824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a834:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a838:	edd7 6a07 	vldr	s13, [r7, #28]
 800a83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a844:	ee17 2a90 	vmov	r2, s15
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a84c:	4b13      	ldr	r3, [pc, #76]	; (800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	0e1b      	lsrs	r3, r3, #24
 800a852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a862:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a866:	edd7 6a07 	vldr	s13, [r7, #28]
 800a86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a872:	ee17 2a90 	vmov	r2, s15
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a87a:	e008      	b.n	800a88e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	609a      	str	r2, [r3, #8]
}
 800a88e:	bf00      	nop
 800a890:	3724      	adds	r7, #36	; 0x24
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
 800a8a0:	03d09000 	.word	0x03d09000
 800a8a4:	46000000 	.word	0x46000000
 800a8a8:	4c742400 	.word	0x4c742400
 800a8ac:	4a742400 	.word	0x4a742400
 800a8b0:	4bf42400 	.word	0x4bf42400

0800a8b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b089      	sub	sp, #36	; 0x24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8bc:	4ba0      	ldr	r3, [pc, #640]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a8c6:	4b9e      	ldr	r3, [pc, #632]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ca:	091b      	lsrs	r3, r3, #4
 800a8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a8d2:	4b9b      	ldr	r3, [pc, #620]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a8dc:	4b98      	ldr	r3, [pc, #608]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e0:	08db      	lsrs	r3, r3, #3
 800a8e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	ee07 3a90 	vmov	s15, r3
 800a8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 8111 	beq.w	800ab22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2b02      	cmp	r3, #2
 800a904:	f000 8083 	beq.w	800aa0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	f200 80a1 	bhi.w	800aa52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d056      	beq.n	800a9ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a91c:	e099      	b.n	800aa52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a91e:	4b88      	ldr	r3, [pc, #544]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0320 	and.w	r3, r3, #32
 800a926:	2b00      	cmp	r3, #0
 800a928:	d02d      	beq.n	800a986 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a92a:	4b85      	ldr	r3, [pc, #532]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	08db      	lsrs	r3, r3, #3
 800a930:	f003 0303 	and.w	r3, r3, #3
 800a934:	4a83      	ldr	r2, [pc, #524]	; (800ab44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a936:	fa22 f303 	lsr.w	r3, r2, r3
 800a93a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	ee07 3a90 	vmov	s15, r3
 800a942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a954:	4b7a      	ldr	r3, [pc, #488]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a964:	ed97 6a03 	vldr	s12, [r7, #12]
 800a968:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a980:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a984:	e087      	b.n	800aa96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a990:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ab4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a998:	4b69      	ldr	r3, [pc, #420]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9c8:	e065      	b.n	800aa96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	ee07 3a90 	vmov	s15, r3
 800a9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ab50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9dc:	4b58      	ldr	r3, [pc, #352]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa0c:	e043      	b.n	800aa96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ab54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aa1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa20:	4b47      	ldr	r3, [pc, #284]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa28:	ee07 3a90 	vmov	s15, r3
 800aa2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa30:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa34:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa50:	e021      	b.n	800aa96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ab4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aa60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa64:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa74:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa78:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ab48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800aa96:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9a:	0a5b      	lsrs	r3, r3, #9
 800aa9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aab0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aabc:	ee17 2a90 	vmov	r2, s15
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800aac4:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	0c1b      	lsrs	r3, r3, #16
 800aaca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aada:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aade:	edd7 6a07 	vldr	s13, [r7, #28]
 800aae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaea:	ee17 2a90 	vmov	r2, s15
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aaf2:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf6:	0e1b      	lsrs	r3, r3, #24
 800aaf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aafc:	ee07 3a90 	vmov	s15, r3
 800ab00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab18:	ee17 2a90 	vmov	r2, s15
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ab20:	e008      	b.n	800ab34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	609a      	str	r2, [r3, #8]
}
 800ab34:	bf00      	nop
 800ab36:	3724      	adds	r7, #36	; 0x24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	46000000 	.word	0x46000000
 800ab4c:	4c742400 	.word	0x4c742400
 800ab50:	4a742400 	.word	0x4a742400
 800ab54:	4bf42400 	.word	0x4bf42400

0800ab58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab66:	4b53      	ldr	r3, [pc, #332]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d101      	bne.n	800ab76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e099      	b.n	800acaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab76:	4b4f      	ldr	r3, [pc, #316]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a4e      	ldr	r2, [pc, #312]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab82:	f7f8 fb85 	bl	8003290 <HAL_GetTick>
 800ab86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab88:	e008      	b.n	800ab9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab8a:	f7f8 fb81 	bl	8003290 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e086      	b.n	800acaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab9c:	4b45      	ldr	r3, [pc, #276]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1f0      	bne.n	800ab8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aba8:	4b42      	ldr	r3, [pc, #264]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	031b      	lsls	r3, r3, #12
 800abb6:	493f      	ldr	r1, [pc, #252]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	628b      	str	r3, [r1, #40]	; 0x28
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	3b01      	subs	r3, #1
 800abcc:	025b      	lsls	r3, r3, #9
 800abce:	b29b      	uxth	r3, r3
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	041b      	lsls	r3, r3, #16
 800abda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abde:	431a      	orrs	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	061b      	lsls	r3, r3, #24
 800abe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abec:	4931      	ldr	r1, [pc, #196]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800abf2:	4b30      	ldr	r3, [pc, #192]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	492d      	ldr	r1, [pc, #180]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac04:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	f023 0220 	bic.w	r2, r3, #32
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	4928      	ldr	r1, [pc, #160]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ac16:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac1c:	f023 0310 	bic.w	r3, r3, #16
 800ac20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ac22:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac26:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <RCCEx_PLL2_Config+0x160>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	69d2      	ldr	r2, [r2, #28]
 800ac2e:	00d2      	lsls	r2, r2, #3
 800ac30:	4920      	ldr	r1, [pc, #128]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ac36:	4b1f      	ldr	r3, [pc, #124]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	4a1e      	ldr	r2, [pc, #120]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac3c:	f043 0310 	orr.w	r3, r3, #16
 800ac40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d106      	bne.n	800ac56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ac48:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac54:	e00f      	b.n	800ac76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d106      	bne.n	800ac6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ac5c:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	4a14      	ldr	r2, [pc, #80]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac68:	e005      	b.n	800ac76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ac6a:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6e:	4a11      	ldr	r2, [pc, #68]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac76:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a0e      	ldr	r2, [pc, #56]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac82:	f7f8 fb05 	bl	8003290 <HAL_GetTick>
 800ac86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac88:	e008      	b.n	800ac9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac8a:	f7f8 fb01 	bl	8003290 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d901      	bls.n	800ac9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e006      	b.n	800acaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <RCCEx_PLL2_Config+0x15c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0f0      	beq.n	800ac8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	ffff0007 	.word	0xffff0007

0800acbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acca:	4b53      	ldr	r3, [pc, #332]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d101      	bne.n	800acda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e099      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800acda:	4b4f      	ldr	r3, [pc, #316]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ace0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ace4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace6:	f7f8 fad3 	bl	8003290 <HAL_GetTick>
 800acea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800acec:	e008      	b.n	800ad00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800acee:	f7f8 facf 	bl	8003290 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e086      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad00:	4b45      	ldr	r3, [pc, #276]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f0      	bne.n	800acee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad0c:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	051b      	lsls	r3, r3, #20
 800ad1a:	493f      	ldr	r1, [pc, #252]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	628b      	str	r3, [r1, #40]	; 0x28
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	025b      	lsls	r3, r3, #9
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	061b      	lsls	r3, r3, #24
 800ad4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad50:	4931      	ldr	r1, [pc, #196]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ad56:	4b30      	ldr	r3, [pc, #192]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	492d      	ldr	r1, [pc, #180]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad68:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4928      	ldr	r1, [pc, #160]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad7a:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a26      	ldr	r2, [pc, #152]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8a:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <RCCEx_PLL3_Config+0x160>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	69d2      	ldr	r2, [r2, #28]
 800ad92:	00d2      	lsls	r2, r2, #3
 800ad94:	4920      	ldr	r1, [pc, #128]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ad9a:	4b1f      	ldr	r3, [pc, #124]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ada0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adac:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a19      	ldr	r2, [pc, #100]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800adb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adb8:	e00f      	b.n	800adda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d106      	bne.n	800adce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800adc0:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800adc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adcc:	e005      	b.n	800adda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800adce:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	4a11      	ldr	r2, [pc, #68]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800add4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800add8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800adda:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a0e      	ldr	r2, [pc, #56]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ade0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ade6:	f7f8 fa53 	bl	8003290 <HAL_GetTick>
 800adea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800adec:	e008      	b.n	800ae00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800adee:	f7f8 fa4f 	bl	8003290 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d901      	bls.n	800ae00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e006      	b.n	800ae0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <RCCEx_PLL3_Config+0x15c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f0      	beq.n	800adee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	58024400 	.word	0x58024400
 800ae1c:	ffff0007 	.word	0xffff0007

0800ae20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d067      	beq.n	800af02 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7f7 fc12 	bl	8002670 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	22ca      	movs	r2, #202	; 0xca
 800ae5a:	625a      	str	r2, [r3, #36]	; 0x24
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2253      	movs	r2, #83	; 0x53
 800ae62:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f879 	bl	800af5c <RTC_EnterInitMode>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d13b      	bne.n	800aeec <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6899      	ldr	r1, [r3, #8]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4b23      	ldr	r3, [pc, #140]	; (800af0c <HAL_RTC_Init+0xec>)
 800ae80:	400b      	ands	r3, r1
 800ae82:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6899      	ldr	r1, [r3, #8]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	0419      	lsls	r1, r3, #16
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f881 	bl	800afbc <RTC_ExitInitMode>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d113      	bne.n	800aeec <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0203 	bic.w	r2, r2, #3
 800aed2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69da      	ldr	r2, [r3, #28]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	22ff      	movs	r2, #255	; 0xff
 800aef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d103      	bne.n	800af02 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	ff8fffbf 	.word	0xff8fffbf

0800af10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af26:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800af28:	f7f8 f9b2 	bl	8003290 <HAL_GetTick>
 800af2c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af2e:	e009      	b.n	800af44 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af30:	f7f8 f9ae 	bl	8003290 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af3e:	d901      	bls.n	800af44 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e007      	b.n	800af54 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f003 0320 	and.w	r3, r3, #32
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0ee      	beq.n	800af30 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d11d      	bne.n	800afb2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295
 800af7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800af80:	f7f8 f986 	bl	8003290 <HAL_GetTick>
 800af84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af86:	e00d      	b.n	800afa4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800af88:	f7f8 f982 	bl	8003290 <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af96:	d905      	bls.n	800afa4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2203      	movs	r2, #3
 800afa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0ea      	beq.n	800af88 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <RTC_ExitInitMode+0x78>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	4a19      	ldr	r2, [pc, #100]	; (800b034 <RTC_ExitInitMode+0x78>)
 800afce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800afd4:	4b17      	ldr	r3, [pc, #92]	; (800b034 <RTC_ExitInitMode+0x78>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 0320 	and.w	r3, r3, #32
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10c      	bne.n	800affa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff ff95 	bl	800af10 <HAL_RTC_WaitForSynchro>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01e      	beq.n	800b02a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2203      	movs	r2, #3
 800aff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
 800aff8:	e017      	b.n	800b02a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800affa:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <RTC_ExitInitMode+0x78>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	4a0d      	ldr	r2, [pc, #52]	; (800b034 <RTC_ExitInitMode+0x78>)
 800b000:	f023 0320 	bic.w	r3, r3, #32
 800b004:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff ff82 	bl	800af10 <HAL_RTC_WaitForSynchro>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2203      	movs	r2, #3
 800b016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <RTC_ExitInitMode+0x78>)
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	4a04      	ldr	r2, [pc, #16]	; (800b034 <RTC_ExitInitMode+0x78>)
 800b024:	f043 0320 	orr.w	r3, r3, #32
 800b028:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	58004000 	.word	0x58004000

0800b038 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e0eb      	b.n	800b226 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a75      	ldr	r2, [pc, #468]	; (800b230 <HAL_SPI_Init+0x1f8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d00f      	beq.n	800b07e <HAL_SPI_Init+0x46>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a74      	ldr	r2, [pc, #464]	; (800b234 <HAL_SPI_Init+0x1fc>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00a      	beq.n	800b07e <HAL_SPI_Init+0x46>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a72      	ldr	r2, [pc, #456]	; (800b238 <HAL_SPI_Init+0x200>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d005      	beq.n	800b07e <HAL_SPI_Init+0x46>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	2b0f      	cmp	r3, #15
 800b078:	d901      	bls.n	800b07e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e0d3      	b.n	800b226 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fb9e 	bl	800b7c0 <SPI_GetPacketSize>
 800b084:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a69      	ldr	r2, [pc, #420]	; (800b230 <HAL_SPI_Init+0x1f8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00c      	beq.n	800b0aa <HAL_SPI_Init+0x72>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a67      	ldr	r2, [pc, #412]	; (800b234 <HAL_SPI_Init+0x1fc>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d007      	beq.n	800b0aa <HAL_SPI_Init+0x72>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a66      	ldr	r2, [pc, #408]	; (800b238 <HAL_SPI_Init+0x200>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d002      	beq.n	800b0aa <HAL_SPI_Init+0x72>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	d811      	bhi.n	800b0ce <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0ae:	4a60      	ldr	r2, [pc, #384]	; (800b230 <HAL_SPI_Init+0x1f8>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d009      	beq.n	800b0c8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a5e      	ldr	r2, [pc, #376]	; (800b234 <HAL_SPI_Init+0x1fc>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d004      	beq.n	800b0c8 <HAL_SPI_Init+0x90>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a5d      	ldr	r2, [pc, #372]	; (800b238 <HAL_SPI_Init+0x200>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d104      	bne.n	800b0d2 <HAL_SPI_Init+0x9a>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b10      	cmp	r3, #16
 800b0cc:	d901      	bls.n	800b0d2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e0a9      	b.n	800b226 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7f7 faf2 	bl	80026d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 0201 	bic.w	r2, r2, #1
 800b102:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b10c:	d119      	bne.n	800b142 <HAL_SPI_Init+0x10a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b116:	d103      	bne.n	800b120 <HAL_SPI_Init+0xe8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d008      	beq.n	800b132 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10c      	bne.n	800b142 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b130:	d107      	bne.n	800b142 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	431a      	orrs	r2, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b154:	ea42 0103 	orr.w	r1, r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68da      	ldr	r2, [r3, #12]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	431a      	orrs	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	431a      	orrs	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	431a      	orrs	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b196:	431a      	orrs	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a2:	ea42 0103 	orr.w	r1, r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d113      	bne.n	800b1e2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0201 	bic.w	r2, r2, #1
 800b1f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00a      	beq.n	800b214 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	430a      	orrs	r2, r1
 800b212:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40013000 	.word	0x40013000
 800b234:	40003800 	.word	0x40003800
 800b238:	40003c00 	.word	0x40003c00

0800b23c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b254:	6a3a      	ldr	r2, [r7, #32]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	4013      	ands	r3, r2
 800b25a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b264:	2300      	movs	r3, #0
 800b266:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b26e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3330      	adds	r3, #48	; 0x30
 800b276:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d113      	bne.n	800b2aa <HAL_SPI_IRQHandler+0x6e>
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	f003 0320 	and.w	r3, r3, #32
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10e      	bne.n	800b2aa <HAL_SPI_IRQHandler+0x6e>
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
    handled = 1UL;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10f      	bne.n	800b2d4 <HAL_SPI_IRQHandler+0x98>
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00a      	beq.n	800b2d4 <HAL_SPI_IRQHandler+0x98>
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d105      	bne.n	800b2d4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	4798      	blx	r3
    handled = 1UL;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10f      	bne.n	800b2fe <HAL_SPI_IRQHandler+0xc2>
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00a      	beq.n	800b2fe <HAL_SPI_IRQHandler+0xc2>
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	f003 0304 	and.w	r3, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d105      	bne.n	800b2fe <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4798      	blx	r3
    handled = 1UL;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	2b00      	cmp	r3, #0
 800b302:	f040 816f 	bne.w	800b5e4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	f003 0308 	and.w	r3, r3, #8
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80a0 	beq.w	800b452 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	699a      	ldr	r2, [r3, #24]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f042 0208 	orr.w	r2, r2, #8
 800b320:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	699a      	ldr	r2, [r3, #24]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f042 0210 	orr.w	r2, r2, #16
 800b330:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	699a      	ldr	r2, [r3, #24]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b340:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	691a      	ldr	r2, [r3, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0208 	bic.w	r2, r2, #8
 800b350:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00f      	beq.n	800b37c <HAL_SPI_IRQHandler+0x140>
 800b35c:	7cfb      	ldrb	r3, [r7, #19]
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d004      	beq.n	800b36c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d007      	beq.n	800b37c <HAL_SPI_IRQHandler+0x140>
 800b36c:	7cfb      	ldrb	r3, [r7, #19]
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d059      	beq.n	800b426 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d154      	bne.n	800b426 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d13d      	bne.n	800b406 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800b38a:	e036      	b.n	800b3fa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	2b0f      	cmp	r3, #15
 800b392:	d90b      	bls.n	800b3ac <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b39c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b39e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	1d1a      	adds	r2, r3, #4
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	665a      	str	r2, [r3, #100]	; 0x64
 800b3aa:	e01d      	b.n	800b3e8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	2b07      	cmp	r3, #7
 800b3b2:	d90b      	bls.n	800b3cc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	8812      	ldrh	r2, [r2, #0]
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3c4:	1c9a      	adds	r2, r3, #2
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	665a      	str	r2, [r3, #100]	; 0x64
 800b3ca:	e00d      	b.n	800b3e8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b400:	b29b      	uxth	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1c2      	bne.n	800b38c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f93a 	bl	800b680 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f90a 	bl	800b638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800b424:	e0e3      	b.n	800b5ee <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b426:	7cfb      	ldrb	r3, [r7, #19]
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d103      	bne.n	800b434 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f8f9 	bl	800b624 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800b432:	e0d9      	b.n	800b5e8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b434:	7cfb      	ldrb	r3, [r7, #19]
 800b436:	2b04      	cmp	r3, #4
 800b438:	d103      	bne.n	800b442 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f8e8 	bl	800b610 <HAL_SPI_RxCpltCallback>
    return;
 800b440:	e0d2      	b.n	800b5e8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b442:	7cfb      	ldrb	r3, [r7, #19]
 800b444:	2b03      	cmp	r3, #3
 800b446:	f040 80cf 	bne.w	800b5e8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8d6 	bl	800b5fc <HAL_SPI_TxCpltCallback>
    return;
 800b450:	e0ca      	b.n	800b5e8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00d      	beq.n	800b478 <HAL_SPI_IRQHandler+0x23c>
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	f003 0308 	and.w	r3, r3, #8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d008      	beq.n	800b478 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	699a      	ldr	r2, [r3, #24]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b474:	619a      	str	r2, [r3, #24]

    return;
 800b476:	e0ba      	b.n	800b5ee <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 80b5 	beq.w	800b5ee <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00f      	beq.n	800b4ae <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b494:	f043 0204 	orr.w	r2, r3, #4
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	699a      	ldr	r2, [r3, #24]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00f      	beq.n	800b4d8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4be:	f043 0201 	orr.w	r2, r3, #1
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699a      	ldr	r2, [r3, #24]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4d6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00f      	beq.n	800b502 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4e8:	f043 0208 	orr.w	r2, r3, #8
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	699a      	ldr	r2, [r3, #24]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b500:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	f003 0320 	and.w	r3, r3, #32
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00f      	beq.n	800b52c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b512:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699a      	ldr	r2, [r3, #24]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0220 	orr.w	r2, r2, #32
 800b52a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b532:	2b00      	cmp	r3, #0
 800b534:	d05a      	beq.n	800b5ec <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0201 	bic.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6919      	ldr	r1, [r3, #16]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	4b28      	ldr	r3, [pc, #160]	; (800b5f4 <HAL_SPI_IRQHandler+0x3b8>)
 800b552:	400b      	ands	r3, r1
 800b554:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b55c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b560:	d138      	bne.n	800b5d4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b570:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b576:	2b00      	cmp	r3, #0
 800b578:	d013      	beq.n	800b5a2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b57e:	4a1e      	ldr	r2, [pc, #120]	; (800b5f8 <HAL_SPI_IRQHandler+0x3bc>)
 800b580:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b586:	4618      	mov	r0, r3
 800b588:	f7fa fae6 	bl	8005b58 <HAL_DMA_Abort_IT>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d007      	beq.n	800b5a2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ae:	4a12      	ldr	r2, [pc, #72]	; (800b5f8 <HAL_SPI_IRQHandler+0x3bc>)
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fa face 	bl	8005b58 <HAL_DMA_Abort_IT>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d014      	beq.n	800b5ec <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b5d2:	e00b      	b.n	800b5ec <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f82b 	bl	800b638 <HAL_SPI_ErrorCallback>
    return;
 800b5e2:	e003      	b.n	800b5ec <HAL_SPI_IRQHandler+0x3b0>
    return;
 800b5e4:	bf00      	nop
 800b5e6:	e002      	b.n	800b5ee <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b5e8:	bf00      	nop
 800b5ea:	e000      	b.n	800b5ee <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b5ec:	bf00      	nop
  }
}
 800b5ee:	3728      	adds	r7, #40	; 0x28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	fffffc94 	.word	0xfffffc94
 800b5f8:	0800b64d 	.word	0x0800b64d

0800b5fc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f7ff ffe0 	bl	800b638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b678:	bf00      	nop
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	699a      	ldr	r2, [r3, #24]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0208 	orr.w	r2, r2, #8
 800b69e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0210 	orr.w	r2, r2, #16
 800b6ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0201 	bic.w	r2, r2, #1
 800b6be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6919      	ldr	r1, [r3, #16]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b3c      	ldr	r3, [pc, #240]	; (800b7bc <SPI_CloseTransfer+0x13c>)
 800b6cc:	400b      	ands	r3, r1
 800b6ce:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b6de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d014      	beq.n	800b716 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f003 0320 	and.w	r3, r3, #32
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00f      	beq.n	800b716 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	699a      	ldr	r2, [r3, #24]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f042 0220 	orr.w	r2, r2, #32
 800b714:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d014      	beq.n	800b74c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00f      	beq.n	800b74c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b732:	f043 0204 	orr.w	r2, r3, #4
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	699a      	ldr	r2, [r3, #24]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b74a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00f      	beq.n	800b776 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75c:	f043 0201 	orr.w	r2, r3, #1
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	699a      	ldr	r2, [r3, #24]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b774:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00f      	beq.n	800b7a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b786:	f043 0208 	orr.w	r2, r3, #8
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b79e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	fffffc90 	.word	0xfffffc90

0800b7c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7cc:	095b      	lsrs	r3, r3, #5
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	08db      	lsrs	r3, r3, #3
 800b7e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	fb02 f303 	mul.w	r3, r2, r3
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e049      	b.n	800b89c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d106      	bne.n	800b822 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7f6 ffe9 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2202      	movs	r2, #2
 800b826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f000 fcb9 	bl	800c1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d001      	beq.n	800b8bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e047      	b.n	800b94c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a23      	ldr	r2, [pc, #140]	; (800b958 <HAL_TIM_Base_Start+0xb4>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d01d      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d6:	d018      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a1f      	ldr	r2, [pc, #124]	; (800b95c <HAL_TIM_Base_Start+0xb8>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d013      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a1e      	ldr	r2, [pc, #120]	; (800b960 <HAL_TIM_Base_Start+0xbc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d00e      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a1c      	ldr	r2, [pc, #112]	; (800b964 <HAL_TIM_Base_Start+0xc0>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d009      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a1b      	ldr	r2, [pc, #108]	; (800b968 <HAL_TIM_Base_Start+0xc4>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d004      	beq.n	800b90a <HAL_TIM_Base_Start+0x66>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a19      	ldr	r2, [pc, #100]	; (800b96c <HAL_TIM_Base_Start+0xc8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d115      	bne.n	800b936 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	4b17      	ldr	r3, [pc, #92]	; (800b970 <HAL_TIM_Base_Start+0xcc>)
 800b912:	4013      	ands	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b06      	cmp	r3, #6
 800b91a:	d015      	beq.n	800b948 <HAL_TIM_Base_Start+0xa4>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b922:	d011      	beq.n	800b948 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b934:	e008      	b.n	800b948 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f042 0201 	orr.w	r2, r2, #1
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	e000      	b.n	800b94a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	40010000 	.word	0x40010000
 800b95c:	40000400 	.word	0x40000400
 800b960:	40000800 	.word	0x40000800
 800b964:	40000c00 	.word	0x40000c00
 800b968:	40010400 	.word	0x40010400
 800b96c:	40001800 	.word	0x40001800
 800b970:	00010007 	.word	0x00010007

0800b974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	d001      	beq.n	800b98c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	e04f      	b.n	800ba2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f042 0201 	orr.w	r2, r2, #1
 800b9a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a23      	ldr	r2, [pc, #140]	; (800ba38 <HAL_TIM_Base_Start_IT+0xc4>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d01d      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b6:	d018      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a1f      	ldr	r2, [pc, #124]	; (800ba3c <HAL_TIM_Base_Start_IT+0xc8>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d013      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a1e      	ldr	r2, [pc, #120]	; (800ba40 <HAL_TIM_Base_Start_IT+0xcc>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d00e      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1c      	ldr	r2, [pc, #112]	; (800ba44 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d009      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a1b      	ldr	r2, [pc, #108]	; (800ba48 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d004      	beq.n	800b9ea <HAL_TIM_Base_Start_IT+0x76>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a19      	ldr	r2, [pc, #100]	; (800ba4c <HAL_TIM_Base_Start_IT+0xd8>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d115      	bne.n	800ba16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	4b17      	ldr	r3, [pc, #92]	; (800ba50 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b06      	cmp	r3, #6
 800b9fa:	d015      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0xb4>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba02:	d011      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba14:	e008      	b.n	800ba28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f042 0201 	orr.w	r2, r2, #1
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	e000      	b.n	800ba2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	40010000 	.word	0x40010000
 800ba3c:	40000400 	.word	0x40000400
 800ba40:	40000800 	.word	0x40000800
 800ba44:	40000c00 	.word	0x40000c00
 800ba48:	40010400 	.word	0x40010400
 800ba4c:	40001800 	.word	0x40001800
 800ba50:	00010007 	.word	0x00010007

0800ba54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e049      	b.n	800bafa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f841 	bl	800bb02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2202      	movs	r2, #2
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3304      	adds	r3, #4
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f000 fb8a 	bl	800c1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb0a:	bf00      	nop
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d122      	bne.n	800bb72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d11b      	bne.n	800bb72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f06f 0202 	mvn.w	r2, #2
 800bb42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	f003 0303 	and.w	r3, r3, #3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fb09 	bl	800c170 <HAL_TIM_IC_CaptureCallback>
 800bb5e:	e005      	b.n	800bb6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fafb 	bl	800c15c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fb0c 	bl	800c184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d122      	bne.n	800bbc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	2b04      	cmp	r3, #4
 800bb8c:	d11b      	bne.n	800bbc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f06f 0204 	mvn.w	r2, #4
 800bb96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fadf 	bl	800c170 <HAL_TIM_IC_CaptureCallback>
 800bbb2:	e005      	b.n	800bbc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fad1 	bl	800c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fae2 	bl	800c184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	f003 0308 	and.w	r3, r3, #8
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d122      	bne.n	800bc1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f003 0308 	and.w	r3, r3, #8
 800bbde:	2b08      	cmp	r3, #8
 800bbe0:	d11b      	bne.n	800bc1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f06f 0208 	mvn.w	r2, #8
 800bbea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	f003 0303 	and.w	r3, r3, #3
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fab5 	bl	800c170 <HAL_TIM_IC_CaptureCallback>
 800bc06:	e005      	b.n	800bc14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 faa7 	bl	800c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fab8 	bl	800c184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	f003 0310 	and.w	r3, r3, #16
 800bc24:	2b10      	cmp	r3, #16
 800bc26:	d122      	bne.n	800bc6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f003 0310 	and.w	r3, r3, #16
 800bc32:	2b10      	cmp	r3, #16
 800bc34:	d11b      	bne.n	800bc6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f06f 0210 	mvn.w	r2, #16
 800bc3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2208      	movs	r2, #8
 800bc44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fa8b 	bl	800c170 <HAL_TIM_IC_CaptureCallback>
 800bc5a:	e005      	b.n	800bc68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fa7d 	bl	800c15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa8e 	bl	800c184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d10e      	bne.n	800bc9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d107      	bne.n	800bc9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f06f 0201 	mvn.w	r2, #1
 800bc92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7f6 fc4b 	bl	8002530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca4:	2b80      	cmp	r3, #128	; 0x80
 800bca6:	d10e      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d107      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bcbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 ff0b 	bl	800cadc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd4:	d10e      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce0:	2b80      	cmp	r3, #128	; 0x80
 800bce2:	d107      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fefe 	bl	800caf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcfe:	2b40      	cmp	r3, #64	; 0x40
 800bd00:	d10e      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0c:	2b40      	cmp	r3, #64	; 0x40
 800bd0e:	d107      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa3c 	bl	800c198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f003 0320 	and.w	r3, r3, #32
 800bd2a:	2b20      	cmp	r3, #32
 800bd2c:	d10e      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f003 0320 	and.w	r3, r3, #32
 800bd38:	2b20      	cmp	r3, #32
 800bd3a:	d107      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f06f 0220 	mvn.w	r2, #32
 800bd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 febe 	bl	800cac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e0fd      	b.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b14      	cmp	r3, #20
 800bd7a:	f200 80f0 	bhi.w	800bf5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bf5f 	.word	0x0800bf5f
 800bd8c:	0800bf5f 	.word	0x0800bf5f
 800bd90:	0800bf5f 	.word	0x0800bf5f
 800bd94:	0800be19 	.word	0x0800be19
 800bd98:	0800bf5f 	.word	0x0800bf5f
 800bd9c:	0800bf5f 	.word	0x0800bf5f
 800bda0:	0800bf5f 	.word	0x0800bf5f
 800bda4:	0800be5b 	.word	0x0800be5b
 800bda8:	0800bf5f 	.word	0x0800bf5f
 800bdac:	0800bf5f 	.word	0x0800bf5f
 800bdb0:	0800bf5f 	.word	0x0800bf5f
 800bdb4:	0800be9b 	.word	0x0800be9b
 800bdb8:	0800bf5f 	.word	0x0800bf5f
 800bdbc:	0800bf5f 	.word	0x0800bf5f
 800bdc0:	0800bf5f 	.word	0x0800bf5f
 800bdc4:	0800bedd 	.word	0x0800bedd
 800bdc8:	0800bf5f 	.word	0x0800bf5f
 800bdcc:	0800bf5f 	.word	0x0800bf5f
 800bdd0:	0800bf5f 	.word	0x0800bf5f
 800bdd4:	0800bf1d 	.word	0x0800bf1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68b9      	ldr	r1, [r7, #8]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fa7e 	bl	800c2e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699a      	ldr	r2, [r3, #24]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f042 0208 	orr.w	r2, r2, #8
 800bdf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0204 	bic.w	r2, r2, #4
 800be02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6999      	ldr	r1, [r3, #24]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	691a      	ldr	r2, [r3, #16]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	619a      	str	r2, [r3, #24]
      break;
 800be16:	e0a3      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 faee 	bl	800c400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	699a      	ldr	r2, [r3, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6999      	ldr	r1, [r3, #24]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	021a      	lsls	r2, r3, #8
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	619a      	str	r2, [r3, #24]
      break;
 800be58:	e082      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fb57 	bl	800c514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69da      	ldr	r2, [r3, #28]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0208 	orr.w	r2, r2, #8
 800be74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f022 0204 	bic.w	r2, r2, #4
 800be84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69d9      	ldr	r1, [r3, #28]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	691a      	ldr	r2, [r3, #16]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	61da      	str	r2, [r3, #28]
      break;
 800be98:	e062      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68b9      	ldr	r1, [r7, #8]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fbbd 	bl	800c620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69da      	ldr	r2, [r3, #28]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69da      	ldr	r2, [r3, #28]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69d9      	ldr	r1, [r3, #28]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	021a      	lsls	r2, r3, #8
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	61da      	str	r2, [r3, #28]
      break;
 800beda:	e041      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fc04 	bl	800c6f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0208 	orr.w	r2, r2, #8
 800bef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0204 	bic.w	r2, r2, #4
 800bf06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	691a      	ldr	r2, [r3, #16]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf1a:	e021      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fc46 	bl	800c7b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	021a      	lsls	r2, r3, #8
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf5c:	e000      	b.n	800bf60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bf5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop

0800bf74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d101      	bne.n	800bf8c <HAL_TIM_ConfigClockSource+0x18>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	e0db      	b.n	800c144 <HAL_TIM_ConfigClockSource+0x1d0>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2202      	movs	r2, #2
 800bf98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4b69      	ldr	r3, [pc, #420]	; (800c14c <HAL_TIM_ConfigClockSource+0x1d8>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a63      	ldr	r2, [pc, #396]	; (800c150 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	f000 80a9 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800bfc8:	4a61      	ldr	r2, [pc, #388]	; (800c150 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	f200 80ae 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800bfd0:	4a60      	ldr	r2, [pc, #384]	; (800c154 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	f000 80a1 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800bfd8:	4a5e      	ldr	r2, [pc, #376]	; (800c154 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	f200 80a6 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800bfe0:	4a5d      	ldr	r2, [pc, #372]	; (800c158 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	f000 8099 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800bfe8:	4a5b      	ldr	r2, [pc, #364]	; (800c158 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	f200 809e 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800bff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bff4:	f000 8091 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800bff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bffc:	f200 8096 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c004:	f000 8089 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800c008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c00c:	f200 808e 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c014:	d03e      	beq.n	800c094 <HAL_TIM_ConfigClockSource+0x120>
 800c016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c01a:	f200 8087 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c022:	f000 8085 	beq.w	800c130 <HAL_TIM_ConfigClockSource+0x1bc>
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02a:	d87f      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c02c:	2b70      	cmp	r3, #112	; 0x70
 800c02e:	d01a      	beq.n	800c066 <HAL_TIM_ConfigClockSource+0xf2>
 800c030:	2b70      	cmp	r3, #112	; 0x70
 800c032:	d87b      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c034:	2b60      	cmp	r3, #96	; 0x60
 800c036:	d050      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x166>
 800c038:	2b60      	cmp	r3, #96	; 0x60
 800c03a:	d877      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c03c:	2b50      	cmp	r3, #80	; 0x50
 800c03e:	d03c      	beq.n	800c0ba <HAL_TIM_ConfigClockSource+0x146>
 800c040:	2b50      	cmp	r3, #80	; 0x50
 800c042:	d873      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	d058      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x186>
 800c048:	2b40      	cmp	r3, #64	; 0x40
 800c04a:	d86f      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c04c:	2b30      	cmp	r3, #48	; 0x30
 800c04e:	d064      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800c050:	2b30      	cmp	r3, #48	; 0x30
 800c052:	d86b      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c054:	2b20      	cmp	r3, #32
 800c056:	d060      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d867      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d05c      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
 800c060:	2b10      	cmp	r3, #16
 800c062:	d05a      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c064:	e062      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	6899      	ldr	r1, [r3, #8]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f000 fc7f 	bl	800c978 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	609a      	str	r2, [r3, #8]
      break;
 800c092:	e04e      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	6899      	ldr	r1, [r3, #8]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f000 fc68 	bl	800c978 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689a      	ldr	r2, [r3, #8]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0b6:	609a      	str	r2, [r3, #8]
      break;
 800c0b8:	e03b      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6859      	ldr	r1, [r3, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f000 fbd8 	bl	800c87c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2150      	movs	r1, #80	; 0x50
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 fc32 	bl	800c93c <TIM_ITRx_SetConfig>
      break;
 800c0d8:	e02b      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6859      	ldr	r1, [r3, #4]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f000 fbf7 	bl	800c8da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2160      	movs	r1, #96	; 0x60
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fc22 	bl	800c93c <TIM_ITRx_SetConfig>
      break;
 800c0f8:	e01b      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	6859      	ldr	r1, [r3, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	461a      	mov	r2, r3
 800c108:	f000 fbb8 	bl	800c87c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2140      	movs	r1, #64	; 0x40
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fc12 	bl	800c93c <TIM_ITRx_SetConfig>
      break;
 800c118:	e00b      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f000 fc09 	bl	800c93c <TIM_ITRx_SetConfig>
        break;
 800c12a:	e002      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c12c:	bf00      	nop
 800c12e:	e000      	b.n	800c132 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	ffceff88 	.word	0xffceff88
 800c150:	00100040 	.word	0x00100040
 800c154:	00100030 	.word	0x00100030
 800c158:	00100020 	.word	0x00100020

0800c15c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a40      	ldr	r2, [pc, #256]	; (800c2c0 <TIM_Base_SetConfig+0x114>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d013      	beq.n	800c1ec <TIM_Base_SetConfig+0x40>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ca:	d00f      	beq.n	800c1ec <TIM_Base_SetConfig+0x40>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a3d      	ldr	r2, [pc, #244]	; (800c2c4 <TIM_Base_SetConfig+0x118>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d00b      	beq.n	800c1ec <TIM_Base_SetConfig+0x40>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a3c      	ldr	r2, [pc, #240]	; (800c2c8 <TIM_Base_SetConfig+0x11c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d007      	beq.n	800c1ec <TIM_Base_SetConfig+0x40>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a3b      	ldr	r2, [pc, #236]	; (800c2cc <TIM_Base_SetConfig+0x120>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d003      	beq.n	800c1ec <TIM_Base_SetConfig+0x40>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a3a      	ldr	r2, [pc, #232]	; (800c2d0 <TIM_Base_SetConfig+0x124>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d108      	bne.n	800c1fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a2f      	ldr	r2, [pc, #188]	; (800c2c0 <TIM_Base_SetConfig+0x114>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d01f      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c20c:	d01b      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a2c      	ldr	r2, [pc, #176]	; (800c2c4 <TIM_Base_SetConfig+0x118>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d017      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a2b      	ldr	r2, [pc, #172]	; (800c2c8 <TIM_Base_SetConfig+0x11c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d013      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a2a      	ldr	r2, [pc, #168]	; (800c2cc <TIM_Base_SetConfig+0x120>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00f      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a29      	ldr	r2, [pc, #164]	; (800c2d0 <TIM_Base_SetConfig+0x124>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00b      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a28      	ldr	r2, [pc, #160]	; (800c2d4 <TIM_Base_SetConfig+0x128>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d007      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a27      	ldr	r2, [pc, #156]	; (800c2d8 <TIM_Base_SetConfig+0x12c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d003      	beq.n	800c246 <TIM_Base_SetConfig+0x9a>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a26      	ldr	r2, [pc, #152]	; (800c2dc <TIM_Base_SetConfig+0x130>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d108      	bne.n	800c258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c24c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4313      	orrs	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	689a      	ldr	r2, [r3, #8]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a10      	ldr	r2, [pc, #64]	; (800c2c0 <TIM_Base_SetConfig+0x114>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00f      	beq.n	800c2a4 <TIM_Base_SetConfig+0xf8>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a12      	ldr	r2, [pc, #72]	; (800c2d0 <TIM_Base_SetConfig+0x124>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d00b      	beq.n	800c2a4 <TIM_Base_SetConfig+0xf8>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a11      	ldr	r2, [pc, #68]	; (800c2d4 <TIM_Base_SetConfig+0x128>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d007      	beq.n	800c2a4 <TIM_Base_SetConfig+0xf8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a10      	ldr	r2, [pc, #64]	; (800c2d8 <TIM_Base_SetConfig+0x12c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d003      	beq.n	800c2a4 <TIM_Base_SetConfig+0xf8>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a0f      	ldr	r2, [pc, #60]	; (800c2dc <TIM_Base_SetConfig+0x130>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d103      	bne.n	800c2ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	615a      	str	r2, [r3, #20]
}
 800c2b2:	bf00      	nop
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	40010000 	.word	0x40010000
 800c2c4:	40000400 	.word	0x40000400
 800c2c8:	40000800 	.word	0x40000800
 800c2cc:	40000c00 	.word	0x40000c00
 800c2d0:	40010400 	.word	0x40010400
 800c2d4:	40014000 	.word	0x40014000
 800c2d8:	40014400 	.word	0x40014400
 800c2dc:	40014800 	.word	0x40014800

0800c2e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	f023 0201 	bic.w	r2, r3, #1
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	4b37      	ldr	r3, [pc, #220]	; (800c3e8 <TIM_OC1_SetConfig+0x108>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f023 0302 	bic.w	r3, r3, #2
 800c328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	4313      	orrs	r3, r2
 800c332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a2d      	ldr	r2, [pc, #180]	; (800c3ec <TIM_OC1_SetConfig+0x10c>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d00f      	beq.n	800c35c <TIM_OC1_SetConfig+0x7c>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a2c      	ldr	r2, [pc, #176]	; (800c3f0 <TIM_OC1_SetConfig+0x110>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d00b      	beq.n	800c35c <TIM_OC1_SetConfig+0x7c>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a2b      	ldr	r2, [pc, #172]	; (800c3f4 <TIM_OC1_SetConfig+0x114>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d007      	beq.n	800c35c <TIM_OC1_SetConfig+0x7c>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a2a      	ldr	r2, [pc, #168]	; (800c3f8 <TIM_OC1_SetConfig+0x118>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d003      	beq.n	800c35c <TIM_OC1_SetConfig+0x7c>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a29      	ldr	r2, [pc, #164]	; (800c3fc <TIM_OC1_SetConfig+0x11c>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d10c      	bne.n	800c376 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	f023 0308 	bic.w	r3, r3, #8
 800c362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f023 0304 	bic.w	r3, r3, #4
 800c374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a1c      	ldr	r2, [pc, #112]	; (800c3ec <TIM_OC1_SetConfig+0x10c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d00f      	beq.n	800c39e <TIM_OC1_SetConfig+0xbe>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a1b      	ldr	r2, [pc, #108]	; (800c3f0 <TIM_OC1_SetConfig+0x110>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d00b      	beq.n	800c39e <TIM_OC1_SetConfig+0xbe>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a1a      	ldr	r2, [pc, #104]	; (800c3f4 <TIM_OC1_SetConfig+0x114>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d007      	beq.n	800c39e <TIM_OC1_SetConfig+0xbe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a19      	ldr	r2, [pc, #100]	; (800c3f8 <TIM_OC1_SetConfig+0x118>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d003      	beq.n	800c39e <TIM_OC1_SetConfig+0xbe>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a18      	ldr	r2, [pc, #96]	; (800c3fc <TIM_OC1_SetConfig+0x11c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d111      	bne.n	800c3c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	621a      	str	r2, [r3, #32]
}
 800c3dc:	bf00      	nop
 800c3de:	371c      	adds	r7, #28
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	fffeff8f 	.word	0xfffeff8f
 800c3ec:	40010000 	.word	0x40010000
 800c3f0:	40010400 	.word	0x40010400
 800c3f4:	40014000 	.word	0x40014000
 800c3f8:	40014400 	.word	0x40014400
 800c3fc:	40014800 	.word	0x40014800

0800c400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	f023 0210 	bic.w	r2, r3, #16
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4b34      	ldr	r3, [pc, #208]	; (800c4fc <TIM_OC2_SetConfig+0xfc>)
 800c42c:	4013      	ands	r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	021b      	lsls	r3, r3, #8
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	4313      	orrs	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f023 0320 	bic.w	r3, r3, #32
 800c44a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a29      	ldr	r2, [pc, #164]	; (800c500 <TIM_OC2_SetConfig+0x100>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d003      	beq.n	800c468 <TIM_OC2_SetConfig+0x68>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a28      	ldr	r2, [pc, #160]	; (800c504 <TIM_OC2_SetConfig+0x104>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d10d      	bne.n	800c484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c46e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a1e      	ldr	r2, [pc, #120]	; (800c500 <TIM_OC2_SetConfig+0x100>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d00f      	beq.n	800c4ac <TIM_OC2_SetConfig+0xac>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a1d      	ldr	r2, [pc, #116]	; (800c504 <TIM_OC2_SetConfig+0x104>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d00b      	beq.n	800c4ac <TIM_OC2_SetConfig+0xac>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a1c      	ldr	r2, [pc, #112]	; (800c508 <TIM_OC2_SetConfig+0x108>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d007      	beq.n	800c4ac <TIM_OC2_SetConfig+0xac>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a1b      	ldr	r2, [pc, #108]	; (800c50c <TIM_OC2_SetConfig+0x10c>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d003      	beq.n	800c4ac <TIM_OC2_SetConfig+0xac>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a1a      	ldr	r2, [pc, #104]	; (800c510 <TIM_OC2_SetConfig+0x110>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d113      	bne.n	800c4d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	621a      	str	r2, [r3, #32]
}
 800c4ee:	bf00      	nop
 800c4f0:	371c      	adds	r7, #28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	feff8fff 	.word	0xfeff8fff
 800c500:	40010000 	.word	0x40010000
 800c504:	40010400 	.word	0x40010400
 800c508:	40014000 	.word	0x40014000
 800c50c:	40014400 	.word	0x40014400
 800c510:	40014800 	.word	0x40014800

0800c514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	021b      	lsls	r3, r3, #8
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	4313      	orrs	r3, r2
 800c568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a27      	ldr	r2, [pc, #156]	; (800c60c <TIM_OC3_SetConfig+0xf8>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d003      	beq.n	800c57a <TIM_OC3_SetConfig+0x66>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a26      	ldr	r2, [pc, #152]	; (800c610 <TIM_OC3_SetConfig+0xfc>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d10d      	bne.n	800c596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a1c      	ldr	r2, [pc, #112]	; (800c60c <TIM_OC3_SetConfig+0xf8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00f      	beq.n	800c5be <TIM_OC3_SetConfig+0xaa>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a1b      	ldr	r2, [pc, #108]	; (800c610 <TIM_OC3_SetConfig+0xfc>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d00b      	beq.n	800c5be <TIM_OC3_SetConfig+0xaa>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a1a      	ldr	r2, [pc, #104]	; (800c614 <TIM_OC3_SetConfig+0x100>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d007      	beq.n	800c5be <TIM_OC3_SetConfig+0xaa>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a19      	ldr	r2, [pc, #100]	; (800c618 <TIM_OC3_SetConfig+0x104>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d003      	beq.n	800c5be <TIM_OC3_SetConfig+0xaa>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a18      	ldr	r2, [pc, #96]	; (800c61c <TIM_OC3_SetConfig+0x108>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d113      	bne.n	800c5e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	011b      	lsls	r3, r3, #4
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	011b      	lsls	r3, r3, #4
 800c5e0:	693a      	ldr	r2, [r7, #16]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	621a      	str	r2, [r3, #32]
}
 800c600:	bf00      	nop
 800c602:	371c      	adds	r7, #28
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	40010000 	.word	0x40010000
 800c610:	40010400 	.word	0x40010400
 800c614:	40014000 	.word	0x40014000
 800c618:	40014400 	.word	0x40014400
 800c61c:	40014800 	.word	0x40014800

0800c620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	4313      	orrs	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c66a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	031b      	lsls	r3, r3, #12
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	4313      	orrs	r3, r2
 800c676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a18      	ldr	r2, [pc, #96]	; (800c6dc <TIM_OC4_SetConfig+0xbc>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00f      	beq.n	800c6a0 <TIM_OC4_SetConfig+0x80>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a17      	ldr	r2, [pc, #92]	; (800c6e0 <TIM_OC4_SetConfig+0xc0>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d00b      	beq.n	800c6a0 <TIM_OC4_SetConfig+0x80>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a16      	ldr	r2, [pc, #88]	; (800c6e4 <TIM_OC4_SetConfig+0xc4>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d007      	beq.n	800c6a0 <TIM_OC4_SetConfig+0x80>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a15      	ldr	r2, [pc, #84]	; (800c6e8 <TIM_OC4_SetConfig+0xc8>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d003      	beq.n	800c6a0 <TIM_OC4_SetConfig+0x80>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a14      	ldr	r2, [pc, #80]	; (800c6ec <TIM_OC4_SetConfig+0xcc>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d109      	bne.n	800c6b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	695b      	ldr	r3, [r3, #20]
 800c6ac:	019b      	lsls	r3, r3, #6
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	621a      	str	r2, [r3, #32]
}
 800c6ce:	bf00      	nop
 800c6d0:	371c      	adds	r7, #28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	40010000 	.word	0x40010000
 800c6e0:	40010400 	.word	0x40010400
 800c6e4:	40014000 	.word	0x40014000
 800c6e8:	40014400 	.word	0x40014400
 800c6ec:	40014800 	.word	0x40014800

0800c6f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	041b      	lsls	r3, r3, #16
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a17      	ldr	r2, [pc, #92]	; (800c7a0 <TIM_OC5_SetConfig+0xb0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d00f      	beq.n	800c766 <TIM_OC5_SetConfig+0x76>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a16      	ldr	r2, [pc, #88]	; (800c7a4 <TIM_OC5_SetConfig+0xb4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d00b      	beq.n	800c766 <TIM_OC5_SetConfig+0x76>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <TIM_OC5_SetConfig+0xb8>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d007      	beq.n	800c766 <TIM_OC5_SetConfig+0x76>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a14      	ldr	r2, [pc, #80]	; (800c7ac <TIM_OC5_SetConfig+0xbc>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d003      	beq.n	800c766 <TIM_OC5_SetConfig+0x76>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a13      	ldr	r2, [pc, #76]	; (800c7b0 <TIM_OC5_SetConfig+0xc0>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d109      	bne.n	800c77a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c76c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	021b      	lsls	r3, r3, #8
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	621a      	str	r2, [r3, #32]
}
 800c794:	bf00      	nop
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	40010000 	.word	0x40010000
 800c7a4:	40010400 	.word	0x40010400
 800c7a8:	40014000 	.word	0x40014000
 800c7ac:	40014400 	.word	0x40014400
 800c7b0:	40014800 	.word	0x40014800

0800c7b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	051b      	lsls	r3, r3, #20
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	4313      	orrs	r3, r2
 800c802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a18      	ldr	r2, [pc, #96]	; (800c868 <TIM_OC6_SetConfig+0xb4>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d00f      	beq.n	800c82c <TIM_OC6_SetConfig+0x78>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a17      	ldr	r2, [pc, #92]	; (800c86c <TIM_OC6_SetConfig+0xb8>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00b      	beq.n	800c82c <TIM_OC6_SetConfig+0x78>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a16      	ldr	r2, [pc, #88]	; (800c870 <TIM_OC6_SetConfig+0xbc>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d007      	beq.n	800c82c <TIM_OC6_SetConfig+0x78>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a15      	ldr	r2, [pc, #84]	; (800c874 <TIM_OC6_SetConfig+0xc0>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d003      	beq.n	800c82c <TIM_OC6_SetConfig+0x78>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a14      	ldr	r2, [pc, #80]	; (800c878 <TIM_OC6_SetConfig+0xc4>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d109      	bne.n	800c840 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	029b      	lsls	r3, r3, #10
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	621a      	str	r2, [r3, #32]
}
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	40010000 	.word	0x40010000
 800c86c:	40010400 	.word	0x40010400
 800c870:	40014000 	.word	0x40014000
 800c874:	40014400 	.word	0x40014400
 800c878:	40014800 	.word	0x40014800

0800c87c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	f023 0201 	bic.w	r2, r3, #1
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	011b      	lsls	r3, r3, #4
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f023 030a 	bic.w	r3, r3, #10
 800c8b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	621a      	str	r2, [r3, #32]
}
 800c8ce:	bf00      	nop
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b087      	sub	sp, #28
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	f023 0210 	bic.w	r2, r3, #16
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6a1b      	ldr	r3, [r3, #32]
 800c8fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	031b      	lsls	r3, r3, #12
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	011b      	lsls	r3, r3, #4
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4b09      	ldr	r3, [pc, #36]	; (800c974 <TIM_ITRx_SetConfig+0x38>)
 800c950:	4013      	ands	r3, r2
 800c952:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	4313      	orrs	r3, r2
 800c95a:	f043 0307 	orr.w	r3, r3, #7
 800c95e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	609a      	str	r2, [r3, #8]
}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	ffcfff8f 	.word	0xffcfff8f

0800c978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	021a      	lsls	r2, r3, #8
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	431a      	orrs	r2, r3
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	609a      	str	r2, [r3, #8]
}
 800c9ac:	bf00      	nop
 800c9ae:	371c      	adds	r7, #28
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d101      	bne.n	800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e068      	b.n	800caa2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2202      	movs	r2, #2
 800c9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a2e      	ldr	r2, [pc, #184]	; (800cab0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d004      	beq.n	800ca04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d108      	bne.n	800ca16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a1e      	ldr	r2, [pc, #120]	; (800cab0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d01d      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca42:	d018      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a1b      	ldr	r2, [pc, #108]	; (800cab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d013      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a1a      	ldr	r2, [pc, #104]	; (800cabc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d00e      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a18      	ldr	r2, [pc, #96]	; (800cac0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d009      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a13      	ldr	r2, [pc, #76]	; (800cab4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d004      	beq.n	800ca76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a14      	ldr	r2, [pc, #80]	; (800cac4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d10c      	bne.n	800ca90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	4313      	orrs	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	40010000 	.word	0x40010000
 800cab4:	40010400 	.word	0x40010400
 800cab8:	40000400 	.word	0x40000400
 800cabc:	40000800 	.word	0x40000800
 800cac0:	40000c00 	.word	0x40000c00
 800cac4:	40001800 	.word	0x40001800

0800cac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e042      	b.n	800cb9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7f5 ff15 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2224      	movs	r2, #36	; 0x24
 800cb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f022 0201 	bic.w	r2, r2, #1
 800cb44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fd40 	bl	800d5cc <UART_SetConfig>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d101      	bne.n	800cb56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e022      	b.n	800cb9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 fa94 	bl	800e08c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	689a      	ldr	r2, [r3, #8]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0201 	orr.w	r2, r2, #1
 800cb92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 fb1b 	bl	800e1d0 <UART_CheckIdleState>
 800cb9a:	4603      	mov	r3, r0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08a      	sub	sp, #40	; 0x28
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbba:	2b20      	cmp	r3, #32
 800cbbc:	f040 8083 	bne.w	800ccc6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_UART_Transmit+0x28>
 800cbc6:	88fb      	ldrh	r3, [r7, #6]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e07b      	b.n	800ccc8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d101      	bne.n	800cbde <HAL_UART_Transmit+0x3a>
 800cbda:	2302      	movs	r3, #2
 800cbdc:	e074      	b.n	800ccc8 <HAL_UART_Transmit+0x124>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2221      	movs	r2, #33	; 0x21
 800cbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbf6:	f7f6 fb4b 	bl	8003290 <HAL_GetTick>
 800cbfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	88fa      	ldrh	r2, [r7, #6]
 800cc00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	88fa      	ldrh	r2, [r7, #6]
 800cc08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc14:	d108      	bne.n	800cc28 <HAL_UART_Transmit+0x84>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d104      	bne.n	800cc28 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	61bb      	str	r3, [r7, #24]
 800cc26:	e003      	b.n	800cc30 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cc38:	e02c      	b.n	800cc94 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2200      	movs	r2, #0
 800cc42:	2180      	movs	r1, #128	; 0x80
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f001 fb0e 	bl	800e266 <UART_WaitOnFlagUntilTimeout>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cc50:	2303      	movs	r3, #3
 800cc52:	e039      	b.n	800ccc8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10b      	bne.n	800cc72 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	881b      	ldrh	r3, [r3, #0]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	3302      	adds	r3, #2
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	e007      	b.n	800cc82 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	781a      	ldrb	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1cc      	bne.n	800cc3a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	2140      	movs	r1, #64	; 0x40
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f001 fadb 	bl	800e266 <UART_WaitOnFlagUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	e006      	b.n	800ccc8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2220      	movs	r2, #32
 800ccbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e000      	b.n	800ccc8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ccc6:	2302      	movs	r3, #2
  }
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	603b      	str	r3, [r7, #0]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cce6:	2b20      	cmp	r3, #32
 800cce8:	f040 80c0 	bne.w	800ce6c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <HAL_UART_Receive+0x28>
 800ccf2:	88fb      	ldrh	r3, [r7, #6]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e0b8      	b.n	800ce6e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d101      	bne.n	800cd0a <HAL_UART_Receive+0x3a>
 800cd06:	2302      	movs	r3, #2
 800cd08:	e0b1      	b.n	800ce6e <HAL_UART_Receive+0x19e>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2222      	movs	r2, #34	; 0x22
 800cd1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd28:	f7f6 fab2 	bl	8003290 <HAL_GetTick>
 800cd2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	88fa      	ldrh	r2, [r7, #6]
 800cd32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	88fa      	ldrh	r2, [r7, #6]
 800cd3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd46:	d10e      	bne.n	800cd66 <HAL_UART_Receive+0x96>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d105      	bne.n	800cd5c <HAL_UART_Receive+0x8c>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cd56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd5a:	e02d      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	22ff      	movs	r2, #255	; 0xff
 800cd60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd64:	e028      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10d      	bne.n	800cd8a <HAL_UART_Receive+0xba>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d104      	bne.n	800cd80 <HAL_UART_Receive+0xb0>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	22ff      	movs	r2, #255	; 0xff
 800cd7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd7e:	e01b      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	227f      	movs	r2, #127	; 0x7f
 800cd84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd88:	e016      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd92:	d10d      	bne.n	800cdb0 <HAL_UART_Receive+0xe0>
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <HAL_UART_Receive+0xd6>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	227f      	movs	r2, #127	; 0x7f
 800cda0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cda4:	e008      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	223f      	movs	r2, #63	; 0x3f
 800cdaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdae:	e003      	b.n	800cdb8 <HAL_UART_Receive+0xe8>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdbe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdc8:	d108      	bne.n	800cddc <HAL_UART_Receive+0x10c>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d104      	bne.n	800cddc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	e003      	b.n	800cde4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cdec:	e032      	b.n	800ce54 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	2120      	movs	r1, #32
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f001 fa34 	bl	800e266 <UART_WaitOnFlagUntilTimeout>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e032      	b.n	800ce6e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10c      	bne.n	800ce28 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	8a7b      	ldrh	r3, [r7, #18]
 800ce18:	4013      	ands	r3, r2
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	3302      	adds	r3, #2
 800ce24:	61bb      	str	r3, [r7, #24]
 800ce26:	e00c      	b.n	800ce42 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	8a7b      	ldrh	r3, [r7, #18]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	4013      	ands	r3, r2
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1c6      	bne.n	800cdee <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2220      	movs	r2, #32
 800ce64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	e000      	b.n	800ce6e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ce6c:	2302      	movs	r3, #2
  }
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3720      	adds	r7, #32
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce8c:	2b20      	cmp	r3, #32
 800ce8e:	d168      	bne.n	800cf62 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <HAL_UART_Transmit_DMA+0x24>
 800ce96:	88fb      	ldrh	r3, [r7, #6]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e061      	b.n	800cf64 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d101      	bne.n	800ceae <HAL_UART_Transmit_DMA+0x36>
 800ceaa:	2302      	movs	r3, #2
 800ceac:	e05a      	b.n	800cf64 <HAL_UART_Transmit_DMA+0xec>
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	88fa      	ldrh	r2, [r7, #6]
 800cec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	88fa      	ldrh	r2, [r7, #6]
 800cec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2221      	movs	r2, #33	; 0x21
 800ced8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d02c      	beq.n	800cf3e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cee8:	4a20      	ldr	r2, [pc, #128]	; (800cf6c <HAL_UART_Transmit_DMA+0xf4>)
 800ceea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef0:	4a1f      	ldr	r2, [pc, #124]	; (800cf70 <HAL_UART_Transmit_DMA+0xf8>)
 800cef2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef8:	4a1e      	ldr	r2, [pc, #120]	; (800cf74 <HAL_UART_Transmit_DMA+0xfc>)
 800cefa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf00:	2200      	movs	r2, #0
 800cf02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3328      	adds	r3, #40	; 0x28
 800cf14:	461a      	mov	r2, r3
 800cf16:	88fb      	ldrh	r3, [r7, #6]
 800cf18:	f7f8 f896 	bl	8005048 <HAL_DMA_Start_IT>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00d      	beq.n	800cf3e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2210      	movs	r2, #16
 800cf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e012      	b.n	800cf64 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2240      	movs	r2, #64	; 0x40
 800cf44:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689a      	ldr	r2, [r3, #8]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf5c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e000      	b.n	800cf64 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800cf62:	2302      	movs	r3, #2
  }
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	0800e4e5 	.word	0x0800e4e5
 800cf70:	0800e535 	.word	0x0800e535
 800cf74:	0800e61f 	.word	0x0800e61f

0800cf78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8c:	2b20      	cmp	r3, #32
 800cf8e:	d131      	bne.n	800cff4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <HAL_UART_Receive_DMA+0x24>
 800cf96:	88fb      	ldrh	r3, [r7, #6]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e02a      	b.n	800cff6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d101      	bne.n	800cfae <HAL_UART_Receive_DMA+0x36>
 800cfaa:	2302      	movs	r3, #2
 800cfac:	e023      	b.n	800cff6 <HAL_UART_Receive_DMA+0x7e>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a0f      	ldr	r2, [pc, #60]	; (800d000 <HAL_UART_Receive_DMA+0x88>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d00e      	beq.n	800cfe4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d007      	beq.n	800cfe4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cfe2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	68b9      	ldr	r1, [r7, #8]
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f001 f9bc 	bl	800e368 <UART_Start_Receive_DMA>
 800cff0:	4603      	mov	r3, r0
 800cff2:	e000      	b.n	800cff6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800cff4:	2302      	movs	r3, #2
  }
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	58000c00 	.word	0x58000c00

0800d004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d024:	69fa      	ldr	r2, [r7, #28]
 800d026:	f640 030f 	movw	r3, #2063	; 0x80f
 800d02a:	4013      	ands	r3, r2
 800d02c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d118      	bne.n	800d066 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d013      	beq.n	800d066 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b00      	cmp	r3, #0
 800d046:	d104      	bne.n	800d052 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 8282 	beq.w	800d560 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	4798      	blx	r3
      }
      return;
 800d064:	e27c      	b.n	800d560 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 80ef 	beq.w	800d24c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	4b73      	ldr	r3, [pc, #460]	; (800d240 <HAL_UART_IRQHandler+0x23c>)
 800d072:	4013      	ands	r3, r2
 800d074:	2b00      	cmp	r3, #0
 800d076:	d105      	bne.n	800d084 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d078:	69ba      	ldr	r2, [r7, #24]
 800d07a:	4b72      	ldr	r3, [pc, #456]	; (800d244 <HAL_UART_IRQHandler+0x240>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80e4 	beq.w	800d24c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d010      	beq.n	800d0b0 <HAL_UART_IRQHandler+0xac>
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2201      	movs	r2, #1
 800d09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a6:	f043 0201 	orr.w	r2, r3, #1
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	f003 0302 	and.w	r3, r3, #2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d010      	beq.n	800d0dc <HAL_UART_IRQHandler+0xd8>
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00b      	beq.n	800d0dc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0d2:	f043 0204 	orr.w	r2, r3, #4
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0304 	and.w	r3, r3, #4
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d010      	beq.n	800d108 <HAL_UART_IRQHandler+0x104>
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0fe:	f043 0202 	orr.w	r2, r3, #2
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	f003 0308 	and.w	r3, r3, #8
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d015      	beq.n	800d13e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	f003 0320 	and.w	r3, r3, #32
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	4b48      	ldr	r3, [pc, #288]	; (800d240 <HAL_UART_IRQHandler+0x23c>)
 800d120:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00b      	beq.n	800d13e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2208      	movs	r2, #8
 800d12c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d134:	f043 0208 	orr.w	r2, r3, #8
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d144:	2b00      	cmp	r3, #0
 800d146:	d011      	beq.n	800d16c <HAL_UART_IRQHandler+0x168>
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00c      	beq.n	800d16c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d162:	f043 0220 	orr.w	r2, r3, #32
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 81f6 	beq.w	800d564 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	f003 0320 	and.w	r3, r3, #32
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d011      	beq.n	800d1a6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	f003 0320 	and.w	r3, r3, #32
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d104      	bne.n	800d196 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b8:	2b40      	cmp	r3, #64	; 0x40
 800d1ba:	d004      	beq.n	800d1c6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d031      	beq.n	800d22a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f001 f95a 	bl	800e480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d6:	2b40      	cmp	r3, #64	; 0x40
 800d1d8:	d123      	bne.n	800d222 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d013      	beq.n	800d21a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	4a14      	ldr	r2, [pc, #80]	; (800d248 <HAL_UART_IRQHandler+0x244>)
 800d1f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f8 fcaa 	bl	8005b58 <HAL_DMA_Abort_IT>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d017      	beq.n	800d23a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d214:	4610      	mov	r0, r2
 800d216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d218:	e00f      	b.n	800d23a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f9c0 	bl	800d5a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d220:	e00b      	b.n	800d23a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f9bc 	bl	800d5a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d228:	e007      	b.n	800d23a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f9b8 	bl	800d5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d238:	e194      	b.n	800d564 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23a:	bf00      	nop
    return;
 800d23c:	e192      	b.n	800d564 <HAL_UART_IRQHandler+0x560>
 800d23e:	bf00      	nop
 800d240:	10000001 	.word	0x10000001
 800d244:	04000120 	.word	0x04000120
 800d248:	0800e69f 	.word	0x0800e69f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d250:	2b01      	cmp	r3, #1
 800d252:	f040 810f 	bne.w	800d474 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	f003 0310 	and.w	r3, r3, #16
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 8109 	beq.w	800d474 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	f003 0310 	and.w	r3, r3, #16
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 8103 	beq.w	800d474 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2210      	movs	r2, #16
 800d274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d280:	2b40      	cmp	r3, #64	; 0x40
 800d282:	f040 80bb 	bne.w	800d3fc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a96      	ldr	r2, [pc, #600]	; (800d4e8 <HAL_UART_IRQHandler+0x4e4>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d059      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a94      	ldr	r2, [pc, #592]	; (800d4ec <HAL_UART_IRQHandler+0x4e8>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d053      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a92      	ldr	r2, [pc, #584]	; (800d4f0 <HAL_UART_IRQHandler+0x4ec>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d04d      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a90      	ldr	r2, [pc, #576]	; (800d4f4 <HAL_UART_IRQHandler+0x4f0>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d047      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a8e      	ldr	r2, [pc, #568]	; (800d4f8 <HAL_UART_IRQHandler+0x4f4>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d041      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a8c      	ldr	r2, [pc, #560]	; (800d4fc <HAL_UART_IRQHandler+0x4f8>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d03b      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a8a      	ldr	r2, [pc, #552]	; (800d500 <HAL_UART_IRQHandler+0x4fc>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d035      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a88      	ldr	r2, [pc, #544]	; (800d504 <HAL_UART_IRQHandler+0x500>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d02f      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a86      	ldr	r2, [pc, #536]	; (800d508 <HAL_UART_IRQHandler+0x504>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d029      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a84      	ldr	r2, [pc, #528]	; (800d50c <HAL_UART_IRQHandler+0x508>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d023      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a82      	ldr	r2, [pc, #520]	; (800d510 <HAL_UART_IRQHandler+0x50c>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d01d      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a80      	ldr	r2, [pc, #512]	; (800d514 <HAL_UART_IRQHandler+0x510>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d017      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a7e      	ldr	r2, [pc, #504]	; (800d518 <HAL_UART_IRQHandler+0x514>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d011      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a7c      	ldr	r2, [pc, #496]	; (800d51c <HAL_UART_IRQHandler+0x518>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00b      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a7a      	ldr	r2, [pc, #488]	; (800d520 <HAL_UART_IRQHandler+0x51c>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d005      	beq.n	800d346 <HAL_UART_IRQHandler+0x342>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a78      	ldr	r2, [pc, #480]	; (800d524 <HAL_UART_IRQHandler+0x520>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d105      	bne.n	800d352 <HAL_UART_IRQHandler+0x34e>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	e004      	b.n	800d35c <HAL_UART_IRQHandler+0x358>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800d35e:	893b      	ldrh	r3, [r7, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 8101 	beq.w	800d568 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d36c:	893a      	ldrh	r2, [r7, #8]
 800d36e:	429a      	cmp	r2, r3
 800d370:	f080 80fa 	bcs.w	800d568 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	893a      	ldrh	r2, [r7, #8]
 800d378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d380:	69db      	ldr	r3, [r3, #28]
 800d382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d386:	d02b      	beq.n	800d3e0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d396:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689a      	ldr	r2, [r3, #8]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f022 0201 	bic.w	r2, r2, #1
 800d3a6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3b6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f022 0210 	bic.w	r2, r2, #16
 800d3d4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f8 f89e 	bl	800551c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f8dd 	bl	800d5b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3fa:	e0b5      	b.n	800d568 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d408:	b29b      	uxth	r3, r3
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d414:	b29b      	uxth	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 80a8 	beq.w	800d56c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800d41c:	897b      	ldrh	r3, [r7, #10]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 80a4 	beq.w	800d56c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d432:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6899      	ldr	r1, [r3, #8]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	4b3a      	ldr	r3, [pc, #232]	; (800d528 <HAL_UART_IRQHandler+0x524>)
 800d440:	400b      	ands	r3, r1
 800d442:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2220      	movs	r2, #32
 800d448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f022 0210 	bic.w	r2, r2, #16
 800d466:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d468:	897b      	ldrh	r3, [r7, #10]
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f8a1 	bl	800d5b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d472:	e07b      	b.n	800d56c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00d      	beq.n	800d49a <HAL_UART_IRQHandler+0x496>
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d008      	beq.n	800d49a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f001 f933 	bl	800e6fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d498:	e06b      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d012      	beq.n	800d4ca <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d104      	bne.n	800d4b8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d057      	beq.n	800d570 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	4798      	blx	r3
    }
    return;
 800d4c8:	e052      	b.n	800d570 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d02b      	beq.n	800d52c <HAL_UART_IRQHandler+0x528>
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d026      	beq.n	800d52c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f001 f8f3 	bl	800e6ca <UART_EndTransmit_IT>
    return;
 800d4e4:	e045      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
 800d4e6:	bf00      	nop
 800d4e8:	40020010 	.word	0x40020010
 800d4ec:	40020028 	.word	0x40020028
 800d4f0:	40020040 	.word	0x40020040
 800d4f4:	40020058 	.word	0x40020058
 800d4f8:	40020070 	.word	0x40020070
 800d4fc:	40020088 	.word	0x40020088
 800d500:	400200a0 	.word	0x400200a0
 800d504:	400200b8 	.word	0x400200b8
 800d508:	40020410 	.word	0x40020410
 800d50c:	40020428 	.word	0x40020428
 800d510:	40020440 	.word	0x40020440
 800d514:	40020458 	.word	0x40020458
 800d518:	40020470 	.word	0x40020470
 800d51c:	40020488 	.word	0x40020488
 800d520:	400204a0 	.word	0x400204a0
 800d524:	400204b8 	.word	0x400204b8
 800d528:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <HAL_UART_IRQHandler+0x544>
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f001 f8f0 	bl	800e726 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d546:	e014      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00f      	beq.n	800d572 <HAL_UART_IRQHandler+0x56e>
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	da0c      	bge.n	800d572 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 f8da 	bl	800e712 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d55e:	e008      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
      return;
 800d560:	bf00      	nop
 800d562:	e006      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
    return;
 800d564:	bf00      	nop
 800d566:	e004      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
      return;
 800d568:	bf00      	nop
 800d56a:	e002      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
      return;
 800d56c:	bf00      	nop
 800d56e:	e000      	b.n	800d572 <HAL_UART_IRQHandler+0x56e>
    return;
 800d570:	bf00      	nop
  }
}
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5cc:	b5b0      	push	{r4, r5, r7, lr}
 800d5ce:	b08e      	sub	sp, #56	; 0x38
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	695b      	ldr	r3, [r3, #20]
 800d5e8:	431a      	orrs	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	4bbf      	ldr	r3, [pc, #764]	; (800d8f8 <UART_SetConfig+0x32c>)
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d602:	430b      	orrs	r3, r1
 800d604:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	430a      	orrs	r2, r1
 800d61a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4ab5      	ldr	r2, [pc, #724]	; (800d8fc <UART_SetConfig+0x330>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d004      	beq.n	800d636 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d632:	4313      	orrs	r3, r2
 800d634:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	4bb0      	ldr	r3, [pc, #704]	; (800d900 <UART_SetConfig+0x334>)
 800d63e:	4013      	ands	r3, r2
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d646:	430b      	orrs	r3, r1
 800d648:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	f023 010f 	bic.w	r1, r3, #15
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4aa7      	ldr	r2, [pc, #668]	; (800d904 <UART_SetConfig+0x338>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d176      	bne.n	800d758 <UART_SetConfig+0x18c>
 800d66a:	4ba7      	ldr	r3, [pc, #668]	; (800d908 <UART_SetConfig+0x33c>)
 800d66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d66e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d672:	2b28      	cmp	r3, #40	; 0x28
 800d674:	d86c      	bhi.n	800d750 <UART_SetConfig+0x184>
 800d676:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0xb0>)
 800d678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67c:	0800d721 	.word	0x0800d721
 800d680:	0800d751 	.word	0x0800d751
 800d684:	0800d751 	.word	0x0800d751
 800d688:	0800d751 	.word	0x0800d751
 800d68c:	0800d751 	.word	0x0800d751
 800d690:	0800d751 	.word	0x0800d751
 800d694:	0800d751 	.word	0x0800d751
 800d698:	0800d751 	.word	0x0800d751
 800d69c:	0800d729 	.word	0x0800d729
 800d6a0:	0800d751 	.word	0x0800d751
 800d6a4:	0800d751 	.word	0x0800d751
 800d6a8:	0800d751 	.word	0x0800d751
 800d6ac:	0800d751 	.word	0x0800d751
 800d6b0:	0800d751 	.word	0x0800d751
 800d6b4:	0800d751 	.word	0x0800d751
 800d6b8:	0800d751 	.word	0x0800d751
 800d6bc:	0800d731 	.word	0x0800d731
 800d6c0:	0800d751 	.word	0x0800d751
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d751 	.word	0x0800d751
 800d6cc:	0800d751 	.word	0x0800d751
 800d6d0:	0800d751 	.word	0x0800d751
 800d6d4:	0800d751 	.word	0x0800d751
 800d6d8:	0800d751 	.word	0x0800d751
 800d6dc:	0800d739 	.word	0x0800d739
 800d6e0:	0800d751 	.word	0x0800d751
 800d6e4:	0800d751 	.word	0x0800d751
 800d6e8:	0800d751 	.word	0x0800d751
 800d6ec:	0800d751 	.word	0x0800d751
 800d6f0:	0800d751 	.word	0x0800d751
 800d6f4:	0800d751 	.word	0x0800d751
 800d6f8:	0800d751 	.word	0x0800d751
 800d6fc:	0800d741 	.word	0x0800d741
 800d700:	0800d751 	.word	0x0800d751
 800d704:	0800d751 	.word	0x0800d751
 800d708:	0800d751 	.word	0x0800d751
 800d70c:	0800d751 	.word	0x0800d751
 800d710:	0800d751 	.word	0x0800d751
 800d714:	0800d751 	.word	0x0800d751
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d749 	.word	0x0800d749
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d726:	e222      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d72e:	e21e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d730:	2308      	movs	r3, #8
 800d732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d736:	e21a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d738:	2310      	movs	r3, #16
 800d73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d73e:	e216      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d740:	2320      	movs	r3, #32
 800d742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d746:	e212      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d748:	2340      	movs	r3, #64	; 0x40
 800d74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d74e:	e20e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d750:	2380      	movs	r3, #128	; 0x80
 800d752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d756:	e20a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a6b      	ldr	r2, [pc, #428]	; (800d90c <UART_SetConfig+0x340>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d130      	bne.n	800d7c4 <UART_SetConfig+0x1f8>
 800d762:	4b69      	ldr	r3, [pc, #420]	; (800d908 <UART_SetConfig+0x33c>)
 800d764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d826      	bhi.n	800d7bc <UART_SetConfig+0x1f0>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0x1a8>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d78d 	.word	0x0800d78d
 800d778:	0800d795 	.word	0x0800d795
 800d77c:	0800d79d 	.word	0x0800d79d
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d792:	e1ec      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d794:	2304      	movs	r3, #4
 800d796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d79a:	e1e8      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d79c:	2308      	movs	r3, #8
 800d79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7a2:	e1e4      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7aa:	e1e0      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7b2:	e1dc      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d7b4:	2340      	movs	r3, #64	; 0x40
 800d7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ba:	e1d8      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7c2:	e1d4      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a51      	ldr	r2, [pc, #324]	; (800d910 <UART_SetConfig+0x344>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d130      	bne.n	800d830 <UART_SetConfig+0x264>
 800d7ce:	4b4e      	ldr	r3, [pc, #312]	; (800d908 <UART_SetConfig+0x33c>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d826      	bhi.n	800d828 <UART_SetConfig+0x25c>
 800d7da:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <UART_SetConfig+0x214>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d809 	.word	0x0800d809
 800d7ec:	0800d811 	.word	0x0800d811
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7fe:	e1b6      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d806:	e1b2      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d80e:	e1ae      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d816:	e1aa      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d81e:	e1a6      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d820:	2340      	movs	r3, #64	; 0x40
 800d822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d826:	e1a2      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d828:	2380      	movs	r3, #128	; 0x80
 800d82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d82e:	e19e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a37      	ldr	r2, [pc, #220]	; (800d914 <UART_SetConfig+0x348>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d130      	bne.n	800d89c <UART_SetConfig+0x2d0>
 800d83a:	4b33      	ldr	r3, [pc, #204]	; (800d908 <UART_SetConfig+0x33c>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d826      	bhi.n	800d894 <UART_SetConfig+0x2c8>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <UART_SetConfig+0x280>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d88d 	.word	0x0800d88d
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d86a:	e180      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d872:	e17c      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d87a:	e178      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d882:	e174      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d884:	2320      	movs	r3, #32
 800d886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d88a:	e170      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d88c:	2340      	movs	r3, #64	; 0x40
 800d88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d892:	e16c      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d894:	2380      	movs	r3, #128	; 0x80
 800d896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d89a:	e168      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1d      	ldr	r2, [pc, #116]	; (800d918 <UART_SetConfig+0x34c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d142      	bne.n	800d92c <UART_SetConfig+0x360>
 800d8a6:	4b18      	ldr	r3, [pc, #96]	; (800d908 <UART_SetConfig+0x33c>)
 800d8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	2b05      	cmp	r3, #5
 800d8b0:	d838      	bhi.n	800d924 <UART_SetConfig+0x358>
 800d8b2:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <UART_SetConfig+0x2ec>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d9 	.word	0x0800d8d9
 800d8c0:	0800d8e1 	.word	0x0800d8e1
 800d8c4:	0800d8e9 	.word	0x0800d8e9
 800d8c8:	0800d8f1 	.word	0x0800d8f1
 800d8cc:	0800d91d 	.word	0x0800d91d
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8d6:	e14a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8de:	e146      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8e6:	e142      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ee:	e13e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8f6:	e13a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d8f8:	cfff69f3 	.word	0xcfff69f3
 800d8fc:	58000c00 	.word	0x58000c00
 800d900:	11fff4ff 	.word	0x11fff4ff
 800d904:	40011000 	.word	0x40011000
 800d908:	58024400 	.word	0x58024400
 800d90c:	40004400 	.word	0x40004400
 800d910:	40004800 	.word	0x40004800
 800d914:	40004c00 	.word	0x40004c00
 800d918:	40005000 	.word	0x40005000
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d922:	e124      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d92a:	e120      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4acc      	ldr	r2, [pc, #816]	; (800dc64 <UART_SetConfig+0x698>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d176      	bne.n	800da24 <UART_SetConfig+0x458>
 800d936:	4bcc      	ldr	r3, [pc, #816]	; (800dc68 <UART_SetConfig+0x69c>)
 800d938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d93a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d93e:	2b28      	cmp	r3, #40	; 0x28
 800d940:	d86c      	bhi.n	800da1c <UART_SetConfig+0x450>
 800d942:	a201      	add	r2, pc, #4	; (adr r2, 800d948 <UART_SetConfig+0x37c>)
 800d944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d948:	0800d9ed 	.word	0x0800d9ed
 800d94c:	0800da1d 	.word	0x0800da1d
 800d950:	0800da1d 	.word	0x0800da1d
 800d954:	0800da1d 	.word	0x0800da1d
 800d958:	0800da1d 	.word	0x0800da1d
 800d95c:	0800da1d 	.word	0x0800da1d
 800d960:	0800da1d 	.word	0x0800da1d
 800d964:	0800da1d 	.word	0x0800da1d
 800d968:	0800d9f5 	.word	0x0800d9f5
 800d96c:	0800da1d 	.word	0x0800da1d
 800d970:	0800da1d 	.word	0x0800da1d
 800d974:	0800da1d 	.word	0x0800da1d
 800d978:	0800da1d 	.word	0x0800da1d
 800d97c:	0800da1d 	.word	0x0800da1d
 800d980:	0800da1d 	.word	0x0800da1d
 800d984:	0800da1d 	.word	0x0800da1d
 800d988:	0800d9fd 	.word	0x0800d9fd
 800d98c:	0800da1d 	.word	0x0800da1d
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da1d 	.word	0x0800da1d
 800d998:	0800da1d 	.word	0x0800da1d
 800d99c:	0800da1d 	.word	0x0800da1d
 800d9a0:	0800da1d 	.word	0x0800da1d
 800d9a4:	0800da1d 	.word	0x0800da1d
 800d9a8:	0800da05 	.word	0x0800da05
 800d9ac:	0800da1d 	.word	0x0800da1d
 800d9b0:	0800da1d 	.word	0x0800da1d
 800d9b4:	0800da1d 	.word	0x0800da1d
 800d9b8:	0800da1d 	.word	0x0800da1d
 800d9bc:	0800da1d 	.word	0x0800da1d
 800d9c0:	0800da1d 	.word	0x0800da1d
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da0d 	.word	0x0800da0d
 800d9cc:	0800da1d 	.word	0x0800da1d
 800d9d0:	0800da1d 	.word	0x0800da1d
 800d9d4:	0800da1d 	.word	0x0800da1d
 800d9d8:	0800da1d 	.word	0x0800da1d
 800d9dc:	0800da1d 	.word	0x0800da1d
 800d9e0:	0800da1d 	.word	0x0800da1d
 800d9e4:	0800da1d 	.word	0x0800da1d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9f2:	e0bc      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9fa:	e0b8      	b.n	800db6e <UART_SetConfig+0x5a2>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da02:	e0b4      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da0a:	e0b0      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da12:	e0ac      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da14:	2340      	movs	r3, #64	; 0x40
 800da16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da1a:	e0a8      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da22:	e0a4      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a90      	ldr	r2, [pc, #576]	; (800dc6c <UART_SetConfig+0x6a0>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d130      	bne.n	800da90 <UART_SetConfig+0x4c4>
 800da2e:	4b8e      	ldr	r3, [pc, #568]	; (800dc68 <UART_SetConfig+0x69c>)
 800da30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b05      	cmp	r3, #5
 800da38:	d826      	bhi.n	800da88 <UART_SetConfig+0x4bc>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x474>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da59 	.word	0x0800da59
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800da71 	.word	0x0800da71
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da81 	.word	0x0800da81
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da5e:	e086      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da66:	e082      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da6e:	e07e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da76:	e07a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da78:	2320      	movs	r3, #32
 800da7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da7e:	e076      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da80:	2340      	movs	r3, #64	; 0x40
 800da82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da86:	e072      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da88:	2380      	movs	r3, #128	; 0x80
 800da8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da8e:	e06e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a76      	ldr	r2, [pc, #472]	; (800dc70 <UART_SetConfig+0x6a4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d130      	bne.n	800dafc <UART_SetConfig+0x530>
 800da9a:	4b73      	ldr	r3, [pc, #460]	; (800dc68 <UART_SetConfig+0x69c>)
 800da9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d826      	bhi.n	800daf4 <UART_SetConfig+0x528>
 800daa6:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x4e0>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dacd 	.word	0x0800dacd
 800dab4:	0800dad5 	.word	0x0800dad5
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2300      	movs	r3, #0
 800dac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daca:	e050      	b.n	800db6e <UART_SetConfig+0x5a2>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dad2:	e04c      	b.n	800db6e <UART_SetConfig+0x5a2>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dada:	e048      	b.n	800db6e <UART_SetConfig+0x5a2>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dae2:	e044      	b.n	800db6e <UART_SetConfig+0x5a2>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daea:	e040      	b.n	800db6e <UART_SetConfig+0x5a2>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daf2:	e03c      	b.n	800db6e <UART_SetConfig+0x5a2>
 800daf4:	2380      	movs	r3, #128	; 0x80
 800daf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dafa:	e038      	b.n	800db6e <UART_SetConfig+0x5a2>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a5c      	ldr	r2, [pc, #368]	; (800dc74 <UART_SetConfig+0x6a8>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d130      	bne.n	800db68 <UART_SetConfig+0x59c>
 800db06:	4b58      	ldr	r3, [pc, #352]	; (800dc68 <UART_SetConfig+0x69c>)
 800db08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	2b05      	cmp	r3, #5
 800db10:	d826      	bhi.n	800db60 <UART_SetConfig+0x594>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <UART_SetConfig+0x54c>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db31 	.word	0x0800db31
 800db1c:	0800db39 	.word	0x0800db39
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800db49 	.word	0x0800db49
 800db28:	0800db51 	.word	0x0800db51
 800db2c:	0800db59 	.word	0x0800db59
 800db30:	2302      	movs	r3, #2
 800db32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db36:	e01a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db38:	2304      	movs	r3, #4
 800db3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db3e:	e016      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db40:	2308      	movs	r3, #8
 800db42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db46:	e012      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db48:	2310      	movs	r3, #16
 800db4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db4e:	e00e      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db50:	2320      	movs	r3, #32
 800db52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db56:	e00a      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db58:	2340      	movs	r3, #64	; 0x40
 800db5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db5e:	e006      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db60:	2380      	movs	r3, #128	; 0x80
 800db62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db66:	e002      	b.n	800db6e <UART_SetConfig+0x5a2>
 800db68:	2380      	movs	r3, #128	; 0x80
 800db6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a40      	ldr	r2, [pc, #256]	; (800dc74 <UART_SetConfig+0x6a8>)
 800db74:	4293      	cmp	r3, r2
 800db76:	f040 80ef 	bne.w	800dd58 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db7e:	2b20      	cmp	r3, #32
 800db80:	dc46      	bgt.n	800dc10 <UART_SetConfig+0x644>
 800db82:	2b02      	cmp	r3, #2
 800db84:	f2c0 8081 	blt.w	800dc8a <UART_SetConfig+0x6be>
 800db88:	3b02      	subs	r3, #2
 800db8a:	2b1e      	cmp	r3, #30
 800db8c:	d87d      	bhi.n	800dc8a <UART_SetConfig+0x6be>
 800db8e:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <UART_SetConfig+0x5c8>)
 800db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db94:	0800dc17 	.word	0x0800dc17
 800db98:	0800dc8b 	.word	0x0800dc8b
 800db9c:	0800dc1f 	.word	0x0800dc1f
 800dba0:	0800dc8b 	.word	0x0800dc8b
 800dba4:	0800dc8b 	.word	0x0800dc8b
 800dba8:	0800dc8b 	.word	0x0800dc8b
 800dbac:	0800dc2f 	.word	0x0800dc2f
 800dbb0:	0800dc8b 	.word	0x0800dc8b
 800dbb4:	0800dc8b 	.word	0x0800dc8b
 800dbb8:	0800dc8b 	.word	0x0800dc8b
 800dbbc:	0800dc8b 	.word	0x0800dc8b
 800dbc0:	0800dc8b 	.word	0x0800dc8b
 800dbc4:	0800dc8b 	.word	0x0800dc8b
 800dbc8:	0800dc8b 	.word	0x0800dc8b
 800dbcc:	0800dc3f 	.word	0x0800dc3f
 800dbd0:	0800dc8b 	.word	0x0800dc8b
 800dbd4:	0800dc8b 	.word	0x0800dc8b
 800dbd8:	0800dc8b 	.word	0x0800dc8b
 800dbdc:	0800dc8b 	.word	0x0800dc8b
 800dbe0:	0800dc8b 	.word	0x0800dc8b
 800dbe4:	0800dc8b 	.word	0x0800dc8b
 800dbe8:	0800dc8b 	.word	0x0800dc8b
 800dbec:	0800dc8b 	.word	0x0800dc8b
 800dbf0:	0800dc8b 	.word	0x0800dc8b
 800dbf4:	0800dc8b 	.word	0x0800dc8b
 800dbf8:	0800dc8b 	.word	0x0800dc8b
 800dbfc:	0800dc8b 	.word	0x0800dc8b
 800dc00:	0800dc8b 	.word	0x0800dc8b
 800dc04:	0800dc8b 	.word	0x0800dc8b
 800dc08:	0800dc8b 	.word	0x0800dc8b
 800dc0c:	0800dc7d 	.word	0x0800dc7d
 800dc10:	2b40      	cmp	r3, #64	; 0x40
 800dc12:	d036      	beq.n	800dc82 <UART_SetConfig+0x6b6>
 800dc14:	e039      	b.n	800dc8a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dc16:	f7fc fb8f 	bl	800a338 <HAL_RCCEx_GetD3PCLK1Freq>
 800dc1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dc1c:	e03b      	b.n	800dc96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc1e:	f107 0314 	add.w	r3, r7, #20
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fc fb9e 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc2c:	e033      	b.n	800dc96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc2e:	f107 0308 	add.w	r3, r7, #8
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fc fcea 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc3c:	e02b      	b.n	800dc96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc3e:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <UART_SetConfig+0x69c>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0320 	and.w	r3, r3, #32
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d009      	beq.n	800dc5e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc4a:	4b07      	ldr	r3, [pc, #28]	; (800dc68 <UART_SetConfig+0x69c>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	08db      	lsrs	r3, r3, #3
 800dc50:	f003 0303 	and.w	r3, r3, #3
 800dc54:	4a08      	ldr	r2, [pc, #32]	; (800dc78 <UART_SetConfig+0x6ac>)
 800dc56:	fa22 f303 	lsr.w	r3, r2, r3
 800dc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc5c:	e01b      	b.n	800dc96 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800dc5e:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <UART_SetConfig+0x6ac>)
 800dc60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc62:	e018      	b.n	800dc96 <UART_SetConfig+0x6ca>
 800dc64:	40011400 	.word	0x40011400
 800dc68:	58024400 	.word	0x58024400
 800dc6c:	40007800 	.word	0x40007800
 800dc70:	40007c00 	.word	0x40007c00
 800dc74:	58000c00 	.word	0x58000c00
 800dc78:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc7c:	4bc4      	ldr	r3, [pc, #784]	; (800df90 <UART_SetConfig+0x9c4>)
 800dc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc80:	e009      	b.n	800dc96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc88:	e005      	b.n	800dc96 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dc94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 81da 	beq.w	800e052 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca2:	4abc      	ldr	r2, [pc, #752]	; (800df94 <UART_SetConfig+0x9c8>)
 800dca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcac:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcb0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685a      	ldr	r2, [r3, #4]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	4413      	add	r3, r2
 800dcbc:	6a3a      	ldr	r2, [r7, #32]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d305      	bcc.n	800dcce <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dcc8:	6a3a      	ldr	r2, [r7, #32]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d903      	bls.n	800dcd6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dcd4:	e1bd      	b.n	800e052 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f04f 0100 	mov.w	r1, #0
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	4aac      	ldr	r2, [pc, #688]	; (800df94 <UART_SetConfig+0x9c8>)
 800dce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	f04f 0300 	mov.w	r3, #0
 800dcee:	f7f2 fb4f 	bl	8000390 <__aeabi_uldivmod>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	f04f 0200 	mov.w	r2, #0
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	020b      	lsls	r3, r1, #8
 800dd04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd08:	0202      	lsls	r2, r0, #8
 800dd0a:	6879      	ldr	r1, [r7, #4]
 800dd0c:	6849      	ldr	r1, [r1, #4]
 800dd0e:	0849      	lsrs	r1, r1, #1
 800dd10:	4608      	mov	r0, r1
 800dd12:	f04f 0100 	mov.w	r1, #0
 800dd16:	1814      	adds	r4, r2, r0
 800dd18:	eb43 0501 	adc.w	r5, r3, r1
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	461a      	mov	r2, r3
 800dd22:	f04f 0300 	mov.w	r3, #0
 800dd26:	4620      	mov	r0, r4
 800dd28:	4629      	mov	r1, r5
 800dd2a:	f7f2 fb31 	bl	8000390 <__aeabi_uldivmod>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4613      	mov	r3, r2
 800dd34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd3c:	d308      	bcc.n	800dd50 <UART_SetConfig+0x784>
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd44:	d204      	bcs.n	800dd50 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd4c:	60da      	str	r2, [r3, #12]
 800dd4e:	e180      	b.n	800e052 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dd56:	e17c      	b.n	800e052 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd60:	f040 80bf 	bne.w	800dee2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800dd64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	dc49      	bgt.n	800de00 <UART_SetConfig+0x834>
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	db7c      	blt.n	800de6a <UART_SetConfig+0x89e>
 800dd70:	2b20      	cmp	r3, #32
 800dd72:	d87a      	bhi.n	800de6a <UART_SetConfig+0x89e>
 800dd74:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <UART_SetConfig+0x7b0>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800de07 	.word	0x0800de07
 800dd80:	0800de0f 	.word	0x0800de0f
 800dd84:	0800de6b 	.word	0x0800de6b
 800dd88:	0800de6b 	.word	0x0800de6b
 800dd8c:	0800de17 	.word	0x0800de17
 800dd90:	0800de6b 	.word	0x0800de6b
 800dd94:	0800de6b 	.word	0x0800de6b
 800dd98:	0800de6b 	.word	0x0800de6b
 800dd9c:	0800de27 	.word	0x0800de27
 800dda0:	0800de6b 	.word	0x0800de6b
 800dda4:	0800de6b 	.word	0x0800de6b
 800dda8:	0800de6b 	.word	0x0800de6b
 800ddac:	0800de6b 	.word	0x0800de6b
 800ddb0:	0800de6b 	.word	0x0800de6b
 800ddb4:	0800de6b 	.word	0x0800de6b
 800ddb8:	0800de6b 	.word	0x0800de6b
 800ddbc:	0800de37 	.word	0x0800de37
 800ddc0:	0800de6b 	.word	0x0800de6b
 800ddc4:	0800de6b 	.word	0x0800de6b
 800ddc8:	0800de6b 	.word	0x0800de6b
 800ddcc:	0800de6b 	.word	0x0800de6b
 800ddd0:	0800de6b 	.word	0x0800de6b
 800ddd4:	0800de6b 	.word	0x0800de6b
 800ddd8:	0800de6b 	.word	0x0800de6b
 800dddc:	0800de6b 	.word	0x0800de6b
 800dde0:	0800de6b 	.word	0x0800de6b
 800dde4:	0800de6b 	.word	0x0800de6b
 800dde8:	0800de6b 	.word	0x0800de6b
 800ddec:	0800de6b 	.word	0x0800de6b
 800ddf0:	0800de6b 	.word	0x0800de6b
 800ddf4:	0800de6b 	.word	0x0800de6b
 800ddf8:	0800de6b 	.word	0x0800de6b
 800ddfc:	0800de5d 	.word	0x0800de5d
 800de00:	2b40      	cmp	r3, #64	; 0x40
 800de02:	d02e      	beq.n	800de62 <UART_SetConfig+0x896>
 800de04:	e031      	b.n	800de6a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de06:	f7fa fe17 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 800de0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800de0c:	e033      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de0e:	f7fa fe29 	bl	8008a64 <HAL_RCC_GetPCLK2Freq>
 800de12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800de14:	e02f      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de16:	f107 0314 	add.w	r3, r7, #20
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fc faa2 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de24:	e027      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de26:	f107 0308 	add.w	r3, r7, #8
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fc fbee 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de34:	e01f      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de36:	4b58      	ldr	r3, [pc, #352]	; (800df98 <UART_SetConfig+0x9cc>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f003 0320 	and.w	r3, r3, #32
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d009      	beq.n	800de56 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de42:	4b55      	ldr	r3, [pc, #340]	; (800df98 <UART_SetConfig+0x9cc>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	08db      	lsrs	r3, r3, #3
 800de48:	f003 0303 	and.w	r3, r3, #3
 800de4c:	4a53      	ldr	r2, [pc, #332]	; (800df9c <UART_SetConfig+0x9d0>)
 800de4e:	fa22 f303 	lsr.w	r3, r2, r3
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de54:	e00f      	b.n	800de76 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800de56:	4b51      	ldr	r3, [pc, #324]	; (800df9c <UART_SetConfig+0x9d0>)
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de5a:	e00c      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de5c:	4b4c      	ldr	r3, [pc, #304]	; (800df90 <UART_SetConfig+0x9c4>)
 800de5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de60:	e009      	b.n	800de76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de68:	e005      	b.n	800de76 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800de74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f000 80ea 	beq.w	800e052 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de82:	4a44      	ldr	r2, [pc, #272]	; (800df94 <UART_SetConfig+0x9c8>)
 800de84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de88:	461a      	mov	r2, r3
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800de90:	005a      	lsls	r2, r3, #1
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	085b      	lsrs	r3, r3, #1
 800de98:	441a      	add	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	2b0f      	cmp	r3, #15
 800deaa:	d916      	bls.n	800deda <UART_SetConfig+0x90e>
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800deb2:	d212      	bcs.n	800deda <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	f023 030f 	bic.w	r3, r3, #15
 800debc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	085b      	lsrs	r3, r3, #1
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	b29a      	uxth	r2, r3
 800deca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800decc:	4313      	orrs	r3, r2
 800dece:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ded6:	60da      	str	r2, [r3, #12]
 800ded8:	e0bb      	b.n	800e052 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dee0:	e0b7      	b.n	800e052 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	dc4a      	bgt.n	800df80 <UART_SetConfig+0x9b4>
 800deea:	2b00      	cmp	r3, #0
 800deec:	f2c0 8086 	blt.w	800dffc <UART_SetConfig+0xa30>
 800def0:	2b20      	cmp	r3, #32
 800def2:	f200 8083 	bhi.w	800dffc <UART_SetConfig+0xa30>
 800def6:	a201      	add	r2, pc, #4	; (adr r2, 800defc <UART_SetConfig+0x930>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df87 	.word	0x0800df87
 800df00:	0800dfa1 	.word	0x0800dfa1
 800df04:	0800dffd 	.word	0x0800dffd
 800df08:	0800dffd 	.word	0x0800dffd
 800df0c:	0800dfa9 	.word	0x0800dfa9
 800df10:	0800dffd 	.word	0x0800dffd
 800df14:	0800dffd 	.word	0x0800dffd
 800df18:	0800dffd 	.word	0x0800dffd
 800df1c:	0800dfb9 	.word	0x0800dfb9
 800df20:	0800dffd 	.word	0x0800dffd
 800df24:	0800dffd 	.word	0x0800dffd
 800df28:	0800dffd 	.word	0x0800dffd
 800df2c:	0800dffd 	.word	0x0800dffd
 800df30:	0800dffd 	.word	0x0800dffd
 800df34:	0800dffd 	.word	0x0800dffd
 800df38:	0800dffd 	.word	0x0800dffd
 800df3c:	0800dfc9 	.word	0x0800dfc9
 800df40:	0800dffd 	.word	0x0800dffd
 800df44:	0800dffd 	.word	0x0800dffd
 800df48:	0800dffd 	.word	0x0800dffd
 800df4c:	0800dffd 	.word	0x0800dffd
 800df50:	0800dffd 	.word	0x0800dffd
 800df54:	0800dffd 	.word	0x0800dffd
 800df58:	0800dffd 	.word	0x0800dffd
 800df5c:	0800dffd 	.word	0x0800dffd
 800df60:	0800dffd 	.word	0x0800dffd
 800df64:	0800dffd 	.word	0x0800dffd
 800df68:	0800dffd 	.word	0x0800dffd
 800df6c:	0800dffd 	.word	0x0800dffd
 800df70:	0800dffd 	.word	0x0800dffd
 800df74:	0800dffd 	.word	0x0800dffd
 800df78:	0800dffd 	.word	0x0800dffd
 800df7c:	0800dfef 	.word	0x0800dfef
 800df80:	2b40      	cmp	r3, #64	; 0x40
 800df82:	d037      	beq.n	800dff4 <UART_SetConfig+0xa28>
 800df84:	e03a      	b.n	800dffc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df86:	f7fa fd57 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 800df8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800df8c:	e03c      	b.n	800e008 <UART_SetConfig+0xa3c>
 800df8e:	bf00      	nop
 800df90:	003d0900 	.word	0x003d0900
 800df94:	080121f8 	.word	0x080121f8
 800df98:	58024400 	.word	0x58024400
 800df9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfa0:	f7fa fd60 	bl	8008a64 <HAL_RCC_GetPCLK2Freq>
 800dfa4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dfa6:	e02f      	b.n	800e008 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfa8:	f107 0314 	add.w	r3, r7, #20
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fc f9d9 	bl	800a364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfb6:	e027      	b.n	800e008 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfb8:	f107 0308 	add.w	r3, r7, #8
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fc fb25 	bl	800a60c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfc6:	e01f      	b.n	800e008 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfc8:	4b2c      	ldr	r3, [pc, #176]	; (800e07c <UART_SetConfig+0xab0>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f003 0320 	and.w	r3, r3, #32
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d009      	beq.n	800dfe8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfd4:	4b29      	ldr	r3, [pc, #164]	; (800e07c <UART_SetConfig+0xab0>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	08db      	lsrs	r3, r3, #3
 800dfda:	f003 0303 	and.w	r3, r3, #3
 800dfde:	4a28      	ldr	r2, [pc, #160]	; (800e080 <UART_SetConfig+0xab4>)
 800dfe0:	fa22 f303 	lsr.w	r3, r2, r3
 800dfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfe6:	e00f      	b.n	800e008 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800dfe8:	4b25      	ldr	r3, [pc, #148]	; (800e080 <UART_SetConfig+0xab4>)
 800dfea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfec:	e00c      	b.n	800e008 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfee:	4b25      	ldr	r3, [pc, #148]	; (800e084 <UART_SetConfig+0xab8>)
 800dff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dff2:	e009      	b.n	800e008 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dffa:	e005      	b.n	800e008 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800dffc:	2300      	movs	r3, #0
 800dffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e006:	bf00      	nop
    }

    if (pclk != 0U)
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d021      	beq.n	800e052 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e012:	4a1d      	ldr	r2, [pc, #116]	; (800e088 <UART_SetConfig+0xabc>)
 800e014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e018:	461a      	mov	r2, r3
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	085b      	lsrs	r3, r3, #1
 800e026:	441a      	add	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e030:	b29b      	uxth	r3, r3
 800e032:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	2b0f      	cmp	r3, #15
 800e038:	d908      	bls.n	800e04c <UART_SetConfig+0xa80>
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e040:	d204      	bcs.n	800e04c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e048:	60da      	str	r2, [r3, #12]
 800e04a:	e002      	b.n	800e052 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e06e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e072:	4618      	mov	r0, r3
 800e074:	3738      	adds	r7, #56	; 0x38
 800e076:	46bd      	mov	sp, r7
 800e078:	bdb0      	pop	{r4, r5, r7, pc}
 800e07a:	bf00      	nop
 800e07c:	58024400 	.word	0x58024400
 800e080:	03d09000 	.word	0x03d09000
 800e084:	003d0900 	.word	0x003d0900
 800e088:	080121f8 	.word	0x080121f8

0800e08c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e098:	f003 0301 	and.w	r3, r3, #1
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00a      	beq.n	800e0b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	430a      	orrs	r2, r1
 800e0b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	f003 0302 	and.w	r3, r3, #2
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00a      	beq.n	800e0d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	430a      	orrs	r2, r1
 800e0d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	f003 0304 	and.w	r3, r3, #4
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00a      	beq.n	800e0fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fe:	f003 0308 	and.w	r3, r3, #8
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	430a      	orrs	r2, r1
 800e11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e120:	f003 0310 	and.w	r3, r3, #16
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00a      	beq.n	800e13e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	430a      	orrs	r2, r1
 800e15e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01a      	beq.n	800e1a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	430a      	orrs	r2, r1
 800e180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e18a:	d10a      	bne.n	800e1a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	430a      	orrs	r2, r1
 800e1a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00a      	beq.n	800e1c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	430a      	orrs	r2, r1
 800e1c2:	605a      	str	r2, [r3, #4]
  }
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af02      	add	r7, sp, #8
 800e1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1e0:	f7f5 f856 	bl	8003290 <HAL_GetTick>
 800e1e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f003 0308 	and.w	r3, r3, #8
 800e1f0:	2b08      	cmp	r3, #8
 800e1f2:	d10e      	bne.n	800e212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f82f 	bl	800e266 <UART_WaitOnFlagUntilTimeout>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e20e:	2303      	movs	r3, #3
 800e210:	e025      	b.n	800e25e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 0304 	and.w	r3, r3, #4
 800e21c:	2b04      	cmp	r3, #4
 800e21e:	d10e      	bne.n	800e23e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f819 	bl	800e266 <UART_WaitOnFlagUntilTimeout>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e23a:	2303      	movs	r3, #3
 800e23c:	e00f      	b.n	800e25e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2220      	movs	r2, #32
 800e242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2220      	movs	r2, #32
 800e24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	603b      	str	r3, [r7, #0]
 800e272:	4613      	mov	r3, r2
 800e274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e276:	e062      	b.n	800e33e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27e:	d05e      	beq.n	800e33e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e280:	f7f5 f806 	bl	8003290 <HAL_GetTick>
 800e284:	4602      	mov	r2, r0
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	69ba      	ldr	r2, [r7, #24]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d302      	bcc.n	800e296 <UART_WaitOnFlagUntilTimeout+0x30>
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d11d      	bne.n	800e2d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e2a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f022 0201 	bic.w	r2, r2, #1
 800e2b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2220      	movs	r2, #32
 800e2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2220      	movs	r2, #32
 800e2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e2ce:	2303      	movs	r3, #3
 800e2d0:	e045      	b.n	800e35e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d02e      	beq.n	800e33e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ee:	d126      	bne.n	800e33e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e308:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f022 0201 	bic.w	r2, r2, #1
 800e318:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2220      	movs	r2, #32
 800e31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2220      	movs	r2, #32
 800e326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e33a:	2303      	movs	r3, #3
 800e33c:	e00f      	b.n	800e35e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	69da      	ldr	r2, [r3, #28]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	4013      	ands	r3, r2
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	bf0c      	ite	eq
 800e34e:	2301      	moveq	r3, #1
 800e350:	2300      	movne	r3, #0
 800e352:	b2db      	uxtb	r3, r3
 800e354:	461a      	mov	r2, r3
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d08d      	beq.n	800e278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	68ba      	ldr	r2, [r7, #8]
 800e37a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	88fa      	ldrh	r2, [r7, #6]
 800e380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2222      	movs	r2, #34	; 0x22
 800e390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d02c      	beq.n	800e3f6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a0:	4a25      	ldr	r2, [pc, #148]	; (800e438 <UART_Start_Receive_DMA+0xd0>)
 800e3a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a8:	4a24      	ldr	r2, [pc, #144]	; (800e43c <UART_Start_Receive_DMA+0xd4>)
 800e3aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b0:	4a23      	ldr	r2, [pc, #140]	; (800e440 <UART_Start_Receive_DMA+0xd8>)
 800e3b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3324      	adds	r3, #36	; 0x24
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	88fb      	ldrh	r3, [r7, #6]
 800e3d0:	f7f6 fe3a 	bl	8005048 <HAL_DMA_Start_IT>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00d      	beq.n	800e3f6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2210      	movs	r2, #16
 800e3de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e01c      	b.n	800e430 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e40c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	689a      	ldr	r2, [r3, #8]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f042 0201 	orr.w	r2, r2, #1
 800e41c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689a      	ldr	r2, [r3, #8]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e42c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	0800e551 	.word	0x0800e551
 800e43c:	0800e5e7 	.word	0x0800e5e7
 800e440:	0800e61f 	.word	0x0800e61f

0800e444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e45a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	689a      	ldr	r2, [r3, #8]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e46a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2220      	movs	r2, #32
 800e470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e496:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6899      	ldr	r1, [r3, #8]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <UART_EndRxTransfer+0x60>)
 800e4a4:	400b      	ands	r3, r1
 800e4a6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d107      	bne.n	800e4c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f022 0210 	bic.w	r2, r2, #16
 800e4be:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2220      	movs	r2, #32
 800e4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr
 800e4e0:	effffffe 	.word	0xeffffffe

0800e4e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	69db      	ldr	r3, [r3, #28]
 800e4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4fa:	d014      	beq.n	800e526 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	689a      	ldr	r2, [r3, #8]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e512:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e522:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e524:	e002      	b.n	800e52c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f7f2 fd9a 	bl	8001060 <HAL_UART_TxCpltCallback>
}
 800e52c:	bf00      	nop
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e540:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f7ff f818 	bl	800d578 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e548:	bf00      	nop
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e55c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e566:	d02b      	beq.n	800e5c0 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e57e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	689a      	ldr	r2, [r3, #8]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f022 0201 	bic.w	r2, r2, #1
 800e58e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	689a      	ldr	r2, [r3, #8]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e59e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2220      	movs	r2, #32
 800e5a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d107      	bne.n	800e5c0 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f022 0210 	bic.w	r2, r2, #16
 800e5be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d107      	bne.n	800e5d8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f7fe ffef 	bl	800d5b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5d6:	e002      	b.n	800e5de <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7f2 fd67 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 800e5de:	bf00      	nop
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d109      	bne.n	800e610 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e602:	085b      	lsrs	r3, r3, #1
 800e604:	b29b      	uxth	r3, r3
 800e606:	4619      	mov	r1, r3
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f7fe ffd3 	bl	800d5b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e60e:	e002      	b.n	800e616 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f7fe ffbb 	bl	800d58c <HAL_UART_RxHalfCpltCallback>
}
 800e616:	bf00      	nop
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b086      	sub	sp, #24
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e632:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e63a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e646:	2b80      	cmp	r3, #128	; 0x80
 800e648:	d109      	bne.n	800e65e <UART_DMAError+0x40>
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	2b21      	cmp	r3, #33	; 0x21
 800e64e:	d106      	bne.n	800e65e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2200      	movs	r2, #0
 800e654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e658:	6978      	ldr	r0, [r7, #20]
 800e65a:	f7ff fef3 	bl	800e444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	689b      	ldr	r3, [r3, #8]
 800e664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e668:	2b40      	cmp	r3, #64	; 0x40
 800e66a:	d109      	bne.n	800e680 <UART_DMAError+0x62>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b22      	cmp	r3, #34	; 0x22
 800e670:	d106      	bne.n	800e680 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2200      	movs	r2, #0
 800e676:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e67a:	6978      	ldr	r0, [r7, #20]
 800e67c:	f7ff ff00 	bl	800e480 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e686:	f043 0210 	orr.w	r2, r3, #16
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e690:	6978      	ldr	r0, [r7, #20]
 800e692:	f7fe ff85 	bl	800d5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e696:	bf00      	nop
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f7fe ff6f 	bl	800d5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7f2 fcb5 	bl	8001060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e712:	b480      	push	{r7}
 800e714:	b083      	sub	sp, #12
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e71a:	bf00      	nop
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e726:	b480      	push	{r7}
 800e728:	b083      	sub	sp, #12
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e72e:	bf00      	nop
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b085      	sub	sp, #20
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d101      	bne.n	800e750 <HAL_UARTEx_DisableFifoMode+0x16>
 800e74c:	2302      	movs	r3, #2
 800e74e:	e027      	b.n	800e7a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2201      	movs	r2, #1
 800e754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2224      	movs	r2, #36	; 0x24
 800e75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f022 0201 	bic.w	r2, r2, #1
 800e776:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e77e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2220      	movs	r2, #32
 800e792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3714      	adds	r7, #20
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d101      	bne.n	800e7c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7c0:	2302      	movs	r3, #2
 800e7c2:	e02d      	b.n	800e820 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2224      	movs	r2, #36	; 0x24
 800e7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f022 0201 	bic.w	r2, r2, #1
 800e7ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f84f 	bl	800e8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2220      	movs	r2, #32
 800e812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d101      	bne.n	800e840 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e83c:	2302      	movs	r3, #2
 800e83e:	e02d      	b.n	800e89c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2224      	movs	r2, #36	; 0x24
 800e84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f022 0201 	bic.w	r2, r2, #1
 800e866:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	683a      	ldr	r2, [r7, #0]
 800e878:	430a      	orrs	r2, r1
 800e87a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f811 	bl	800e8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2220      	movs	r2, #32
 800e88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d108      	bne.n	800e8c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8c4:	e031      	b.n	800e92a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8c6:	2310      	movs	r3, #16
 800e8c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e8ca:	2310      	movs	r3, #16
 800e8cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	0e5b      	lsrs	r3, r3, #25
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	f003 0307 	and.w	r3, r3, #7
 800e8dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	0f5b      	lsrs	r3, r3, #29
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	f003 0307 	and.w	r3, r3, #7
 800e8ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	7b3a      	ldrb	r2, [r7, #12]
 800e8f2:	4911      	ldr	r1, [pc, #68]	; (800e938 <UARTEx_SetNbDataToProcess+0x94>)
 800e8f4:	5c8a      	ldrb	r2, [r1, r2]
 800e8f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8fa:	7b3a      	ldrb	r2, [r7, #12]
 800e8fc:	490f      	ldr	r1, [pc, #60]	; (800e93c <UARTEx_SetNbDataToProcess+0x98>)
 800e8fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e900:	fb93 f3f2 	sdiv	r3, r3, r2
 800e904:	b29a      	uxth	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
 800e90e:	7b7a      	ldrb	r2, [r7, #13]
 800e910:	4909      	ldr	r1, [pc, #36]	; (800e938 <UARTEx_SetNbDataToProcess+0x94>)
 800e912:	5c8a      	ldrb	r2, [r1, r2]
 800e914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e918:	7b7a      	ldrb	r2, [r7, #13]
 800e91a:	4908      	ldr	r1, [pc, #32]	; (800e93c <UARTEx_SetNbDataToProcess+0x98>)
 800e91c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e91e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e92a:	bf00      	nop
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	08012210 	.word	0x08012210
 800e93c:	08012218 	.word	0x08012218

0800e940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f103 0208 	add.w	r2, r3, #8
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f04f 32ff 	mov.w	r2, #4294967295
 800e958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f103 0208 	add.w	r2, r3, #8
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f103 0208 	add.w	r2, r3, #8
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e974:	bf00      	nop
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e98e:	bf00      	nop
 800e990:	370c      	adds	r7, #12
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	689a      	ldr	r2, [r3, #8]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	683a      	ldr	r2, [r7, #0]
 800e9be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	1c5a      	adds	r2, r3, #1
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
}
 800e9d6:	bf00      	nop
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9e2:	b480      	push	{r7}
 800e9e4:	b085      	sub	sp, #20
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f8:	d103      	bne.n	800ea02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	e00c      	b.n	800ea1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	3308      	adds	r3, #8
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	e002      	b.n	800ea10 <vListInsert+0x2e>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d2f6      	bcs.n	800ea0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	601a      	str	r2, [r3, #0]
}
 800ea48:	bf00      	nop
 800ea4a:	3714      	adds	r7, #20
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	6892      	ldr	r2, [r2, #8]
 800ea6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	6852      	ldr	r2, [r2, #4]
 800ea74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d103      	bne.n	800ea88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689a      	ldr	r2, [r3, #8]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	1e5a      	subs	r2, r3, #1
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10a      	bne.n	800ead2 <xQueueGenericReset+0x2a>
	__asm volatile
 800eabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	60bb      	str	r3, [r7, #8]
}
 800eace:	bf00      	nop
 800ead0:	e7fe      	b.n	800ead0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ead2:	f002 fa97 	bl	8011004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eade:	68f9      	ldr	r1, [r7, #12]
 800eae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eae2:	fb01 f303 	mul.w	r3, r1, r3
 800eae6:	441a      	add	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb02:	3b01      	subs	r3, #1
 800eb04:	68f9      	ldr	r1, [r7, #12]
 800eb06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb08:	fb01 f303 	mul.w	r3, r1, r3
 800eb0c:	441a      	add	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	22ff      	movs	r2, #255	; 0xff
 800eb16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	22ff      	movs	r2, #255	; 0xff
 800eb1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d114      	bne.n	800eb52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d01a      	beq.n	800eb66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	3310      	adds	r3, #16
 800eb34:	4618      	mov	r0, r3
 800eb36:	f001 fa07 	bl	800ff48 <xTaskRemoveFromEventList>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d012      	beq.n	800eb66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb40:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <xQueueGenericReset+0xcc>)
 800eb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	e009      	b.n	800eb66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3310      	adds	r3, #16
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff fef2 	bl	800e940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3324      	adds	r3, #36	; 0x24
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7ff feed 	bl	800e940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb66:	f002 fa7d 	bl	8011064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb6a:	2301      	movs	r3, #1
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	e000ed04 	.word	0xe000ed04

0800eb78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08a      	sub	sp, #40	; 0x28
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	4613      	mov	r3, r2
 800eb84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d10a      	bne.n	800eba2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800eb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb90:	f383 8811 	msr	BASEPRI, r3
 800eb94:	f3bf 8f6f 	isb	sy
 800eb98:	f3bf 8f4f 	dsb	sy
 800eb9c:	613b      	str	r3, [r7, #16]
}
 800eb9e:	bf00      	nop
 800eba0:	e7fe      	b.n	800eba0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	fb02 f303 	mul.w	r3, r2, r3
 800ebaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	3348      	adds	r3, #72	; 0x48
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f002 fb49 	bl	8011248 <pvPortMalloc>
 800ebb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00d      	beq.n	800ebda <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	3348      	adds	r3, #72	; 0x48
 800ebc6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ebc8:	79fa      	ldrb	r2, [r7, #7]
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	697a      	ldr	r2, [r7, #20]
 800ebd2:	68b9      	ldr	r1, [r7, #8]
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f000 f805 	bl	800ebe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ebda:	69bb      	ldr	r3, [r7, #24]
	}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3720      	adds	r7, #32
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	e002      	b.n	800ec06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec12:	2101      	movs	r1, #1
 800ec14:	69b8      	ldr	r0, [r7, #24]
 800ec16:	f7ff ff47 	bl	800eaa8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec1a:	bf00      	nop
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
	...

0800ec24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08e      	sub	sp, #56	; 0x38
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ec32:	2300      	movs	r3, #0
 800ec34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10a      	bne.n	800ec56 <xQueueGenericSend+0x32>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <xQueueGenericSend+0x40>
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <xQueueGenericSend+0x44>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <xQueueGenericSend+0x46>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10a      	bne.n	800ec84 <xQueueGenericSend+0x60>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec80:	bf00      	nop
 800ec82:	e7fe      	b.n	800ec82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	d103      	bne.n	800ec92 <xQueueGenericSend+0x6e>
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d101      	bne.n	800ec96 <xQueueGenericSend+0x72>
 800ec92:	2301      	movs	r3, #1
 800ec94:	e000      	b.n	800ec98 <xQueueGenericSend+0x74>
 800ec96:	2300      	movs	r3, #0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10a      	bne.n	800ecb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	623b      	str	r3, [r7, #32]
}
 800ecae:	bf00      	nop
 800ecb0:	e7fe      	b.n	800ecb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecb2:	f001 faeb 	bl	801028c <xTaskGetSchedulerState>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <xQueueGenericSend+0x9e>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <xQueueGenericSend+0xa2>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e000      	b.n	800ecc8 <xQueueGenericSend+0xa4>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <xQueueGenericSend+0xbe>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	61fb      	str	r3, [r7, #28]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ece2:	f002 f98f 	bl	8011004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d302      	bcc.n	800ecf8 <xQueueGenericSend+0xd4>
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d129      	bne.n	800ed4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	68b9      	ldr	r1, [r7, #8]
 800ecfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecfe:	f000 fbbb 	bl	800f478 <prvCopyDataToQueue>
 800ed02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d010      	beq.n	800ed2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	3324      	adds	r3, #36	; 0x24
 800ed10:	4618      	mov	r0, r3
 800ed12:	f001 f919 	bl	800ff48 <xTaskRemoveFromEventList>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d013      	beq.n	800ed44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed1c:	4b3f      	ldr	r3, [pc, #252]	; (800ee1c <xQueueGenericSend+0x1f8>)
 800ed1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	e00a      	b.n	800ed44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d007      	beq.n	800ed44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ed34:	4b39      	ldr	r3, [pc, #228]	; (800ee1c <xQueueGenericSend+0x1f8>)
 800ed36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed3a:	601a      	str	r2, [r3, #0]
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ed44:	f002 f98e 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e063      	b.n	800ee14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d103      	bne.n	800ed5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed52:	f002 f987 	bl	8011064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	e05c      	b.n	800ee14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d106      	bne.n	800ed6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed60:	f107 0314 	add.w	r3, r7, #20
 800ed64:	4618      	mov	r0, r3
 800ed66:	f001 f951 	bl	801000c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed6e:	f002 f979 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed72:	f000 fec5 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed76:	f002 f945 	bl	8011004 <vPortEnterCritical>
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed80:	b25b      	sxtb	r3, r3
 800ed82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed86:	d103      	bne.n	800ed90 <xQueueGenericSend+0x16c>
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9c:	d103      	bne.n	800eda6 <xQueueGenericSend+0x182>
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eda6:	f002 f95d 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edaa:	1d3a      	adds	r2, r7, #4
 800edac:	f107 0314 	add.w	r3, r7, #20
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f001 f940 	bl	8010038 <xTaskCheckForTimeOut>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d124      	bne.n	800ee08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800edbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edc0:	f000 fc52 	bl	800f668 <prvIsQueueFull>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d018      	beq.n	800edfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	3310      	adds	r3, #16
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	4611      	mov	r1, r2
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 f868 	bl	800fea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800edd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edda:	f000 fbdd 	bl	800f598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800edde:	f000 fe9d 	bl	800fb1c <xTaskResumeAll>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f47f af7c 	bne.w	800ece2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800edea:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <xQueueGenericSend+0x1f8>)
 800edec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	e772      	b.n	800ece2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800edfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfe:	f000 fbcb 	bl	800f598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee02:	f000 fe8b 	bl	800fb1c <xTaskResumeAll>
 800ee06:	e76c      	b.n	800ece2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ee08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee0a:	f000 fbc5 	bl	800f598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee0e:	f000 fe85 	bl	800fb1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3738      	adds	r7, #56	; 0x38
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b090      	sub	sp, #64	; 0x40
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d103      	bne.n	800ee5c <xQueueGenericSendFromISR+0x3c>
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <xQueueGenericSendFromISR+0x40>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <xQueueGenericSendFromISR+0x42>
 800ee60:	2300      	movs	r3, #0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10a      	bne.n	800ee7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ee66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee78:	bf00      	nop
 800ee7a:	e7fe      	b.n	800ee7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d103      	bne.n	800ee8a <xQueueGenericSendFromISR+0x6a>
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d101      	bne.n	800ee8e <xQueueGenericSendFromISR+0x6e>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e000      	b.n	800ee90 <xQueueGenericSendFromISR+0x70>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10a      	bne.n	800eeaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	623b      	str	r3, [r7, #32]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eeaa:	f002 f98d 	bl	80111c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eeae:	f3ef 8211 	mrs	r2, BASEPRI
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	61fa      	str	r2, [r7, #28]
 800eec4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eec6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eec8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d302      	bcc.n	800eedc <xQueueGenericSendFromISR+0xbc>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d12f      	bne.n	800ef3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	68b9      	ldr	r1, [r7, #8]
 800eef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eef2:	f000 fac1 	bl	800f478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eef6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eefe:	d112      	bne.n	800ef26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d016      	beq.n	800ef36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0a:	3324      	adds	r3, #36	; 0x24
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f001 f81b 	bl	800ff48 <xTaskRemoveFromEventList>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00e      	beq.n	800ef36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00b      	beq.n	800ef36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2201      	movs	r2, #1
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	e007      	b.n	800ef36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	b25a      	sxtb	r2, r3
 800ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ef36:	2301      	movs	r3, #1
 800ef38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ef3a:	e001      	b.n	800ef40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3740      	adds	r7, #64	; 0x40
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b08e      	sub	sp, #56	; 0x38
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ef64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d10a      	bne.n	800ef80 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	623b      	str	r3, [r7, #32]
}
 800ef7c:	bf00      	nop
 800ef7e:	e7fe      	b.n	800ef7e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00a      	beq.n	800ef9e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	61fb      	str	r3, [r7, #28]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d103      	bne.n	800efae <xQueueGiveFromISR+0x58>
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d101      	bne.n	800efb2 <xQueueGiveFromISR+0x5c>
 800efae:	2301      	movs	r3, #1
 800efb0:	e000      	b.n	800efb4 <xQueueGiveFromISR+0x5e>
 800efb2:	2300      	movs	r3, #0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10a      	bne.n	800efce <xQueueGiveFromISR+0x78>
	__asm volatile
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	61bb      	str	r3, [r7, #24]
}
 800efca:	bf00      	nop
 800efcc:	e7fe      	b.n	800efcc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efce:	f002 f8fb 	bl	80111c8 <vPortValidateInterruptPriority>
	__asm volatile
 800efd2:	f3ef 8211 	mrs	r2, BASEPRI
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	617a      	str	r2, [r7, #20]
 800efe8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800efea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800effa:	429a      	cmp	r2, r3
 800effc:	d22b      	bcs.n	800f056 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	1c5a      	adds	r2, r3, #1
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f018:	d112      	bne.n	800f040 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d016      	beq.n	800f050 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	3324      	adds	r3, #36	; 0x24
 800f026:	4618      	mov	r0, r3
 800f028:	f000 ff8e 	bl	800ff48 <xTaskRemoveFromEventList>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00e      	beq.n	800f050 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00b      	beq.n	800f050 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2201      	movs	r2, #1
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	e007      	b.n	800f050 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f044:	3301      	adds	r3, #1
 800f046:	b2db      	uxtb	r3, r3
 800f048:	b25a      	sxtb	r2, r3
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f050:	2301      	movs	r3, #1
 800f052:	637b      	str	r3, [r7, #52]	; 0x34
 800f054:	e001      	b.n	800f05a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f056:	2300      	movs	r3, #0
 800f058:	637b      	str	r3, [r7, #52]	; 0x34
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f383 8811 	msr	BASEPRI, r3
}
 800f064:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3738      	adds	r7, #56	; 0x38
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08c      	sub	sp, #48	; 0x30
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f07c:	2300      	movs	r3, #0
 800f07e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f086:	2b00      	cmp	r3, #0
 800f088:	d10a      	bne.n	800f0a0 <xQueueReceive+0x30>
	__asm volatile
 800f08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	623b      	str	r3, [r7, #32]
}
 800f09c:	bf00      	nop
 800f09e:	e7fe      	b.n	800f09e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d103      	bne.n	800f0ae <xQueueReceive+0x3e>
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d101      	bne.n	800f0b2 <xQueueReceive+0x42>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <xQueueReceive+0x44>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10a      	bne.n	800f0ce <xQueueReceive+0x5e>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	61fb      	str	r3, [r7, #28]
}
 800f0ca:	bf00      	nop
 800f0cc:	e7fe      	b.n	800f0cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0ce:	f001 f8dd 	bl	801028c <xTaskGetSchedulerState>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d102      	bne.n	800f0de <xQueueReceive+0x6e>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <xQueueReceive+0x72>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e000      	b.n	800f0e4 <xQueueReceive+0x74>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xQueueReceive+0x8e>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	61bb      	str	r3, [r7, #24]
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0fe:	f001 ff81 	bl	8011004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d01f      	beq.n	800f14e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f10e:	68b9      	ldr	r1, [r7, #8]
 800f110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f112:	f000 fa1b 	bl	800f54c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	1e5a      	subs	r2, r3, #1
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00f      	beq.n	800f146 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	3310      	adds	r3, #16
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 ff0c 	bl	800ff48 <xTaskRemoveFromEventList>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d007      	beq.n	800f146 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f136:	4b3d      	ldr	r3, [pc, #244]	; (800f22c <xQueueReceive+0x1bc>)
 800f138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f146:	f001 ff8d 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e069      	b.n	800f222 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d103      	bne.n	800f15c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f154:	f001 ff86 	bl	8011064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f158:	2300      	movs	r3, #0
 800f15a:	e062      	b.n	800f222 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d106      	bne.n	800f170 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f162:	f107 0310 	add.w	r3, r7, #16
 800f166:	4618      	mov	r0, r3
 800f168:	f000 ff50 	bl	801000c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f16c:	2301      	movs	r3, #1
 800f16e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f170:	f001 ff78 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f174:	f000 fcc4 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f178:	f001 ff44 	bl	8011004 <vPortEnterCritical>
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f182:	b25b      	sxtb	r3, r3
 800f184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f188:	d103      	bne.n	800f192 <xQueueReceive+0x122>
 800f18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19e:	d103      	bne.n	800f1a8 <xQueueReceive+0x138>
 800f1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1a8:	f001 ff5c 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1ac:	1d3a      	adds	r2, r7, #4
 800f1ae:	f107 0310 	add.w	r3, r7, #16
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 ff3f 	bl	8010038 <xTaskCheckForTimeOut>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d123      	bne.n	800f208 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1c2:	f000 fa3b 	bl	800f63c <prvIsQueueEmpty>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d017      	beq.n	800f1fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	3324      	adds	r3, #36	; 0x24
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 fe67 	bl	800fea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1dc:	f000 f9dc 	bl	800f598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1e0:	f000 fc9c 	bl	800fb1c <xTaskResumeAll>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d189      	bne.n	800f0fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f1ea:	4b10      	ldr	r3, [pc, #64]	; (800f22c <xQueueReceive+0x1bc>)
 800f1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	e780      	b.n	800f0fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1fe:	f000 f9cb 	bl	800f598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f202:	f000 fc8b 	bl	800fb1c <xTaskResumeAll>
 800f206:	e77a      	b.n	800f0fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f20a:	f000 f9c5 	bl	800f598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f20e:	f000 fc85 	bl	800fb1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f214:	f000 fa12 	bl	800f63c <prvIsQueueEmpty>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f43f af6f 	beq.w	800f0fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f222:	4618      	mov	r0, r3
 800f224:	3730      	adds	r7, #48	; 0x30
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	e000ed04 	.word	0xe000ed04

0800f230 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08e      	sub	sp, #56	; 0x38
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f23a:	2300      	movs	r3, #0
 800f23c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f242:	2300      	movs	r3, #0
 800f244:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10a      	bne.n	800f262 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	623b      	str	r3, [r7, #32]
}
 800f25e:	bf00      	nop
 800f260:	e7fe      	b.n	800f260 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00a      	beq.n	800f280 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	61fb      	str	r3, [r7, #28]
}
 800f27c:	bf00      	nop
 800f27e:	e7fe      	b.n	800f27e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f280:	f001 f804 	bl	801028c <xTaskGetSchedulerState>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <xQueueSemaphoreTake+0x60>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <xQueueSemaphoreTake+0x64>
 800f290:	2301      	movs	r3, #1
 800f292:	e000      	b.n	800f296 <xQueueSemaphoreTake+0x66>
 800f294:	2300      	movs	r3, #0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10a      	bne.n	800f2b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	61bb      	str	r3, [r7, #24]
}
 800f2ac:	bf00      	nop
 800f2ae:	e7fe      	b.n	800f2ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2b0:	f001 fea8 	bl	8011004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d024      	beq.n	800f30a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	1e5a      	subs	r2, r3, #1
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d104      	bne.n	800f2da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f2d0:	f001 f984 	bl	80105dc <pvTaskIncrementMutexHeldCount>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00f      	beq.n	800f302 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	3310      	adds	r3, #16
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 fe2e 	bl	800ff48 <xTaskRemoveFromEventList>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d007      	beq.n	800f302 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2f2:	4b54      	ldr	r3, [pc, #336]	; (800f444 <xQueueSemaphoreTake+0x214>)
 800f2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f302:	f001 feaf 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800f306:	2301      	movs	r3, #1
 800f308:	e097      	b.n	800f43a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d111      	bne.n	800f334 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00a      	beq.n	800f32c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	617b      	str	r3, [r7, #20]
}
 800f328:	bf00      	nop
 800f32a:	e7fe      	b.n	800f32a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f32c:	f001 fe9a 	bl	8011064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f330:	2300      	movs	r3, #0
 800f332:	e082      	b.n	800f43a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f33a:	f107 030c 	add.w	r3, r7, #12
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fe64 	bl	801000c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f344:	2301      	movs	r3, #1
 800f346:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f348:	f001 fe8c 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f34c:	f000 fbd8 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f350:	f001 fe58 	bl	8011004 <vPortEnterCritical>
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f35a:	b25b      	sxtb	r3, r3
 800f35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f360:	d103      	bne.n	800f36a <xQueueSemaphoreTake+0x13a>
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f370:	b25b      	sxtb	r3, r3
 800f372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f376:	d103      	bne.n	800f380 <xQueueSemaphoreTake+0x150>
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f380:	f001 fe70 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f384:	463a      	mov	r2, r7
 800f386:	f107 030c 	add.w	r3, r7, #12
 800f38a:	4611      	mov	r1, r2
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 fe53 	bl	8010038 <xTaskCheckForTimeOut>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d132      	bne.n	800f3fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f39a:	f000 f94f 	bl	800f63c <prvIsQueueEmpty>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d026      	beq.n	800f3f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d109      	bne.n	800f3c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f3ac:	f001 fe2a 	bl	8011004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 ff87 	bl	80102c8 <xTaskPriorityInherit>
 800f3ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f3bc:	f001 fe52 	bl	8011064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	3324      	adds	r3, #36	; 0x24
 800f3c4:	683a      	ldr	r2, [r7, #0]
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 fd6d 	bl	800fea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f3ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3d0:	f000 f8e2 	bl	800f598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f3d4:	f000 fba2 	bl	800fb1c <xTaskResumeAll>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f47f af68 	bne.w	800f2b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f3e0:	4b18      	ldr	r3, [pc, #96]	; (800f444 <xQueueSemaphoreTake+0x214>)
 800f3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e6:	601a      	str	r2, [r3, #0]
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	e75e      	b.n	800f2b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3f4:	f000 f8d0 	bl	800f598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3f8:	f000 fb90 	bl	800fb1c <xTaskResumeAll>
 800f3fc:	e758      	b.n	800f2b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f400:	f000 f8ca 	bl	800f598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f404:	f000 fb8a 	bl	800fb1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f40a:	f000 f917 	bl	800f63c <prvIsQueueEmpty>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	f43f af4d 	beq.w	800f2b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00d      	beq.n	800f438 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f41c:	f001 fdf2 	bl	8011004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f422:	f000 f811 	bl	800f448 <prvGetDisinheritPriorityAfterTimeout>
 800f426:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f42e:	4618      	mov	r0, r3
 800f430:	f001 f846 	bl	80104c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f434:	f001 fe16 	bl	8011064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f438:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3738      	adds	r7, #56	; 0x38
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	e000ed04 	.word	0xe000ed04

0800f448 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f454:	2b00      	cmp	r3, #0
 800f456:	d006      	beq.n	800f466 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f1c3 0307 	rsb	r3, r3, #7
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e001      	b.n	800f46a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f466:	2300      	movs	r3, #0
 800f468:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f46a:	68fb      	ldr	r3, [r7, #12]
	}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f484:	2300      	movs	r3, #0
 800f486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f48c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10d      	bne.n	800f4b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d14d      	bne.n	800f53a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 ff86 	bl	80103b4 <xTaskPriorityDisinherit>
 800f4a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	609a      	str	r2, [r3, #8]
 800f4b0:	e043      	b.n	800f53a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d119      	bne.n	800f4ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6858      	ldr	r0, [r3, #4]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	f002 f8dc 	bl	8011680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	685a      	ldr	r2, [r3, #4]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d0:	441a      	add	r2, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d32b      	bcc.n	800f53a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	605a      	str	r2, [r3, #4]
 800f4ea:	e026      	b.n	800f53a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	68d8      	ldr	r0, [r3, #12]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	68b9      	ldr	r1, [r7, #8]
 800f4f8:	f002 f8c2 	bl	8011680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	68da      	ldr	r2, [r3, #12]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f504:	425b      	negs	r3, r3
 800f506:	441a      	add	r2, r3
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	68da      	ldr	r2, [r3, #12]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	429a      	cmp	r2, r3
 800f516:	d207      	bcs.n	800f528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f520:	425b      	negs	r3, r3
 800f522:	441a      	add	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2b02      	cmp	r3, #2
 800f52c:	d105      	bne.n	800f53a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	3b01      	subs	r3, #1
 800f538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f542:	697b      	ldr	r3, [r7, #20]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3718      	adds	r7, #24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d018      	beq.n	800f590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68da      	ldr	r2, [r3, #12]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f566:	441a      	add	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	68da      	ldr	r2, [r3, #12]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	429a      	cmp	r2, r3
 800f576:	d303      	bcc.n	800f580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	68d9      	ldr	r1, [r3, #12]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f588:	461a      	mov	r2, r3
 800f58a:	6838      	ldr	r0, [r7, #0]
 800f58c:	f002 f878 	bl	8011680 <memcpy>
	}
}
 800f590:	bf00      	nop
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f5a0:	f001 fd30 	bl	8011004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f5ac:	e011      	b.n	800f5d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d012      	beq.n	800f5dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3324      	adds	r3, #36	; 0x24
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 fcc4 	bl	800ff48 <xTaskRemoveFromEventList>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f5c6:	f000 fd99 	bl	80100fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dce9      	bgt.n	800f5ae <prvUnlockQueue+0x16>
 800f5da:	e000      	b.n	800f5de <prvUnlockQueue+0x46>
					break;
 800f5dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	22ff      	movs	r2, #255	; 0xff
 800f5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f5e6:	f001 fd3d 	bl	8011064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f5ea:	f001 fd0b 	bl	8011004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5f6:	e011      	b.n	800f61c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d012      	beq.n	800f626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3310      	adds	r3, #16
 800f604:	4618      	mov	r0, r3
 800f606:	f000 fc9f 	bl	800ff48 <xTaskRemoveFromEventList>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f610:	f000 fd74 	bl	80100fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f614:	7bbb      	ldrb	r3, [r7, #14]
 800f616:	3b01      	subs	r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f620:	2b00      	cmp	r3, #0
 800f622:	dce9      	bgt.n	800f5f8 <prvUnlockQueue+0x60>
 800f624:	e000      	b.n	800f628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	22ff      	movs	r2, #255	; 0xff
 800f62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f630:	f001 fd18 	bl	8011064 <vPortExitCritical>
}
 800f634:	bf00      	nop
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f644:	f001 fcde 	bl	8011004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d102      	bne.n	800f656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f650:	2301      	movs	r3, #1
 800f652:	60fb      	str	r3, [r7, #12]
 800f654:	e001      	b.n	800f65a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f656:	2300      	movs	r3, #0
 800f658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f65a:	f001 fd03 	bl	8011064 <vPortExitCritical>

	return xReturn;
 800f65e:	68fb      	ldr	r3, [r7, #12]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f670:	f001 fcc8 	bl	8011004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d102      	bne.n	800f686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f680:	2301      	movs	r3, #1
 800f682:	60fb      	str	r3, [r7, #12]
 800f684:	e001      	b.n	800f68a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f686:	2300      	movs	r3, #0
 800f688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f68a:	f001 fceb 	bl	8011064 <vPortExitCritical>

	return xReturn;
 800f68e:	68fb      	ldr	r3, [r7, #12]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	e014      	b.n	800f6d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f6a8:	4a0f      	ldr	r2, [pc, #60]	; (800f6e8 <vQueueAddToRegistry+0x50>)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10b      	bne.n	800f6cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f6b4:	490c      	ldr	r1, [pc, #48]	; (800f6e8 <vQueueAddToRegistry+0x50>)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	683a      	ldr	r2, [r7, #0]
 800f6ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f6be:	4a0a      	ldr	r2, [pc, #40]	; (800f6e8 <vQueueAddToRegistry+0x50>)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	4413      	add	r3, r2
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f6ca:	e006      	b.n	800f6da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2b07      	cmp	r3, #7
 800f6d6:	d9e7      	bls.n	800f6a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f6d8:	bf00      	nop
 800f6da:	bf00      	nop
 800f6dc:	3714      	adds	r7, #20
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	24027d34 	.word	0x24027d34

0800f6ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f6fc:	f001 fc82 	bl	8011004 <vPortEnterCritical>
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f706:	b25b      	sxtb	r3, r3
 800f708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f70c:	d103      	bne.n	800f716 <vQueueWaitForMessageRestricted+0x2a>
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f71c:	b25b      	sxtb	r3, r3
 800f71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f722:	d103      	bne.n	800f72c <vQueueWaitForMessageRestricted+0x40>
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f72c:	f001 fc9a 	bl	8011064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f734:	2b00      	cmp	r3, #0
 800f736:	d106      	bne.n	800f746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	3324      	adds	r3, #36	; 0x24
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	68b9      	ldr	r1, [r7, #8]
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fbd5 	bl	800fef0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f746:	6978      	ldr	r0, [r7, #20]
 800f748:	f7ff ff26 	bl	800f598 <prvUnlockQueue>
	}
 800f74c:	bf00      	nop
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f754:	b580      	push	{r7, lr}
 800f756:	b08c      	sub	sp, #48	; 0x30
 800f758:	af04      	add	r7, sp, #16
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	603b      	str	r3, [r7, #0]
 800f760:	4613      	mov	r3, r2
 800f762:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f764:	88fb      	ldrh	r3, [r7, #6]
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	4618      	mov	r0, r3
 800f76a:	f001 fd6d 	bl	8011248 <pvPortMalloc>
 800f76e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00e      	beq.n	800f794 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f776:	20b4      	movs	r0, #180	; 0xb4
 800f778:	f001 fd66 	bl	8011248 <pvPortMalloc>
 800f77c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d003      	beq.n	800f78c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	631a      	str	r2, [r3, #48]	; 0x30
 800f78a:	e005      	b.n	800f798 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f78c:	6978      	ldr	r0, [r7, #20]
 800f78e:	f001 fe27 	bl	80113e0 <vPortFree>
 800f792:	e001      	b.n	800f798 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f794:	2300      	movs	r3, #0
 800f796:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d013      	beq.n	800f7c6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f79e:	88fa      	ldrh	r2, [r7, #6]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9303      	str	r3, [sp, #12]
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	9302      	str	r3, [sp, #8]
 800f7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f000 f80f 	bl	800f7d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7ba:	69f8      	ldr	r0, [r7, #28]
 800f7bc:	f000 f8aa 	bl	800f914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	61bb      	str	r3, [r7, #24]
 800f7c4:	e002      	b.n	800f7cc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7cc:	69bb      	ldr	r3, [r7, #24]
	}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3720      	adds	r7, #32
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f7f0:	440b      	add	r3, r1
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4413      	add	r3, r2
 800f7f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	f023 0307 	bic.w	r3, r3, #7
 800f7fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	f003 0307 	and.w	r3, r3, #7
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00a      	beq.n	800f820 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	617b      	str	r3, [r7, #20]
}
 800f81c:	bf00      	nop
 800f81e:	e7fe      	b.n	800f81e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d01f      	beq.n	800f866 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f826:	2300      	movs	r3, #0
 800f828:	61fb      	str	r3, [r7, #28]
 800f82a:	e012      	b.n	800f852 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	4413      	add	r3, r2
 800f832:	7819      	ldrb	r1, [r3, #0]
 800f834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	4413      	add	r3, r2
 800f83a:	3334      	adds	r3, #52	; 0x34
 800f83c:	460a      	mov	r2, r1
 800f83e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	4413      	add	r3, r2
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d006      	beq.n	800f85a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	3301      	adds	r3, #1
 800f850:	61fb      	str	r3, [r7, #28]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	2b0f      	cmp	r3, #15
 800f856:	d9e9      	bls.n	800f82c <prvInitialiseNewTask+0x54>
 800f858:	e000      	b.n	800f85c <prvInitialiseNewTask+0x84>
			{
				break;
 800f85a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f864:	e003      	b.n	800f86e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f870:	2b06      	cmp	r3, #6
 800f872:	d901      	bls.n	800f878 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f874:	2306      	movs	r3, #6
 800f876:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f87c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f882:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f886:	2200      	movs	r2, #0
 800f888:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	3304      	adds	r3, #4
 800f88e:	4618      	mov	r0, r3
 800f890:	f7ff f876 	bl	800e980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	3318      	adds	r3, #24
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff f871 	bl	800e980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a6:	f1c3 0207 	rsb	r2, r3, #7
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	334c      	adds	r3, #76	; 0x4c
 800f8c8:	2260      	movs	r2, #96	; 0x60
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f001 fee5 	bl	801169c <memset>
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	4a0c      	ldr	r2, [pc, #48]	; (800f908 <prvInitialiseNewTask+0x130>)
 800f8d6:	651a      	str	r2, [r3, #80]	; 0x50
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8da:	4a0c      	ldr	r2, [pc, #48]	; (800f90c <prvInitialiseNewTask+0x134>)
 800f8dc:	655a      	str	r2, [r3, #84]	; 0x54
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	4a0b      	ldr	r2, [pc, #44]	; (800f910 <prvInitialiseNewTask+0x138>)
 800f8e2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	69b8      	ldr	r0, [r7, #24]
 800f8ea:	f001 fa5f 	bl	8010dac <pxPortInitialiseStack>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f900:	bf00      	nop
 800f902:	3720      	adds	r7, #32
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	08012240 	.word	0x08012240
 800f90c:	08012260 	.word	0x08012260
 800f910:	08012220 	.word	0x08012220

0800f914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f91c:	f001 fb72 	bl	8011004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f920:	4b2a      	ldr	r3, [pc, #168]	; (800f9cc <prvAddNewTaskToReadyList+0xb8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	4a29      	ldr	r2, [pc, #164]	; (800f9cc <prvAddNewTaskToReadyList+0xb8>)
 800f928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f92a:	4b29      	ldr	r3, [pc, #164]	; (800f9d0 <prvAddNewTaskToReadyList+0xbc>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d109      	bne.n	800f946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f932:	4a27      	ldr	r2, [pc, #156]	; (800f9d0 <prvAddNewTaskToReadyList+0xbc>)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f938:	4b24      	ldr	r3, [pc, #144]	; (800f9cc <prvAddNewTaskToReadyList+0xb8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d110      	bne.n	800f962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f940:	f000 fc00 	bl	8010144 <prvInitialiseTaskLists>
 800f944:	e00d      	b.n	800f962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f946:	4b23      	ldr	r3, [pc, #140]	; (800f9d4 <prvAddNewTaskToReadyList+0xc0>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d109      	bne.n	800f962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f94e:	4b20      	ldr	r3, [pc, #128]	; (800f9d0 <prvAddNewTaskToReadyList+0xbc>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	429a      	cmp	r2, r3
 800f95a:	d802      	bhi.n	800f962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f95c:	4a1c      	ldr	r2, [pc, #112]	; (800f9d0 <prvAddNewTaskToReadyList+0xbc>)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f962:	4b1d      	ldr	r3, [pc, #116]	; (800f9d8 <prvAddNewTaskToReadyList+0xc4>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	4a1b      	ldr	r2, [pc, #108]	; (800f9d8 <prvAddNewTaskToReadyList+0xc4>)
 800f96a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f970:	2201      	movs	r2, #1
 800f972:	409a      	lsls	r2, r3
 800f974:	4b19      	ldr	r3, [pc, #100]	; (800f9dc <prvAddNewTaskToReadyList+0xc8>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4313      	orrs	r3, r2
 800f97a:	4a18      	ldr	r2, [pc, #96]	; (800f9dc <prvAddNewTaskToReadyList+0xc8>)
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f982:	4613      	mov	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	4a15      	ldr	r2, [pc, #84]	; (800f9e0 <prvAddNewTaskToReadyList+0xcc>)
 800f98c:	441a      	add	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3304      	adds	r3, #4
 800f992:	4619      	mov	r1, r3
 800f994:	4610      	mov	r0, r2
 800f996:	f7ff f800 	bl	800e99a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f99a:	f001 fb63 	bl	8011064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f99e:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <prvAddNewTaskToReadyList+0xc0>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00e      	beq.n	800f9c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <prvAddNewTaskToReadyList+0xbc>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d207      	bcs.n	800f9c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9b4:	4b0b      	ldr	r3, [pc, #44]	; (800f9e4 <prvAddNewTaskToReadyList+0xd0>)
 800f9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9c4:	bf00      	nop
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	240001cc 	.word	0x240001cc
 800f9d0:	240000cc 	.word	0x240000cc
 800f9d4:	240001d8 	.word	0x240001d8
 800f9d8:	240001e8 	.word	0x240001e8
 800f9dc:	240001d4 	.word	0x240001d4
 800f9e0:	240000d0 	.word	0x240000d0
 800f9e4:	e000ed04 	.word	0xe000ed04

0800f9e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d017      	beq.n	800fa2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9fa:	4b13      	ldr	r3, [pc, #76]	; (800fa48 <vTaskDelay+0x60>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00a      	beq.n	800fa18 <vTaskDelay+0x30>
	__asm volatile
 800fa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	60bb      	str	r3, [r7, #8]
}
 800fa14:	bf00      	nop
 800fa16:	e7fe      	b.n	800fa16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa18:	f000 f872 	bl	800fb00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 fdf0 	bl	8010604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa24:	f000 f87a 	bl	800fb1c <xTaskResumeAll>
 800fa28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d107      	bne.n	800fa40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa30:	4b06      	ldr	r3, [pc, #24]	; (800fa4c <vTaskDelay+0x64>)
 800fa32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa40:	bf00      	nop
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	240001f4 	.word	0x240001f4
 800fa4c:	e000ed04 	.word	0xe000ed04

0800fa50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b086      	sub	sp, #24
 800fa54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800fa56:	4b22      	ldr	r3, [pc, #136]	; (800fae0 <vTaskStartScheduler+0x90>)
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa64:	491f      	ldr	r1, [pc, #124]	; (800fae4 <vTaskStartScheduler+0x94>)
 800fa66:	4820      	ldr	r0, [pc, #128]	; (800fae8 <vTaskStartScheduler+0x98>)
 800fa68:	f7ff fe74 	bl	800f754 <xTaskCreate>
 800fa6c:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d102      	bne.n	800fa7a <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa74:	f000 fe2c 	bl	80106d0 <xTimerCreateTimerTask>
 800fa78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d11b      	bne.n	800fab8 <vTaskStartScheduler+0x68>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	60bb      	str	r3, [r7, #8]
}
 800fa92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa94:	4b15      	ldr	r3, [pc, #84]	; (800faec <vTaskStartScheduler+0x9c>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	334c      	adds	r3, #76	; 0x4c
 800fa9a:	4a15      	ldr	r2, [pc, #84]	; (800faf0 <vTaskStartScheduler+0xa0>)
 800fa9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa9e:	4b15      	ldr	r3, [pc, #84]	; (800faf4 <vTaskStartScheduler+0xa4>)
 800faa0:	f04f 32ff 	mov.w	r2, #4294967295
 800faa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800faa6:	4b14      	ldr	r3, [pc, #80]	; (800faf8 <vTaskStartScheduler+0xa8>)
 800faa8:	2201      	movs	r2, #1
 800faaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800faac:	4b13      	ldr	r3, [pc, #76]	; (800fafc <vTaskStartScheduler+0xac>)
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fab2:	f001 fa05 	bl	8010ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fab6:	e00e      	b.n	800fad6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d10a      	bne.n	800fad6 <vTaskStartScheduler+0x86>
	__asm volatile
 800fac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	607b      	str	r3, [r7, #4]
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <vTaskStartScheduler+0x84>
}
 800fad6:	bf00      	nop
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	240001f0 	.word	0x240001f0
 800fae4:	080121c8 	.word	0x080121c8
 800fae8:	08010115 	.word	0x08010115
 800faec:	240000cc 	.word	0x240000cc
 800faf0:	24000014 	.word	0x24000014
 800faf4:	240001ec 	.word	0x240001ec
 800faf8:	240001d8 	.word	0x240001d8
 800fafc:	240001d0 	.word	0x240001d0

0800fb00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb00:	b480      	push	{r7}
 800fb02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb04:	4b04      	ldr	r3, [pc, #16]	; (800fb18 <vTaskSuspendAll+0x18>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	4a03      	ldr	r2, [pc, #12]	; (800fb18 <vTaskSuspendAll+0x18>)
 800fb0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb0e:	bf00      	nop
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	240001f4 	.word	0x240001f4

0800fb1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb2a:	4b41      	ldr	r3, [pc, #260]	; (800fc30 <xTaskResumeAll+0x114>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10a      	bne.n	800fb48 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	603b      	str	r3, [r7, #0]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb48:	f001 fa5c 	bl	8011004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb4c:	4b38      	ldr	r3, [pc, #224]	; (800fc30 <xTaskResumeAll+0x114>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	4a37      	ldr	r2, [pc, #220]	; (800fc30 <xTaskResumeAll+0x114>)
 800fb54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb56:	4b36      	ldr	r3, [pc, #216]	; (800fc30 <xTaskResumeAll+0x114>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d161      	bne.n	800fc22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb5e:	4b35      	ldr	r3, [pc, #212]	; (800fc34 <xTaskResumeAll+0x118>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d05d      	beq.n	800fc22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb66:	e02e      	b.n	800fbc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb68:	4b33      	ldr	r3, [pc, #204]	; (800fc38 <xTaskResumeAll+0x11c>)
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3318      	adds	r3, #24
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe ff6d 	bl	800ea54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe ff68 	bl	800ea54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	2201      	movs	r2, #1
 800fb8a:	409a      	lsls	r2, r3
 800fb8c:	4b2b      	ldr	r3, [pc, #172]	; (800fc3c <xTaskResumeAll+0x120>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	4a2a      	ldr	r2, [pc, #168]	; (800fc3c <xTaskResumeAll+0x120>)
 800fb94:	6013      	str	r3, [r2, #0]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	4413      	add	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4a27      	ldr	r2, [pc, #156]	; (800fc40 <xTaskResumeAll+0x124>)
 800fba4:	441a      	add	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f7fe fef4 	bl	800e99a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb6:	4b23      	ldr	r3, [pc, #140]	; (800fc44 <xTaskResumeAll+0x128>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d302      	bcc.n	800fbc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fbc0:	4b21      	ldr	r3, [pc, #132]	; (800fc48 <xTaskResumeAll+0x12c>)
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbc6:	4b1c      	ldr	r3, [pc, #112]	; (800fc38 <xTaskResumeAll+0x11c>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d1cc      	bne.n	800fb68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbd4:	f000 fb3a 	bl	801024c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbd8:	4b1c      	ldr	r3, [pc, #112]	; (800fc4c <xTaskResumeAll+0x130>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d010      	beq.n	800fc06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbe4:	f000 f846 	bl	800fc74 <xTaskIncrementTick>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fbee:	4b16      	ldr	r3, [pc, #88]	; (800fc48 <xTaskResumeAll+0x12c>)
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1f1      	bne.n	800fbe4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <xTaskResumeAll+0x130>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc06:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <xTaskResumeAll+0x12c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d009      	beq.n	800fc22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc12:	4b0f      	ldr	r3, [pc, #60]	; (800fc50 <xTaskResumeAll+0x134>)
 800fc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc22:	f001 fa1f 	bl	8011064 <vPortExitCritical>

	return xAlreadyYielded;
 800fc26:	68bb      	ldr	r3, [r7, #8]
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	240001f4 	.word	0x240001f4
 800fc34:	240001cc 	.word	0x240001cc
 800fc38:	2400018c 	.word	0x2400018c
 800fc3c:	240001d4 	.word	0x240001d4
 800fc40:	240000d0 	.word	0x240000d0
 800fc44:	240000cc 	.word	0x240000cc
 800fc48:	240001e0 	.word	0x240001e0
 800fc4c:	240001dc 	.word	0x240001dc
 800fc50:	e000ed04 	.word	0xe000ed04

0800fc54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc5a:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <xTaskGetTickCount+0x1c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc60:	687b      	ldr	r3, [r7, #4]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	240001d0 	.word	0x240001d0

0800fc74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc7e:	4b4e      	ldr	r3, [pc, #312]	; (800fdb8 <xTaskIncrementTick+0x144>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f040 808e 	bne.w	800fda4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc88:	4b4c      	ldr	r3, [pc, #304]	; (800fdbc <xTaskIncrementTick+0x148>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc90:	4a4a      	ldr	r2, [pc, #296]	; (800fdbc <xTaskIncrementTick+0x148>)
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d120      	bne.n	800fcde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc9c:	4b48      	ldr	r3, [pc, #288]	; (800fdc0 <xTaskIncrementTick+0x14c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <xTaskIncrementTick+0x48>
	__asm volatile
 800fca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	603b      	str	r3, [r7, #0]
}
 800fcb8:	bf00      	nop
 800fcba:	e7fe      	b.n	800fcba <xTaskIncrementTick+0x46>
 800fcbc:	4b40      	ldr	r3, [pc, #256]	; (800fdc0 <xTaskIncrementTick+0x14c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	60fb      	str	r3, [r7, #12]
 800fcc2:	4b40      	ldr	r3, [pc, #256]	; (800fdc4 <xTaskIncrementTick+0x150>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4a3e      	ldr	r2, [pc, #248]	; (800fdc0 <xTaskIncrementTick+0x14c>)
 800fcc8:	6013      	str	r3, [r2, #0]
 800fcca:	4a3e      	ldr	r2, [pc, #248]	; (800fdc4 <xTaskIncrementTick+0x150>)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	4b3d      	ldr	r3, [pc, #244]	; (800fdc8 <xTaskIncrementTick+0x154>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	4a3c      	ldr	r2, [pc, #240]	; (800fdc8 <xTaskIncrementTick+0x154>)
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	f000 fab7 	bl	801024c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcde:	4b3b      	ldr	r3, [pc, #236]	; (800fdcc <xTaskIncrementTick+0x158>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d348      	bcc.n	800fd7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fce8:	4b35      	ldr	r3, [pc, #212]	; (800fdc0 <xTaskIncrementTick+0x14c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d104      	bne.n	800fcfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcf2:	4b36      	ldr	r3, [pc, #216]	; (800fdcc <xTaskIncrementTick+0x158>)
 800fcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf8:	601a      	str	r2, [r3, #0]
					break;
 800fcfa:	e03e      	b.n	800fd7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcfc:	4b30      	ldr	r3, [pc, #192]	; (800fdc0 <xTaskIncrementTick+0x14c>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d203      	bcs.n	800fd1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd14:	4a2d      	ldr	r2, [pc, #180]	; (800fdcc <xTaskIncrementTick+0x158>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd1a:	e02e      	b.n	800fd7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe fe97 	bl	800ea54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d004      	beq.n	800fd38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	3318      	adds	r3, #24
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7fe fe8e 	bl	800ea54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	409a      	lsls	r2, r3
 800fd40:	4b23      	ldr	r3, [pc, #140]	; (800fdd0 <xTaskIncrementTick+0x15c>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	4a22      	ldr	r2, [pc, #136]	; (800fdd0 <xTaskIncrementTick+0x15c>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4e:	4613      	mov	r3, r2
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4a1f      	ldr	r2, [pc, #124]	; (800fdd4 <xTaskIncrementTick+0x160>)
 800fd58:	441a      	add	r2, r3
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4610      	mov	r0, r2
 800fd62:	f7fe fe1a 	bl	800e99a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd6a:	4b1b      	ldr	r3, [pc, #108]	; (800fdd8 <xTaskIncrementTick+0x164>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d3b9      	bcc.n	800fce8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd74:	2301      	movs	r3, #1
 800fd76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd78:	e7b6      	b.n	800fce8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd7a:	4b17      	ldr	r3, [pc, #92]	; (800fdd8 <xTaskIncrementTick+0x164>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd80:	4914      	ldr	r1, [pc, #80]	; (800fdd4 <xTaskIncrementTick+0x160>)
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	440b      	add	r3, r1
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d901      	bls.n	800fd96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fd92:	2301      	movs	r3, #1
 800fd94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd96:	4b11      	ldr	r3, [pc, #68]	; (800fddc <xTaskIncrementTick+0x168>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d007      	beq.n	800fdae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e004      	b.n	800fdae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fda4:	4b0e      	ldr	r3, [pc, #56]	; (800fde0 <xTaskIncrementTick+0x16c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	4a0d      	ldr	r2, [pc, #52]	; (800fde0 <xTaskIncrementTick+0x16c>)
 800fdac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdae:	697b      	ldr	r3, [r7, #20]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	240001f4 	.word	0x240001f4
 800fdbc:	240001d0 	.word	0x240001d0
 800fdc0:	24000184 	.word	0x24000184
 800fdc4:	24000188 	.word	0x24000188
 800fdc8:	240001e4 	.word	0x240001e4
 800fdcc:	240001ec 	.word	0x240001ec
 800fdd0:	240001d4 	.word	0x240001d4
 800fdd4:	240000d0 	.word	0x240000d0
 800fdd8:	240000cc 	.word	0x240000cc
 800fddc:	240001e0 	.word	0x240001e0
 800fde0:	240001dc 	.word	0x240001dc

0800fde4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fde4:	b480      	push	{r7}
 800fde6:	b087      	sub	sp, #28
 800fde8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdea:	4b29      	ldr	r3, [pc, #164]	; (800fe90 <vTaskSwitchContext+0xac>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdf2:	4b28      	ldr	r3, [pc, #160]	; (800fe94 <vTaskSwitchContext+0xb0>)
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdf8:	e044      	b.n	800fe84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fdfa:	4b26      	ldr	r3, [pc, #152]	; (800fe94 <vTaskSwitchContext+0xb0>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe00:	4b25      	ldr	r3, [pc, #148]	; (800fe98 <vTaskSwitchContext+0xb4>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	fab3 f383 	clz	r3, r3
 800fe0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fe0e:	7afb      	ldrb	r3, [r7, #11]
 800fe10:	f1c3 031f 	rsb	r3, r3, #31
 800fe14:	617b      	str	r3, [r7, #20]
 800fe16:	4921      	ldr	r1, [pc, #132]	; (800fe9c <vTaskSwitchContext+0xb8>)
 800fe18:	697a      	ldr	r2, [r7, #20]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	4413      	add	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	440b      	add	r3, r1
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10a      	bne.n	800fe40 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	607b      	str	r3, [r7, #4]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <vTaskSwitchContext+0x5a>
 800fe40:	697a      	ldr	r2, [r7, #20]
 800fe42:	4613      	mov	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4a14      	ldr	r2, [pc, #80]	; (800fe9c <vTaskSwitchContext+0xb8>)
 800fe4c:	4413      	add	r3, r2
 800fe4e:	613b      	str	r3, [r7, #16]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	685a      	ldr	r2, [r3, #4]
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	3308      	adds	r3, #8
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d104      	bne.n	800fe70 <vTaskSwitchContext+0x8c>
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	605a      	str	r2, [r3, #4]
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	4a0a      	ldr	r2, [pc, #40]	; (800fea0 <vTaskSwitchContext+0xbc>)
 800fe78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe7a:	4b09      	ldr	r3, [pc, #36]	; (800fea0 <vTaskSwitchContext+0xbc>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	334c      	adds	r3, #76	; 0x4c
 800fe80:	4a08      	ldr	r2, [pc, #32]	; (800fea4 <vTaskSwitchContext+0xc0>)
 800fe82:	6013      	str	r3, [r2, #0]
}
 800fe84:	bf00      	nop
 800fe86:	371c      	adds	r7, #28
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	240001f4 	.word	0x240001f4
 800fe94:	240001e0 	.word	0x240001e0
 800fe98:	240001d4 	.word	0x240001d4
 800fe9c:	240000d0 	.word	0x240000d0
 800fea0:	240000cc 	.word	0x240000cc
 800fea4:	24000014 	.word	0x24000014

0800fea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10a      	bne.n	800fece <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febc:	f383 8811 	msr	BASEPRI, r3
 800fec0:	f3bf 8f6f 	isb	sy
 800fec4:	f3bf 8f4f 	dsb	sy
 800fec8:	60fb      	str	r3, [r7, #12]
}
 800feca:	bf00      	nop
 800fecc:	e7fe      	b.n	800fecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fece:	4b07      	ldr	r3, [pc, #28]	; (800feec <vTaskPlaceOnEventList+0x44>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	3318      	adds	r3, #24
 800fed4:	4619      	mov	r1, r3
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7fe fd83 	bl	800e9e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fedc:	2101      	movs	r1, #1
 800fede:	6838      	ldr	r0, [r7, #0]
 800fee0:	f000 fb90 	bl	8010604 <prvAddCurrentTaskToDelayedList>
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	240000cc 	.word	0x240000cc

0800fef0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d10a      	bne.n	800ff18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff06:	f383 8811 	msr	BASEPRI, r3
 800ff0a:	f3bf 8f6f 	isb	sy
 800ff0e:	f3bf 8f4f 	dsb	sy
 800ff12:	617b      	str	r3, [r7, #20]
}
 800ff14:	bf00      	nop
 800ff16:	e7fe      	b.n	800ff16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff18:	4b0a      	ldr	r3, [pc, #40]	; (800ff44 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3318      	adds	r3, #24
 800ff1e:	4619      	mov	r1, r3
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f7fe fd3a 	bl	800e99a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	68b8      	ldr	r0, [r7, #8]
 800ff36:	f000 fb65 	bl	8010604 <prvAddCurrentTaskToDelayedList>
	}
 800ff3a:	bf00      	nop
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	240000cc 	.word	0x240000cc

0800ff48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b086      	sub	sp, #24
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10a      	bne.n	800ff74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60fb      	str	r3, [r7, #12]
}
 800ff70:	bf00      	nop
 800ff72:	e7fe      	b.n	800ff72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	3318      	adds	r3, #24
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fe fd6b 	bl	800ea54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff7e:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <xTaskRemoveFromEventList+0xac>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d11c      	bne.n	800ffc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe fd62 	bl	800ea54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff94:	2201      	movs	r2, #1
 800ff96:	409a      	lsls	r2, r3
 800ff98:	4b17      	ldr	r3, [pc, #92]	; (800fff8 <xTaskRemoveFromEventList+0xb0>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	4a16      	ldr	r2, [pc, #88]	; (800fff8 <xTaskRemoveFromEventList+0xb0>)
 800ffa0:	6013      	str	r3, [r2, #0]
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4a13      	ldr	r2, [pc, #76]	; (800fffc <xTaskRemoveFromEventList+0xb4>)
 800ffb0:	441a      	add	r2, r3
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	4610      	mov	r0, r2
 800ffba:	f7fe fcee 	bl	800e99a <vListInsertEnd>
 800ffbe:	e005      	b.n	800ffcc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	3318      	adds	r3, #24
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	480e      	ldr	r0, [pc, #56]	; (8010000 <xTaskRemoveFromEventList+0xb8>)
 800ffc8:	f7fe fce7 	bl	800e99a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd0:	4b0c      	ldr	r3, [pc, #48]	; (8010004 <xTaskRemoveFromEventList+0xbc>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d905      	bls.n	800ffe6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffde:	4b0a      	ldr	r3, [pc, #40]	; (8010008 <xTaskRemoveFromEventList+0xc0>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	601a      	str	r2, [r3, #0]
 800ffe4:	e001      	b.n	800ffea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffea:	697b      	ldr	r3, [r7, #20]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3718      	adds	r7, #24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	240001f4 	.word	0x240001f4
 800fff8:	240001d4 	.word	0x240001d4
 800fffc:	240000d0 	.word	0x240000d0
 8010000:	2400018c 	.word	0x2400018c
 8010004:	240000cc 	.word	0x240000cc
 8010008:	240001e0 	.word	0x240001e0

0801000c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010014:	4b06      	ldr	r3, [pc, #24]	; (8010030 <vTaskInternalSetTimeOutState+0x24>)
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801001c:	4b05      	ldr	r3, [pc, #20]	; (8010034 <vTaskInternalSetTimeOutState+0x28>)
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	605a      	str	r2, [r3, #4]
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	240001e4 	.word	0x240001e4
 8010034:	240001d0 	.word	0x240001d0

08010038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	613b      	str	r3, [r7, #16]
}
 801005a:	bf00      	nop
 801005c:	e7fe      	b.n	801005c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	60fb      	str	r3, [r7, #12]
}
 8010076:	bf00      	nop
 8010078:	e7fe      	b.n	8010078 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801007a:	f000 ffc3 	bl	8011004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801007e:	4b1d      	ldr	r3, [pc, #116]	; (80100f4 <xTaskCheckForTimeOut+0xbc>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	69ba      	ldr	r2, [r7, #24]
 801008a:	1ad3      	subs	r3, r2, r3
 801008c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010096:	d102      	bne.n	801009e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010098:	2300      	movs	r3, #0
 801009a:	61fb      	str	r3, [r7, #28]
 801009c:	e023      	b.n	80100e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	4b15      	ldr	r3, [pc, #84]	; (80100f8 <xTaskCheckForTimeOut+0xc0>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d007      	beq.n	80100ba <xTaskCheckForTimeOut+0x82>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d302      	bcc.n	80100ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100b4:	2301      	movs	r3, #1
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	e015      	b.n	80100e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	697a      	ldr	r2, [r7, #20]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d20b      	bcs.n	80100dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	1ad2      	subs	r2, r2, r3
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7ff ff9b 	bl	801000c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100d6:	2300      	movs	r3, #0
 80100d8:	61fb      	str	r3, [r7, #28]
 80100da:	e004      	b.n	80100e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2200      	movs	r2, #0
 80100e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100e2:	2301      	movs	r3, #1
 80100e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100e6:	f000 ffbd 	bl	8011064 <vPortExitCritical>

	return xReturn;
 80100ea:	69fb      	ldr	r3, [r7, #28]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3720      	adds	r7, #32
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	240001d0 	.word	0x240001d0
 80100f8:	240001e4 	.word	0x240001e4

080100fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100fc:	b480      	push	{r7}
 80100fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010100:	4b03      	ldr	r3, [pc, #12]	; (8010110 <vTaskMissedYield+0x14>)
 8010102:	2201      	movs	r2, #1
 8010104:	601a      	str	r2, [r3, #0]
}
 8010106:	bf00      	nop
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	240001e0 	.word	0x240001e0

08010114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801011c:	f000 f852 	bl	80101c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010120:	4b06      	ldr	r3, [pc, #24]	; (801013c <prvIdleTask+0x28>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b01      	cmp	r3, #1
 8010126:	d9f9      	bls.n	801011c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010128:	4b05      	ldr	r3, [pc, #20]	; (8010140 <prvIdleTask+0x2c>)
 801012a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801012e:	601a      	str	r2, [r3, #0]
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010138:	e7f0      	b.n	801011c <prvIdleTask+0x8>
 801013a:	bf00      	nop
 801013c:	240000d0 	.word	0x240000d0
 8010140:	e000ed04 	.word	0xe000ed04

08010144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801014a:	2300      	movs	r3, #0
 801014c:	607b      	str	r3, [r7, #4]
 801014e:	e00c      	b.n	801016a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	4613      	mov	r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	4413      	add	r3, r2
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	4a12      	ldr	r2, [pc, #72]	; (80101a4 <prvInitialiseTaskLists+0x60>)
 801015c:	4413      	add	r3, r2
 801015e:	4618      	mov	r0, r3
 8010160:	f7fe fbee 	bl	800e940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3301      	adds	r3, #1
 8010168:	607b      	str	r3, [r7, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b06      	cmp	r3, #6
 801016e:	d9ef      	bls.n	8010150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010170:	480d      	ldr	r0, [pc, #52]	; (80101a8 <prvInitialiseTaskLists+0x64>)
 8010172:	f7fe fbe5 	bl	800e940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010176:	480d      	ldr	r0, [pc, #52]	; (80101ac <prvInitialiseTaskLists+0x68>)
 8010178:	f7fe fbe2 	bl	800e940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801017c:	480c      	ldr	r0, [pc, #48]	; (80101b0 <prvInitialiseTaskLists+0x6c>)
 801017e:	f7fe fbdf 	bl	800e940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010182:	480c      	ldr	r0, [pc, #48]	; (80101b4 <prvInitialiseTaskLists+0x70>)
 8010184:	f7fe fbdc 	bl	800e940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010188:	480b      	ldr	r0, [pc, #44]	; (80101b8 <prvInitialiseTaskLists+0x74>)
 801018a:	f7fe fbd9 	bl	800e940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801018e:	4b0b      	ldr	r3, [pc, #44]	; (80101bc <prvInitialiseTaskLists+0x78>)
 8010190:	4a05      	ldr	r2, [pc, #20]	; (80101a8 <prvInitialiseTaskLists+0x64>)
 8010192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010194:	4b0a      	ldr	r3, [pc, #40]	; (80101c0 <prvInitialiseTaskLists+0x7c>)
 8010196:	4a05      	ldr	r2, [pc, #20]	; (80101ac <prvInitialiseTaskLists+0x68>)
 8010198:	601a      	str	r2, [r3, #0]
}
 801019a:	bf00      	nop
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	240000d0 	.word	0x240000d0
 80101a8:	2400015c 	.word	0x2400015c
 80101ac:	24000170 	.word	0x24000170
 80101b0:	2400018c 	.word	0x2400018c
 80101b4:	240001a0 	.word	0x240001a0
 80101b8:	240001b8 	.word	0x240001b8
 80101bc:	24000184 	.word	0x24000184
 80101c0:	24000188 	.word	0x24000188

080101c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101ca:	e019      	b.n	8010200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101cc:	f000 ff1a 	bl	8011004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d0:	4b10      	ldr	r3, [pc, #64]	; (8010214 <prvCheckTasksWaitingTermination+0x50>)
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3304      	adds	r3, #4
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fe fc39 	bl	800ea54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101e2:	4b0d      	ldr	r3, [pc, #52]	; (8010218 <prvCheckTasksWaitingTermination+0x54>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	3b01      	subs	r3, #1
 80101e8:	4a0b      	ldr	r2, [pc, #44]	; (8010218 <prvCheckTasksWaitingTermination+0x54>)
 80101ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101ec:	4b0b      	ldr	r3, [pc, #44]	; (801021c <prvCheckTasksWaitingTermination+0x58>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	3b01      	subs	r3, #1
 80101f2:	4a0a      	ldr	r2, [pc, #40]	; (801021c <prvCheckTasksWaitingTermination+0x58>)
 80101f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101f6:	f000 ff35 	bl	8011064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 f810 	bl	8010220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010200:	4b06      	ldr	r3, [pc, #24]	; (801021c <prvCheckTasksWaitingTermination+0x58>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1e1      	bne.n	80101cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010208:	bf00      	nop
 801020a:	bf00      	nop
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	240001a0 	.word	0x240001a0
 8010218:	240001cc 	.word	0x240001cc
 801021c:	240001b4 	.word	0x240001b4

08010220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	334c      	adds	r3, #76	; 0x4c
 801022c:	4618      	mov	r0, r3
 801022e:	f001 faa5 	bl	801177c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010236:	4618      	mov	r0, r3
 8010238:	f001 f8d2 	bl	80113e0 <vPortFree>
			vPortFree( pxTCB );
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f001 f8cf 	bl	80113e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010252:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <prvResetNextTaskUnblockTime+0x38>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d104      	bne.n	8010266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801025c:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <prvResetNextTaskUnblockTime+0x3c>)
 801025e:	f04f 32ff 	mov.w	r2, #4294967295
 8010262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010264:	e008      	b.n	8010278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010266:	4b07      	ldr	r3, [pc, #28]	; (8010284 <prvResetNextTaskUnblockTime+0x38>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	4a04      	ldr	r2, [pc, #16]	; (8010288 <prvResetNextTaskUnblockTime+0x3c>)
 8010276:	6013      	str	r3, [r2, #0]
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	24000184 	.word	0x24000184
 8010288:	240001ec 	.word	0x240001ec

0801028c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010292:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <xTaskGetSchedulerState+0x34>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d102      	bne.n	80102a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801029a:	2301      	movs	r3, #1
 801029c:	607b      	str	r3, [r7, #4]
 801029e:	e008      	b.n	80102b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102a0:	4b08      	ldr	r3, [pc, #32]	; (80102c4 <xTaskGetSchedulerState+0x38>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d102      	bne.n	80102ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102a8:	2302      	movs	r3, #2
 80102aa:	607b      	str	r3, [r7, #4]
 80102ac:	e001      	b.n	80102b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102ae:	2300      	movs	r3, #0
 80102b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102b2:	687b      	ldr	r3, [r7, #4]
	}
 80102b4:	4618      	mov	r0, r3
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	240001d8 	.word	0x240001d8
 80102c4:	240001f4 	.word	0x240001f4

080102c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80102d4:	2300      	movs	r3, #0
 80102d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d05e      	beq.n	801039c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e2:	4b31      	ldr	r3, [pc, #196]	; (80103a8 <xTaskPriorityInherit+0xe0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d24e      	bcs.n	801038a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	db06      	blt.n	8010302 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102f4:	4b2c      	ldr	r3, [pc, #176]	; (80103a8 <xTaskPriorityInherit+0xe0>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102fa:	f1c3 0207 	rsb	r2, r3, #7
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	6959      	ldr	r1, [r3, #20]
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801030a:	4613      	mov	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4a26      	ldr	r2, [pc, #152]	; (80103ac <xTaskPriorityInherit+0xe4>)
 8010314:	4413      	add	r3, r2
 8010316:	4299      	cmp	r1, r3
 8010318:	d12f      	bne.n	801037a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	3304      	adds	r3, #4
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fb98 	bl	800ea54 <uxListRemove>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10a      	bne.n	8010340 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032e:	2201      	movs	r2, #1
 8010330:	fa02 f303 	lsl.w	r3, r2, r3
 8010334:	43da      	mvns	r2, r3
 8010336:	4b1e      	ldr	r3, [pc, #120]	; (80103b0 <xTaskPriorityInherit+0xe8>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4013      	ands	r3, r2
 801033c:	4a1c      	ldr	r2, [pc, #112]	; (80103b0 <xTaskPriorityInherit+0xe8>)
 801033e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010340:	4b19      	ldr	r3, [pc, #100]	; (80103a8 <xTaskPriorityInherit+0xe0>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034e:	2201      	movs	r2, #1
 8010350:	409a      	lsls	r2, r3
 8010352:	4b17      	ldr	r3, [pc, #92]	; (80103b0 <xTaskPriorityInherit+0xe8>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4313      	orrs	r3, r2
 8010358:	4a15      	ldr	r2, [pc, #84]	; (80103b0 <xTaskPriorityInherit+0xe8>)
 801035a:	6013      	str	r3, [r2, #0]
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010360:	4613      	mov	r3, r2
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	4413      	add	r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	4a10      	ldr	r2, [pc, #64]	; (80103ac <xTaskPriorityInherit+0xe4>)
 801036a:	441a      	add	r2, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	3304      	adds	r3, #4
 8010370:	4619      	mov	r1, r3
 8010372:	4610      	mov	r0, r2
 8010374:	f7fe fb11 	bl	800e99a <vListInsertEnd>
 8010378:	e004      	b.n	8010384 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801037a:	4b0b      	ldr	r3, [pc, #44]	; (80103a8 <xTaskPriorityInherit+0xe0>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010384:	2301      	movs	r3, #1
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	e008      	b.n	801039c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801038e:	4b06      	ldr	r3, [pc, #24]	; (80103a8 <xTaskPriorityInherit+0xe0>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010394:	429a      	cmp	r2, r3
 8010396:	d201      	bcs.n	801039c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010398:	2301      	movs	r3, #1
 801039a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801039c:	68fb      	ldr	r3, [r7, #12]
	}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	240000cc 	.word	0x240000cc
 80103ac:	240000d0 	.word	0x240000d0
 80103b0:	240001d4 	.word	0x240001d4

080103b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103c0:	2300      	movs	r3, #0
 80103c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d06e      	beq.n	80104a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103ca:	4b3a      	ldr	r3, [pc, #232]	; (80104b4 <xTaskPriorityDisinherit+0x100>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d00a      	beq.n	80103ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80103d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	60fb      	str	r3, [r7, #12]
}
 80103e6:	bf00      	nop
 80103e8:	e7fe      	b.n	80103e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d10a      	bne.n	8010408 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	60bb      	str	r3, [r7, #8]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801040c:	1e5a      	subs	r2, r3, #1
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801041a:	429a      	cmp	r2, r3
 801041c:	d044      	beq.n	80104a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010422:	2b00      	cmp	r3, #0
 8010424:	d140      	bne.n	80104a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	3304      	adds	r3, #4
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe fb12 	bl	800ea54 <uxListRemove>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d115      	bne.n	8010462 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043a:	491f      	ldr	r1, [pc, #124]	; (80104b8 <xTaskPriorityDisinherit+0x104>)
 801043c:	4613      	mov	r3, r2
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4413      	add	r3, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	440b      	add	r3, r1
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10a      	bne.n	8010462 <xTaskPriorityDisinherit+0xae>
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010450:	2201      	movs	r2, #1
 8010452:	fa02 f303 	lsl.w	r3, r2, r3
 8010456:	43da      	mvns	r2, r3
 8010458:	4b18      	ldr	r3, [pc, #96]	; (80104bc <xTaskPriorityDisinherit+0x108>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4013      	ands	r3, r2
 801045e:	4a17      	ldr	r2, [pc, #92]	; (80104bc <xTaskPriorityDisinherit+0x108>)
 8010460:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046e:	f1c3 0207 	rsb	r2, r3, #7
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801047a:	2201      	movs	r2, #1
 801047c:	409a      	lsls	r2, r3
 801047e:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <xTaskPriorityDisinherit+0x108>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4313      	orrs	r3, r2
 8010484:	4a0d      	ldr	r2, [pc, #52]	; (80104bc <xTaskPriorityDisinherit+0x108>)
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4a08      	ldr	r2, [pc, #32]	; (80104b8 <xTaskPriorityDisinherit+0x104>)
 8010496:	441a      	add	r2, r3
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	3304      	adds	r3, #4
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7fe fa7b 	bl	800e99a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a8:	697b      	ldr	r3, [r7, #20]
	}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	240000cc 	.word	0x240000cc
 80104b8:	240000d0 	.word	0x240000d0
 80104bc:	240001d4 	.word	0x240001d4

080104c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d077      	beq.n	80105c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	60fb      	str	r3, [r7, #12]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d902      	bls.n	8010506 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	e002      	b.n	801050c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801050a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d058      	beq.n	80105c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	429a      	cmp	r2, r3
 801051e:	d153      	bne.n	80105c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010520:	4b2b      	ldr	r3, [pc, #172]	; (80105d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	429a      	cmp	r2, r3
 8010528:	d10a      	bne.n	8010540 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	60bb      	str	r3, [r7, #8]
}
 801053c:	bf00      	nop
 801053e:	e7fe      	b.n	801053e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	2b00      	cmp	r3, #0
 8010552:	db04      	blt.n	801055e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	f1c3 0207 	rsb	r2, r3, #7
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	6959      	ldr	r1, [r3, #20]
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	4613      	mov	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4413      	add	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4a19      	ldr	r2, [pc, #100]	; (80105d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801056e:	4413      	add	r3, r2
 8010570:	4299      	cmp	r1, r3
 8010572:	d129      	bne.n	80105c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fa6b 	bl	800ea54 <uxListRemove>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10a      	bne.n	801059a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010588:	2201      	movs	r2, #1
 801058a:	fa02 f303 	lsl.w	r3, r2, r3
 801058e:	43da      	mvns	r2, r3
 8010590:	4b11      	ldr	r3, [pc, #68]	; (80105d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4013      	ands	r3, r2
 8010596:	4a10      	ldr	r2, [pc, #64]	; (80105d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010598:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801059e:	2201      	movs	r2, #1
 80105a0:	409a      	lsls	r2, r3
 80105a2:	4b0d      	ldr	r3, [pc, #52]	; (80105d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4313      	orrs	r3, r2
 80105a8:	4a0b      	ldr	r2, [pc, #44]	; (80105d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80105aa:	6013      	str	r3, [r2, #0]
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105b0:	4613      	mov	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	4a06      	ldr	r2, [pc, #24]	; (80105d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80105ba:	441a      	add	r2, r3
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	3304      	adds	r3, #4
 80105c0:	4619      	mov	r1, r3
 80105c2:	4610      	mov	r0, r2
 80105c4:	f7fe f9e9 	bl	800e99a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105c8:	bf00      	nop
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	240000cc 	.word	0x240000cc
 80105d4:	240000d0 	.word	0x240000d0
 80105d8:	240001d4 	.word	0x240001d4

080105dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105e0:	4b07      	ldr	r3, [pc, #28]	; (8010600 <pvTaskIncrementMutexHeldCount+0x24>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d004      	beq.n	80105f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105e8:	4b05      	ldr	r3, [pc, #20]	; (8010600 <pvTaskIncrementMutexHeldCount+0x24>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105ee:	3201      	adds	r2, #1
 80105f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80105f2:	4b03      	ldr	r3, [pc, #12]	; (8010600 <pvTaskIncrementMutexHeldCount+0x24>)
 80105f4:	681b      	ldr	r3, [r3, #0]
	}
 80105f6:	4618      	mov	r0, r3
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	240000cc 	.word	0x240000cc

08010604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801060e:	4b29      	ldr	r3, [pc, #164]	; (80106b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010614:	4b28      	ldr	r3, [pc, #160]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3304      	adds	r3, #4
 801061a:	4618      	mov	r0, r3
 801061c:	f7fe fa1a 	bl	800ea54 <uxListRemove>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d10b      	bne.n	801063e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010626:	4b24      	ldr	r3, [pc, #144]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062c:	2201      	movs	r2, #1
 801062e:	fa02 f303 	lsl.w	r3, r2, r3
 8010632:	43da      	mvns	r2, r3
 8010634:	4b21      	ldr	r3, [pc, #132]	; (80106bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4013      	ands	r3, r2
 801063a:	4a20      	ldr	r2, [pc, #128]	; (80106bc <prvAddCurrentTaskToDelayedList+0xb8>)
 801063c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010644:	d10a      	bne.n	801065c <prvAddCurrentTaskToDelayedList+0x58>
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d007      	beq.n	801065c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801064c:	4b1a      	ldr	r3, [pc, #104]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	3304      	adds	r3, #4
 8010652:	4619      	mov	r1, r3
 8010654:	481a      	ldr	r0, [pc, #104]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010656:	f7fe f9a0 	bl	800e99a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801065a:	e026      	b.n	80106aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4413      	add	r3, r2
 8010662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010664:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801066c:	68ba      	ldr	r2, [r7, #8]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	429a      	cmp	r2, r3
 8010672:	d209      	bcs.n	8010688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010674:	4b13      	ldr	r3, [pc, #76]	; (80106c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	4b0f      	ldr	r3, [pc, #60]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	3304      	adds	r3, #4
 801067e:	4619      	mov	r1, r3
 8010680:	4610      	mov	r0, r2
 8010682:	f7fe f9ae 	bl	800e9e2 <vListInsert>
}
 8010686:	e010      	b.n	80106aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010688:	4b0f      	ldr	r3, [pc, #60]	; (80106c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3304      	adds	r3, #4
 8010692:	4619      	mov	r1, r3
 8010694:	4610      	mov	r0, r2
 8010696:	f7fe f9a4 	bl	800e9e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801069a:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <prvAddCurrentTaskToDelayedList+0xc8>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	68ba      	ldr	r2, [r7, #8]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d202      	bcs.n	80106aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80106a4:	4a09      	ldr	r2, [pc, #36]	; (80106cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	6013      	str	r3, [r2, #0]
}
 80106aa:	bf00      	nop
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	240001d0 	.word	0x240001d0
 80106b8:	240000cc 	.word	0x240000cc
 80106bc:	240001d4 	.word	0x240001d4
 80106c0:	240001b8 	.word	0x240001b8
 80106c4:	24000188 	.word	0x24000188
 80106c8:	24000184 	.word	0x24000184
 80106cc:	240001ec 	.word	0x240001ec

080106d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106da:	f000 fb31 	bl	8010d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106de:	4b11      	ldr	r3, [pc, #68]	; (8010724 <xTimerCreateTimerTask+0x54>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00b      	beq.n	80106fe <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80106e6:	4b10      	ldr	r3, [pc, #64]	; (8010728 <xTimerCreateTimerTask+0x58>)
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	2305      	movs	r3, #5
 80106ec:	9300      	str	r3, [sp, #0]
 80106ee:	2300      	movs	r3, #0
 80106f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106f4:	490d      	ldr	r1, [pc, #52]	; (801072c <xTimerCreateTimerTask+0x5c>)
 80106f6:	480e      	ldr	r0, [pc, #56]	; (8010730 <xTimerCreateTimerTask+0x60>)
 80106f8:	f7ff f82c 	bl	800f754 <xTaskCreate>
 80106fc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d10a      	bne.n	801071a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8010704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010708:	f383 8811 	msr	BASEPRI, r3
 801070c:	f3bf 8f6f 	isb	sy
 8010710:	f3bf 8f4f 	dsb	sy
 8010714:	603b      	str	r3, [r7, #0]
}
 8010716:	bf00      	nop
 8010718:	e7fe      	b.n	8010718 <xTimerCreateTimerTask+0x48>
	return xReturn;
 801071a:	687b      	ldr	r3, [r7, #4]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	24000228 	.word	0x24000228
 8010728:	2400022c 	.word	0x2400022c
 801072c:	080121d0 	.word	0x080121d0
 8010730:	08010921 	.word	0x08010921

08010734 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af02      	add	r7, sp, #8
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010742:	2028      	movs	r0, #40	; 0x28
 8010744:	f000 fd80 	bl	8011248 <pvPortMalloc>
 8010748:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00d      	beq.n	801076c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	2200      	movs	r2, #0
 8010754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	9301      	str	r3, [sp, #4]
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	68b9      	ldr	r1, [r7, #8]
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f000 f805 	bl	8010776 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801076c:	697b      	ldr	r3, [r7, #20]
	}
 801076e:	4618      	mov	r0, r3
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b086      	sub	sp, #24
 801077a:	af00      	add	r7, sp, #0
 801077c:	60f8      	str	r0, [r7, #12]
 801077e:	60b9      	str	r1, [r7, #8]
 8010780:	607a      	str	r2, [r7, #4]
 8010782:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10a      	bne.n	80107a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	617b      	str	r3, [r7, #20]
}
 801079c:	bf00      	nop
 801079e:	e7fe      	b.n	801079e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d01e      	beq.n	80107e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80107a6:	f000 facb 	bl	8010d40 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80107b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b8:	683a      	ldr	r2, [r7, #0]
 80107ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	6a3a      	ldr	r2, [r7, #32]
 80107c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	3304      	adds	r3, #4
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fe f8da 	bl	800e980 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d008      	beq.n	80107e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80107d8:	f043 0304 	orr.w	r3, r3, #4
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80107e4:	bf00      	nop
 80107e6:	3718      	adds	r7, #24
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08a      	sub	sp, #40	; 0x28
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10a      	bne.n	801081a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	623b      	str	r3, [r7, #32]
}
 8010816:	bf00      	nop
 8010818:	e7fe      	b.n	8010818 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801081a:	4b1a      	ldr	r3, [pc, #104]	; (8010884 <xTimerGenericCommand+0x98>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d02a      	beq.n	8010878 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	2b05      	cmp	r3, #5
 8010832:	dc18      	bgt.n	8010866 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010834:	f7ff fd2a 	bl	801028c <xTaskGetSchedulerState>
 8010838:	4603      	mov	r3, r0
 801083a:	2b02      	cmp	r3, #2
 801083c:	d109      	bne.n	8010852 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801083e:	4b11      	ldr	r3, [pc, #68]	; (8010884 <xTimerGenericCommand+0x98>)
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f107 0114 	add.w	r1, r7, #20
 8010846:	2300      	movs	r3, #0
 8010848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801084a:	f7fe f9eb 	bl	800ec24 <xQueueGenericSend>
 801084e:	6278      	str	r0, [r7, #36]	; 0x24
 8010850:	e012      	b.n	8010878 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010852:	4b0c      	ldr	r3, [pc, #48]	; (8010884 <xTimerGenericCommand+0x98>)
 8010854:	6818      	ldr	r0, [r3, #0]
 8010856:	f107 0114 	add.w	r1, r7, #20
 801085a:	2300      	movs	r3, #0
 801085c:	2200      	movs	r2, #0
 801085e:	f7fe f9e1 	bl	800ec24 <xQueueGenericSend>
 8010862:	6278      	str	r0, [r7, #36]	; 0x24
 8010864:	e008      	b.n	8010878 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010866:	4b07      	ldr	r3, [pc, #28]	; (8010884 <xTimerGenericCommand+0x98>)
 8010868:	6818      	ldr	r0, [r3, #0]
 801086a:	f107 0114 	add.w	r1, r7, #20
 801086e:	2300      	movs	r3, #0
 8010870:	683a      	ldr	r2, [r7, #0]
 8010872:	f7fe fad5 	bl	800ee20 <xQueueGenericSendFromISR>
 8010876:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801087a:	4618      	mov	r0, r3
 801087c:	3728      	adds	r7, #40	; 0x28
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	24000228 	.word	0x24000228

08010888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af02      	add	r7, sp, #8
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010892:	4b22      	ldr	r3, [pc, #136]	; (801091c <prvProcessExpiredTimer+0x94>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	3304      	adds	r3, #4
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe f8d7 	bl	800ea54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d022      	beq.n	80108fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	699a      	ldr	r2, [r3, #24]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	18d1      	adds	r1, r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	6978      	ldr	r0, [r7, #20]
 80108c2:	f000 f8d1 	bl	8010a68 <prvInsertTimerInActiveList>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d01f      	beq.n	801090c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108cc:	2300      	movs	r3, #0
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	2300      	movs	r3, #0
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	2100      	movs	r1, #0
 80108d6:	6978      	ldr	r0, [r7, #20]
 80108d8:	f7ff ff88 	bl	80107ec <xTimerGenericCommand>
 80108dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d113      	bne.n	801090c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	60fb      	str	r3, [r7, #12]
}
 80108f6:	bf00      	nop
 80108f8:	e7fe      	b.n	80108f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010900:	f023 0301 	bic.w	r3, r3, #1
 8010904:	b2da      	uxtb	r2, r3
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	6a1b      	ldr	r3, [r3, #32]
 8010910:	6978      	ldr	r0, [r7, #20]
 8010912:	4798      	blx	r3
}
 8010914:	bf00      	nop
 8010916:	3718      	adds	r7, #24
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	24000220 	.word	0x24000220

08010920 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010928:	f107 0308 	add.w	r3, r7, #8
 801092c:	4618      	mov	r0, r3
 801092e:	f000 f857 	bl	80109e0 <prvGetNextExpireTime>
 8010932:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	4619      	mov	r1, r3
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f000 f803 	bl	8010944 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801093e:	f000 f8d5 	bl	8010aec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010942:	e7f1      	b.n	8010928 <prvTimerTask+0x8>

08010944 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801094e:	f7ff f8d7 	bl	800fb00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010952:	f107 0308 	add.w	r3, r7, #8
 8010956:	4618      	mov	r0, r3
 8010958:	f000 f866 	bl	8010a28 <prvSampleTimeNow>
 801095c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d130      	bne.n	80109c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d10a      	bne.n	8010980 <prvProcessTimerOrBlockTask+0x3c>
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	429a      	cmp	r2, r3
 8010970:	d806      	bhi.n	8010980 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010972:	f7ff f8d3 	bl	800fb1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010976:	68f9      	ldr	r1, [r7, #12]
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7ff ff85 	bl	8010888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801097e:	e024      	b.n	80109ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d008      	beq.n	8010998 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010986:	4b13      	ldr	r3, [pc, #76]	; (80109d4 <prvProcessTimerOrBlockTask+0x90>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d101      	bne.n	8010994 <prvProcessTimerOrBlockTask+0x50>
 8010990:	2301      	movs	r3, #1
 8010992:	e000      	b.n	8010996 <prvProcessTimerOrBlockTask+0x52>
 8010994:	2300      	movs	r3, #0
 8010996:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010998:	4b0f      	ldr	r3, [pc, #60]	; (80109d8 <prvProcessTimerOrBlockTask+0x94>)
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	683a      	ldr	r2, [r7, #0]
 80109a4:	4619      	mov	r1, r3
 80109a6:	f7fe fea1 	bl	800f6ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80109aa:	f7ff f8b7 	bl	800fb1c <xTaskResumeAll>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d10a      	bne.n	80109ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <prvProcessTimerOrBlockTask+0x98>)
 80109b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	f3bf 8f6f 	isb	sy
}
 80109c4:	e001      	b.n	80109ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80109c6:	f7ff f8a9 	bl	800fb1c <xTaskResumeAll>
}
 80109ca:	bf00      	nop
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	24000224 	.word	0x24000224
 80109d8:	24000228 	.word	0x24000228
 80109dc:	e000ed04 	.word	0xe000ed04

080109e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80109e8:	4b0e      	ldr	r3, [pc, #56]	; (8010a24 <prvGetNextExpireTime+0x44>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <prvGetNextExpireTime+0x16>
 80109f2:	2201      	movs	r2, #1
 80109f4:	e000      	b.n	80109f8 <prvGetNextExpireTime+0x18>
 80109f6:	2200      	movs	r2, #0
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d105      	bne.n	8010a10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a04:	4b07      	ldr	r3, [pc, #28]	; (8010a24 <prvGetNextExpireTime+0x44>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	60fb      	str	r3, [r7, #12]
 8010a0e:	e001      	b.n	8010a14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010a10:	2300      	movs	r3, #0
 8010a12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010a14:	68fb      	ldr	r3, [r7, #12]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3714      	adds	r7, #20
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	24000220 	.word	0x24000220

08010a28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010a30:	f7ff f910 	bl	800fc54 <xTaskGetTickCount>
 8010a34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010a36:	4b0b      	ldr	r3, [pc, #44]	; (8010a64 <prvSampleTimeNow+0x3c>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d205      	bcs.n	8010a4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010a40:	f000 f91a 	bl	8010c78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2201      	movs	r2, #1
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	e002      	b.n	8010a52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010a52:	4a04      	ldr	r2, [pc, #16]	; (8010a64 <prvSampleTimeNow+0x3c>)
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010a58:	68fb      	ldr	r3, [r7, #12]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	24000230 	.word	0x24000230

08010a68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010a76:	2300      	movs	r3, #0
 8010a78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	68ba      	ldr	r2, [r7, #8]
 8010a7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d812      	bhi.n	8010ab4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	1ad2      	subs	r2, r2, r3
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	699b      	ldr	r3, [r3, #24]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d302      	bcc.n	8010aa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	617b      	str	r3, [r7, #20]
 8010aa0:	e01b      	b.n	8010ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010aa2:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <prvInsertTimerInActiveList+0x7c>)
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	3304      	adds	r3, #4
 8010aaa:	4619      	mov	r1, r3
 8010aac:	4610      	mov	r0, r2
 8010aae:	f7fd ff98 	bl	800e9e2 <vListInsert>
 8010ab2:	e012      	b.n	8010ada <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d206      	bcs.n	8010aca <prvInsertTimerInActiveList+0x62>
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d302      	bcc.n	8010aca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	617b      	str	r3, [r7, #20]
 8010ac8:	e007      	b.n	8010ada <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010aca:	4b07      	ldr	r3, [pc, #28]	; (8010ae8 <prvInsertTimerInActiveList+0x80>)
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	f7fd ff84 	bl	800e9e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ada:	697b      	ldr	r3, [r7, #20]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	24000224 	.word	0x24000224
 8010ae8:	24000220 	.word	0x24000220

08010aec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b08c      	sub	sp, #48	; 0x30
 8010af0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010af2:	e0ae      	b.n	8010c52 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f2c0 80aa 	blt.w	8010c50 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d004      	beq.n	8010b12 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fd ffa1 	bl	800ea54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b12:	1d3b      	adds	r3, r7, #4
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff ff87 	bl	8010a28 <prvSampleTimeNow>
 8010b1a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	2b09      	cmp	r3, #9
 8010b20:	f200 8097 	bhi.w	8010c52 <prvProcessReceivedCommands+0x166>
 8010b24:	a201      	add	r2, pc, #4	; (adr r2, 8010b2c <prvProcessReceivedCommands+0x40>)
 8010b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b2a:	bf00      	nop
 8010b2c:	08010b55 	.word	0x08010b55
 8010b30:	08010b55 	.word	0x08010b55
 8010b34:	08010b55 	.word	0x08010b55
 8010b38:	08010bc9 	.word	0x08010bc9
 8010b3c:	08010bdd 	.word	0x08010bdd
 8010b40:	08010c27 	.word	0x08010c27
 8010b44:	08010b55 	.word	0x08010b55
 8010b48:	08010b55 	.word	0x08010b55
 8010b4c:	08010bc9 	.word	0x08010bc9
 8010b50:	08010bdd 	.word	0x08010bdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b5a:	f043 0301 	orr.w	r3, r3, #1
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	18d1      	adds	r1, r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6a3a      	ldr	r2, [r7, #32]
 8010b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b74:	f7ff ff78 	bl	8010a68 <prvInsertTimerInActiveList>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d069      	beq.n	8010c52 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b8c:	f003 0304 	and.w	r3, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d05e      	beq.n	8010c52 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b98:	699b      	ldr	r3, [r3, #24]
 8010b9a:	441a      	add	r2, r3
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ba6:	f7ff fe21 	bl	80107ec <xTimerGenericCommand>
 8010baa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d14f      	bne.n	8010c52 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8010bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb6:	f383 8811 	msr	BASEPRI, r3
 8010bba:	f3bf 8f6f 	isb	sy
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	61bb      	str	r3, [r7, #24]
}
 8010bc4:	bf00      	nop
 8010bc6:	e7fe      	b.n	8010bc6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010bce:	f023 0301 	bic.w	r3, r3, #1
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8010bda:	e03a      	b.n	8010c52 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010be2:	f043 0301 	orr.w	r3, r3, #1
 8010be6:	b2da      	uxtb	r2, r3
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d10a      	bne.n	8010c12 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8010bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c00:	f383 8811 	msr	BASEPRI, r3
 8010c04:	f3bf 8f6f 	isb	sy
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	617b      	str	r3, [r7, #20]
}
 8010c0e:	bf00      	nop
 8010c10:	e7fe      	b.n	8010c10 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c14:	699a      	ldr	r2, [r3, #24]
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	18d1      	adds	r1, r2, r3
 8010c1a:	6a3b      	ldr	r3, [r7, #32]
 8010c1c:	6a3a      	ldr	r2, [r7, #32]
 8010c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c20:	f7ff ff22 	bl	8010a68 <prvInsertTimerInActiveList>
					break;
 8010c24:	e015      	b.n	8010c52 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010c2c:	f003 0302 	and.w	r3, r3, #2
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d103      	bne.n	8010c3c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8010c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c36:	f000 fbd3 	bl	80113e0 <vPortFree>
 8010c3a:	e00a      	b.n	8010c52 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010c42:	f023 0301 	bic.w	r3, r3, #1
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010c4e:	e000      	b.n	8010c52 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010c50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c52:	4b08      	ldr	r3, [pc, #32]	; (8010c74 <prvProcessReceivedCommands+0x188>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f107 0108 	add.w	r1, r7, #8
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fe fa07 	bl	800f070 <xQueueReceive>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	f47f af45 	bne.w	8010af4 <prvProcessReceivedCommands+0x8>
	}
}
 8010c6a:	bf00      	nop
 8010c6c:	bf00      	nop
 8010c6e:	3728      	adds	r7, #40	; 0x28
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	24000228 	.word	0x24000228

08010c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b088      	sub	sp, #32
 8010c7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c7e:	e048      	b.n	8010d12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c80:	4b2d      	ldr	r3, [pc, #180]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c8a:	4b2b      	ldr	r3, [pc, #172]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	3304      	adds	r3, #4
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7fd fedb 	bl	800ea54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d02e      	beq.n	8010d12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	699b      	ldr	r3, [r3, #24]
 8010cb8:	693a      	ldr	r2, [r7, #16]
 8010cba:	4413      	add	r3, r2
 8010cbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010cbe:	68ba      	ldr	r2, [r7, #8]
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d90e      	bls.n	8010ce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cd2:	4b19      	ldr	r3, [pc, #100]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	4610      	mov	r0, r2
 8010cde:	f7fd fe80 	bl	800e9e2 <vListInsert>
 8010ce2:	e016      	b.n	8010d12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	2100      	movs	r1, #0
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f7ff fd7c 	bl	80107ec <xTimerGenericCommand>
 8010cf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	603b      	str	r3, [r7, #0]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d12:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1b1      	bne.n	8010c80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010d1c:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010d22:	4b06      	ldr	r3, [pc, #24]	; (8010d3c <prvSwitchTimerLists+0xc4>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a04      	ldr	r2, [pc, #16]	; (8010d38 <prvSwitchTimerLists+0xc0>)
 8010d28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010d2a:	4a04      	ldr	r2, [pc, #16]	; (8010d3c <prvSwitchTimerLists+0xc4>)
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	6013      	str	r3, [r2, #0]
}
 8010d30:	bf00      	nop
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	24000220 	.word	0x24000220
 8010d3c:	24000224 	.word	0x24000224

08010d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010d44:	f000 f95e 	bl	8011004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010d48:	4b12      	ldr	r3, [pc, #72]	; (8010d94 <prvCheckForValidListAndQueue+0x54>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d11d      	bne.n	8010d8c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010d50:	4811      	ldr	r0, [pc, #68]	; (8010d98 <prvCheckForValidListAndQueue+0x58>)
 8010d52:	f7fd fdf5 	bl	800e940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010d56:	4811      	ldr	r0, [pc, #68]	; (8010d9c <prvCheckForValidListAndQueue+0x5c>)
 8010d58:	f7fd fdf2 	bl	800e940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010d5c:	4b10      	ldr	r3, [pc, #64]	; (8010da0 <prvCheckForValidListAndQueue+0x60>)
 8010d5e:	4a0e      	ldr	r2, [pc, #56]	; (8010d98 <prvCheckForValidListAndQueue+0x58>)
 8010d60:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010d62:	4b10      	ldr	r3, [pc, #64]	; (8010da4 <prvCheckForValidListAndQueue+0x64>)
 8010d64:	4a0d      	ldr	r2, [pc, #52]	; (8010d9c <prvCheckForValidListAndQueue+0x5c>)
 8010d66:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010d68:	2200      	movs	r2, #0
 8010d6a:	210c      	movs	r1, #12
 8010d6c:	2010      	movs	r0, #16
 8010d6e:	f7fd ff03 	bl	800eb78 <xQueueGenericCreate>
 8010d72:	4603      	mov	r3, r0
 8010d74:	4a07      	ldr	r2, [pc, #28]	; (8010d94 <prvCheckForValidListAndQueue+0x54>)
 8010d76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d78:	4b06      	ldr	r3, [pc, #24]	; (8010d94 <prvCheckForValidListAndQueue+0x54>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d005      	beq.n	8010d8c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d80:	4b04      	ldr	r3, [pc, #16]	; (8010d94 <prvCheckForValidListAndQueue+0x54>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4908      	ldr	r1, [pc, #32]	; (8010da8 <prvCheckForValidListAndQueue+0x68>)
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fe fc86 	bl	800f698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d8c:	f000 f96a 	bl	8011064 <vPortExitCritical>
}
 8010d90:	bf00      	nop
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	24000228 	.word	0x24000228
 8010d98:	240001f8 	.word	0x240001f8
 8010d9c:	2400020c 	.word	0x2400020c
 8010da0:	24000220 	.word	0x24000220
 8010da4:	24000224 	.word	0x24000224
 8010da8:	080121d8 	.word	0x080121d8

08010dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3b04      	subs	r3, #4
 8010dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3b04      	subs	r3, #4
 8010dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	f023 0201 	bic.w	r2, r3, #1
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	3b04      	subs	r3, #4
 8010dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ddc:	4a0c      	ldr	r2, [pc, #48]	; (8010e10 <pxPortInitialiseStack+0x64>)
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3b14      	subs	r3, #20
 8010de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3b04      	subs	r3, #4
 8010df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f06f 0202 	mvn.w	r2, #2
 8010dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3b20      	subs	r3, #32
 8010e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010e02:	68fb      	ldr	r3, [r7, #12]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3714      	adds	r7, #20
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	08010e15 	.word	0x08010e15

08010e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010e1e:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <prvTaskExitError+0x54>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e26:	d00a      	beq.n	8010e3e <prvTaskExitError+0x2a>
	__asm volatile
 8010e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2c:	f383 8811 	msr	BASEPRI, r3
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	60fb      	str	r3, [r7, #12]
}
 8010e3a:	bf00      	nop
 8010e3c:	e7fe      	b.n	8010e3c <prvTaskExitError+0x28>
	__asm volatile
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	60bb      	str	r3, [r7, #8]
}
 8010e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e52:	bf00      	nop
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0fc      	beq.n	8010e54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e5a:	bf00      	nop
 8010e5c:	bf00      	nop
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr
 8010e68:	24000010 	.word	0x24000010
 8010e6c:	00000000 	.word	0x00000000

08010e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <pxCurrentTCBConst2>)
 8010e72:	6819      	ldr	r1, [r3, #0]
 8010e74:	6808      	ldr	r0, [r1, #0]
 8010e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7a:	f380 8809 	msr	PSP, r0
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f04f 0000 	mov.w	r0, #0
 8010e86:	f380 8811 	msr	BASEPRI, r0
 8010e8a:	4770      	bx	lr
 8010e8c:	f3af 8000 	nop.w

08010e90 <pxCurrentTCBConst2>:
 8010e90:	240000cc 	.word	0x240000cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e94:	bf00      	nop
 8010e96:	bf00      	nop

08010e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e98:	4808      	ldr	r0, [pc, #32]	; (8010ebc <prvPortStartFirstTask+0x24>)
 8010e9a:	6800      	ldr	r0, [r0, #0]
 8010e9c:	6800      	ldr	r0, [r0, #0]
 8010e9e:	f380 8808 	msr	MSP, r0
 8010ea2:	f04f 0000 	mov.w	r0, #0
 8010ea6:	f380 8814 	msr	CONTROL, r0
 8010eaa:	b662      	cpsie	i
 8010eac:	b661      	cpsie	f
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	df00      	svc	0
 8010eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010eba:	bf00      	nop
 8010ebc:	e000ed08 	.word	0xe000ed08

08010ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ec6:	4b46      	ldr	r3, [pc, #280]	; (8010fe0 <xPortStartScheduler+0x120>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a46      	ldr	r2, [pc, #280]	; (8010fe4 <xPortStartScheduler+0x124>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d10a      	bne.n	8010ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	613b      	str	r3, [r7, #16]
}
 8010ee2:	bf00      	nop
 8010ee4:	e7fe      	b.n	8010ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ee6:	4b3e      	ldr	r3, [pc, #248]	; (8010fe0 <xPortStartScheduler+0x120>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a3f      	ldr	r2, [pc, #252]	; (8010fe8 <xPortStartScheduler+0x128>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d10a      	bne.n	8010f06 <xPortStartScheduler+0x46>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	60fb      	str	r3, [r7, #12]
}
 8010f02:	bf00      	nop
 8010f04:	e7fe      	b.n	8010f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f06:	4b39      	ldr	r3, [pc, #228]	; (8010fec <xPortStartScheduler+0x12c>)
 8010f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	22ff      	movs	r2, #255	; 0xff
 8010f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f20:	78fb      	ldrb	r3, [r7, #3]
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010f28:	b2da      	uxtb	r2, r3
 8010f2a:	4b31      	ldr	r3, [pc, #196]	; (8010ff0 <xPortStartScheduler+0x130>)
 8010f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f2e:	4b31      	ldr	r3, [pc, #196]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f30:	2207      	movs	r2, #7
 8010f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f34:	e009      	b.n	8010f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010f36:	4b2f      	ldr	r3, [pc, #188]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	4a2d      	ldr	r2, [pc, #180]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f4a:	78fb      	ldrb	r3, [r7, #3]
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f52:	2b80      	cmp	r3, #128	; 0x80
 8010f54:	d0ef      	beq.n	8010f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f56:	4b27      	ldr	r3, [pc, #156]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f1c3 0307 	rsb	r3, r3, #7
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	d00a      	beq.n	8010f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f66:	f383 8811 	msr	BASEPRI, r3
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	60bb      	str	r3, [r7, #8]
}
 8010f74:	bf00      	nop
 8010f76:	e7fe      	b.n	8010f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f78:	4b1e      	ldr	r3, [pc, #120]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	021b      	lsls	r3, r3, #8
 8010f7e:	4a1d      	ldr	r2, [pc, #116]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f82:	4b1c      	ldr	r3, [pc, #112]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f8a:	4a1a      	ldr	r2, [pc, #104]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f96:	4b18      	ldr	r3, [pc, #96]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a17      	ldr	r2, [pc, #92]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a14      	ldr	r2, [pc, #80]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010fae:	f000 f8dd 	bl	801116c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010fb2:	4b12      	ldr	r3, [pc, #72]	; (8010ffc <xPortStartScheduler+0x13c>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010fb8:	f000 f8fc 	bl	80111b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010fbc:	4b10      	ldr	r3, [pc, #64]	; (8011000 <xPortStartScheduler+0x140>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a0f      	ldr	r2, [pc, #60]	; (8011000 <xPortStartScheduler+0x140>)
 8010fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010fc8:	f7ff ff66 	bl	8010e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010fcc:	f7fe ff0a 	bl	800fde4 <vTaskSwitchContext>
	prvTaskExitError();
 8010fd0:	f7ff ff20 	bl	8010e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3718      	adds	r7, #24
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	e000ed00 	.word	0xe000ed00
 8010fe4:	410fc271 	.word	0x410fc271
 8010fe8:	410fc270 	.word	0x410fc270
 8010fec:	e000e400 	.word	0xe000e400
 8010ff0:	24000234 	.word	0x24000234
 8010ff4:	24000238 	.word	0x24000238
 8010ff8:	e000ed20 	.word	0xe000ed20
 8010ffc:	24000010 	.word	0x24000010
 8011000:	e000ef34 	.word	0xe000ef34

08011004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
	__asm volatile
 801100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	607b      	str	r3, [r7, #4]
}
 801101c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <vPortEnterCritical+0x58>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3301      	adds	r3, #1
 8011024:	4a0d      	ldr	r2, [pc, #52]	; (801105c <vPortEnterCritical+0x58>)
 8011026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <vPortEnterCritical+0x58>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d10f      	bne.n	8011050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011030:	4b0b      	ldr	r3, [pc, #44]	; (8011060 <vPortEnterCritical+0x5c>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	b2db      	uxtb	r3, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00a      	beq.n	8011050 <vPortEnterCritical+0x4c>
	__asm volatile
 801103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	603b      	str	r3, [r7, #0]
}
 801104c:	bf00      	nop
 801104e:	e7fe      	b.n	801104e <vPortEnterCritical+0x4a>
	}
}
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	24000010 	.word	0x24000010
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801106a:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <vPortExitCritical+0x50>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10a      	bne.n	8011088 <vPortExitCritical+0x24>
	__asm volatile
 8011072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	607b      	str	r3, [r7, #4]
}
 8011084:	bf00      	nop
 8011086:	e7fe      	b.n	8011086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011088:	4b0a      	ldr	r3, [pc, #40]	; (80110b4 <vPortExitCritical+0x50>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3b01      	subs	r3, #1
 801108e:	4a09      	ldr	r2, [pc, #36]	; (80110b4 <vPortExitCritical+0x50>)
 8011090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011092:	4b08      	ldr	r3, [pc, #32]	; (80110b4 <vPortExitCritical+0x50>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d105      	bne.n	80110a6 <vPortExitCritical+0x42>
 801109a:	2300      	movs	r3, #0
 801109c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	f383 8811 	msr	BASEPRI, r3
}
 80110a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80110a6:	bf00      	nop
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	24000010 	.word	0x24000010
	...

080110c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110c0:	f3ef 8009 	mrs	r0, PSP
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	4b15      	ldr	r3, [pc, #84]	; (8011120 <pxCurrentTCBConst>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	f01e 0f10 	tst.w	lr, #16
 80110d0:	bf08      	it	eq
 80110d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	6010      	str	r0, [r2, #0]
 80110dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110e4:	f380 8811 	msr	BASEPRI, r0
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f7fe fe78 	bl	800fde4 <vTaskSwitchContext>
 80110f4:	f04f 0000 	mov.w	r0, #0
 80110f8:	f380 8811 	msr	BASEPRI, r0
 80110fc:	bc09      	pop	{r0, r3}
 80110fe:	6819      	ldr	r1, [r3, #0]
 8011100:	6808      	ldr	r0, [r1, #0]
 8011102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011106:	f01e 0f10 	tst.w	lr, #16
 801110a:	bf08      	it	eq
 801110c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011110:	f380 8809 	msr	PSP, r0
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	f3af 8000 	nop.w

08011120 <pxCurrentTCBConst>:
 8011120:	240000cc 	.word	0x240000cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop

08011128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	607b      	str	r3, [r7, #4]
}
 8011140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011142:	f7fe fd97 	bl	800fc74 <xTaskIncrementTick>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d003      	beq.n	8011154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801114c:	4b06      	ldr	r3, [pc, #24]	; (8011168 <SysTick_Handler+0x40>)
 801114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011152:	601a      	str	r2, [r3, #0]
 8011154:	2300      	movs	r3, #0
 8011156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	f383 8811 	msr	BASEPRI, r3
}
 801115e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011160:	bf00      	nop
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	e000ed04 	.word	0xe000ed04

0801116c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801116c:	b480      	push	{r7}
 801116e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011170:	4b0b      	ldr	r3, [pc, #44]	; (80111a0 <vPortSetupTimerInterrupt+0x34>)
 8011172:	2200      	movs	r2, #0
 8011174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011176:	4b0b      	ldr	r3, [pc, #44]	; (80111a4 <vPortSetupTimerInterrupt+0x38>)
 8011178:	2200      	movs	r2, #0
 801117a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801117c:	4b0a      	ldr	r3, [pc, #40]	; (80111a8 <vPortSetupTimerInterrupt+0x3c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a0a      	ldr	r2, [pc, #40]	; (80111ac <vPortSetupTimerInterrupt+0x40>)
 8011182:	fba2 2303 	umull	r2, r3, r2, r3
 8011186:	099b      	lsrs	r3, r3, #6
 8011188:	4a09      	ldr	r2, [pc, #36]	; (80111b0 <vPortSetupTimerInterrupt+0x44>)
 801118a:	3b01      	subs	r3, #1
 801118c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801118e:	4b04      	ldr	r3, [pc, #16]	; (80111a0 <vPortSetupTimerInterrupt+0x34>)
 8011190:	2207      	movs	r2, #7
 8011192:	601a      	str	r2, [r3, #0]
}
 8011194:	bf00      	nop
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	e000e010 	.word	0xe000e010
 80111a4:	e000e018 	.word	0xe000e018
 80111a8:	24000000 	.word	0x24000000
 80111ac:	10624dd3 	.word	0x10624dd3
 80111b0:	e000e014 	.word	0xe000e014

080111b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80111c4 <vPortEnableVFP+0x10>
 80111b8:	6801      	ldr	r1, [r0, #0]
 80111ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80111be:	6001      	str	r1, [r0, #0]
 80111c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111c2:	bf00      	nop
 80111c4:	e000ed88 	.word	0xe000ed88

080111c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80111ce:	f3ef 8305 	mrs	r3, IPSR
 80111d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b0f      	cmp	r3, #15
 80111d8:	d914      	bls.n	8011204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111da:	4a17      	ldr	r2, [pc, #92]	; (8011238 <vPortValidateInterruptPriority+0x70>)
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	4413      	add	r3, r2
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80111e4:	4b15      	ldr	r3, [pc, #84]	; (801123c <vPortValidateInterruptPriority+0x74>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	7afa      	ldrb	r2, [r7, #11]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d20a      	bcs.n	8011204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	607b      	str	r3, [r7, #4]
}
 8011200:	bf00      	nop
 8011202:	e7fe      	b.n	8011202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011204:	4b0e      	ldr	r3, [pc, #56]	; (8011240 <vPortValidateInterruptPriority+0x78>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801120c:	4b0d      	ldr	r3, [pc, #52]	; (8011244 <vPortValidateInterruptPriority+0x7c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	429a      	cmp	r2, r3
 8011212:	d90a      	bls.n	801122a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	603b      	str	r3, [r7, #0]
}
 8011226:	bf00      	nop
 8011228:	e7fe      	b.n	8011228 <vPortValidateInterruptPriority+0x60>
	}
 801122a:	bf00      	nop
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	e000e3f0 	.word	0xe000e3f0
 801123c:	24000234 	.word	0x24000234
 8011240:	e000ed0c 	.word	0xe000ed0c
 8011244:	24000238 	.word	0x24000238

08011248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	; 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011250:	2300      	movs	r3, #0
 8011252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011254:	f7fe fc54 	bl	800fb00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011258:	4b5b      	ldr	r3, [pc, #364]	; (80113c8 <pvPortMalloc+0x180>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011260:	f000 f920 	bl	80114a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011264:	4b59      	ldr	r3, [pc, #356]	; (80113cc <pvPortMalloc+0x184>)
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4013      	ands	r3, r2
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 8093 	bne.w	8011398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d01d      	beq.n	80112b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011278:	2208      	movs	r2, #8
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f003 0307 	and.w	r3, r3, #7
 8011286:	2b00      	cmp	r3, #0
 8011288:	d014      	beq.n	80112b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f023 0307 	bic.w	r3, r3, #7
 8011290:	3308      	adds	r3, #8
 8011292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f003 0307 	and.w	r3, r3, #7
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <pvPortMalloc+0x6c>
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	617b      	str	r3, [r7, #20]
}
 80112b0:	bf00      	nop
 80112b2:	e7fe      	b.n	80112b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d06e      	beq.n	8011398 <pvPortMalloc+0x150>
 80112ba:	4b45      	ldr	r3, [pc, #276]	; (80113d0 <pvPortMalloc+0x188>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d869      	bhi.n	8011398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80112c4:	4b43      	ldr	r3, [pc, #268]	; (80113d4 <pvPortMalloc+0x18c>)
 80112c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80112c8:	4b42      	ldr	r3, [pc, #264]	; (80113d4 <pvPortMalloc+0x18c>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112ce:	e004      	b.n	80112da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d903      	bls.n	80112ec <pvPortMalloc+0xa4>
 80112e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d1f1      	bne.n	80112d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80112ec:	4b36      	ldr	r3, [pc, #216]	; (80113c8 <pvPortMalloc+0x180>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d050      	beq.n	8011398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2208      	movs	r2, #8
 80112fc:	4413      	add	r3, r2
 80112fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	685a      	ldr	r2, [r3, #4]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	1ad2      	subs	r2, r2, r3
 8011310:	2308      	movs	r3, #8
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	429a      	cmp	r2, r3
 8011316:	d91f      	bls.n	8011358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4413      	add	r3, r2
 801131e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	f003 0307 	and.w	r3, r3, #7
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00a      	beq.n	8011340 <pvPortMalloc+0xf8>
	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	613b      	str	r3, [r7, #16]
}
 801133c:	bf00      	nop
 801133e:	e7fe      	b.n	801133e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	1ad2      	subs	r2, r2, r3
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011352:	69b8      	ldr	r0, [r7, #24]
 8011354:	f000 f90a 	bl	801156c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011358:	4b1d      	ldr	r3, [pc, #116]	; (80113d0 <pvPortMalloc+0x188>)
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	4a1b      	ldr	r2, [pc, #108]	; (80113d0 <pvPortMalloc+0x188>)
 8011364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011366:	4b1a      	ldr	r3, [pc, #104]	; (80113d0 <pvPortMalloc+0x188>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	4b1b      	ldr	r3, [pc, #108]	; (80113d8 <pvPortMalloc+0x190>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	429a      	cmp	r2, r3
 8011370:	d203      	bcs.n	801137a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011372:	4b17      	ldr	r3, [pc, #92]	; (80113d0 <pvPortMalloc+0x188>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a18      	ldr	r2, [pc, #96]	; (80113d8 <pvPortMalloc+0x190>)
 8011378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	4b13      	ldr	r3, [pc, #76]	; (80113cc <pvPortMalloc+0x184>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	431a      	orrs	r2, r3
 8011384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	2200      	movs	r2, #0
 801138c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801138e:	4b13      	ldr	r3, [pc, #76]	; (80113dc <pvPortMalloc+0x194>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3301      	adds	r3, #1
 8011394:	4a11      	ldr	r2, [pc, #68]	; (80113dc <pvPortMalloc+0x194>)
 8011396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011398:	f7fe fbc0 	bl	800fb1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00a      	beq.n	80113bc <pvPortMalloc+0x174>
	__asm volatile
 80113a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113aa:	f383 8811 	msr	BASEPRI, r3
 80113ae:	f3bf 8f6f 	isb	sy
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	60fb      	str	r3, [r7, #12]
}
 80113b8:	bf00      	nop
 80113ba:	e7fe      	b.n	80113ba <pvPortMalloc+0x172>
	return pvReturn;
 80113bc:	69fb      	ldr	r3, [r7, #28]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3728      	adds	r7, #40	; 0x28
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	24027344 	.word	0x24027344
 80113cc:	24027358 	.word	0x24027358
 80113d0:	24027348 	.word	0x24027348
 80113d4:	2402733c 	.word	0x2402733c
 80113d8:	2402734c 	.word	0x2402734c
 80113dc:	24027350 	.word	0x24027350

080113e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d04d      	beq.n	801148e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113f2:	2308      	movs	r3, #8
 80113f4:	425b      	negs	r3, r3
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	4413      	add	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	685a      	ldr	r2, [r3, #4]
 8011404:	4b24      	ldr	r3, [pc, #144]	; (8011498 <vPortFree+0xb8>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4013      	ands	r3, r2
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10a      	bne.n	8011424 <vPortFree+0x44>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	60fb      	str	r3, [r7, #12]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00a      	beq.n	8011442 <vPortFree+0x62>
	__asm volatile
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	60bb      	str	r3, [r7, #8]
}
 801143e:	bf00      	nop
 8011440:	e7fe      	b.n	8011440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	685a      	ldr	r2, [r3, #4]
 8011446:	4b14      	ldr	r3, [pc, #80]	; (8011498 <vPortFree+0xb8>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4013      	ands	r3, r2
 801144c:	2b00      	cmp	r3, #0
 801144e:	d01e      	beq.n	801148e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d11a      	bne.n	801148e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	4b0e      	ldr	r3, [pc, #56]	; (8011498 <vPortFree+0xb8>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	43db      	mvns	r3, r3
 8011462:	401a      	ands	r2, r3
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011468:	f7fe fb4a 	bl	800fb00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	685a      	ldr	r2, [r3, #4]
 8011470:	4b0a      	ldr	r3, [pc, #40]	; (801149c <vPortFree+0xbc>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4413      	add	r3, r2
 8011476:	4a09      	ldr	r2, [pc, #36]	; (801149c <vPortFree+0xbc>)
 8011478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801147a:	6938      	ldr	r0, [r7, #16]
 801147c:	f000 f876 	bl	801156c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011480:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <vPortFree+0xc0>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3301      	adds	r3, #1
 8011486:	4a06      	ldr	r2, [pc, #24]	; (80114a0 <vPortFree+0xc0>)
 8011488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801148a:	f7fe fb47 	bl	800fb1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801148e:	bf00      	nop
 8011490:	3718      	adds	r7, #24
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	24027358 	.word	0x24027358
 801149c:	24027348 	.word	0x24027348
 80114a0:	24027354 	.word	0x24027354

080114a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80114a4:	b480      	push	{r7}
 80114a6:	b085      	sub	sp, #20
 80114a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80114aa:	4b29      	ldr	r3, [pc, #164]	; (8011550 <prvHeapInit+0xac>)
 80114ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114ae:	4b29      	ldr	r3, [pc, #164]	; (8011554 <prvHeapInit+0xb0>)
 80114b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f003 0307 	and.w	r3, r3, #7
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00c      	beq.n	80114d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3307      	adds	r3, #7
 80114c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f023 0307 	bic.w	r3, r3, #7
 80114c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80114ca:	68ba      	ldr	r2, [r7, #8]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	4a20      	ldr	r2, [pc, #128]	; (8011554 <prvHeapInit+0xb0>)
 80114d2:	4413      	add	r3, r2
 80114d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80114da:	4a1f      	ldr	r2, [pc, #124]	; (8011558 <prvHeapInit+0xb4>)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80114e0:	4b1d      	ldr	r3, [pc, #116]	; (8011558 <prvHeapInit+0xb4>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	4413      	add	r3, r2
 80114ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114ee:	2208      	movs	r2, #8
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	1a9b      	subs	r3, r3, r2
 80114f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f023 0307 	bic.w	r3, r3, #7
 80114fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	4a16      	ldr	r2, [pc, #88]	; (801155c <prvHeapInit+0xb8>)
 8011502:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011504:	4b15      	ldr	r3, [pc, #84]	; (801155c <prvHeapInit+0xb8>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2200      	movs	r2, #0
 801150a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801150c:	4b13      	ldr	r3, [pc, #76]	; (801155c <prvHeapInit+0xb8>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	68fa      	ldr	r2, [r7, #12]
 801151c:	1ad2      	subs	r2, r2, r3
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011522:	4b0e      	ldr	r3, [pc, #56]	; (801155c <prvHeapInit+0xb8>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	4a0c      	ldr	r2, [pc, #48]	; (8011560 <prvHeapInit+0xbc>)
 8011530:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	4a0b      	ldr	r2, [pc, #44]	; (8011564 <prvHeapInit+0xc0>)
 8011538:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801153a:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <prvHeapInit+0xc4>)
 801153c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011540:	601a      	str	r2, [r3, #0]
}
 8011542:	bf00      	nop
 8011544:	3714      	adds	r7, #20
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	00027100 	.word	0x00027100
 8011554:	2400023c 	.word	0x2400023c
 8011558:	2402733c 	.word	0x2402733c
 801155c:	24027344 	.word	0x24027344
 8011560:	2402734c 	.word	0x2402734c
 8011564:	24027348 	.word	0x24027348
 8011568:	24027358 	.word	0x24027358

0801156c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011574:	4b28      	ldr	r3, [pc, #160]	; (8011618 <prvInsertBlockIntoFreeList+0xac>)
 8011576:	60fb      	str	r3, [r7, #12]
 8011578:	e002      	b.n	8011580 <prvInsertBlockIntoFreeList+0x14>
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	429a      	cmp	r2, r3
 8011588:	d8f7      	bhi.n	801157a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	4413      	add	r3, r2
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	429a      	cmp	r2, r3
 801159a:	d108      	bne.n	80115ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	685a      	ldr	r2, [r3, #4]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	441a      	add	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	68ba      	ldr	r2, [r7, #8]
 80115b8:	441a      	add	r2, r3
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d118      	bne.n	80115f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	4b15      	ldr	r3, [pc, #84]	; (801161c <prvInsertBlockIntoFreeList+0xb0>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d00d      	beq.n	80115ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	685a      	ldr	r2, [r3, #4]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	441a      	add	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	601a      	str	r2, [r3, #0]
 80115e8:	e008      	b.n	80115fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80115ea:	4b0c      	ldr	r3, [pc, #48]	; (801161c <prvInsertBlockIntoFreeList+0xb0>)
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	601a      	str	r2, [r3, #0]
 80115f2:	e003      	b.n	80115fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	429a      	cmp	r2, r3
 8011602:	d002      	beq.n	801160a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801160a:	bf00      	nop
 801160c:	3714      	adds	r7, #20
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr
 8011616:	bf00      	nop
 8011618:	2402733c 	.word	0x2402733c
 801161c:	24027344 	.word	0x24027344

08011620 <atoi>:
 8011620:	220a      	movs	r2, #10
 8011622:	2100      	movs	r1, #0
 8011624:	f000 b9cc 	b.w	80119c0 <strtol>

08011628 <__errno>:
 8011628:	4b01      	ldr	r3, [pc, #4]	; (8011630 <__errno+0x8>)
 801162a:	6818      	ldr	r0, [r3, #0]
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	24000014 	.word	0x24000014

08011634 <__libc_init_array>:
 8011634:	b570      	push	{r4, r5, r6, lr}
 8011636:	4d0d      	ldr	r5, [pc, #52]	; (801166c <__libc_init_array+0x38>)
 8011638:	4c0d      	ldr	r4, [pc, #52]	; (8011670 <__libc_init_array+0x3c>)
 801163a:	1b64      	subs	r4, r4, r5
 801163c:	10a4      	asrs	r4, r4, #2
 801163e:	2600      	movs	r6, #0
 8011640:	42a6      	cmp	r6, r4
 8011642:	d109      	bne.n	8011658 <__libc_init_array+0x24>
 8011644:	4d0b      	ldr	r5, [pc, #44]	; (8011674 <__libc_init_array+0x40>)
 8011646:	4c0c      	ldr	r4, [pc, #48]	; (8011678 <__libc_init_array+0x44>)
 8011648:	f000 fd58 	bl	80120fc <_init>
 801164c:	1b64      	subs	r4, r4, r5
 801164e:	10a4      	asrs	r4, r4, #2
 8011650:	2600      	movs	r6, #0
 8011652:	42a6      	cmp	r6, r4
 8011654:	d105      	bne.n	8011662 <__libc_init_array+0x2e>
 8011656:	bd70      	pop	{r4, r5, r6, pc}
 8011658:	f855 3b04 	ldr.w	r3, [r5], #4
 801165c:	4798      	blx	r3
 801165e:	3601      	adds	r6, #1
 8011660:	e7ee      	b.n	8011640 <__libc_init_array+0xc>
 8011662:	f855 3b04 	ldr.w	r3, [r5], #4
 8011666:	4798      	blx	r3
 8011668:	3601      	adds	r6, #1
 801166a:	e7f2      	b.n	8011652 <__libc_init_array+0x1e>
 801166c:	080123bc 	.word	0x080123bc
 8011670:	080123bc 	.word	0x080123bc
 8011674:	080123bc 	.word	0x080123bc
 8011678:	080123c0 	.word	0x080123c0

0801167c <__retarget_lock_acquire_recursive>:
 801167c:	4770      	bx	lr

0801167e <__retarget_lock_release_recursive>:
 801167e:	4770      	bx	lr

08011680 <memcpy>:
 8011680:	440a      	add	r2, r1
 8011682:	4291      	cmp	r1, r2
 8011684:	f100 33ff 	add.w	r3, r0, #4294967295
 8011688:	d100      	bne.n	801168c <memcpy+0xc>
 801168a:	4770      	bx	lr
 801168c:	b510      	push	{r4, lr}
 801168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011696:	4291      	cmp	r1, r2
 8011698:	d1f9      	bne.n	801168e <memcpy+0xe>
 801169a:	bd10      	pop	{r4, pc}

0801169c <memset>:
 801169c:	4402      	add	r2, r0
 801169e:	4603      	mov	r3, r0
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d100      	bne.n	80116a6 <memset+0xa>
 80116a4:	4770      	bx	lr
 80116a6:	f803 1b01 	strb.w	r1, [r3], #1
 80116aa:	e7f9      	b.n	80116a0 <memset+0x4>

080116ac <_malloc_r>:
 80116ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ae:	1ccd      	adds	r5, r1, #3
 80116b0:	f025 0503 	bic.w	r5, r5, #3
 80116b4:	3508      	adds	r5, #8
 80116b6:	2d0c      	cmp	r5, #12
 80116b8:	bf38      	it	cc
 80116ba:	250c      	movcc	r5, #12
 80116bc:	2d00      	cmp	r5, #0
 80116be:	4606      	mov	r6, r0
 80116c0:	db01      	blt.n	80116c6 <_malloc_r+0x1a>
 80116c2:	42a9      	cmp	r1, r5
 80116c4:	d903      	bls.n	80116ce <_malloc_r+0x22>
 80116c6:	230c      	movs	r3, #12
 80116c8:	6033      	str	r3, [r6, #0]
 80116ca:	2000      	movs	r0, #0
 80116cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116ce:	f000 f981 	bl	80119d4 <__malloc_lock>
 80116d2:	4921      	ldr	r1, [pc, #132]	; (8011758 <_malloc_r+0xac>)
 80116d4:	680a      	ldr	r2, [r1, #0]
 80116d6:	4614      	mov	r4, r2
 80116d8:	b99c      	cbnz	r4, 8011702 <_malloc_r+0x56>
 80116da:	4f20      	ldr	r7, [pc, #128]	; (801175c <_malloc_r+0xb0>)
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	b923      	cbnz	r3, 80116ea <_malloc_r+0x3e>
 80116e0:	4621      	mov	r1, r4
 80116e2:	4630      	mov	r0, r6
 80116e4:	f000 f8a6 	bl	8011834 <_sbrk_r>
 80116e8:	6038      	str	r0, [r7, #0]
 80116ea:	4629      	mov	r1, r5
 80116ec:	4630      	mov	r0, r6
 80116ee:	f000 f8a1 	bl	8011834 <_sbrk_r>
 80116f2:	1c43      	adds	r3, r0, #1
 80116f4:	d123      	bne.n	801173e <_malloc_r+0x92>
 80116f6:	230c      	movs	r3, #12
 80116f8:	6033      	str	r3, [r6, #0]
 80116fa:	4630      	mov	r0, r6
 80116fc:	f000 f970 	bl	80119e0 <__malloc_unlock>
 8011700:	e7e3      	b.n	80116ca <_malloc_r+0x1e>
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	1b5b      	subs	r3, r3, r5
 8011706:	d417      	bmi.n	8011738 <_malloc_r+0x8c>
 8011708:	2b0b      	cmp	r3, #11
 801170a:	d903      	bls.n	8011714 <_malloc_r+0x68>
 801170c:	6023      	str	r3, [r4, #0]
 801170e:	441c      	add	r4, r3
 8011710:	6025      	str	r5, [r4, #0]
 8011712:	e004      	b.n	801171e <_malloc_r+0x72>
 8011714:	6863      	ldr	r3, [r4, #4]
 8011716:	42a2      	cmp	r2, r4
 8011718:	bf0c      	ite	eq
 801171a:	600b      	streq	r3, [r1, #0]
 801171c:	6053      	strne	r3, [r2, #4]
 801171e:	4630      	mov	r0, r6
 8011720:	f000 f95e 	bl	80119e0 <__malloc_unlock>
 8011724:	f104 000b 	add.w	r0, r4, #11
 8011728:	1d23      	adds	r3, r4, #4
 801172a:	f020 0007 	bic.w	r0, r0, #7
 801172e:	1ac2      	subs	r2, r0, r3
 8011730:	d0cc      	beq.n	80116cc <_malloc_r+0x20>
 8011732:	1a1b      	subs	r3, r3, r0
 8011734:	50a3      	str	r3, [r4, r2]
 8011736:	e7c9      	b.n	80116cc <_malloc_r+0x20>
 8011738:	4622      	mov	r2, r4
 801173a:	6864      	ldr	r4, [r4, #4]
 801173c:	e7cc      	b.n	80116d8 <_malloc_r+0x2c>
 801173e:	1cc4      	adds	r4, r0, #3
 8011740:	f024 0403 	bic.w	r4, r4, #3
 8011744:	42a0      	cmp	r0, r4
 8011746:	d0e3      	beq.n	8011710 <_malloc_r+0x64>
 8011748:	1a21      	subs	r1, r4, r0
 801174a:	4630      	mov	r0, r6
 801174c:	f000 f872 	bl	8011834 <_sbrk_r>
 8011750:	3001      	adds	r0, #1
 8011752:	d1dd      	bne.n	8011710 <_malloc_r+0x64>
 8011754:	e7cf      	b.n	80116f6 <_malloc_r+0x4a>
 8011756:	bf00      	nop
 8011758:	2402735c 	.word	0x2402735c
 801175c:	24027360 	.word	0x24027360

08011760 <cleanup_glue>:
 8011760:	b538      	push	{r3, r4, r5, lr}
 8011762:	460c      	mov	r4, r1
 8011764:	6809      	ldr	r1, [r1, #0]
 8011766:	4605      	mov	r5, r0
 8011768:	b109      	cbz	r1, 801176e <cleanup_glue+0xe>
 801176a:	f7ff fff9 	bl	8011760 <cleanup_glue>
 801176e:	4621      	mov	r1, r4
 8011770:	4628      	mov	r0, r5
 8011772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011776:	f000 b939 	b.w	80119ec <_free_r>
	...

0801177c <_reclaim_reent>:
 801177c:	4b2c      	ldr	r3, [pc, #176]	; (8011830 <_reclaim_reent+0xb4>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4283      	cmp	r3, r0
 8011782:	b570      	push	{r4, r5, r6, lr}
 8011784:	4604      	mov	r4, r0
 8011786:	d051      	beq.n	801182c <_reclaim_reent+0xb0>
 8011788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801178a:	b143      	cbz	r3, 801179e <_reclaim_reent+0x22>
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d14a      	bne.n	8011828 <_reclaim_reent+0xac>
 8011792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011794:	6819      	ldr	r1, [r3, #0]
 8011796:	b111      	cbz	r1, 801179e <_reclaim_reent+0x22>
 8011798:	4620      	mov	r0, r4
 801179a:	f000 f927 	bl	80119ec <_free_r>
 801179e:	6961      	ldr	r1, [r4, #20]
 80117a0:	b111      	cbz	r1, 80117a8 <_reclaim_reent+0x2c>
 80117a2:	4620      	mov	r0, r4
 80117a4:	f000 f922 	bl	80119ec <_free_r>
 80117a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80117aa:	b111      	cbz	r1, 80117b2 <_reclaim_reent+0x36>
 80117ac:	4620      	mov	r0, r4
 80117ae:	f000 f91d 	bl	80119ec <_free_r>
 80117b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117b4:	b111      	cbz	r1, 80117bc <_reclaim_reent+0x40>
 80117b6:	4620      	mov	r0, r4
 80117b8:	f000 f918 	bl	80119ec <_free_r>
 80117bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80117be:	b111      	cbz	r1, 80117c6 <_reclaim_reent+0x4a>
 80117c0:	4620      	mov	r0, r4
 80117c2:	f000 f913 	bl	80119ec <_free_r>
 80117c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80117c8:	b111      	cbz	r1, 80117d0 <_reclaim_reent+0x54>
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 f90e 	bl	80119ec <_free_r>
 80117d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80117d2:	b111      	cbz	r1, 80117da <_reclaim_reent+0x5e>
 80117d4:	4620      	mov	r0, r4
 80117d6:	f000 f909 	bl	80119ec <_free_r>
 80117da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80117dc:	b111      	cbz	r1, 80117e4 <_reclaim_reent+0x68>
 80117de:	4620      	mov	r0, r4
 80117e0:	f000 f904 	bl	80119ec <_free_r>
 80117e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117e6:	b111      	cbz	r1, 80117ee <_reclaim_reent+0x72>
 80117e8:	4620      	mov	r0, r4
 80117ea:	f000 f8ff 	bl	80119ec <_free_r>
 80117ee:	69a3      	ldr	r3, [r4, #24]
 80117f0:	b1e3      	cbz	r3, 801182c <_reclaim_reent+0xb0>
 80117f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80117f4:	4620      	mov	r0, r4
 80117f6:	4798      	blx	r3
 80117f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80117fa:	b1b9      	cbz	r1, 801182c <_reclaim_reent+0xb0>
 80117fc:	4620      	mov	r0, r4
 80117fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011802:	f7ff bfad 	b.w	8011760 <cleanup_glue>
 8011806:	5949      	ldr	r1, [r1, r5]
 8011808:	b941      	cbnz	r1, 801181c <_reclaim_reent+0xa0>
 801180a:	3504      	adds	r5, #4
 801180c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801180e:	2d80      	cmp	r5, #128	; 0x80
 8011810:	68d9      	ldr	r1, [r3, #12]
 8011812:	d1f8      	bne.n	8011806 <_reclaim_reent+0x8a>
 8011814:	4620      	mov	r0, r4
 8011816:	f000 f8e9 	bl	80119ec <_free_r>
 801181a:	e7ba      	b.n	8011792 <_reclaim_reent+0x16>
 801181c:	680e      	ldr	r6, [r1, #0]
 801181e:	4620      	mov	r0, r4
 8011820:	f000 f8e4 	bl	80119ec <_free_r>
 8011824:	4631      	mov	r1, r6
 8011826:	e7ef      	b.n	8011808 <_reclaim_reent+0x8c>
 8011828:	2500      	movs	r5, #0
 801182a:	e7ef      	b.n	801180c <_reclaim_reent+0x90>
 801182c:	bd70      	pop	{r4, r5, r6, pc}
 801182e:	bf00      	nop
 8011830:	24000014 	.word	0x24000014

08011834 <_sbrk_r>:
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	4d06      	ldr	r5, [pc, #24]	; (8011850 <_sbrk_r+0x1c>)
 8011838:	2300      	movs	r3, #0
 801183a:	4604      	mov	r4, r0
 801183c:	4608      	mov	r0, r1
 801183e:	602b      	str	r3, [r5, #0]
 8011840:	f7f1 fbea 	bl	8003018 <_sbrk>
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	d102      	bne.n	801184e <_sbrk_r+0x1a>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	b103      	cbz	r3, 801184e <_sbrk_r+0x1a>
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	bd38      	pop	{r3, r4, r5, pc}
 8011850:	24027d80 	.word	0x24027d80

08011854 <siprintf>:
 8011854:	b40e      	push	{r1, r2, r3}
 8011856:	b500      	push	{lr}
 8011858:	b09c      	sub	sp, #112	; 0x70
 801185a:	ab1d      	add	r3, sp, #116	; 0x74
 801185c:	9002      	str	r0, [sp, #8]
 801185e:	9006      	str	r0, [sp, #24]
 8011860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011864:	4809      	ldr	r0, [pc, #36]	; (801188c <siprintf+0x38>)
 8011866:	9107      	str	r1, [sp, #28]
 8011868:	9104      	str	r1, [sp, #16]
 801186a:	4909      	ldr	r1, [pc, #36]	; (8011890 <siprintf+0x3c>)
 801186c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011870:	9105      	str	r1, [sp, #20]
 8011872:	6800      	ldr	r0, [r0, #0]
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	a902      	add	r1, sp, #8
 8011878:	f000 f964 	bl	8011b44 <_svfiprintf_r>
 801187c:	9b02      	ldr	r3, [sp, #8]
 801187e:	2200      	movs	r2, #0
 8011880:	701a      	strb	r2, [r3, #0]
 8011882:	b01c      	add	sp, #112	; 0x70
 8011884:	f85d eb04 	ldr.w	lr, [sp], #4
 8011888:	b003      	add	sp, #12
 801188a:	4770      	bx	lr
 801188c:	24000014 	.word	0x24000014
 8011890:	ffff0208 	.word	0xffff0208

08011894 <strncmp>:
 8011894:	b510      	push	{r4, lr}
 8011896:	b16a      	cbz	r2, 80118b4 <strncmp+0x20>
 8011898:	3901      	subs	r1, #1
 801189a:	1884      	adds	r4, r0, r2
 801189c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80118a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d103      	bne.n	80118b0 <strncmp+0x1c>
 80118a8:	42a0      	cmp	r0, r4
 80118aa:	d001      	beq.n	80118b0 <strncmp+0x1c>
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d1f5      	bne.n	801189c <strncmp+0x8>
 80118b0:	1a98      	subs	r0, r3, r2
 80118b2:	bd10      	pop	{r4, pc}
 80118b4:	4610      	mov	r0, r2
 80118b6:	e7fc      	b.n	80118b2 <strncmp+0x1e>

080118b8 <_strtol_l.isra.0>:
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118be:	d001      	beq.n	80118c4 <_strtol_l.isra.0+0xc>
 80118c0:	2b24      	cmp	r3, #36	; 0x24
 80118c2:	d906      	bls.n	80118d2 <_strtol_l.isra.0+0x1a>
 80118c4:	f7ff feb0 	bl	8011628 <__errno>
 80118c8:	2316      	movs	r3, #22
 80118ca:	6003      	str	r3, [r0, #0]
 80118cc:	2000      	movs	r0, #0
 80118ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d2:	4f3a      	ldr	r7, [pc, #232]	; (80119bc <_strtol_l.isra.0+0x104>)
 80118d4:	468e      	mov	lr, r1
 80118d6:	4676      	mov	r6, lr
 80118d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80118dc:	5de5      	ldrb	r5, [r4, r7]
 80118de:	f015 0508 	ands.w	r5, r5, #8
 80118e2:	d1f8      	bne.n	80118d6 <_strtol_l.isra.0+0x1e>
 80118e4:	2c2d      	cmp	r4, #45	; 0x2d
 80118e6:	d134      	bne.n	8011952 <_strtol_l.isra.0+0x9a>
 80118e8:	f89e 4000 	ldrb.w	r4, [lr]
 80118ec:	f04f 0801 	mov.w	r8, #1
 80118f0:	f106 0e02 	add.w	lr, r6, #2
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d05c      	beq.n	80119b2 <_strtol_l.isra.0+0xfa>
 80118f8:	2b10      	cmp	r3, #16
 80118fa:	d10c      	bne.n	8011916 <_strtol_l.isra.0+0x5e>
 80118fc:	2c30      	cmp	r4, #48	; 0x30
 80118fe:	d10a      	bne.n	8011916 <_strtol_l.isra.0+0x5e>
 8011900:	f89e 4000 	ldrb.w	r4, [lr]
 8011904:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011908:	2c58      	cmp	r4, #88	; 0x58
 801190a:	d14d      	bne.n	80119a8 <_strtol_l.isra.0+0xf0>
 801190c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011910:	2310      	movs	r3, #16
 8011912:	f10e 0e02 	add.w	lr, lr, #2
 8011916:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801191a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801191e:	2600      	movs	r6, #0
 8011920:	fbbc f9f3 	udiv	r9, ip, r3
 8011924:	4635      	mov	r5, r6
 8011926:	fb03 ca19 	mls	sl, r3, r9, ip
 801192a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801192e:	2f09      	cmp	r7, #9
 8011930:	d818      	bhi.n	8011964 <_strtol_l.isra.0+0xac>
 8011932:	463c      	mov	r4, r7
 8011934:	42a3      	cmp	r3, r4
 8011936:	dd24      	ble.n	8011982 <_strtol_l.isra.0+0xca>
 8011938:	2e00      	cmp	r6, #0
 801193a:	db1f      	blt.n	801197c <_strtol_l.isra.0+0xc4>
 801193c:	45a9      	cmp	r9, r5
 801193e:	d31d      	bcc.n	801197c <_strtol_l.isra.0+0xc4>
 8011940:	d101      	bne.n	8011946 <_strtol_l.isra.0+0x8e>
 8011942:	45a2      	cmp	sl, r4
 8011944:	db1a      	blt.n	801197c <_strtol_l.isra.0+0xc4>
 8011946:	fb05 4503 	mla	r5, r5, r3, r4
 801194a:	2601      	movs	r6, #1
 801194c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011950:	e7eb      	b.n	801192a <_strtol_l.isra.0+0x72>
 8011952:	2c2b      	cmp	r4, #43	; 0x2b
 8011954:	bf08      	it	eq
 8011956:	f89e 4000 	ldrbeq.w	r4, [lr]
 801195a:	46a8      	mov	r8, r5
 801195c:	bf08      	it	eq
 801195e:	f106 0e02 	addeq.w	lr, r6, #2
 8011962:	e7c7      	b.n	80118f4 <_strtol_l.isra.0+0x3c>
 8011964:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011968:	2f19      	cmp	r7, #25
 801196a:	d801      	bhi.n	8011970 <_strtol_l.isra.0+0xb8>
 801196c:	3c37      	subs	r4, #55	; 0x37
 801196e:	e7e1      	b.n	8011934 <_strtol_l.isra.0+0x7c>
 8011970:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011974:	2f19      	cmp	r7, #25
 8011976:	d804      	bhi.n	8011982 <_strtol_l.isra.0+0xca>
 8011978:	3c57      	subs	r4, #87	; 0x57
 801197a:	e7db      	b.n	8011934 <_strtol_l.isra.0+0x7c>
 801197c:	f04f 36ff 	mov.w	r6, #4294967295
 8011980:	e7e4      	b.n	801194c <_strtol_l.isra.0+0x94>
 8011982:	2e00      	cmp	r6, #0
 8011984:	da05      	bge.n	8011992 <_strtol_l.isra.0+0xda>
 8011986:	2322      	movs	r3, #34	; 0x22
 8011988:	6003      	str	r3, [r0, #0]
 801198a:	4665      	mov	r5, ip
 801198c:	b942      	cbnz	r2, 80119a0 <_strtol_l.isra.0+0xe8>
 801198e:	4628      	mov	r0, r5
 8011990:	e79d      	b.n	80118ce <_strtol_l.isra.0+0x16>
 8011992:	f1b8 0f00 	cmp.w	r8, #0
 8011996:	d000      	beq.n	801199a <_strtol_l.isra.0+0xe2>
 8011998:	426d      	negs	r5, r5
 801199a:	2a00      	cmp	r2, #0
 801199c:	d0f7      	beq.n	801198e <_strtol_l.isra.0+0xd6>
 801199e:	b10e      	cbz	r6, 80119a4 <_strtol_l.isra.0+0xec>
 80119a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80119a4:	6011      	str	r1, [r2, #0]
 80119a6:	e7f2      	b.n	801198e <_strtol_l.isra.0+0xd6>
 80119a8:	2430      	movs	r4, #48	; 0x30
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1b3      	bne.n	8011916 <_strtol_l.isra.0+0x5e>
 80119ae:	2308      	movs	r3, #8
 80119b0:	e7b1      	b.n	8011916 <_strtol_l.isra.0+0x5e>
 80119b2:	2c30      	cmp	r4, #48	; 0x30
 80119b4:	d0a4      	beq.n	8011900 <_strtol_l.isra.0+0x48>
 80119b6:	230a      	movs	r3, #10
 80119b8:	e7ad      	b.n	8011916 <_strtol_l.isra.0+0x5e>
 80119ba:	bf00      	nop
 80119bc:	08012281 	.word	0x08012281

080119c0 <strtol>:
 80119c0:	4613      	mov	r3, r2
 80119c2:	460a      	mov	r2, r1
 80119c4:	4601      	mov	r1, r0
 80119c6:	4802      	ldr	r0, [pc, #8]	; (80119d0 <strtol+0x10>)
 80119c8:	6800      	ldr	r0, [r0, #0]
 80119ca:	f7ff bf75 	b.w	80118b8 <_strtol_l.isra.0>
 80119ce:	bf00      	nop
 80119d0:	24000014 	.word	0x24000014

080119d4 <__malloc_lock>:
 80119d4:	4801      	ldr	r0, [pc, #4]	; (80119dc <__malloc_lock+0x8>)
 80119d6:	f7ff be51 	b.w	801167c <__retarget_lock_acquire_recursive>
 80119da:	bf00      	nop
 80119dc:	24027d78 	.word	0x24027d78

080119e0 <__malloc_unlock>:
 80119e0:	4801      	ldr	r0, [pc, #4]	; (80119e8 <__malloc_unlock+0x8>)
 80119e2:	f7ff be4c 	b.w	801167e <__retarget_lock_release_recursive>
 80119e6:	bf00      	nop
 80119e8:	24027d78 	.word	0x24027d78

080119ec <_free_r>:
 80119ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ee:	2900      	cmp	r1, #0
 80119f0:	d048      	beq.n	8011a84 <_free_r+0x98>
 80119f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119f6:	9001      	str	r0, [sp, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f1a1 0404 	sub.w	r4, r1, #4
 80119fe:	bfb8      	it	lt
 8011a00:	18e4      	addlt	r4, r4, r3
 8011a02:	f7ff ffe7 	bl	80119d4 <__malloc_lock>
 8011a06:	4a20      	ldr	r2, [pc, #128]	; (8011a88 <_free_r+0x9c>)
 8011a08:	9801      	ldr	r0, [sp, #4]
 8011a0a:	6813      	ldr	r3, [r2, #0]
 8011a0c:	4615      	mov	r5, r2
 8011a0e:	b933      	cbnz	r3, 8011a1e <_free_r+0x32>
 8011a10:	6063      	str	r3, [r4, #4]
 8011a12:	6014      	str	r4, [r2, #0]
 8011a14:	b003      	add	sp, #12
 8011a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a1a:	f7ff bfe1 	b.w	80119e0 <__malloc_unlock>
 8011a1e:	42a3      	cmp	r3, r4
 8011a20:	d90b      	bls.n	8011a3a <_free_r+0x4e>
 8011a22:	6821      	ldr	r1, [r4, #0]
 8011a24:	1862      	adds	r2, r4, r1
 8011a26:	4293      	cmp	r3, r2
 8011a28:	bf04      	itt	eq
 8011a2a:	681a      	ldreq	r2, [r3, #0]
 8011a2c:	685b      	ldreq	r3, [r3, #4]
 8011a2e:	6063      	str	r3, [r4, #4]
 8011a30:	bf04      	itt	eq
 8011a32:	1852      	addeq	r2, r2, r1
 8011a34:	6022      	streq	r2, [r4, #0]
 8011a36:	602c      	str	r4, [r5, #0]
 8011a38:	e7ec      	b.n	8011a14 <_free_r+0x28>
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	b10b      	cbz	r3, 8011a44 <_free_r+0x58>
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	d9fa      	bls.n	8011a3a <_free_r+0x4e>
 8011a44:	6811      	ldr	r1, [r2, #0]
 8011a46:	1855      	adds	r5, r2, r1
 8011a48:	42a5      	cmp	r5, r4
 8011a4a:	d10b      	bne.n	8011a64 <_free_r+0x78>
 8011a4c:	6824      	ldr	r4, [r4, #0]
 8011a4e:	4421      	add	r1, r4
 8011a50:	1854      	adds	r4, r2, r1
 8011a52:	42a3      	cmp	r3, r4
 8011a54:	6011      	str	r1, [r2, #0]
 8011a56:	d1dd      	bne.n	8011a14 <_free_r+0x28>
 8011a58:	681c      	ldr	r4, [r3, #0]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	6053      	str	r3, [r2, #4]
 8011a5e:	4421      	add	r1, r4
 8011a60:	6011      	str	r1, [r2, #0]
 8011a62:	e7d7      	b.n	8011a14 <_free_r+0x28>
 8011a64:	d902      	bls.n	8011a6c <_free_r+0x80>
 8011a66:	230c      	movs	r3, #12
 8011a68:	6003      	str	r3, [r0, #0]
 8011a6a:	e7d3      	b.n	8011a14 <_free_r+0x28>
 8011a6c:	6825      	ldr	r5, [r4, #0]
 8011a6e:	1961      	adds	r1, r4, r5
 8011a70:	428b      	cmp	r3, r1
 8011a72:	bf04      	itt	eq
 8011a74:	6819      	ldreq	r1, [r3, #0]
 8011a76:	685b      	ldreq	r3, [r3, #4]
 8011a78:	6063      	str	r3, [r4, #4]
 8011a7a:	bf04      	itt	eq
 8011a7c:	1949      	addeq	r1, r1, r5
 8011a7e:	6021      	streq	r1, [r4, #0]
 8011a80:	6054      	str	r4, [r2, #4]
 8011a82:	e7c7      	b.n	8011a14 <_free_r+0x28>
 8011a84:	b003      	add	sp, #12
 8011a86:	bd30      	pop	{r4, r5, pc}
 8011a88:	2402735c 	.word	0x2402735c

08011a8c <__ssputs_r>:
 8011a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a90:	688e      	ldr	r6, [r1, #8]
 8011a92:	429e      	cmp	r6, r3
 8011a94:	4682      	mov	sl, r0
 8011a96:	460c      	mov	r4, r1
 8011a98:	4690      	mov	r8, r2
 8011a9a:	461f      	mov	r7, r3
 8011a9c:	d838      	bhi.n	8011b10 <__ssputs_r+0x84>
 8011a9e:	898a      	ldrh	r2, [r1, #12]
 8011aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011aa4:	d032      	beq.n	8011b0c <__ssputs_r+0x80>
 8011aa6:	6825      	ldr	r5, [r4, #0]
 8011aa8:	6909      	ldr	r1, [r1, #16]
 8011aaa:	eba5 0901 	sub.w	r9, r5, r1
 8011aae:	6965      	ldr	r5, [r4, #20]
 8011ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ab8:	3301      	adds	r3, #1
 8011aba:	444b      	add	r3, r9
 8011abc:	106d      	asrs	r5, r5, #1
 8011abe:	429d      	cmp	r5, r3
 8011ac0:	bf38      	it	cc
 8011ac2:	461d      	movcc	r5, r3
 8011ac4:	0553      	lsls	r3, r2, #21
 8011ac6:	d531      	bpl.n	8011b2c <__ssputs_r+0xa0>
 8011ac8:	4629      	mov	r1, r5
 8011aca:	f7ff fdef 	bl	80116ac <_malloc_r>
 8011ace:	4606      	mov	r6, r0
 8011ad0:	b950      	cbnz	r0, 8011ae8 <__ssputs_r+0x5c>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	f8ca 3000 	str.w	r3, [sl]
 8011ad8:	89a3      	ldrh	r3, [r4, #12]
 8011ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ade:	81a3      	strh	r3, [r4, #12]
 8011ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae8:	6921      	ldr	r1, [r4, #16]
 8011aea:	464a      	mov	r2, r9
 8011aec:	f7ff fdc8 	bl	8011680 <memcpy>
 8011af0:	89a3      	ldrh	r3, [r4, #12]
 8011af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011afa:	81a3      	strh	r3, [r4, #12]
 8011afc:	6126      	str	r6, [r4, #16]
 8011afe:	6165      	str	r5, [r4, #20]
 8011b00:	444e      	add	r6, r9
 8011b02:	eba5 0509 	sub.w	r5, r5, r9
 8011b06:	6026      	str	r6, [r4, #0]
 8011b08:	60a5      	str	r5, [r4, #8]
 8011b0a:	463e      	mov	r6, r7
 8011b0c:	42be      	cmp	r6, r7
 8011b0e:	d900      	bls.n	8011b12 <__ssputs_r+0x86>
 8011b10:	463e      	mov	r6, r7
 8011b12:	4632      	mov	r2, r6
 8011b14:	6820      	ldr	r0, [r4, #0]
 8011b16:	4641      	mov	r1, r8
 8011b18:	f000 faa8 	bl	801206c <memmove>
 8011b1c:	68a3      	ldr	r3, [r4, #8]
 8011b1e:	6822      	ldr	r2, [r4, #0]
 8011b20:	1b9b      	subs	r3, r3, r6
 8011b22:	4432      	add	r2, r6
 8011b24:	60a3      	str	r3, [r4, #8]
 8011b26:	6022      	str	r2, [r4, #0]
 8011b28:	2000      	movs	r0, #0
 8011b2a:	e7db      	b.n	8011ae4 <__ssputs_r+0x58>
 8011b2c:	462a      	mov	r2, r5
 8011b2e:	f000 fab7 	bl	80120a0 <_realloc_r>
 8011b32:	4606      	mov	r6, r0
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d1e1      	bne.n	8011afc <__ssputs_r+0x70>
 8011b38:	6921      	ldr	r1, [r4, #16]
 8011b3a:	4650      	mov	r0, sl
 8011b3c:	f7ff ff56 	bl	80119ec <_free_r>
 8011b40:	e7c7      	b.n	8011ad2 <__ssputs_r+0x46>
	...

08011b44 <_svfiprintf_r>:
 8011b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b48:	4698      	mov	r8, r3
 8011b4a:	898b      	ldrh	r3, [r1, #12]
 8011b4c:	061b      	lsls	r3, r3, #24
 8011b4e:	b09d      	sub	sp, #116	; 0x74
 8011b50:	4607      	mov	r7, r0
 8011b52:	460d      	mov	r5, r1
 8011b54:	4614      	mov	r4, r2
 8011b56:	d50e      	bpl.n	8011b76 <_svfiprintf_r+0x32>
 8011b58:	690b      	ldr	r3, [r1, #16]
 8011b5a:	b963      	cbnz	r3, 8011b76 <_svfiprintf_r+0x32>
 8011b5c:	2140      	movs	r1, #64	; 0x40
 8011b5e:	f7ff fda5 	bl	80116ac <_malloc_r>
 8011b62:	6028      	str	r0, [r5, #0]
 8011b64:	6128      	str	r0, [r5, #16]
 8011b66:	b920      	cbnz	r0, 8011b72 <_svfiprintf_r+0x2e>
 8011b68:	230c      	movs	r3, #12
 8011b6a:	603b      	str	r3, [r7, #0]
 8011b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b70:	e0d1      	b.n	8011d16 <_svfiprintf_r+0x1d2>
 8011b72:	2340      	movs	r3, #64	; 0x40
 8011b74:	616b      	str	r3, [r5, #20]
 8011b76:	2300      	movs	r3, #0
 8011b78:	9309      	str	r3, [sp, #36]	; 0x24
 8011b7a:	2320      	movs	r3, #32
 8011b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b84:	2330      	movs	r3, #48	; 0x30
 8011b86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d30 <_svfiprintf_r+0x1ec>
 8011b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b8e:	f04f 0901 	mov.w	r9, #1
 8011b92:	4623      	mov	r3, r4
 8011b94:	469a      	mov	sl, r3
 8011b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b9a:	b10a      	cbz	r2, 8011ba0 <_svfiprintf_r+0x5c>
 8011b9c:	2a25      	cmp	r2, #37	; 0x25
 8011b9e:	d1f9      	bne.n	8011b94 <_svfiprintf_r+0x50>
 8011ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ba4:	d00b      	beq.n	8011bbe <_svfiprintf_r+0x7a>
 8011ba6:	465b      	mov	r3, fp
 8011ba8:	4622      	mov	r2, r4
 8011baa:	4629      	mov	r1, r5
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7ff ff6d 	bl	8011a8c <__ssputs_r>
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	f000 80aa 	beq.w	8011d0c <_svfiprintf_r+0x1c8>
 8011bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bba:	445a      	add	r2, fp
 8011bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8011bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 80a2 	beq.w	8011d0c <_svfiprintf_r+0x1c8>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	f04f 32ff 	mov.w	r2, #4294967295
 8011bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bd2:	f10a 0a01 	add.w	sl, sl, #1
 8011bd6:	9304      	str	r3, [sp, #16]
 8011bd8:	9307      	str	r3, [sp, #28]
 8011bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bde:	931a      	str	r3, [sp, #104]	; 0x68
 8011be0:	4654      	mov	r4, sl
 8011be2:	2205      	movs	r2, #5
 8011be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011be8:	4851      	ldr	r0, [pc, #324]	; (8011d30 <_svfiprintf_r+0x1ec>)
 8011bea:	f7ee fb81 	bl	80002f0 <memchr>
 8011bee:	9a04      	ldr	r2, [sp, #16]
 8011bf0:	b9d8      	cbnz	r0, 8011c2a <_svfiprintf_r+0xe6>
 8011bf2:	06d0      	lsls	r0, r2, #27
 8011bf4:	bf44      	itt	mi
 8011bf6:	2320      	movmi	r3, #32
 8011bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011bfc:	0711      	lsls	r1, r2, #28
 8011bfe:	bf44      	itt	mi
 8011c00:	232b      	movmi	r3, #43	; 0x2b
 8011c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c06:	f89a 3000 	ldrb.w	r3, [sl]
 8011c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c0c:	d015      	beq.n	8011c3a <_svfiprintf_r+0xf6>
 8011c0e:	9a07      	ldr	r2, [sp, #28]
 8011c10:	4654      	mov	r4, sl
 8011c12:	2000      	movs	r0, #0
 8011c14:	f04f 0c0a 	mov.w	ip, #10
 8011c18:	4621      	mov	r1, r4
 8011c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c1e:	3b30      	subs	r3, #48	; 0x30
 8011c20:	2b09      	cmp	r3, #9
 8011c22:	d94e      	bls.n	8011cc2 <_svfiprintf_r+0x17e>
 8011c24:	b1b0      	cbz	r0, 8011c54 <_svfiprintf_r+0x110>
 8011c26:	9207      	str	r2, [sp, #28]
 8011c28:	e014      	b.n	8011c54 <_svfiprintf_r+0x110>
 8011c2a:	eba0 0308 	sub.w	r3, r0, r8
 8011c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c32:	4313      	orrs	r3, r2
 8011c34:	9304      	str	r3, [sp, #16]
 8011c36:	46a2      	mov	sl, r4
 8011c38:	e7d2      	b.n	8011be0 <_svfiprintf_r+0x9c>
 8011c3a:	9b03      	ldr	r3, [sp, #12]
 8011c3c:	1d19      	adds	r1, r3, #4
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	9103      	str	r1, [sp, #12]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	bfbb      	ittet	lt
 8011c46:	425b      	neglt	r3, r3
 8011c48:	f042 0202 	orrlt.w	r2, r2, #2
 8011c4c:	9307      	strge	r3, [sp, #28]
 8011c4e:	9307      	strlt	r3, [sp, #28]
 8011c50:	bfb8      	it	lt
 8011c52:	9204      	strlt	r2, [sp, #16]
 8011c54:	7823      	ldrb	r3, [r4, #0]
 8011c56:	2b2e      	cmp	r3, #46	; 0x2e
 8011c58:	d10c      	bne.n	8011c74 <_svfiprintf_r+0x130>
 8011c5a:	7863      	ldrb	r3, [r4, #1]
 8011c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c5e:	d135      	bne.n	8011ccc <_svfiprintf_r+0x188>
 8011c60:	9b03      	ldr	r3, [sp, #12]
 8011c62:	1d1a      	adds	r2, r3, #4
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	9203      	str	r2, [sp, #12]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	bfb8      	it	lt
 8011c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c70:	3402      	adds	r4, #2
 8011c72:	9305      	str	r3, [sp, #20]
 8011c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d40 <_svfiprintf_r+0x1fc>
 8011c78:	7821      	ldrb	r1, [r4, #0]
 8011c7a:	2203      	movs	r2, #3
 8011c7c:	4650      	mov	r0, sl
 8011c7e:	f7ee fb37 	bl	80002f0 <memchr>
 8011c82:	b140      	cbz	r0, 8011c96 <_svfiprintf_r+0x152>
 8011c84:	2340      	movs	r3, #64	; 0x40
 8011c86:	eba0 000a 	sub.w	r0, r0, sl
 8011c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8011c8e:	9b04      	ldr	r3, [sp, #16]
 8011c90:	4303      	orrs	r3, r0
 8011c92:	3401      	adds	r4, #1
 8011c94:	9304      	str	r3, [sp, #16]
 8011c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9a:	4826      	ldr	r0, [pc, #152]	; (8011d34 <_svfiprintf_r+0x1f0>)
 8011c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ca0:	2206      	movs	r2, #6
 8011ca2:	f7ee fb25 	bl	80002f0 <memchr>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d038      	beq.n	8011d1c <_svfiprintf_r+0x1d8>
 8011caa:	4b23      	ldr	r3, [pc, #140]	; (8011d38 <_svfiprintf_r+0x1f4>)
 8011cac:	bb1b      	cbnz	r3, 8011cf6 <_svfiprintf_r+0x1b2>
 8011cae:	9b03      	ldr	r3, [sp, #12]
 8011cb0:	3307      	adds	r3, #7
 8011cb2:	f023 0307 	bic.w	r3, r3, #7
 8011cb6:	3308      	adds	r3, #8
 8011cb8:	9303      	str	r3, [sp, #12]
 8011cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cbc:	4433      	add	r3, r6
 8011cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8011cc0:	e767      	b.n	8011b92 <_svfiprintf_r+0x4e>
 8011cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	2001      	movs	r0, #1
 8011cca:	e7a5      	b.n	8011c18 <_svfiprintf_r+0xd4>
 8011ccc:	2300      	movs	r3, #0
 8011cce:	3401      	adds	r4, #1
 8011cd0:	9305      	str	r3, [sp, #20]
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	f04f 0c0a 	mov.w	ip, #10
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cde:	3a30      	subs	r2, #48	; 0x30
 8011ce0:	2a09      	cmp	r2, #9
 8011ce2:	d903      	bls.n	8011cec <_svfiprintf_r+0x1a8>
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d0c5      	beq.n	8011c74 <_svfiprintf_r+0x130>
 8011ce8:	9105      	str	r1, [sp, #20]
 8011cea:	e7c3      	b.n	8011c74 <_svfiprintf_r+0x130>
 8011cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	e7f0      	b.n	8011cd8 <_svfiprintf_r+0x194>
 8011cf6:	ab03      	add	r3, sp, #12
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	4b0f      	ldr	r3, [pc, #60]	; (8011d3c <_svfiprintf_r+0x1f8>)
 8011cfe:	a904      	add	r1, sp, #16
 8011d00:	4638      	mov	r0, r7
 8011d02:	f3af 8000 	nop.w
 8011d06:	1c42      	adds	r2, r0, #1
 8011d08:	4606      	mov	r6, r0
 8011d0a:	d1d6      	bne.n	8011cba <_svfiprintf_r+0x176>
 8011d0c:	89ab      	ldrh	r3, [r5, #12]
 8011d0e:	065b      	lsls	r3, r3, #25
 8011d10:	f53f af2c 	bmi.w	8011b6c <_svfiprintf_r+0x28>
 8011d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d16:	b01d      	add	sp, #116	; 0x74
 8011d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1c:	ab03      	add	r3, sp, #12
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	462a      	mov	r2, r5
 8011d22:	4b06      	ldr	r3, [pc, #24]	; (8011d3c <_svfiprintf_r+0x1f8>)
 8011d24:	a904      	add	r1, sp, #16
 8011d26:	4638      	mov	r0, r7
 8011d28:	f000 f87a 	bl	8011e20 <_printf_i>
 8011d2c:	e7eb      	b.n	8011d06 <_svfiprintf_r+0x1c2>
 8011d2e:	bf00      	nop
 8011d30:	08012381 	.word	0x08012381
 8011d34:	0801238b 	.word	0x0801238b
 8011d38:	00000000 	.word	0x00000000
 8011d3c:	08011a8d 	.word	0x08011a8d
 8011d40:	08012387 	.word	0x08012387

08011d44 <_printf_common>:
 8011d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d48:	4616      	mov	r6, r2
 8011d4a:	4699      	mov	r9, r3
 8011d4c:	688a      	ldr	r2, [r1, #8]
 8011d4e:	690b      	ldr	r3, [r1, #16]
 8011d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d54:	4293      	cmp	r3, r2
 8011d56:	bfb8      	it	lt
 8011d58:	4613      	movlt	r3, r2
 8011d5a:	6033      	str	r3, [r6, #0]
 8011d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d60:	4607      	mov	r7, r0
 8011d62:	460c      	mov	r4, r1
 8011d64:	b10a      	cbz	r2, 8011d6a <_printf_common+0x26>
 8011d66:	3301      	adds	r3, #1
 8011d68:	6033      	str	r3, [r6, #0]
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	0699      	lsls	r1, r3, #26
 8011d6e:	bf42      	ittt	mi
 8011d70:	6833      	ldrmi	r3, [r6, #0]
 8011d72:	3302      	addmi	r3, #2
 8011d74:	6033      	strmi	r3, [r6, #0]
 8011d76:	6825      	ldr	r5, [r4, #0]
 8011d78:	f015 0506 	ands.w	r5, r5, #6
 8011d7c:	d106      	bne.n	8011d8c <_printf_common+0x48>
 8011d7e:	f104 0a19 	add.w	sl, r4, #25
 8011d82:	68e3      	ldr	r3, [r4, #12]
 8011d84:	6832      	ldr	r2, [r6, #0]
 8011d86:	1a9b      	subs	r3, r3, r2
 8011d88:	42ab      	cmp	r3, r5
 8011d8a:	dc26      	bgt.n	8011dda <_printf_common+0x96>
 8011d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d90:	1e13      	subs	r3, r2, #0
 8011d92:	6822      	ldr	r2, [r4, #0]
 8011d94:	bf18      	it	ne
 8011d96:	2301      	movne	r3, #1
 8011d98:	0692      	lsls	r2, r2, #26
 8011d9a:	d42b      	bmi.n	8011df4 <_printf_common+0xb0>
 8011d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011da0:	4649      	mov	r1, r9
 8011da2:	4638      	mov	r0, r7
 8011da4:	47c0      	blx	r8
 8011da6:	3001      	adds	r0, #1
 8011da8:	d01e      	beq.n	8011de8 <_printf_common+0xa4>
 8011daa:	6823      	ldr	r3, [r4, #0]
 8011dac:	68e5      	ldr	r5, [r4, #12]
 8011dae:	6832      	ldr	r2, [r6, #0]
 8011db0:	f003 0306 	and.w	r3, r3, #6
 8011db4:	2b04      	cmp	r3, #4
 8011db6:	bf08      	it	eq
 8011db8:	1aad      	subeq	r5, r5, r2
 8011dba:	68a3      	ldr	r3, [r4, #8]
 8011dbc:	6922      	ldr	r2, [r4, #16]
 8011dbe:	bf0c      	ite	eq
 8011dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dc4:	2500      	movne	r5, #0
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	bfc4      	itt	gt
 8011dca:	1a9b      	subgt	r3, r3, r2
 8011dcc:	18ed      	addgt	r5, r5, r3
 8011dce:	2600      	movs	r6, #0
 8011dd0:	341a      	adds	r4, #26
 8011dd2:	42b5      	cmp	r5, r6
 8011dd4:	d11a      	bne.n	8011e0c <_printf_common+0xc8>
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	e008      	b.n	8011dec <_printf_common+0xa8>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	4652      	mov	r2, sl
 8011dde:	4649      	mov	r1, r9
 8011de0:	4638      	mov	r0, r7
 8011de2:	47c0      	blx	r8
 8011de4:	3001      	adds	r0, #1
 8011de6:	d103      	bne.n	8011df0 <_printf_common+0xac>
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011df0:	3501      	adds	r5, #1
 8011df2:	e7c6      	b.n	8011d82 <_printf_common+0x3e>
 8011df4:	18e1      	adds	r1, r4, r3
 8011df6:	1c5a      	adds	r2, r3, #1
 8011df8:	2030      	movs	r0, #48	; 0x30
 8011dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dfe:	4422      	add	r2, r4
 8011e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e08:	3302      	adds	r3, #2
 8011e0a:	e7c7      	b.n	8011d9c <_printf_common+0x58>
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	4622      	mov	r2, r4
 8011e10:	4649      	mov	r1, r9
 8011e12:	4638      	mov	r0, r7
 8011e14:	47c0      	blx	r8
 8011e16:	3001      	adds	r0, #1
 8011e18:	d0e6      	beq.n	8011de8 <_printf_common+0xa4>
 8011e1a:	3601      	adds	r6, #1
 8011e1c:	e7d9      	b.n	8011dd2 <_printf_common+0x8e>
	...

08011e20 <_printf_i>:
 8011e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e24:	460c      	mov	r4, r1
 8011e26:	4691      	mov	r9, r2
 8011e28:	7e27      	ldrb	r7, [r4, #24]
 8011e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e2c:	2f78      	cmp	r7, #120	; 0x78
 8011e2e:	4680      	mov	r8, r0
 8011e30:	469a      	mov	sl, r3
 8011e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e36:	d807      	bhi.n	8011e48 <_printf_i+0x28>
 8011e38:	2f62      	cmp	r7, #98	; 0x62
 8011e3a:	d80a      	bhi.n	8011e52 <_printf_i+0x32>
 8011e3c:	2f00      	cmp	r7, #0
 8011e3e:	f000 80d8 	beq.w	8011ff2 <_printf_i+0x1d2>
 8011e42:	2f58      	cmp	r7, #88	; 0x58
 8011e44:	f000 80a3 	beq.w	8011f8e <_printf_i+0x16e>
 8011e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e50:	e03a      	b.n	8011ec8 <_printf_i+0xa8>
 8011e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e56:	2b15      	cmp	r3, #21
 8011e58:	d8f6      	bhi.n	8011e48 <_printf_i+0x28>
 8011e5a:	a001      	add	r0, pc, #4	; (adr r0, 8011e60 <_printf_i+0x40>)
 8011e5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011e60:	08011eb9 	.word	0x08011eb9
 8011e64:	08011ecd 	.word	0x08011ecd
 8011e68:	08011e49 	.word	0x08011e49
 8011e6c:	08011e49 	.word	0x08011e49
 8011e70:	08011e49 	.word	0x08011e49
 8011e74:	08011e49 	.word	0x08011e49
 8011e78:	08011ecd 	.word	0x08011ecd
 8011e7c:	08011e49 	.word	0x08011e49
 8011e80:	08011e49 	.word	0x08011e49
 8011e84:	08011e49 	.word	0x08011e49
 8011e88:	08011e49 	.word	0x08011e49
 8011e8c:	08011fd9 	.word	0x08011fd9
 8011e90:	08011efd 	.word	0x08011efd
 8011e94:	08011fbb 	.word	0x08011fbb
 8011e98:	08011e49 	.word	0x08011e49
 8011e9c:	08011e49 	.word	0x08011e49
 8011ea0:	08011ffb 	.word	0x08011ffb
 8011ea4:	08011e49 	.word	0x08011e49
 8011ea8:	08011efd 	.word	0x08011efd
 8011eac:	08011e49 	.word	0x08011e49
 8011eb0:	08011e49 	.word	0x08011e49
 8011eb4:	08011fc3 	.word	0x08011fc3
 8011eb8:	680b      	ldr	r3, [r1, #0]
 8011eba:	1d1a      	adds	r2, r3, #4
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	600a      	str	r2, [r1, #0]
 8011ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e0a3      	b.n	8012014 <_printf_i+0x1f4>
 8011ecc:	6825      	ldr	r5, [r4, #0]
 8011ece:	6808      	ldr	r0, [r1, #0]
 8011ed0:	062e      	lsls	r6, r5, #24
 8011ed2:	f100 0304 	add.w	r3, r0, #4
 8011ed6:	d50a      	bpl.n	8011eee <_printf_i+0xce>
 8011ed8:	6805      	ldr	r5, [r0, #0]
 8011eda:	600b      	str	r3, [r1, #0]
 8011edc:	2d00      	cmp	r5, #0
 8011ede:	da03      	bge.n	8011ee8 <_printf_i+0xc8>
 8011ee0:	232d      	movs	r3, #45	; 0x2d
 8011ee2:	426d      	negs	r5, r5
 8011ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ee8:	485e      	ldr	r0, [pc, #376]	; (8012064 <_printf_i+0x244>)
 8011eea:	230a      	movs	r3, #10
 8011eec:	e019      	b.n	8011f22 <_printf_i+0x102>
 8011eee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011ef2:	6805      	ldr	r5, [r0, #0]
 8011ef4:	600b      	str	r3, [r1, #0]
 8011ef6:	bf18      	it	ne
 8011ef8:	b22d      	sxthne	r5, r5
 8011efa:	e7ef      	b.n	8011edc <_printf_i+0xbc>
 8011efc:	680b      	ldr	r3, [r1, #0]
 8011efe:	6825      	ldr	r5, [r4, #0]
 8011f00:	1d18      	adds	r0, r3, #4
 8011f02:	6008      	str	r0, [r1, #0]
 8011f04:	0628      	lsls	r0, r5, #24
 8011f06:	d501      	bpl.n	8011f0c <_printf_i+0xec>
 8011f08:	681d      	ldr	r5, [r3, #0]
 8011f0a:	e002      	b.n	8011f12 <_printf_i+0xf2>
 8011f0c:	0669      	lsls	r1, r5, #25
 8011f0e:	d5fb      	bpl.n	8011f08 <_printf_i+0xe8>
 8011f10:	881d      	ldrh	r5, [r3, #0]
 8011f12:	4854      	ldr	r0, [pc, #336]	; (8012064 <_printf_i+0x244>)
 8011f14:	2f6f      	cmp	r7, #111	; 0x6f
 8011f16:	bf0c      	ite	eq
 8011f18:	2308      	moveq	r3, #8
 8011f1a:	230a      	movne	r3, #10
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f22:	6866      	ldr	r6, [r4, #4]
 8011f24:	60a6      	str	r6, [r4, #8]
 8011f26:	2e00      	cmp	r6, #0
 8011f28:	bfa2      	ittt	ge
 8011f2a:	6821      	ldrge	r1, [r4, #0]
 8011f2c:	f021 0104 	bicge.w	r1, r1, #4
 8011f30:	6021      	strge	r1, [r4, #0]
 8011f32:	b90d      	cbnz	r5, 8011f38 <_printf_i+0x118>
 8011f34:	2e00      	cmp	r6, #0
 8011f36:	d04d      	beq.n	8011fd4 <_printf_i+0x1b4>
 8011f38:	4616      	mov	r6, r2
 8011f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8011f42:	5dc7      	ldrb	r7, [r0, r7]
 8011f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f48:	462f      	mov	r7, r5
 8011f4a:	42bb      	cmp	r3, r7
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	d9f4      	bls.n	8011f3a <_printf_i+0x11a>
 8011f50:	2b08      	cmp	r3, #8
 8011f52:	d10b      	bne.n	8011f6c <_printf_i+0x14c>
 8011f54:	6823      	ldr	r3, [r4, #0]
 8011f56:	07df      	lsls	r7, r3, #31
 8011f58:	d508      	bpl.n	8011f6c <_printf_i+0x14c>
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	6861      	ldr	r1, [r4, #4]
 8011f5e:	4299      	cmp	r1, r3
 8011f60:	bfde      	ittt	le
 8011f62:	2330      	movle	r3, #48	; 0x30
 8011f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f6c:	1b92      	subs	r2, r2, r6
 8011f6e:	6122      	str	r2, [r4, #16]
 8011f70:	f8cd a000 	str.w	sl, [sp]
 8011f74:	464b      	mov	r3, r9
 8011f76:	aa03      	add	r2, sp, #12
 8011f78:	4621      	mov	r1, r4
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	f7ff fee2 	bl	8011d44 <_printf_common>
 8011f80:	3001      	adds	r0, #1
 8011f82:	d14c      	bne.n	801201e <_printf_i+0x1fe>
 8011f84:	f04f 30ff 	mov.w	r0, #4294967295
 8011f88:	b004      	add	sp, #16
 8011f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f8e:	4835      	ldr	r0, [pc, #212]	; (8012064 <_printf_i+0x244>)
 8011f90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f94:	6823      	ldr	r3, [r4, #0]
 8011f96:	680e      	ldr	r6, [r1, #0]
 8011f98:	061f      	lsls	r7, r3, #24
 8011f9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011f9e:	600e      	str	r6, [r1, #0]
 8011fa0:	d514      	bpl.n	8011fcc <_printf_i+0x1ac>
 8011fa2:	07d9      	lsls	r1, r3, #31
 8011fa4:	bf44      	itt	mi
 8011fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8011faa:	6023      	strmi	r3, [r4, #0]
 8011fac:	b91d      	cbnz	r5, 8011fb6 <_printf_i+0x196>
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	f023 0320 	bic.w	r3, r3, #32
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	2310      	movs	r3, #16
 8011fb8:	e7b0      	b.n	8011f1c <_printf_i+0xfc>
 8011fba:	6823      	ldr	r3, [r4, #0]
 8011fbc:	f043 0320 	orr.w	r3, r3, #32
 8011fc0:	6023      	str	r3, [r4, #0]
 8011fc2:	2378      	movs	r3, #120	; 0x78
 8011fc4:	4828      	ldr	r0, [pc, #160]	; (8012068 <_printf_i+0x248>)
 8011fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fca:	e7e3      	b.n	8011f94 <_printf_i+0x174>
 8011fcc:	065e      	lsls	r6, r3, #25
 8011fce:	bf48      	it	mi
 8011fd0:	b2ad      	uxthmi	r5, r5
 8011fd2:	e7e6      	b.n	8011fa2 <_printf_i+0x182>
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	e7bb      	b.n	8011f50 <_printf_i+0x130>
 8011fd8:	680b      	ldr	r3, [r1, #0]
 8011fda:	6826      	ldr	r6, [r4, #0]
 8011fdc:	6960      	ldr	r0, [r4, #20]
 8011fde:	1d1d      	adds	r5, r3, #4
 8011fe0:	600d      	str	r5, [r1, #0]
 8011fe2:	0635      	lsls	r5, r6, #24
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	d501      	bpl.n	8011fec <_printf_i+0x1cc>
 8011fe8:	6018      	str	r0, [r3, #0]
 8011fea:	e002      	b.n	8011ff2 <_printf_i+0x1d2>
 8011fec:	0671      	lsls	r1, r6, #25
 8011fee:	d5fb      	bpl.n	8011fe8 <_printf_i+0x1c8>
 8011ff0:	8018      	strh	r0, [r3, #0]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	4616      	mov	r6, r2
 8011ff8:	e7ba      	b.n	8011f70 <_printf_i+0x150>
 8011ffa:	680b      	ldr	r3, [r1, #0]
 8011ffc:	1d1a      	adds	r2, r3, #4
 8011ffe:	600a      	str	r2, [r1, #0]
 8012000:	681e      	ldr	r6, [r3, #0]
 8012002:	6862      	ldr	r2, [r4, #4]
 8012004:	2100      	movs	r1, #0
 8012006:	4630      	mov	r0, r6
 8012008:	f7ee f972 	bl	80002f0 <memchr>
 801200c:	b108      	cbz	r0, 8012012 <_printf_i+0x1f2>
 801200e:	1b80      	subs	r0, r0, r6
 8012010:	6060      	str	r0, [r4, #4]
 8012012:	6863      	ldr	r3, [r4, #4]
 8012014:	6123      	str	r3, [r4, #16]
 8012016:	2300      	movs	r3, #0
 8012018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801201c:	e7a8      	b.n	8011f70 <_printf_i+0x150>
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	4632      	mov	r2, r6
 8012022:	4649      	mov	r1, r9
 8012024:	4640      	mov	r0, r8
 8012026:	47d0      	blx	sl
 8012028:	3001      	adds	r0, #1
 801202a:	d0ab      	beq.n	8011f84 <_printf_i+0x164>
 801202c:	6823      	ldr	r3, [r4, #0]
 801202e:	079b      	lsls	r3, r3, #30
 8012030:	d413      	bmi.n	801205a <_printf_i+0x23a>
 8012032:	68e0      	ldr	r0, [r4, #12]
 8012034:	9b03      	ldr	r3, [sp, #12]
 8012036:	4298      	cmp	r0, r3
 8012038:	bfb8      	it	lt
 801203a:	4618      	movlt	r0, r3
 801203c:	e7a4      	b.n	8011f88 <_printf_i+0x168>
 801203e:	2301      	movs	r3, #1
 8012040:	4632      	mov	r2, r6
 8012042:	4649      	mov	r1, r9
 8012044:	4640      	mov	r0, r8
 8012046:	47d0      	blx	sl
 8012048:	3001      	adds	r0, #1
 801204a:	d09b      	beq.n	8011f84 <_printf_i+0x164>
 801204c:	3501      	adds	r5, #1
 801204e:	68e3      	ldr	r3, [r4, #12]
 8012050:	9903      	ldr	r1, [sp, #12]
 8012052:	1a5b      	subs	r3, r3, r1
 8012054:	42ab      	cmp	r3, r5
 8012056:	dcf2      	bgt.n	801203e <_printf_i+0x21e>
 8012058:	e7eb      	b.n	8012032 <_printf_i+0x212>
 801205a:	2500      	movs	r5, #0
 801205c:	f104 0619 	add.w	r6, r4, #25
 8012060:	e7f5      	b.n	801204e <_printf_i+0x22e>
 8012062:	bf00      	nop
 8012064:	08012392 	.word	0x08012392
 8012068:	080123a3 	.word	0x080123a3

0801206c <memmove>:
 801206c:	4288      	cmp	r0, r1
 801206e:	b510      	push	{r4, lr}
 8012070:	eb01 0402 	add.w	r4, r1, r2
 8012074:	d902      	bls.n	801207c <memmove+0x10>
 8012076:	4284      	cmp	r4, r0
 8012078:	4623      	mov	r3, r4
 801207a:	d807      	bhi.n	801208c <memmove+0x20>
 801207c:	1e43      	subs	r3, r0, #1
 801207e:	42a1      	cmp	r1, r4
 8012080:	d008      	beq.n	8012094 <memmove+0x28>
 8012082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012086:	f803 2f01 	strb.w	r2, [r3, #1]!
 801208a:	e7f8      	b.n	801207e <memmove+0x12>
 801208c:	4402      	add	r2, r0
 801208e:	4601      	mov	r1, r0
 8012090:	428a      	cmp	r2, r1
 8012092:	d100      	bne.n	8012096 <memmove+0x2a>
 8012094:	bd10      	pop	{r4, pc}
 8012096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801209a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801209e:	e7f7      	b.n	8012090 <memmove+0x24>

080120a0 <_realloc_r>:
 80120a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a2:	4607      	mov	r7, r0
 80120a4:	4614      	mov	r4, r2
 80120a6:	460e      	mov	r6, r1
 80120a8:	b921      	cbnz	r1, 80120b4 <_realloc_r+0x14>
 80120aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120ae:	4611      	mov	r1, r2
 80120b0:	f7ff bafc 	b.w	80116ac <_malloc_r>
 80120b4:	b922      	cbnz	r2, 80120c0 <_realloc_r+0x20>
 80120b6:	f7ff fc99 	bl	80119ec <_free_r>
 80120ba:	4625      	mov	r5, r4
 80120bc:	4628      	mov	r0, r5
 80120be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120c0:	f000 f814 	bl	80120ec <_malloc_usable_size_r>
 80120c4:	42a0      	cmp	r0, r4
 80120c6:	d20f      	bcs.n	80120e8 <_realloc_r+0x48>
 80120c8:	4621      	mov	r1, r4
 80120ca:	4638      	mov	r0, r7
 80120cc:	f7ff faee 	bl	80116ac <_malloc_r>
 80120d0:	4605      	mov	r5, r0
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d0f2      	beq.n	80120bc <_realloc_r+0x1c>
 80120d6:	4631      	mov	r1, r6
 80120d8:	4622      	mov	r2, r4
 80120da:	f7ff fad1 	bl	8011680 <memcpy>
 80120de:	4631      	mov	r1, r6
 80120e0:	4638      	mov	r0, r7
 80120e2:	f7ff fc83 	bl	80119ec <_free_r>
 80120e6:	e7e9      	b.n	80120bc <_realloc_r+0x1c>
 80120e8:	4635      	mov	r5, r6
 80120ea:	e7e7      	b.n	80120bc <_realloc_r+0x1c>

080120ec <_malloc_usable_size_r>:
 80120ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120f0:	1f18      	subs	r0, r3, #4
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	bfbc      	itt	lt
 80120f6:	580b      	ldrlt	r3, [r1, r0]
 80120f8:	18c0      	addlt	r0, r0, r3
 80120fa:	4770      	bx	lr

080120fc <_init>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	bf00      	nop
 8012100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012102:	bc08      	pop	{r3}
 8012104:	469e      	mov	lr, r3
 8012106:	4770      	bx	lr

08012108 <_fini>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	bf00      	nop
 801210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801210e:	bc08      	pop	{r3}
 8012110:	469e      	mov	lr, r3
 8012112:	4770      	bx	lr

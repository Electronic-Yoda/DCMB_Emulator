
DCMB_emulator_using_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08012124  08012124  00022124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123c8  080123c8  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080123c8  080123c8  000223c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123d0  080123d0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123d0  080123d0  000223d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123d4  080123d4  000223d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  080123d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027c1c  2400007c  08012454  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24027c98  08012454  00037c98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d4a2  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000601c  00000000  00000000  0006d54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  00073568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e80  00000000  00000000  000755d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000799e  00000000  00000000  00077450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a564  00000000  00000000  0007edee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001acce4  00000000  00000000  000a9352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00256036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f4c  00000000  00000000  0025608c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801210c 	.word	0x0801210c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0801210c 	.word	0x0801210c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <arm_boot+0x48>)
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <arm_boot+0x4c>)
 8000690:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <arm_boot+0x48>)
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <arm_boot+0x50>)
 8000696:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <arm_boot+0x54>)
 800069a:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800069e:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <arm_boot+0x58>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <arm_boot+0x58>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 80006ac:	bf00      	nop
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <arm_boot+0x58>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <arm_boot+0x58>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <arm_boot+0x58>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	52002008 	.word	0x52002008
 80006d4:	08192a3b 	.word	0x08192a3b
 80006d8:	4c5d6e7f 	.word	0x4c5d6e7f
 80006dc:	52002044 	.word	0x52002044
 80006e0:	52002018 	.word	0x52002018

080006e4 <mc2StateTmr>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */


static void mc2StateTmr(TimerHandle_t xTimer) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	//first index set to 0x00 since the data ID for MC2 state is 0x00

	//motorState = 0;
	//fwdRevState = 1;
	//follwing if else are for testing
	if (motorState == 1) //reverse
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <mc2StateTmr+0x168>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d105      	bne.n	8000700 <mc2StateTmr+0x1c>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, 0); //fwdREv
 80006f4:	2200      	movs	r2, #0
 80006f6:	2120      	movs	r1, #32
 80006f8:	4855      	ldr	r0, [pc, #340]	; (8000850 <mc2StateTmr+0x16c>)
 80006fa:	f006 fbe1 	bl	8006ec0 <HAL_GPIO_WritePin>
 80006fe:	e008      	b.n	8000712 <mc2StateTmr+0x2e>
	else if (motorState == 0) //forward
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <mc2StateTmr+0x168>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d104      	bne.n	8000712 <mc2StateTmr+0x2e>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	4850      	ldr	r0, [pc, #320]	; (8000850 <mc2StateTmr+0x16c>)
 800070e:	f006 fbd7 	bl	8006ec0 <HAL_GPIO_WritePin>
	if (regenValue ==255) {
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <mc2StateTmr+0x170>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2bff      	cmp	r3, #255	; 0xff
 8000718:	d105      	bne.n	8000726 <mc2StateTmr+0x42>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1); // CS1
 800071a:	2201      	movs	r2, #1
 800071c:	2104      	movs	r1, #4
 800071e:	484e      	ldr	r0, [pc, #312]	; (8000858 <mc2StateTmr+0x174>)
 8000720:	f006 fbce 	bl	8006ec0 <HAL_GPIO_WritePin>
 8000724:	e008      	b.n	8000738 <mc2StateTmr+0x54>
	}
	else if (regenValue < 20) {
 8000726:	4b4b      	ldr	r3, [pc, #300]	; (8000854 <mc2StateTmr+0x170>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b13      	cmp	r3, #19
 800072c:	d804      	bhi.n	8000738 <mc2StateTmr+0x54>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0); // CS1
 800072e:	2200      	movs	r2, #0
 8000730:	2104      	movs	r1, #4
 8000732:	4849      	ldr	r0, [pc, #292]	; (8000858 <mc2StateTmr+0x174>)
 8000734:	f006 fbc4 	bl	8006ec0 <HAL_GPIO_WritePin>
	}
	if (locVfmVal == 4) {
 8000738:	4b48      	ldr	r3, [pc, #288]	; (800085c <mc2StateTmr+0x178>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d105      	bne.n	800074c <mc2StateTmr+0x68>
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 1); // CS0
 8000740:	2201      	movs	r2, #1
 8000742:	2104      	movs	r1, #4
 8000744:	4846      	ldr	r0, [pc, #280]	; (8000860 <mc2StateTmr+0x17c>)
 8000746:	f006 fbbb 	bl	8006ec0 <HAL_GPIO_WritePin>
 800074a:	e008      	b.n	800075e <mc2StateTmr+0x7a>
	}
	else if(locVfmVal == 1) {
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <mc2StateTmr+0x178>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d104      	bne.n	800075e <mc2StateTmr+0x7a>
		 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 0); // CS0
 8000754:	2200      	movs	r2, #0
 8000756:	2104      	movs	r1, #4
 8000758:	4841      	ldr	r0, [pc, #260]	; (8000860 <mc2StateTmr+0x17c>)
 800075a:	f006 fbb1 	bl	8006ec0 <HAL_GPIO_WritePin>
	}
	//testing end

	// Likely not for DCMB
	if (locVfmVal != vfmVal){
 800075e:	4b3f      	ldr	r3, [pc, #252]	; (800085c <mc2StateTmr+0x178>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <mc2StateTmr+0x180>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d016      	beq.n	8000798 <mc2StateTmr+0xb4>
		if (vfmVal > locVfmVal) {
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <mc2StateTmr+0x180>)
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b3b      	ldr	r3, [pc, #236]	; (800085c <mc2StateTmr+0x178>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d903      	bls.n	800077e <mc2StateTmr+0x9a>
			vfmUpState = 1;
 8000776:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <mc2StateTmr+0x184>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e008      	b.n	8000790 <mc2StateTmr+0xac>
		}
		else if (vfmVal < locVfmVal) {
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <mc2StateTmr+0x180>)
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <mc2StateTmr+0x178>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d202      	bcs.n	8000790 <mc2StateTmr+0xac>
			vfmDownState = 1;
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <mc2StateTmr+0x188>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
		}
		locVfmVal = vfmVal;
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <mc2StateTmr+0x180>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <mc2StateTmr+0x178>)
 8000796:	701a      	strb	r2, [r3, #0]
	}
	buf[1] = (motorState & 0b01)  << 4;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <mc2StateTmr+0x168>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <mc2StateTmr+0x18c>)
 80007a8:	705a      	strb	r2, [r3, #1]
	buf[1] |= (fwdRevState & 0b01) << 3;
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <mc2StateTmr+0x18c>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	b25a      	sxtb	r2, r3
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <mc2StateTmr+0x190>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <mc2StateTmr+0x18c>)
 80007c6:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmUpState & 0b01) << 2;
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <mc2StateTmr+0x18c>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <mc2StateTmr+0x184>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <mc2StateTmr+0x18c>)
 80007e4:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmDownState & 0b01) << 1;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <mc2StateTmr+0x18c>)
 80007e8:	785b      	ldrb	r3, [r3, #1]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <mc2StateTmr+0x188>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <mc2StateTmr+0x18c>)
 8000802:	705a      	strb	r2, [r3, #1]
	buf[2] = accValue;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <mc2StateTmr+0x194>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <mc2StateTmr+0x18c>)
 800080c:	709a      	strb	r2, [r3, #2]
	buf[3] = regenValue; // New for GEN11
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <mc2StateTmr+0x170>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <mc2StateTmr+0x18c>)
 8000816:	70da      	strb	r2, [r3, #3]


	if(vfmUpState == 1){
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <mc2StateTmr+0x184>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d102      	bne.n	8000826 <mc2StateTmr+0x142>
		vfmUpState = 0;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <mc2StateTmr+0x184>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	}
	if(vfmDownState == 1){
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <mc2StateTmr+0x188>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d102      	bne.n	8000834 <mc2StateTmr+0x150>
		vfmDownState = 0;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <mc2StateTmr+0x188>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	}

	B_tcpSend(btcp, buf, 8);
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <mc2StateTmr+0x198>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2208      	movs	r2, #8
 800083a:	490d      	ldr	r1, [pc, #52]	; (8000870 <mc2StateTmr+0x18c>)
 800083c:	4618      	mov	r0, r3
 800083e:	f010 f9e7 	bl	8010c10 <B_tcpSend>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2400009e 	.word	0x2400009e
 8000850:	58022400 	.word	0x58022400
 8000854:	2400009c 	.word	0x2400009c
 8000858:	58021800 	.word	0x58021800
 800085c:	24000001 	.word	0x24000001
 8000860:	58022800 	.word	0x58022800
 8000864:	24000000 	.word	0x24000000
 8000868:	2400009f 	.word	0x2400009f
 800086c:	240000a1 	.word	0x240000a1
 8000870:	240000a4 	.word	0x240000a4
 8000874:	240000a0 	.word	0x240000a0
 8000878:	2400009a 	.word	0x2400009a
 800087c:	240276bc 	.word	0x240276bc

08000880 <serialParse>:

// call back function used to receive from MCMB
// called by btcp layer
void serialParse(B_tcpPacket_t *pkt) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
			if (pkt->payload[4] == 0x06) {
				// Process PSM data
			}

	} */
	switch(pkt->senderID){ // decide what to do based on what sender address is received
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d115      	bne.n	80008bc <serialParse+0x3c>
		case MCMB_ID:  // If the packet comes from MCMB
			if(pkt->data[0] == MCMB_SPEED_PULSE_ID){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d105      	bne.n	80008a6 <serialParse+0x26>
				motorPWMFrequency = pkt->data[1];
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	785a      	ldrb	r2, [r3, #1]
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <serialParse+0x48>)
 80008a2:	701a      	strb	r2, [r3, #0]
					// load temperature into local variable
				motorTemperature = pkt->data[1];
			}else if (pkt->data[0] == MCMB_BUS_METRICS_ID) {
					// Process Bus Metrics
			}
			break;
 80008a4:	e009      	b.n	80008ba <serialParse+0x3a>
			}else if(pkt->data[0] == MCMB_MOTOR_TEMPERATURE_ID) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d104      	bne.n	80008ba <serialParse+0x3a>
				motorTemperature = pkt->data[1];
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	785a      	ldrb	r2, [r3, #1]
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <serialParse+0x4c>)
 80008b8:	701a      	strb	r2, [r3, #0]
			break;
 80008ba:	bf00      	nop
	}
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	24000099 	.word	0x24000099
 80008cc:	24000098 	.word	0x24000098

080008d0 <task1_handler>:
// This task is used to send motor temperature and speed to the PC
void task1_handler(void* parameters) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	//char *test = "Test1\n";
	//char *test2 = "Test2\n";
	char temperatureBuf[30];
	char speedBuf[30];
	int timeOut = 1000;
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  /* Infinite loop */
	while(1)
	{

		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <task1_handler+0x70>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e8:	4916      	ldr	r1, [pc, #88]	; (8000944 <task1_handler+0x74>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f010 ffba 	bl	8011864 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temperatureBuf, strlen(temperatureBuf), timeOut);
 80008f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fcf3 	bl	80002e0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000900:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <task1_handler+0x78>)
 8000906:	f00b fbe3 	bl	800c0d0 <HAL_UART_Transmit>
		//vTaskDelay(pdMS_TO_TICKS(500));
		//Note: delay must be equal or greater than python program's receive delay

		sprintf(speedBuf, "Motor PWM Frequency: %d Hz\n", (int)motorPWMFrequency);
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <task1_handler+0x7c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	490e      	ldr	r1, [pc, #56]	; (8000950 <task1_handler+0x80>)
 8000916:	4618      	mov	r0, r3
 8000918:	f010 ffa4 	bl	8011864 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)speedBuf, strlen(speedBuf), timeOut);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fcdd 	bl	80002e0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800092c:	f107 010c 	add.w	r1, r7, #12
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <task1_handler+0x78>)
 8000932:	f00b fbcd 	bl	800c0d0 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093a:	f00e faf3 	bl	800ef24 <vTaskDelay>
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 800093e:	e7ce      	b.n	80008de <task1_handler+0xe>
 8000940:	24000098 	.word	0x24000098
 8000944:	08012124 	.word	0x08012124
 8000948:	24027960 	.word	0x24027960
 800094c:	24000099 	.word	0x24000099
 8000950:	08012144 	.word	0x08012144

08000954 <task2_handler>:

	}
}

// This task is used to receive motor control signals from PC
void task2_handler(void* parameters) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b099      	sub	sp, #100	; 0x64
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	int rxBufSize = 5;
 800095c:	2305      	movs	r3, #5
 800095e:	653b      	str	r3, [r7, #80]	; 0x50
	int timeout = 700;
 8000960:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
	char rxBuf[rxBufSize];
 8000966:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8000968:	1e63      	subs	r3, r4, #1
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
 800096c:	4623      	mov	r3, r4
 800096e:	4618      	mov	r0, r3
 8000970:	f04f 0100 	mov.w	r1, #0
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	00cb      	lsls	r3, r1, #3
 800097e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000982:	00c2      	lsls	r2, r0, #3
 8000984:	4623      	mov	r3, r4
 8000986:	4618      	mov	r0, r3
 8000988:	f04f 0100 	mov.w	r1, #0
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	00cb      	lsls	r3, r1, #3
 8000996:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800099a:	00c2      	lsls	r2, r0, #3
 800099c:	4623      	mov	r3, r4
 800099e:	3307      	adds	r3, #7
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	ebad 0d03 	sub.w	sp, sp, r3
 80009a8:	466b      	mov	r3, sp
 80009aa:	3300      	adds	r3, #0
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t locMotorState;
	uint8_t locFwdRevState;
	uint16_t locAcc;
	uint16_t locReg;
	uint8_t locVfmVal = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		/*for (int i=0; i < rxBufSize; i++) {
			rxBuf[i] = '\0';
		}*/
		//char rxBuf[rxBufSize];

		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 80009b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80009b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009bc:	4886      	ldr	r0, [pc, #536]	; (8000bd8 <task2_handler+0x284>)
 80009be:	f00b fc1d 	bl	800c1fc <HAL_UART_Receive>
		rxBuf[4] = '\0';
 80009c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009c4:	2200      	movs	r2, #0
 80009c6:	711a      	strb	r2, [r3, #4]
		if (strncmp(rxBuf, "M On", strlen("M On")) == 0) {
 80009c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ca:	2204      	movs	r2, #4
 80009cc:	4983      	ldr	r1, [pc, #524]	; (8000bdc <task2_handler+0x288>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f010 ff68 	bl	80118a4 <strncmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <task2_handler+0xa2>
			locMotorState = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 80009e0:	4b7f      	ldr	r3, [pc, #508]	; (8000be0 <task2_handler+0x28c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d0e3      	beq.n	80009b4 <task2_handler+0x60>
				motorState = locMotorState;
 80009ec:	4a7c      	ldr	r2, [pc, #496]	; (8000be0 <task2_handler+0x28c>)
 80009ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80009f2:	7013      	strb	r3, [r2, #0]
 80009f4:	e7de      	b.n	80009b4 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "MOff", strlen("MOff")) == 0) {
 80009f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f8:	2204      	movs	r2, #4
 80009fa:	497a      	ldr	r1, [pc, #488]	; (8000be4 <task2_handler+0x290>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f010 ff51 	bl	80118a4 <strncmp>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10d      	bne.n	8000a24 <task2_handler+0xd0>
			locMotorState = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 8000a0e:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <task2_handler+0x28c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d0cc      	beq.n	80009b4 <task2_handler+0x60>
				motorState = locMotorState;
 8000a1a:	4a71      	ldr	r2, [pc, #452]	; (8000be0 <task2_handler+0x28c>)
 8000a1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a20:	7013      	strb	r3, [r2, #0]
 8000a22:	e7c7      	b.n	80009b4 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "F wd", strlen("F wd")) == 0) {
 8000a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a26:	2204      	movs	r2, #4
 8000a28:	496f      	ldr	r1, [pc, #444]	; (8000be8 <task2_handler+0x294>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f010 ff3a 	bl	80118a4 <strncmp>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10d      	bne.n	8000a52 <task2_handler+0xfe>
			locFwdRevState = 0; //Note 0 is forward
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 8000a3c:	4b6b      	ldr	r3, [pc, #428]	; (8000bec <task2_handler+0x298>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d0b5      	beq.n	80009b4 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 8000a48:	4a68      	ldr	r2, [pc, #416]	; (8000bec <task2_handler+0x298>)
 8000a4a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000a4e:	7013      	strb	r3, [r2, #0]
 8000a50:	e7b0      	b.n	80009b4 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev

		}
		else if (strncmp(rxBuf, "R ev", strlen("R ev")) == 0) {
 8000a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a54:	2204      	movs	r2, #4
 8000a56:	4966      	ldr	r1, [pc, #408]	; (8000bf0 <task2_handler+0x29c>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f010 ff23 	bl	80118a4 <strncmp>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10d      	bne.n	8000a80 <task2_handler+0x12c>
			locFwdRevState = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 8000a6a:	4b60      	ldr	r3, [pc, #384]	; (8000bec <task2_handler+0x298>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d09e      	beq.n	80009b4 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 8000a76:	4a5d      	ldr	r2, [pc, #372]	; (8000bec <task2_handler+0x298>)
 8000a78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000a7c:	7013      	strb	r3, [r2, #0]
 8000a7e:	e799      	b.n	80009b4 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
		}
		else if (strncmp(rxBuf, "A", 1) == 0) {
 8000a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b5b      	ldr	r3, [pc, #364]	; (8000bf4 <task2_handler+0x2a0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d12f      	bne.n	8000aee <task2_handler+0x19a>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev
			//strncpy(val, &rxBuf[strlen("Accel: ")], strlen(rxBuf)-strlen("Accel: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 8000a8e:	2301      	movs	r3, #1
 8000a90:	657b      	str	r3, [r7, #84]	; 0x54
 8000a92:	e00d      	b.n	8000ab0 <task2_handler+0x15c>
				val[i-1] = rxBuf[i];
 8000a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000a9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a9c:	440a      	add	r2, r1
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000aa4:	440b      	add	r3, r1
 8000aa6:	f803 2c34 	strb.w	r2, [r3, #-52]
			for (i = 1; i < strlen(rxBuf); i++) {
 8000aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aac:	3301      	adds	r3, #1
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
 8000ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fc14 	bl	80002e0 <strlen>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8e9      	bhi.n	8000a94 <task2_handler+0x140>
			} val[i] = '\0';
 8000ac0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			//char *end;
			locAcc = (uint16_t)atoi(val);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f010 fdad 	bl	8011630 <atoi>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if (locAcc != accValue)
 8000ada:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <task2_handler+0x2a4>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f43f af67 	beq.w	80009b4 <task2_handler+0x60>
				accValue = locAcc;
 8000ae6:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <task2_handler+0x2a4>)
 8000ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000aea:	8013      	strh	r3, [r2, #0]
 8000aec:	e762      	b.n	80009b4 <task2_handler+0x60>

		}
		else if (strncmp(rxBuf, "R", 1) == 0) {
 8000aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <task2_handler+0x2a8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d132      	bne.n	8000b62 <task2_handler+0x20e>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
			//strncpy(val, &rxBuf[strlen("Regen: ")], strlen(rxBuf)-strlen("Regen: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 8000afc:	2301      	movs	r3, #1
 8000afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b00:	e00d      	b.n	8000b1e <task2_handler+0x1ca>
				val[i-1] = rxBuf[i];
 8000b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b04:	3b01      	subs	r3, #1
 8000b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b0a:	440a      	add	r2, r1
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b12:	440b      	add	r3, r1
 8000b14:	f803 2c44 	strb.w	r2, [r3, #-68]
			for (i = 1; i < strlen(rxBuf); i++) {
 8000b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fbdd 	bl	80002e0 <strlen>
 8000b26:	4602      	mov	r2, r0
 8000b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d8e9      	bhi.n	8000b02 <task2_handler+0x1ae>
			} val[i] = '\0';
 8000b2e:	f107 021c 	add.w	r2, r7, #28
 8000b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
			locReg = (uint16_t)atoi(val);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f010 fd76 	bl	8011630 <atoi>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			if (locReg != regenValue)
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <task2_handler+0x2ac>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f43f af2e 	beq.w	80009b4 <task2_handler+0x60>
				regenValue = locReg;
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <task2_handler+0x2ac>)
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	8013      	strh	r3, [r2, #0]
 8000b60:	e728      	b.n	80009b4 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "V", 1) == 0) {
 8000b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <task2_handler+0x2b0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f47f af21 	bne.w	80009b4 <task2_handler+0x60>
			char val[16];
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 8000b72:	2301      	movs	r3, #1
 8000b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b76:	e00d      	b.n	8000b94 <task2_handler+0x240>
				val[i-1] = rxBuf[i];
 8000b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b80:	440a      	add	r2, r1
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b88:	440b      	add	r3, r1
 8000b8a:	f803 2c54 	strb.w	r2, [r3, #-84]
			for (i = 1; i < strlen(rxBuf); i++) {
 8000b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b90:	3301      	adds	r3, #1
 8000b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fba2 	bl	80002e0 <strlen>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8e9      	bhi.n	8000b78 <task2_handler+0x224>
			} val[i] = '\0';
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			locVfmVal = (uint8_t)atoi(val);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f010 fd3b 	bl	8011630 <atoi>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (locVfmVal != vfmVal)
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <task2_handler+0x2b4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f43f aef3 	beq.w	80009b4 <task2_handler+0x60>
				vfmVal = locVfmVal;
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <task2_handler+0x2b4>)
 8000bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000bd4:	7013      	strb	r3, [r2, #0]
		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 8000bd6:	e6ed      	b.n	80009b4 <task2_handler+0x60>
 8000bd8:	24027960 	.word	0x24027960
 8000bdc:	08012160 	.word	0x08012160
 8000be0:	2400009e 	.word	0x2400009e
 8000be4:	08012168 	.word	0x08012168
 8000be8:	08012170 	.word	0x08012170
 8000bec:	240000a0 	.word	0x240000a0
 8000bf0:	08012178 	.word	0x08012178
 8000bf4:	08012180 	.word	0x08012180
 8000bf8:	2400009a 	.word	0x2400009a
 8000bfc:	08012184 	.word	0x08012184
 8000c00:	2400009c 	.word	0x2400009c
 8000c04:	08012188 	.word	0x08012188
 8000c08:	24000000 	.word	0x24000000

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f001 fd83 	bl	800271c <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 8000c16:	f7ff fd37 	bl	8000688 <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f8e5 	bl	8000de8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c1e:	f000 f971 	bl	8000f04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f000 fcef 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c26:	f000 fcb5 	bl	8001594 <MX_DMA_Init>
  MX_UART4_Init();
 8000c2a:	f000 fbcd 	bl	80013c8 <MX_UART4_Init>
  MX_RTC_Init();
 8000c2e:	f000 fa35 	bl	800109c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000c32:	f000 fc63 	bl	80014fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c36:	f000 fb05 	bl	8001244 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000c3a:	f000 fb57 	bl	80012ec <MX_TIM12_Init>
  MX_TIM1_Init();
 8000c3e:	f000 faad 	bl	800119c <MX_TIM1_Init>
  MX_CRC_Init();
 8000c42:	f000 fa09 	bl	8001058 <MX_CRC_Init>
  MX_SPI3_Init();
 8000c46:	f000 fa51 	bl	80010ec <MX_SPI3_Init>
  MX_UART8_Init();
 8000c4a:	f000 fc0b 	bl	8001464 <MX_UART8_Init>
  MX_ADC1_Init();
 8000c4e:	f000 f98b 	bl	8000f68 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t SPI_START_VAL = 0b00010001;
  buart = B_uartStart(&huart4); //Note huart4 is for rs485
 8000c52:	4852      	ldr	r0, [pc, #328]	; (8000d9c <main+0x190>)
 8000c54:	f010 fa7c 	bl	8011150 <B_uartStart>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a51      	ldr	r2, [pc, #324]	; (8000da0 <main+0x194>)
 8000c5c:	6013      	str	r3, [r2, #0]
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};
  btcp = B_tcpStart(DCMB_ID, &buart, buart, 1, &hcrc);
 8000c5e:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <main+0x194>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <main+0x198>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	494d      	ldr	r1, [pc, #308]	; (8000da0 <main+0x194>)
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f00f ff78 	bl	8010b60 <B_tcpStart>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <main+0x19c>)
 8000c74:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	484c      	ldr	r0, [pc, #304]	; (8000dac <main+0x1a0>)
 8000c7c:	f006 f920 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	484a      	ldr	r0, [pc, #296]	; (8000db0 <main+0x1a4>)
 8000c86:	f006 f903 	bl	8006e90 <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET); // FwdRev
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4849      	ldr	r0, [pc, #292]	; (8000db4 <main+0x1a8>)
 8000c90:	f006 f916 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	4847      	ldr	r0, [pc, #284]	; (8000db8 <main+0x1ac>)
 8000c9c:	f006 f910 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4844      	ldr	r0, [pc, #272]	; (8000db8 <main+0x1ac>)
 8000ca8:	f006 f90a 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 8000cac:	2201      	movs	r2, #1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <main+0x1a8>)
 8000cb2:	f006 f905 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <main+0x1b0>)
 8000cbc:	f006 f900 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	483b      	ldr	r0, [pc, #236]	; (8000db4 <main+0x1a8>)
 8000cc6:	f006 f8fb 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4839      	ldr	r0, [pc, #228]	; (8000db8 <main+0x1ac>)
 8000cd2:	f006 f8f5 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4836      	ldr	r0, [pc, #216]	; (8000db8 <main+0x1ac>)
 8000cde:	f006 f8ef 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4836      	ldr	r0, [pc, #216]	; (8000dc0 <main+0x1b4>)
 8000ce8:	f006 f8ea 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf2:	4831      	ldr	r0, [pc, #196]	; (8000db8 <main+0x1ac>)
 8000cf4:	f006 f8e4 	bl	8006ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <main+0x1b8>)
 8000cfe:	f006 f8df 	bl	8006ec0 <HAL_GPIO_WritePin>


  xTimerStart(xTimerCreate("mc2StateTmr", 10, pdTRUE, NULL, mc2StateTmr), 0);
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <main+0x1bc>)
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2201      	movs	r2, #1
 8000d0a:	210a      	movs	r1, #10
 8000d0c:	482f      	ldr	r0, [pc, #188]	; (8000dcc <main+0x1c0>)
 8000d0e:	f00e ffaf 	bl	800fc70 <xTimerCreate>
 8000d12:	4604      	mov	r4, r0
 8000d14:	f00e fa3c 	bl	800f190 <xTaskGetTickCount>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2101      	movs	r1, #1
 8000d22:	4620      	mov	r0, r4
 8000d24:	f00f f800 	bl	800fd28 <xTimerGenericCommand>

  HAL_TIM_Base_Start(&htim2);
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <main+0x1c4>)
 8000d2a:	f00a f851 	bl	800add0 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
	BaseType_t status;

	status = xTaskCreate(task1_handler,  /* Function that implements the task. */
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2304      	movs	r3, #4
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <main+0x1c8>)
 8000d3a:	22c8      	movs	r2, #200	; 0xc8
 8000d3c:	4926      	ldr	r1, [pc, #152]	; (8000dd8 <main+0x1cc>)
 8000d3e:	4827      	ldr	r0, [pc, #156]	; (8000ddc <main+0x1d0>)
 8000d40:	f00d ffa6 	bl	800ec90 <xTaskCreate>
 8000d44:	6178      	str	r0, [r7, #20]
              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
              "dont need this this time", /* Parameter passed into the task. */
              4, /* Priority at which the task is created. */ //Note must be 4 since btcp is 4
              &task1_handle /* Used to pass out the created task's handle. */
                            );
	configASSERT(status == pdPASS); // Error checking
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d00a      	beq.n	8000d62 <main+0x156>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d50:	f383 8811 	msr	BASEPRI, r3
 8000d54:	f3bf 8f6f 	isb	sy
 8000d58:	f3bf 8f4f 	dsb	sy
 8000d5c:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d5e:	bf00      	nop
 8000d60:	e7fe      	b.n	8000d60 <main+0x154>

	status = xTaskCreate(task2_handler,  /* Function that implements the task. */
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2304      	movs	r3, #4
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <main+0x1c8>)
 8000d6c:	22c8      	movs	r2, #200	; 0xc8
 8000d6e:	491c      	ldr	r1, [pc, #112]	; (8000de0 <main+0x1d4>)
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <main+0x1d8>)
 8000d72:	f00d ff8d 	bl	800ec90 <xTaskCreate>
 8000d76:	6178      	str	r0, [r7, #20]
	              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
				  "dont need this this time", /* Parameter passed into the task. */
	              4, /* Priority at which the task is created. */
				  &task2_handle /* Used to pass out the created task's handle. */
	                            );
	configASSERT(status == pdPASS); // Error checking
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d00a      	beq.n	8000d94 <main+0x188>
	__asm volatile
 8000d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d82:	f383 8811 	msr	BASEPRI, r3
 8000d86:	f3bf 8f6f 	isb	sy
 8000d8a:	f3bf 8f4f 	dsb	sy
 8000d8e:	60fb      	str	r3, [r7, #12]
}
 8000d90:	bf00      	nop
 8000d92:	e7fe      	b.n	8000d92 <main+0x186>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d94:	f00d f86a 	bl	800de6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <main+0x18c>
 8000d9a:	bf00      	nop
 8000d9c:	24027838 	.word	0x24027838
 8000da0:	240279f0 	.word	0x240279f0
 8000da4:	240273e4 	.word	0x240273e4
 8000da8:	240276bc 	.word	0x240276bc
 8000dac:	58022400 	.word	0x58022400
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58021800 	.word	0x58021800
 8000db8:	58022000 	.word	0x58022000
 8000dbc:	58022800 	.word	0x58022800
 8000dc0:	58021400 	.word	0x58021400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	080006e5 	.word	0x080006e5
 8000dcc:	0801218c 	.word	0x0801218c
 8000dd0:	240278c8 	.word	0x240278c8
 8000dd4:	08012198 	.word	0x08012198
 8000dd8:	080121b4 	.word	0x080121b4
 8000ddc:	080008d1 	.word	0x080008d1
 8000de0:	080121bc 	.word	0x080121bc
 8000de4:	08000955 	.word	0x08000955

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09c      	sub	sp, #112	; 0x70
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	224c      	movs	r2, #76	; 0x4c
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f010 fc58 	bl	80116ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2220      	movs	r2, #32
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f010 fc52 	bl	80116ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f006 f897 	bl	8006f3c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <SystemClock_Config+0x110>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <SystemClock_Config+0x110>)
 8000e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <SystemClock_Config+0x110>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <SystemClock_Config+0x114>)
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	4a33      	ldr	r2, [pc, #204]	; (8000efc <SystemClock_Config+0x114>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <SystemClock_Config+0x114>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e40:	bf00      	nop
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <SystemClock_Config+0x110>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e4e:	d1f8      	bne.n	8000e42 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <SystemClock_Config+0x118>)
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <SystemClock_Config+0x118>)
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000e5c:	232a      	movs	r3, #42	; 0x2a
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000e7c:	2314      	movs	r3, #20
 8000e7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 f887 	bl	8006fb0 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ea8:	f000 fe5a 	bl	8001b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	233f      	movs	r3, #63	; 0x3f
 8000eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fc7c 	bl	80077d0 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000ede:	f000 fe3f 	bl	8001b60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8000ee2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ee6:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8000eea:	2000      	movs	r0, #0
 8000eec:	f006 fe26 	bl	8007b3c <HAL_RCC_MCOConfig>
}
 8000ef0:	bf00      	nop
 8000ef2:	3770      	adds	r7, #112	; 0x70
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024800 	.word	0x58024800
 8000efc:	58000400 	.word	0x58000400
 8000f00:	58024400 	.word	0x58024400

08000f04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0b0      	sub	sp, #192	; 0xc0
 8000f08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	22bc      	movs	r2, #188	; 0xbc
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f010 fbcb 	bl	80116ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <PeriphCommonClock_Config+0x60>)
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8000f1e:	2320      	movs	r3, #32
 8000f20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 f877 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f58:	f000 fe02 	bl	8001b60 <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	37c0      	adds	r7, #192	; 0xc0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	02090000 	.word	0x02090000

08000f68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <MX_ADC1_Init+0xe4>)
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <MX_ADC1_Init+0xe8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <MX_ADC1_Init+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <MX_ADC1_Init+0xe4>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_ADC1_Init+0xe4>)
 8000fea:	f001 fd8b 	bl	8002b04 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff4:	f000 fdb4 	bl	8001b60 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <MX_ADC1_Init+0xe4>)
 8001004:	f002 fb9e 	bl	8003744 <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800100e:	f000 fda7 	bl	8001b60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_ADC1_Init+0xec>)
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001016:	2306      	movs	r3, #6
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001024:	2304      	movs	r3, #4
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_ADC1_Init+0xe4>)
 8001036:	f001 ff05 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001040:	f000 fd8e 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240275a8 	.word	0x240275a8
 8001050:	40022000 	.word	0x40022000
 8001054:	10c00010 	.word	0x10c00010

08001058 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_CRC_Init+0x3c>)
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <MX_CRC_Init+0x40>)
 8001060:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_CRC_Init+0x3c>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_CRC_Init+0x3c>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_CRC_Init+0x3c>)
 8001070:	2220      	movs	r2, #32
 8001072:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_CRC_Init+0x3c>)
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_CRC_Init+0x3c>)
 800107c:	2201      	movs	r2, #1
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_CRC_Init+0x3c>)
 8001082:	f002 fd1d 	bl	8003ac0 <HAL_CRC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800108c:	f000 fd68 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	240273e4 	.word	0x240273e4
 8001098:	58024c00 	.word	0x58024c00

0800109c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_RTC_Init+0x48>)
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <MX_RTC_Init+0x4c>)
 80010a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_RTC_Init+0x48>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_RTC_Init+0x48>)
 80010ae:	227f      	movs	r2, #127	; 0x7f
 80010b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_RTC_Init+0x48>)
 80010b4:	22ff      	movs	r2, #255	; 0xff
 80010b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_RTC_Init+0x48>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_RTC_Init+0x48>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_RTC_Init+0x48>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_RTC_Init+0x48>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_RTC_Init+0x48>)
 80010d2:	f009 f93b 	bl	800a34c <HAL_RTC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010dc:	f000 fd40 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	24027738 	.word	0x24027738
 80010e8:	58004000 	.word	0x58004000

080010ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_SPI3_Init+0xa8>)
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <MX_SPI3_Init+0xac>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_SPI3_Init+0xa8>)
 80010f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001100:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001104:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001108:	2207      	movs	r2, #7
 800110a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_SPI3_Init+0xa8>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_SPI3_Init+0xa8>)
 800111a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001122:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001126:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_SPI3_Init+0xa8>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI3_Init+0xa8>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_SPI3_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI3_Init+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI3_Init+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI3_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_SPI3_Init+0xa8>)
 8001180:	f009 f9f0 	bl	800a564 <HAL_SPI_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800118a:	f000 fce9 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2402751c 	.word	0x2402751c
 8001198:	40003c00 	.word	0x40003c00

0800119c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <MX_TIM1_Init+0xa0>)
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <MX_TIM1_Init+0xa4>)
 80011be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM1_Init+0xa0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM1_Init+0xa0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM1_Init+0xa0>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM1_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM1_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM1_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <MX_TIM1_Init+0xa0>)
 80011e8:	f009 fd9b 	bl	800ad22 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 fcb5 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_TIM1_Init+0xa0>)
 8001204:	f00a f94c 	bl	800b4a0 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800120e:	f000 fca7 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM1_Init+0xa0>)
 8001224:	f00a fe5e 	bl	800bee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800122e:	f000 fc97 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2402775c 	.word	0x2402775c
 8001240:	40010000 	.word	0x40010000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_TIM2_Init+0xa4>)
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_TIM2_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM2_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_TIM2_Init+0xa4>)
 8001278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM2_Init+0xa4>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_TIM2_Init+0xa4>)
 800128c:	f009 fd49 	bl	800ad22 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 fc63 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_TIM2_Init+0xa4>)
 80012b4:	f00a f8f4 	bl	800b4a0 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012be:	f000 fc4f 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_TIM2_Init+0xa4>)
 80012d0:	f00a fe08 	bl	800bee4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012da:	f000 fc41 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	240278c8 	.word	0x240278c8

080012ec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001314:	4a2b      	ldr	r2, [pc, #172]	; (80013c4 <MX_TIM12_Init+0xd8>)
 8001316:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_TIM12_Init+0xd4>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <MX_TIM12_Init+0xd4>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001338:	4821      	ldr	r0, [pc, #132]	; (80013c0 <MX_TIM12_Init+0xd4>)
 800133a:	f009 fcf2 	bl	800ad22 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001344:	f000 fc0c 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4619      	mov	r1, r3
 8001354:	481a      	ldr	r0, [pc, #104]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001356:	f00a f8a3 	bl	800b4a0 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001360:	f000 fbfe 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001364:	4816      	ldr	r0, [pc, #88]	; (80013c0 <MX_TIM12_Init+0xd4>)
 8001366:	f009 fe0b 	bl	800af80 <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001370:	f000 fbf6 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_TIM12_Init+0xd4>)
 800138c:	f009 ff78 	bl	800b280 <HAL_TIM_PWM_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001396:	f000 fbe3 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM12_Init+0xd4>)
 80013a2:	f009 ff6d 	bl	800b280 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80013ac:	f000 fbd8 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM12_Init+0xd4>)
 80013b2:	f000 fd9b 	bl	8001eec <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3730      	adds	r7, #48	; 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24027ae4 	.word	0x24027ae4
 80013c4:	40001800 	.word	0x40001800

080013c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_UART4_Init+0x90>)
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <MX_UART4_Init+0x94>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_UART4_Init+0x90>)
 80013d4:	4a22      	ldr	r2, [pc, #136]	; (8001460 <MX_UART4_Init+0x98>)
 80013d6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_UART4_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_UART4_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_UART4_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_UART4_Init+0x90>)
 80013ec:	220c      	movs	r2, #12
 80013ee:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_UART4_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_UART4_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_UART4_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_UART4_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_UART4_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <MX_UART4_Init+0x90>)
 8001410:	f00a fe0e 	bl	800c030 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800141a:	f000 fba1 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_UART4_Init+0x90>)
 8001422:	f00c fc59 	bl	800dcd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800142c:	f000 fb98 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_UART4_Init+0x90>)
 8001434:	f00c fc8e 	bl	800dd54 <HAL_UARTEx_SetRxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800143e:	f000 fb8f 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_UART4_Init+0x90>)
 8001444:	f00c fc0f 	bl	800dc66 <HAL_UARTEx_DisableFifoMode>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800144e:	f000 fb87 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24027838 	.word	0x24027838
 800145c:	40004c00 	.word	0x40004c00
 8001460:	0007a120 	.word	0x0007a120

08001464 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_UART8_Init+0x90>)
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <MX_UART8_Init+0x94>)
 800146c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_UART8_Init+0x90>)
 8001470:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001474:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_UART8_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_UART8_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_UART8_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_UART8_Init+0x90>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_UART8_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_UART8_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_UART8_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_UART8_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_UART8_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_UART8_Init+0x90>)
 80014ae:	f00a fdbf 	bl	800c030 <HAL_UART_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80014b8:	f000 fb52 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_UART8_Init+0x90>)
 80014c0:	f00c fc0a 	bl	800dcd8 <HAL_UARTEx_SetTxFifoThreshold>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80014ca:	f000 fb49 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <MX_UART8_Init+0x90>)
 80014d2:	f00c fc3f 	bl	800dd54 <HAL_UARTEx_SetRxFifoThreshold>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 fb40 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_UART8_Init+0x90>)
 80014e2:	f00c fbc0 	bl	800dc66 <HAL_UARTEx_DisableFifoMode>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f000 fb38 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	240277a8 	.word	0x240277a8
 80014f8:	40007c00 	.word	0x40007c00

080014fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <MX_USART2_UART_Init+0x94>)
 8001504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001508:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800150c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_USART2_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_USART2_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART2_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001546:	f00a fd73 	bl	800c030 <HAL_UART_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001550:	f000 fb06 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_USART2_UART_Init+0x90>)
 8001558:	f00c fbbe 	bl	800dcd8 <HAL_UARTEx_SetTxFifoThreshold>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001562:	f000 fafd 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x90>)
 800156a:	f00c fbf3 	bl	800dd54 <HAL_UARTEx_SetRxFifoThreshold>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001574:	f000 faf4 	bl	8001b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_USART2_UART_Init+0x90>)
 800157a:	f00c fb74 	bl	800dc66 <HAL_UARTEx_DisableFifoMode>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001584:	f000 faec 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	24027960 	.word	0x24027960
 8001590:	40004400 	.word	0x40004400

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_DMA_Init+0x6c>)
 800159c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <MX_DMA_Init+0x6c>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_DMA_Init+0x6c>)
 80015ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2105      	movs	r1, #5
 80015bc:	200b      	movs	r0, #11
 80015be:	f002 fa57 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015c2:	200b      	movs	r0, #11
 80015c4:	f002 fa6e 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2105      	movs	r1, #5
 80015cc:	200c      	movs	r0, #12
 80015ce:	f002 fa4f 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015d2:	200c      	movs	r0, #12
 80015d4:	f002 fa66 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2105      	movs	r1, #5
 80015dc:	200d      	movs	r0, #13
 80015de:	f002 fa47 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015e2:	200d      	movs	r0, #13
 80015e4:	f002 fa5e 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2105      	movs	r1, #5
 80015ec:	2010      	movs	r0, #16
 80015ee:	f002 fa3f 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f2:	2010      	movs	r0, #16
 80015f4:	f002 fa56 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024400 	.word	0x58024400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b090      	sub	sp, #64	; 0x40
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	4bbf      	ldr	r3, [pc, #764]	; (8001918 <MX_GPIO_Init+0x314>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4abd      	ldr	r2, [pc, #756]	; (8001918 <MX_GPIO_Init+0x314>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4bbb      	ldr	r3, [pc, #748]	; (8001918 <MX_GPIO_Init+0x314>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001638:	4bb7      	ldr	r3, [pc, #732]	; (8001918 <MX_GPIO_Init+0x314>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4ab6      	ldr	r2, [pc, #728]	; (8001918 <MX_GPIO_Init+0x314>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4bb3      	ldr	r3, [pc, #716]	; (8001918 <MX_GPIO_Init+0x314>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4bb0      	ldr	r3, [pc, #704]	; (8001918 <MX_GPIO_Init+0x314>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4aae      	ldr	r2, [pc, #696]	; (8001918 <MX_GPIO_Init+0x314>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4bac      	ldr	r3, [pc, #688]	; (8001918 <MX_GPIO_Init+0x314>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001674:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <MX_GPIO_Init+0x314>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167a:	4aa7      	ldr	r2, [pc, #668]	; (8001918 <MX_GPIO_Init+0x314>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001684:	4ba4      	ldr	r3, [pc, #656]	; (8001918 <MX_GPIO_Init+0x314>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4ba1      	ldr	r3, [pc, #644]	; (8001918 <MX_GPIO_Init+0x314>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	4a9f      	ldr	r2, [pc, #636]	; (8001918 <MX_GPIO_Init+0x314>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a2:	4b9d      	ldr	r3, [pc, #628]	; (8001918 <MX_GPIO_Init+0x314>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	4b99      	ldr	r3, [pc, #612]	; (8001918 <MX_GPIO_Init+0x314>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <MX_GPIO_Init+0x314>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c0:	4b95      	ldr	r3, [pc, #596]	; (8001918 <MX_GPIO_Init+0x314>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016ce:	4b92      	ldr	r3, [pc, #584]	; (8001918 <MX_GPIO_Init+0x314>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	4a90      	ldr	r2, [pc, #576]	; (8001918 <MX_GPIO_Init+0x314>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016de:	4b8e      	ldr	r3, [pc, #568]	; (8001918 <MX_GPIO_Init+0x314>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ec:	4b8a      	ldr	r3, [pc, #552]	; (8001918 <MX_GPIO_Init+0x314>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a89      	ldr	r2, [pc, #548]	; (8001918 <MX_GPIO_Init+0x314>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b86      	ldr	r3, [pc, #536]	; (8001918 <MX_GPIO_Init+0x314>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b83      	ldr	r3, [pc, #524]	; (8001918 <MX_GPIO_Init+0x314>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a81      	ldr	r2, [pc, #516]	; (8001918 <MX_GPIO_Init+0x314>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <MX_GPIO_Init+0x314>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <MX_GPIO_Init+0x314>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a7a      	ldr	r2, [pc, #488]	; (8001918 <MX_GPIO_Init+0x314>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b77      	ldr	r3, [pc, #476]	; (8001918 <MX_GPIO_Init+0x314>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <MX_GPIO_Init+0x314>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a72      	ldr	r2, [pc, #456]	; (8001918 <MX_GPIO_Init+0x314>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <MX_GPIO_Init+0x314>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2109      	movs	r1, #9
 8001768:	486c      	ldr	r0, [pc, #432]	; (800191c <MX_GPIO_Init+0x318>)
 800176a:	f005 fba9 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800176e:	2200      	movs	r2, #0
 8001770:	f24f 2191 	movw	r1, #62097	; 0xf291
 8001774:	486a      	ldr	r0, [pc, #424]	; (8001920 <MX_GPIO_Init+0x31c>)
 8001776:	f005 fba3 	bl	8006ec0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2104      	movs	r1, #4
 800177e:	4869      	ldr	r0, [pc, #420]	; (8001924 <MX_GPIO_Init+0x320>)
 8001780:	f005 fb9e 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001784:	2200      	movs	r2, #0
 8001786:	f248 013f 	movw	r1, #32831	; 0x803f
 800178a:	4867      	ldr	r0, [pc, #412]	; (8001928 <MX_GPIO_Init+0x324>)
 800178c:	f005 fb98 	bl	8006ec0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f24b 0120 	movw	r1, #45088	; 0xb020
 8001796:	4865      	ldr	r0, [pc, #404]	; (800192c <MX_GPIO_Init+0x328>)
 8001798:	f005 fb92 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800179c:	2200      	movs	r2, #0
 800179e:	21fc      	movs	r1, #252	; 0xfc
 80017a0:	4863      	ldr	r0, [pc, #396]	; (8001930 <MX_GPIO_Init+0x32c>)
 80017a2:	f005 fb8d 	bl	8006ec0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2108      	movs	r1, #8
 80017aa:	4862      	ldr	r0, [pc, #392]	; (8001934 <MX_GPIO_Init+0x330>)
 80017ac:	f005 fb88 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 80017b0:	2309      	movs	r3, #9
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c4:	4619      	mov	r1, r3
 80017c6:	4855      	ldr	r0, [pc, #340]	; (800191c <MX_GPIO_Init+0x318>)
 80017c8:	f005 f9b2 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80017cc:	f24f 2391 	movw	r3, #62097	; 0xf291
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	484e      	ldr	r0, [pc, #312]	; (8001920 <MX_GPIO_Init+0x31c>)
 80017e6:	f005 f9a3 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ea:	2304      	movs	r3, #4
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fe:	4619      	mov	r1, r3
 8001800:	4848      	ldr	r0, [pc, #288]	; (8001924 <MX_GPIO_Init+0x320>)
 8001802:	f005 f995 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 8001806:	2301      	movs	r3, #1
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <MX_GPIO_Init+0x334>)
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	4619      	mov	r1, r3
 8001818:	4844      	ldr	r0, [pc, #272]	; (800192c <MX_GPIO_Init+0x328>)
 800181a:	f005 f989 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800181e:	23de      	movs	r3, #222	; 0xde
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <MX_GPIO_Init+0x334>)
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <MX_GPIO_Init+0x328>)
 8001832:	f005 f97d 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001836:	f248 033f 	movw	r3, #32831	; 0x803f
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	4836      	ldr	r0, [pc, #216]	; (8001928 <MX_GPIO_Init+0x324>)
 8001850:	f005 f96e 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001854:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <MX_GPIO_Init+0x334>)
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	482c      	ldr	r0, [pc, #176]	; (800191c <MX_GPIO_Init+0x318>)
 800186a:	f005 f961 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800186e:	f24b 0320 	movw	r3, #45088	; 0xb020
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4829      	ldr	r0, [pc, #164]	; (800192c <MX_GPIO_Init+0x328>)
 8001888:	f005 f952 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800188c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 800189e:	230c      	movs	r3, #12
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4824      	ldr	r0, [pc, #144]	; (800193c <MX_GPIO_Init+0x338>)
 80018aa:	f005 f941 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	481e      	ldr	r0, [pc, #120]	; (800193c <MX_GPIO_Init+0x338>)
 80018c4:	f005 f934 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018da:	2307      	movs	r3, #7
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0x330>)
 80018e6:	f005 f923 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 80018ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_GPIO_Init+0x334>)
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_GPIO_Init+0x330>)
 8001900:	f005 f916 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001904:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	e014      	b.n	8001940 <MX_GPIO_Init+0x33c>
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58021000 	.word	0x58021000
 8001920:	58022000 	.word	0x58022000
 8001924:	58021400 	.word	0x58021400
 8001928:	58021800 	.word	0x58021800
 800192c:	58022400 	.word	0x58022400
 8001930:	58022800 	.word	0x58022800
 8001934:	58020c00 	.word	0x58020c00
 8001938:	11110000 	.word	0x11110000
 800193c:	58020400 	.word	0x58020400
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001942:	2305      	movs	r3, #5
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4872      	ldr	r0, [pc, #456]	; (8001b18 <MX_GPIO_Init+0x514>)
 800194e:	f005 f8ef 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001952:	2303      	movs	r3, #3
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001962:	2305      	movs	r3, #5
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	486b      	ldr	r0, [pc, #428]	; (8001b1c <MX_GPIO_Init+0x518>)
 800196e:	f005 f8df 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001972:	23fc      	movs	r3, #252	; 0xfc
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	4864      	ldr	r0, [pc, #400]	; (8001b1c <MX_GPIO_Init+0x518>)
 800198a:	f005 f8d1 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <MX_GPIO_Init+0x51c>)
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a0:	4619      	mov	r1, r3
 80019a2:	4860      	ldr	r0, [pc, #384]	; (8001b24 <MX_GPIO_Init+0x520>)
 80019a4:	f005 f8c4 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4858      	ldr	r0, [pc, #352]	; (8001b28 <MX_GPIO_Init+0x524>)
 80019c6:	f005 f8b3 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2302      	movs	r3, #2
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019dc:	2309      	movs	r3, #9
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4851      	ldr	r0, [pc, #324]	; (8001b2c <MX_GPIO_Init+0x528>)
 80019e8:	f005 f8a2 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI2 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019ec:	230e      	movs	r3, #14
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019fc:	2305      	movs	r3, #5
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	484a      	ldr	r0, [pc, #296]	; (8001b30 <MX_GPIO_Init+0x52c>)
 8001a08:	f005 f892 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	483f      	ldr	r0, [pc, #252]	; (8001b28 <MX_GPIO_Init+0x524>)
 8001a2a:	f005 f881 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	483b      	ldr	r0, [pc, #236]	; (8001b34 <MX_GPIO_Init+0x530>)
 8001a46:	f005 f873 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	4833      	ldr	r0, [pc, #204]	; (8001b34 <MX_GPIO_Init+0x530>)
 8001a66:	f005 f863 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4827      	ldr	r0, [pc, #156]	; (8001b24 <MX_GPIO_Init+0x520>)
 8001a88:	f005 f852 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001a8c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481e      	ldr	r0, [pc, #120]	; (8001b24 <MX_GPIO_Init+0x520>)
 8001aaa:	f005 f841 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001abe:	2309      	movs	r3, #9
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481b      	ldr	r0, [pc, #108]	; (8001b38 <MX_GPIO_Init+0x534>)
 8001aca:	f005 f831 	bl	8006b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_GPIO_Init+0x52c>)
 8001aea:	f005 f821 	bl	8006b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2105      	movs	r1, #5
 8001af2:	2006      	movs	r0, #6
 8001af4:	f001 ffbc 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001af8:	2006      	movs	r0, #6
 8001afa:	f001 ffd3 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	2028      	movs	r0, #40	; 0x28
 8001b04:	f001 ffb4 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b08:	2028      	movs	r0, #40	; 0x28
 8001b0a:	f001 ffcb 	bl	8003aa4 <HAL_NVIC_EnableIRQ>

}
 8001b0e:	bf00      	nop
 8001b10:	3740      	adds	r7, #64	; 0x40
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	58022400 	.word	0x58022400
 8001b1c:	58022800 	.word	0x58022800
 8001b20:	11110000 	.word	0x11110000
 8001b24:	58021800 	.word	0x58021800
 8001b28:	58020000 	.word	0x58020000
 8001b2c:	58021c00 	.word	0x58021c00
 8001b30:	58022000 	.word	0x58022000
 8001b34:	58020c00 	.word	0x58020c00
 8001b38:	58020400 	.word	0x58020400

08001b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b4e:	f000 fe21 	bl	8002794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40001000 	.word	0x40001000

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	210f      	movs	r1, #15
 8001b98:	f06f 0001 	mvn.w	r0, #1
 8001b9c:	f001 ff68 	bl	8003a70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	58024400 	.word	0x58024400

08001bac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_ADC_MspInit+0x80>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d129      	bne.n	8001c22 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_ADC_MspInit+0x84>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <HAL_ADC_MspInit+0x88>)
 8001c1e:	f004 ff87 	bl	8006b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58020800 	.word	0x58020800

08001c38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_CRC_MspInit+0x3c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10e      	bne.n	8001c68 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	58024c00 	.word	0x58024c00
 8001c78:	58024400 	.word	0x58024400

08001c7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0b2      	sub	sp, #200	; 0xc8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	22bc      	movs	r2, #188	; 0xbc
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f00f fd0d 	bl	80116ac <memset>
  if(hrtc->Instance==RTC)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_RTC_MspInit+0x58>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d116      	bne.n	8001cca <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f006 f9c6 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001cba:	f7ff ff51 	bl	8001b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RTC_MspInit+0x5c>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_RTC_MspInit+0x5c>)
 8001cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	37c8      	adds	r7, #200	; 0xc8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	58004000 	.word	0x58004000
 8001cd8:	58024400 	.word	0x58024400

08001cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0ba      	sub	sp, #232	; 0xe8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	22bc      	movs	r2, #188	; 0xbc
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00f fcd5 	bl	80116ac <memset>
  if(hspi->Instance==SPI3)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <HAL_SPI_MspInit+0x114>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d16d      	bne.n	8001de8 <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f006 f990 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d26:	f7ff ff1b 	bl	8001b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_SPI_MspInit+0x118>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d84:	2340      	movs	r3, #64	; 0x40
 8001d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4813      	ldr	r0, [pc, #76]	; (8001df8 <HAL_SPI_MspInit+0x11c>)
 8001daa:	f004 fec1 	bl	8006b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dae:	2308      	movs	r3, #8
 8001db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <HAL_SPI_MspInit+0x120>)
 8001dd4:	f004 feac 	bl	8006b30 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2105      	movs	r1, #5
 8001ddc:	2033      	movs	r0, #51	; 0x33
 8001dde:	f001 fe47 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001de2:	2033      	movs	r0, #51	; 0x33
 8001de4:	f001 fe5e 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	37e8      	adds	r7, #232	; 0xe8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40003c00 	.word	0x40003c00
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58020c00 	.word	0x58020c00
 8001dfc:	58020400 	.word	0x58020400

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <HAL_TIM_Base_MspInit+0xdc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10f      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e28:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001e40:	e047      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d12e      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001ea4:	f004 fe44 	bl	8006b30 <HAL_GPIO_Init>
}
 8001ea8:	e013      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM12)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_TIM_Base_MspInit+0xe8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_TIM_Base_MspInit+0xe0>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020000 	.word	0x58020000
 8001ee8:	40001800 	.word	0x40001800

08001eec <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_TIM_MspPostInit+0x6c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d11f      	bne.n	8001f4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_TIM_MspPostInit+0x70>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_TIM_MspPostInit+0x70>)
 8001f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_TIM_MspPostInit+0x70>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f2c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <HAL_TIM_MspPostInit+0x74>)
 8001f4a:	f004 fdf1 	bl	8006b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40001800 	.word	0x40001800
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58021c00 	.word	0x58021c00

08001f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0bc      	sub	sp, #240	; 0xf0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	22bc      	movs	r2, #188	; 0xbc
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00f fb91 	bl	80116ac <memset>
  if(huart->Instance==UART4)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4aae      	ldr	r2, [pc, #696]	; (8002248 <HAL_UART_MspInit+0x2e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f040 80a9 	bne.w	80020e8 <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f006 f84b 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001fb0:	f7ff fdd6 	bl	8001b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fb4:	4ba5      	ldr	r3, [pc, #660]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fba:	4aa4      	ldr	r2, [pc, #656]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fc4:	4ba1      	ldr	r3, [pc, #644]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	4a9c      	ldr	r2, [pc, #624]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe2:	4b9a      	ldr	r3, [pc, #616]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ff0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800200a:	2306      	movs	r3, #6
 800200c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002014:	4619      	mov	r1, r3
 8002016:	488e      	ldr	r0, [pc, #568]	; (8002250 <HAL_UART_MspInit+0x2ec>)
 8002018:	f004 fd8a 	bl	8006b30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 800201c:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 800201e:	4a8e      	ldr	r2, [pc, #568]	; (8002258 <HAL_UART_MspInit+0x2f4>)
 8002020:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002022:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002028:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 800202a:	2240      	movs	r2, #64	; 0x40
 800202c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202e:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002034:	4b87      	ldr	r3, [pc, #540]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800203c:	4b85      	ldr	r3, [pc, #532]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002042:	4b84      	ldr	r3, [pc, #528]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002048:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800204e:	4b81      	ldr	r3, [pc, #516]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002054:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002056:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800205c:	487d      	ldr	r0, [pc, #500]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 800205e:	f001 ff2d 	bl	8003ebc <HAL_DMA_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002068:	f7ff fd7a 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002070:	679a      	str	r2, [r3, #120]	; 0x78
 8002072:	4a78      	ldr	r2, [pc, #480]	; (8002254 <HAL_UART_MspInit+0x2f0>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8002078:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_UART_MspInit+0x2f8>)
 800207a:	4a79      	ldr	r2, [pc, #484]	; (8002260 <HAL_UART_MspInit+0x2fc>)
 800207c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <HAL_UART_MspInit+0x2f8>)
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_UART_MspInit+0x2f8>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208a:	4b74      	ldr	r3, [pc, #464]	; (800225c <HAL_UART_MspInit+0x2f8>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_UART_MspInit+0x2f8>)
 8002092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002096:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002098:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_UART_MspInit+0x2f8>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80020a4:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80020ba:	4868      	ldr	r0, [pc, #416]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020bc:	f001 fefe 	bl	8003ebc <HAL_DMA_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80020c6:	f7ff fd4b 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a63      	ldr	r2, [pc, #396]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d0:	4a62      	ldr	r2, [pc, #392]	; (800225c <HAL_UART_MspInit+0x2f8>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2105      	movs	r1, #5
 80020da:	2034      	movs	r0, #52	; 0x34
 80020dc:	f001 fcc8 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020e0:	2034      	movs	r0, #52	; 0x34
 80020e2:	f001 fcdf 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e6:	e118      	b.n	800231a <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==UART8)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_UART_MspInit+0x300>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f040 80c4 	bne.w	800227c <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	4618      	mov	r0, r3
 8002104:	f005 ff9c 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800210e:	f7ff fd27 	bl	8001b60 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002112:	4b4e      	ldr	r3, [pc, #312]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8002114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002118:	4a4c      	ldr	r2, [pc, #304]	; (800224c <HAL_UART_MspInit+0x2e8>)
 800211a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8002138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_UART_MspInit+0x2e8>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800214e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002168:	2308      	movs	r3, #8
 800216a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800216e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002172:	4619      	mov	r1, r3
 8002174:	483c      	ldr	r0, [pc, #240]	; (8002268 <HAL_UART_MspInit+0x304>)
 8002176:	f004 fcdb 	bl	8006b30 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_UART_MspInit+0x308>)
 800217c:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <HAL_UART_MspInit+0x30c>)
 800217e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_UART_MspInit+0x308>)
 8002182:	2251      	movs	r2, #81	; 0x51
 8002184:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_UART_MspInit+0x308>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_UART_MspInit+0x308>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_UART_MspInit+0x308>)
 8002194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002198:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_UART_MspInit+0x308>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_UART_MspInit+0x308>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_UART_MspInit+0x308>)
 80021a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ac:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_UART_MspInit+0x308>)
 80021b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_UART_MspInit+0x308>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80021bc:	482b      	ldr	r0, [pc, #172]	; (800226c <HAL_UART_MspInit+0x308>)
 80021be:	f001 fe7d 	bl	8003ebc <HAL_DMA_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_MspInit+0x268>
      Error_Handler();
 80021c8:	f7ff fcca 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_UART_MspInit+0x308>)
 80021d0:	67da      	str	r2, [r3, #124]	; 0x7c
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_UART_MspInit+0x308>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021da:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_UART_MspInit+0x314>)
 80021dc:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021e0:	2252      	movs	r2, #82	; 0x52
 80021e2:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f6:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_UART_MspInit+0x310>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_UART_MspInit+0x310>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_UART_MspInit+0x310>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_UART_MspInit+0x310>)
 800220c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002210:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_UART_MspInit+0x310>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <HAL_UART_MspInit+0x310>)
 800221a:	f001 fe4f 	bl	8003ebc <HAL_DMA_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002224:	f7ff fc9c 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_UART_MspInit+0x310>)
 800222c:	679a      	str	r2, [r3, #120]	; 0x78
 800222e:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_UART_MspInit+0x310>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2105      	movs	r1, #5
 8002238:	2053      	movs	r0, #83	; 0x53
 800223a:	f001 fc19 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800223e:	2053      	movs	r0, #83	; 0x53
 8002240:	f001 fc30 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 8002244:	e069      	b.n	800231a <HAL_UART_MspInit+0x3b6>
 8002246:	bf00      	nop
 8002248:	40004c00 	.word	0x40004c00
 800224c:	58024400 	.word	0x58024400
 8002250:	58020000 	.word	0x58020000
 8002254:	24027b34 	.word	0x24027b34
 8002258:	40020010 	.word	0x40020010
 800225c:	24027368 	.word	0x24027368
 8002260:	40020028 	.word	0x40020028
 8002264:	40007c00 	.word	0x40007c00
 8002268:	58022400 	.word	0x58022400
 800226c:	2402760c 	.word	0x2402760c
 8002270:	40020040 	.word	0x40020040
 8002274:	240276c0 	.word	0x240276c0
 8002278:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_UART_MspInit+0x3c0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d149      	bne.n	800231a <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 0320 	add.w	r3, r7, #32
 8002294:	4618      	mov	r0, r3
 8002296:	f005 fed3 	bl	8008040 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_UART_MspInit+0x340>
      Error_Handler();
 80022a0:	f7ff fc5e 	bl	8001b60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_UART_MspInit+0x3c4>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022e0:	230c      	movs	r3, #12
 80022e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f8:	2307      	movs	r3, #7
 80022fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002302:	4619      	mov	r1, r3
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <HAL_UART_MspInit+0x3c8>)
 8002306:	f004 fc13 	bl	8006b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2105      	movs	r1, #5
 800230e:	2026      	movs	r0, #38	; 0x26
 8002310:	f001 fbae 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002314:	2026      	movs	r0, #38	; 0x26
 8002316:	f001 fbc5 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	37f0      	adds	r7, #240	; 0xf0
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40004400 	.word	0x40004400
 8002328:	58024400 	.word	0x58024400
 800232c:	58020000 	.word	0x58020000

08002330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b090      	sub	sp, #64	; 0x40
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	d827      	bhi.n	800238e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800233e:	2200      	movs	r2, #0
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	2036      	movs	r0, #54	; 0x36
 8002344:	f001 fb94 	bl	8003a70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002348:	2036      	movs	r0, #54	; 0x36
 800234a:	f001 fbab 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_InitTick+0xc4>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_InitTick+0xc8>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235a:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_InitTick+0xc8>)
 800235c:	f043 0310 	orr.w	r3, r3, #16
 8002360:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_InitTick+0xc8>)
 8002366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002372:	f107 0210 	add.w	r2, r7, #16
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fe1d 	bl	8007fbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_InitTick+0x6a>
 800238c:	e001      	b.n	8002392 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e02b      	b.n	80023ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002392:	f005 fde7 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 8002396:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002398:	e004      	b.n	80023a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800239a:	f005 fde3 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 800239e:	4603      	mov	r3, r0
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_InitTick+0xcc>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	0c9b      	lsrs	r3, r3, #18
 80023ae:	3b01      	subs	r3, #1
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_InitTick+0xd0>)
 80023b4:	4a13      	ldr	r2, [pc, #76]	; (8002404 <HAL_InitTick+0xd4>)
 80023b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_InitTick+0xd0>)
 80023ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_InitTick+0xd0>)
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_InitTick+0xd0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_InitTick+0xd0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <HAL_InitTick+0xd0>)
 80023d4:	f008 fca5 	bl	800ad22 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023de:	4808      	ldr	r0, [pc, #32]	; (8002400 <HAL_InitTick+0xd0>)
 80023e0:	f008 fd5e 	bl	800aea0 <HAL_TIM_Base_Start_IT>
 80023e4:	4603      	mov	r3, r0
 80023e6:	e000      	b.n	80023ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3740      	adds	r7, #64	; 0x40
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2400000c 	.word	0x2400000c
 80023f8:	58024400 	.word	0x58024400
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	24027bf8 	.word	0x24027bf8
 8002404:	40001000 	.word	0x40001000

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002438:	2001      	movs	r0, #1
 800243a:	f004 fd5a 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <DMA1_Stream0_IRQHandler+0x10>)
 800244a:	f003 f85f 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	24027b34 	.word	0x24027b34

08002458 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA1_Stream1_IRQHandler+0x10>)
 800245e:	f003 f855 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24027368 	.word	0x24027368

0800246c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <DMA1_Stream2_IRQHandler+0x10>)
 8002472:	f003 f84b 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2402760c 	.word	0x2402760c

08002480 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <DMA1_Stream5_IRQHandler+0x10>)
 8002486:	f003 f841 	bl	800550c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	240276c0 	.word	0x240276c0

08002494 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <USART2_IRQHandler+0x10>)
 800249a:	f00a f849 	bl	800c530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	24027960 	.word	0x24027960

080024a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80024ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024b0:	f004 fd1f 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024b8:	f004 fd1b 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80024bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024c0:	f004 fd17 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024c8:	f004 fd13 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80024cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024d0:	f004 fd0f 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80024d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024d8:	f004 fd0b 	bl	8006ef2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM5_IRQHandler+0x10>)
 80024e6:	f008 fdac 	bl	800b042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24027484 	.word	0x24027484

080024f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <SPI3_IRQHandler+0x10>)
 80024fa:	f008 f935 	bl	800a768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2402751c 	.word	0x2402751c

08002508 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <UART4_IRQHandler+0x10>)
 800250e:	f00a f80f 	bl	800c530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	24027838 	.word	0x24027838

0800251c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM6_DAC_IRQHandler+0x10>)
 8002522:	f008 fd8e 	bl	800b042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24027bf8 	.word	0x24027bf8

08002530 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <UART8_IRQHandler+0x10>)
 8002536:	f009 fffb 	bl	800c530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	240277a8 	.word	0x240277a8

08002544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <_sbrk+0x5c>)
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <_sbrk+0x60>)
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <_sbrk+0x64>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002574:	f00f f860 	bl	8011638 <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	e009      	b.n	8002598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <_sbrk+0x64>)
 8002594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	24080000 	.word	0x24080000
 80025a4:	00000400 	.word	0x00000400
 80025a8:	240000ac 	.word	0x240000ac
 80025ac:	24027c98 	.word	0x24027c98

080025b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <SystemInit+0xec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <SystemInit+0xec>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <SystemInit+0xf0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d807      	bhi.n	80025e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <SystemInit+0xf0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <SystemInit+0xf0>)
 80025da:	f043 0307 	orr.w	r3, r3, #7
 80025de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <SystemInit+0xf4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <SystemInit+0xf4>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ec:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <SystemInit+0xf4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <SystemInit+0xf4>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	492b      	ldr	r1, [pc, #172]	; (80026a4 <SystemInit+0xf4>)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <SystemInit+0xf8>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <SystemInit+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <SystemInit+0xf0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 030f 	bic.w	r3, r3, #15
 8002612:	4a23      	ldr	r2, [pc, #140]	; (80026a0 <SystemInit+0xf0>)
 8002614:	f043 0307 	orr.w	r3, r3, #7
 8002618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <SystemInit+0xf4>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <SystemInit+0xf4>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <SystemInit+0xf4>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <SystemInit+0xf4>)
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <SystemInit+0xfc>)
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <SystemInit+0xf4>)
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <SystemInit+0x100>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <SystemInit+0xf4>)
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <SystemInit+0x104>)
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <SystemInit+0xf4>)
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <SystemInit+0xf4>)
 8002646:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <SystemInit+0x104>)
 8002648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <SystemInit+0xf4>)
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <SystemInit+0xf4>)
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <SystemInit+0x104>)
 8002654:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <SystemInit+0xf4>)
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <SystemInit+0xf4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <SystemInit+0xf4>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <SystemInit+0xf4>)
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <SystemInit+0x108>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <SystemInit+0x10c>)
 8002674:	4013      	ands	r3, r2
 8002676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267a:	d202      	bcs.n	8002682 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <SystemInit+0x110>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <SystemInit+0x114>)
 8002684:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <SystemInit+0xec>)
 800268c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002690:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00
 80026a0:	52002000 	.word	0x52002000
 80026a4:	58024400 	.word	0x58024400
 80026a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80026ac:	02020200 	.word	0x02020200
 80026b0:	01ff0000 	.word	0x01ff0000
 80026b4:	01010280 	.word	0x01010280
 80026b8:	5c001000 	.word	0x5c001000
 80026bc:	ffff0000 	.word	0xffff0000
 80026c0:	51008108 	.word	0x51008108
 80026c4:	52004000 	.word	0x52004000

080026c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026cc:	f7ff ff70 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d2:	e003      	b.n	80026dc <LoopCopyDataInit>

080026d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80026d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026da:	3104      	adds	r1, #4

080026dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026dc:	480a      	ldr	r0, [pc, #40]	; (8002708 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80026e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e4:	d3f6      	bcc.n	80026d4 <CopyDataInit>
  ldr  r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80026e8:	e002      	b.n	80026f0 <LoopFillZerobss>

080026ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026ec:	f842 3b04 	str.w	r3, [r2], #4

080026f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f4:	d3f9      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f6:	f00e ffa5 	bl	8011644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7fe fa87 	bl	8000c0c <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002700:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002704:	080123d8 	.word	0x080123d8
  ldr  r0, =_sdata
 8002708:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800270c:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 8002710:	2400007c 	.word	0x2400007c
  ldr  r3, = _ebss
 8002714:	24027c98 	.word	0x24027c98

08002718 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC3_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002722:	2003      	movs	r0, #3
 8002724:	f001 f999 	bl	8003a5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002728:	f005 fa72 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_Init+0x68>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	4913      	ldr	r1, [pc, #76]	; (8002788 <HAL_Init+0x6c>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_Init+0x68>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_Init+0x6c>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	4a0b      	ldr	r2, [pc, #44]	; (800278c <HAL_Init+0x70>)
 800275e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002760:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <HAL_Init+0x74>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fde2 	bl	8002330 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e002      	b.n	800277c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002776:	f7ff f9fb 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	080121f4 	.word	0x080121f4
 800278c:	24000008 	.word	0x24000008
 8002790:	24000004 	.word	0x24000004

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	24000010 	.word	0x24000010
 80027b8:	24027c44 	.word	0x24027c44

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	24027c44 	.word	0x24027c44

080027d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetREVID+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0c1b      	lsrs	r3, r3, #16
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	5c001000 	.word	0x5c001000

080027ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	430b      	orrs	r3, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]
  }
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3330      	adds	r3, #48	; 0x30
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	211f      	movs	r1, #31
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 011f 	and.w	r1, r3, #31
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	431a      	orrs	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3314      	adds	r3, #20
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0e5b      	lsrs	r3, r3, #25
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0d1b      	lsrs	r3, r3, #20
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2107      	movs	r1, #7
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	401a      	ands	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0318 	and.w	r3, r3, #24
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029d0:	40d9      	lsrs	r1, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	400b      	ands	r3, r1
 80029d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029da:	431a      	orrs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	000fffff 	.word	0x000fffff

080029f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6093      	str	r3, [r2, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	5fffffc0 	.word	0x5fffffc0

08002a18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a2c:	d101      	bne.n	8002a32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	6fffffc0 	.word	0x6fffffc0

08002a68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_IsEnabled+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_IsEnabled+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d101      	bne.n	8002ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e18e      	b.n	8002e3c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff f83d 	bl	8001bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff67 	bl	8002a18 <LL_ADC_IsDeepPowerDownEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff4d 	bl	80029f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff82 	bl	8002a68 <LL_ADC_IsInternalRegulatorEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff66 	bl	8002a40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b74:	4b9a      	ldr	r3, [pc, #616]	; (8002de0 <HAL_ADC_Init+0x2dc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	4a9a      	ldr	r2, [pc, #616]	; (8002de4 <HAL_ADC_Init+0x2e0>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b86:	e002      	b.n	8002b8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff65 	bl	8002a68 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff76 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002bca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 8128 	bne.w	8002e2a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8124 	bne.w	8002e2a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff4a 	bl	8002a90 <LL_ADC_IsEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d136      	bne.n	8002c70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a78      	ldr	r2, [pc, #480]	; (8002de8 <HAL_ADC_Init+0x2e4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADC_Init+0x112>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a76      	ldr	r2, [pc, #472]	; (8002dec <HAL_ADC_Init+0x2e8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10e      	bne.n	8002c34 <HAL_ADC_Init+0x130>
 8002c16:	4874      	ldr	r0, [pc, #464]	; (8002de8 <HAL_ADC_Init+0x2e4>)
 8002c18:	f7ff ff3a 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4873      	ldr	r0, [pc, #460]	; (8002dec <HAL_ADC_Init+0x2e8>)
 8002c20:	f7ff ff36 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_Init+0x142>
 8002c34:	486e      	ldr	r0, [pc, #440]	; (8002df0 <HAL_ADC_Init+0x2ec>)
 8002c36:	f7ff ff2b 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a66      	ldr	r2, [pc, #408]	; (8002de8 <HAL_ADC_Init+0x2e4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_Init+0x15a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a64      	ldr	r2, [pc, #400]	; (8002dec <HAL_ADC_Init+0x2e8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Init+0x15e>
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_ADC_Init+0x2f0>)
 8002c60:	e000      	b.n	8002c64 <HAL_ADC_Init+0x160>
 8002c62:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <HAL_ADC_Init+0x2f4>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7ff fdbe 	bl	80027ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c70:	f7ff fdb0 	bl	80027d4 <HAL_GetREVID>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d914      	bls.n	8002ca8 <HAL_ADC_Init+0x1a4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d110      	bne.n	8002ca8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7d5b      	ldrb	r3, [r3, #21]
 8002c8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7f1b      	ldrb	r3, [r3, #28]
 8002c9c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c9e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca0:	f043 030c 	orr.w	r3, r3, #12
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e00d      	b.n	8002cc4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7d5b      	ldrb	r3, [r3, #21]
 8002cac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cb2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cb8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7f1b      	ldrb	r3, [r3, #28]
 8002cbe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7f1b      	ldrb	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	045b      	lsls	r3, r3, #17
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_ADC_Init+0x2f8>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fed1 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fede 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8002d20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d14a      	bne.n	8002dbe <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d147      	bne.n	8002dbe <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7d1b      	ldrb	r3, [r3, #20]
 8002d32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_ADC_Init+0x2fc>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d11b      	bne.n	8002d92 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_ADC_Init+0x300>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0411      	lsls	r1, r2, #16
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d82:	430a      	orrs	r2, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	e007      	b.n	8002da2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fb93 	bl	80034e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d120      	bne.n	8002e08 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f023 010f 	bic.w	r1, r3, #15
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dde:	e01b      	b.n	8002e18 <HAL_ADC_Init+0x314>
 8002de0:	24000004 	.word	0x24000004
 8002de4:	053e2d63 	.word	0x053e2d63
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022100 	.word	0x40022100
 8002df0:	58026000 	.word	0x58026000
 8002df4:	40022300 	.word	0x40022300
 8002df8:	58026300 	.word	0x58026300
 8002dfc:	fff0c003 	.word	0xfff0c003
 8002e00:	ffffbffc 	.word	0xffffbffc
 8002e04:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 020f 	bic.w	r2, r2, #15
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f023 0303 	bic.w	r3, r3, #3
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
 8002e28:	e007      	b.n	8002e3a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3724      	adds	r7, #36	; 0x24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b0a1      	sub	sp, #132	; 0x84
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a9d      	ldr	r2, [pc, #628]	; (80030d4 <HAL_ADC_ConfigChannel+0x290>)
 8002e5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x2a>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e321      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x66e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe1b 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 8306 	bne.w	8003494 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x62>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	e016      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x90>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2201      	movs	r2, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	69d1      	ldr	r1, [r2, #28]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f7ff fd04 	bl	80028fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fddc 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002efe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fde9 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8002f0a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 80b3 	bne.w	800307a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80af 	bne.w	800307a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f7ff fd13 	bl	8002954 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f2e:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_ADC_ConfigChannel+0x294>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x110>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	e01d      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x14c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x136>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	e00a      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x14c>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d027      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa8:	f7ff fc54 	bl	8002854 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	7e5b      	ldrb	r3, [r3, #25]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x17e>
 8002fbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x180>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f7ff fc7e 	bl	80028c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7e1b      	ldrb	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x19c>
 8002fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fde:	e000      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x19e>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f7ff fc56 	bl	8002894 <LL_ADC_SetDataRightShift>
 8002fe8:	e047      	b.n	800307a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d107      	bne.n	800300e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800300c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	069b      	lsls	r3, r3, #26
 800301e:	429a      	cmp	r2, r3
 8003020:	d107      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003030:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	429a      	cmp	r2, r3
 8003044:	d107      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003054:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	429a      	cmp	r2, r3
 8003068:	d107      	bne.n	800307a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003078:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd06 	bl	8002a90 <LL_ADC_IsEnabled>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 820d 	bne.w	80034a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	461a      	mov	r2, r3
 800309a:	f7ff fc87 	bl	80029ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <HAL_ADC_ConfigChannel+0x290>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f040 8133 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d110      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x298>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	bf94      	ite	ls
 80030ca:	2301      	movls	r3, #1
 80030cc:	2300      	movhi	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e01e      	b.n	8003110 <HAL_ADC_ConfigChannel+0x2cc>
 80030d2:	bf00      	nop
 80030d4:	47ff0000 	.word	0x47ff0000
 80030d8:	5c001000 	.word	0x5c001000
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80030ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e003      	b.n	8003100 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80030f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2b09      	cmp	r3, #9
 8003108:	bf94      	ite	ls
 800310a:	2301      	movls	r3, #1
 800310c:	2300      	movhi	r3, #0
 800310e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003110:	2b00      	cmp	r3, #0
 8003112:	d079      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x2ec>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	3301      	adds	r3, #1
 8003128:	069b      	lsls	r3, r3, #26
 800312a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312e:	e015      	b.n	800315c <HAL_ADC_ConfigChannel+0x318>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800313e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800314c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	069b      	lsls	r3, r3, #26
 8003158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_ADC_ConfigChannel+0x338>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	3301      	adds	r3, #1
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	e017      	b.n	80031ac <HAL_ADC_ConfigChannel+0x368>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800318e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e003      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x38e>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	051b      	lsls	r3, r3, #20
 80031d0:	e018      	b.n	8003204 <HAL_ADC_ConfigChannel+0x3c0>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003204:	430b      	orrs	r3, r1
 8003206:	e07e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x3e0>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	3301      	adds	r3, #1
 800321c:	069b      	lsls	r3, r3, #26
 800321e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003222:	e015      	b.n	8003250 <HAL_ADC_ConfigChannel+0x40c>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e003      	b.n	8003248 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x42c>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	3301      	adds	r3, #1
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	e017      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x45c>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	61bb      	str	r3, [r7, #24]
  return result;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e003      	b.n	8003294 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x488>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	3b1e      	subs	r3, #30
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ca:	e01b      	b.n	8003304 <HAL_ADC_ConfigChannel+0x4c0>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	60fb      	str	r3, [r7, #12]
  return result;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 021f 	and.w	r2, r3, #31
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	3b1e      	subs	r3, #30
 80032fe:	051b      	lsls	r3, r3, #20
 8003300:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003304:	430b      	orrs	r3, r1
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	4619      	mov	r1, r3
 800330c:	f7ff fb22 	bl	8002954 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f280 80c6 	bge.w	80034a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a67      	ldr	r2, [pc, #412]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_ADC_ConfigChannel+0x4ea>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x4ee>
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_ADC_ConfigChannel+0x680>)
 8003330:	e000      	b.n	8003334 <HAL_ADC_ConfigChannel+0x4f0>
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_ADC_ConfigChannel+0x684>)
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fa7f 	bl	8002838 <LL_ADC_GetCommonPathInternalCh>
 800333a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5e      	ldr	r2, [pc, #376]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x50c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10e      	bne.n	800336e <HAL_ADC_ConfigChannel+0x52a>
 8003350:	485a      	ldr	r0, [pc, #360]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 8003352:	f7ff fb9d 	bl	8002a90 <LL_ADC_IsEnabled>
 8003356:	4604      	mov	r4, r0
 8003358:	4859      	ldr	r0, [pc, #356]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 800335a:	f7ff fb99 	bl	8002a90 <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	4323      	orrs	r3, r4
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e008      	b.n	8003380 <HAL_ADC_ConfigChannel+0x53c>
 800336e:	4857      	ldr	r0, [pc, #348]	; (80034cc <HAL_ADC_ConfigChannel+0x688>)
 8003370:	f7ff fb8e 	bl	8002a90 <LL_ADC_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d07d      	beq.n	8003480 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_ADC_ConfigChannel+0x68c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d130      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x5ac>
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d12b      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_ADC_ConfigChannel+0x688>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f040 8081 	bne.w	80034a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a44      	ldr	r2, [pc, #272]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0x574>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a43      	ldr	r2, [pc, #268]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x578>
 80033b8:	4a42      	ldr	r2, [pc, #264]	; (80034c4 <HAL_ADC_ConfigChannel+0x680>)
 80033ba:	e000      	b.n	80033be <HAL_ADC_ConfigChannel+0x57a>
 80033bc:	4a42      	ldr	r2, [pc, #264]	; (80034c8 <HAL_ADC_ConfigChannel+0x684>)
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7ff fa23 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_ADC_ConfigChannel+0x690>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_ADC_ConfigChannel+0x694>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ee:	e05a      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a39      	ldr	r2, [pc, #228]	; (80034dc <HAL_ADC_ConfigChannel+0x698>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d11e      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x5f4>
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d119      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a30      	ldr	r2, [pc, #192]	; (80034cc <HAL_ADC_ConfigChannel+0x688>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d14b      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x5de>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x5e2>
 8003422:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <HAL_ADC_ConfigChannel+0x680>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_ConfigChannel+0x5e4>
 8003426:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <HAL_ADC_ConfigChannel+0x684>)
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7ff f9ee 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003436:	e036      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_ADC_ConfigChannel+0x69c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d131      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12c      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_ADC_ConfigChannel+0x688>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d127      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_ADC_ConfigChannel+0x678>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_ADC_ConfigChannel+0x626>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_ADC_ConfigChannel+0x67c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x62a>
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <HAL_ADC_ConfigChannel+0x680>)
 800346c:	e000      	b.n	8003470 <HAL_ADC_ConfigChannel+0x62c>
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_ADC_ConfigChannel+0x684>)
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7ff f9ca 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 800347e:	e012      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003492:	e008      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3784      	adds	r7, #132	; 0x84
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40022100 	.word	0x40022100
 80034c4:	40022300 	.word	0x40022300
 80034c8:	58026300 	.word	0x58026300
 80034cc:	58026000 	.word	0x58026000
 80034d0:	cb840000 	.word	0xcb840000
 80034d4:	24000004 	.word	0x24000004
 80034d8:	053e2d63 	.word	0x053e2d63
 80034dc:	c7520000 	.word	0xc7520000
 80034e0:	cfb80000 	.word	0xcfb80000

080034e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a79      	ldr	r2, [pc, #484]	; (80036d8 <ADC_ConfigureBoostMode+0x1f4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <ADC_ConfigureBoostMode+0x1c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a78      	ldr	r2, [pc, #480]	; (80036dc <ADC_ConfigureBoostMode+0x1f8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d109      	bne.n	8003514 <ADC_ConfigureBoostMode+0x30>
 8003500:	4b77      	ldr	r3, [pc, #476]	; (80036e0 <ADC_ConfigureBoostMode+0x1fc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e008      	b.n	8003526 <ADC_ConfigureBoostMode+0x42>
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <ADC_ConfigureBoostMode+0x200>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01c      	beq.n	8003564 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800352a:	f004 fceb 	bl	8007f04 <HAL_RCC_GetHCLKFreq>
 800352e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003538:	d010      	beq.n	800355c <ADC_ConfigureBoostMode+0x78>
 800353a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800353e:	d871      	bhi.n	8003624 <ADC_ConfigureBoostMode+0x140>
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d002      	beq.n	800354c <ADC_ConfigureBoostMode+0x68>
 8003546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800354a:	d16b      	bne.n	8003624 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	60fb      	str	r3, [r7, #12]
        break;
 800355a:	e066      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	60fb      	str	r3, [r7, #12]
        break;
 8003562:	e062      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003564:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003568:	f005 fcaa 	bl	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800356c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003576:	d051      	beq.n	800361c <ADC_ConfigureBoostMode+0x138>
 8003578:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800357c:	d854      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 800357e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003582:	d047      	beq.n	8003614 <ADC_ConfigureBoostMode+0x130>
 8003584:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003588:	d84e      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 800358a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800358e:	d03d      	beq.n	800360c <ADC_ConfigureBoostMode+0x128>
 8003590:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003594:	d848      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359a:	d033      	beq.n	8003604 <ADC_ConfigureBoostMode+0x120>
 800359c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a0:	d842      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035a6:	d029      	beq.n	80035fc <ADC_ConfigureBoostMode+0x118>
 80035a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035ac:	d83c      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035b2:	d01a      	beq.n	80035ea <ADC_ConfigureBoostMode+0x106>
 80035b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035b8:	d836      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035be:	d014      	beq.n	80035ea <ADC_ConfigureBoostMode+0x106>
 80035c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035c4:	d830      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ca:	d00e      	beq.n	80035ea <ADC_ConfigureBoostMode+0x106>
 80035cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d0:	d82a      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035d6:	d008      	beq.n	80035ea <ADC_ConfigureBoostMode+0x106>
 80035d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035dc:	d824      	bhi.n	8003628 <ADC_ConfigureBoostMode+0x144>
 80035de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e2:	d002      	beq.n	80035ea <ADC_ConfigureBoostMode+0x106>
 80035e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035e8:	d11e      	bne.n	8003628 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
        break;
 80035fa:	e016      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
        break;
 8003602:	e012      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	60fb      	str	r3, [r7, #12]
        break;
 800360a:	e00e      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	60fb      	str	r3, [r7, #12]
        break;
 8003612:	e00a      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	09db      	lsrs	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
        break;
 800361a:	e006      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	60fb      	str	r3, [r7, #12]
        break;
 8003622:	e002      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
        break;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003628:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800362a:	f7ff f8d3 	bl	80027d4 <HAL_GetREVID>
 800362e:	4603      	mov	r3, r0
 8003630:	f241 0203 	movw	r2, #4099	; 0x1003
 8003634:	4293      	cmp	r3, r2
 8003636:	d815      	bhi.n	8003664 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <ADC_ConfigureBoostMode+0x204>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d908      	bls.n	8003652 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003650:	e03e      	b.n	80036d0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003660:	609a      	str	r2, [r3, #8]
}
 8003662:	e035      	b.n	80036d0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <ADC_ConfigureBoostMode+0x208>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d808      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003680:	609a      	str	r2, [r3, #8]
}
 8003682:	e025      	b.n	80036d0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <ADC_ConfigureBoostMode+0x20c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d80a      	bhi.n	80036a2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	e016      	b.n	80036d0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <ADC_ConfigureBoostMode+0x210>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d80a      	bhi.n	80036c0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	e007      	b.n	80036d0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022000 	.word	0x40022000
 80036dc:	40022100 	.word	0x40022100
 80036e0:	40022300 	.word	0x40022300
 80036e4:	58026300 	.word	0x58026300
 80036e8:	01312d00 	.word	0x01312d00
 80036ec:	005f5e10 	.word	0x005f5e10
 80036f0:	00bebc20 	.word	0x00bebc20
 80036f4:	017d7840 	.word	0x017d7840

080036f8 <LL_ADC_IsEnabled>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <LL_ADC_IsEnabled+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_IsEnabled+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_ADC_REG_IsConversionOngoing>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d101      	bne.n	8003736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b09f      	sub	sp, #124	; 0x7c
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e0be      	b.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800376e:	2300      	movs	r3, #0
 8003770:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d102      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800377c:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	e001      	b.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e09d      	b.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ffb9 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80037ac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ffb3 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d17f      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d17c      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a47      	ldr	r2, [pc, #284]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a46      	ldr	r2, [pc, #280]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037da:	e000      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80037dc:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d039      	beq.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a38      	ldr	r2, [pc, #224]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10e      	bne.n	800382c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800380e:	4836      	ldr	r0, [pc, #216]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003810:	f7ff ff72 	bl	80036f8 <LL_ADC_IsEnabled>
 8003814:	4604      	mov	r4, r0
 8003816:	4835      	ldr	r0, [pc, #212]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003818:	f7ff ff6e 	bl	80036f8 <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	4323      	orrs	r3, r4
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800382c:	4832      	ldr	r0, [pc, #200]	; (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800382e:	f7ff ff63 	bl	80036f8 <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d047      	beq.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003848:	4013      	ands	r3, r2
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	430a      	orrs	r2, r1
 8003854:	431a      	orrs	r2, r3
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385a:	e03a      	b.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10e      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800387c:	481a      	ldr	r0, [pc, #104]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800387e:	f7ff ff3b 	bl	80036f8 <LL_ADC_IsEnabled>
 8003882:	4604      	mov	r4, r0
 8003884:	4819      	ldr	r0, [pc, #100]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003886:	f7ff ff37 	bl	80036f8 <LL_ADC_IsEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	4323      	orrs	r3, r4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e008      	b.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800389a:	4817      	ldr	r0, [pc, #92]	; (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800389c:	f7ff ff2c 	bl	80036f8 <LL_ADC_IsEnabled>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038bc:	e009      	b.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038d0:	e000      	b.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	377c      	adds	r7, #124	; 0x7c
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40022100 	.word	0x40022100
 80038f0:	40022300 	.word	0x40022300
 80038f4:	58026300 	.word	0x58026300
 80038f8:	58026000 	.word	0x58026000
 80038fc:	fffff0e0 	.word	0xfffff0e0

08003900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <__NVIC_SetPriorityGrouping+0x40>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800391c:	4013      	ands	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <__NVIC_SetPriorityGrouping+0x44>)
 800392a:	4313      	orrs	r3, r2
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x40>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00
 8003944:	05fa0000 	.word	0x05fa0000

08003948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <__NVIC_GetPriorityGrouping+0x18>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 0307 	and.w	r3, r3, #7
}
 8003956:	4618      	mov	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800396e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	db0b      	blt.n	800398e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	f003 021f 	and.w	r2, r3, #31
 800397c:	4907      	ldr	r1, [pc, #28]	; (800399c <__NVIC_EnableIRQ+0x38>)
 800397e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2001      	movs	r0, #1
 8003986:	fa00 f202 	lsl.w	r2, r0, r2
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000e100 	.word	0xe000e100

080039a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	db0a      	blt.n	80039ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	490c      	ldr	r1, [pc, #48]	; (80039ec <__NVIC_SetPriority+0x4c>)
 80039ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	440b      	add	r3, r1
 80039c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c8:	e00a      	b.n	80039e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4908      	ldr	r1, [pc, #32]	; (80039f0 <__NVIC_SetPriority+0x50>)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	3b04      	subs	r3, #4
 80039d8:	0112      	lsls	r2, r2, #4
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	440b      	add	r3, r1
 80039de:	761a      	strb	r2, [r3, #24]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000e100 	.word	0xe000e100
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	bf28      	it	cs
 8003a12:	2304      	movcs	r3, #4
 8003a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d902      	bls.n	8003a24 <NVIC_EncodePriority+0x30>
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3b03      	subs	r3, #3
 8003a22:	e000      	b.n	8003a26 <NVIC_EncodePriority+0x32>
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43da      	mvns	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	401a      	ands	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43d9      	mvns	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	4313      	orrs	r3, r2
         );
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ff4c 	bl	8003900 <__NVIC_SetPriorityGrouping>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7e:	f7ff ff63 	bl	8003948 <__NVIC_GetPriorityGrouping>
 8003a82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7ff ffb3 	bl	80039f4 <NVIC_EncodePriority>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff82 	bl	80039a0 <__NVIC_SetPriority>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff56 	bl	8003964 <__NVIC_EnableIRQ>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e054      	b.n	8003b7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7f5b      	ldrb	r3, [r3, #29]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f8a8 	bl	8001c38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_CRC_Init+0xc4>)
 8003afc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0218 	bic.w	r2, r2, #24
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	e00c      	b.n	8003b2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f948 	bl	8003db0 <HAL_CRCEx_Polynomial_Set>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e028      	b.n	8003b7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	795b      	ldrb	r3, [r3, #5]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d105      	bne.n	8003b3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	e004      	b.n	8003b48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6912      	ldr	r2, [r2, #16]
 8003b46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	04c11db7 	.word	0x04c11db7

08003b88 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d006      	beq.n	8003bc4 <HAL_CRC_Calculate+0x3c>
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d829      	bhi.n	8003c0e <HAL_CRC_Calculate+0x86>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d019      	beq.n	8003bf2 <HAL_CRC_Calculate+0x6a>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d01e      	beq.n	8003c00 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003bc2:	e024      	b.n	8003c0e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e00a      	b.n	8003be0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3f0      	bcc.n	8003bca <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	e00e      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f812 	bl	8003c20 <CRC_Handle_8>
 8003bfc:	6138      	str	r0, [r7, #16]
      break;
 8003bfe:	e007      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f899 	bl	8003d3c <CRC_Handle_16>
 8003c0a:	6138      	str	r0, [r7, #16]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_CRC_Calculate+0x88>
      break;
 8003c0e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003c16:	693b      	ldr	r3, [r7, #16]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e023      	b.n	8003c7a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4413      	add	r3, r2
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3301      	adds	r3, #1
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	440b      	add	r3, r1
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c4c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	440b      	add	r3, r1
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003c5c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3303      	adds	r3, #3
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	440b      	add	r3, r1
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003c70:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3d6      	bcc.n	8003c32 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04d      	beq.n	8003d2a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d116      	bne.n	8003ce0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b21a      	sxth	r2, r3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	440b      	add	r3, r1
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	8b7a      	ldrh	r2, [r7, #26]
 8003cde:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d11f      	bne.n	8003d2a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	b21a      	sxth	r2, r3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	440b      	add	r3, r1
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	8b7a      	ldrh	r2, [r7, #26]
 8003d16:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3724      	adds	r7, #36	; 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e013      	b.n	8003d76 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	440b      	add	r3, r1
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	4619      	mov	r1, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3301      	adds	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3e6      	bcc.n	8003d4e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003dc0:	231f      	movs	r3, #31
 8003dc2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003dc4:	bf00      	nop
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	613a      	str	r2, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_CRCEx_Polynomial_Set+0x34>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_CRCEx_Polynomial_Set+0x16>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b18      	cmp	r3, #24
 8003de8:	d846      	bhi.n	8003e78 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e7f 	.word	0x08003e7f
 8003df4:	08003e79 	.word	0x08003e79
 8003df8:	08003e79 	.word	0x08003e79
 8003dfc:	08003e79 	.word	0x08003e79
 8003e00:	08003e79 	.word	0x08003e79
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003e79 	.word	0x08003e79
 8003e10:	08003e6d 	.word	0x08003e6d
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003e79 	.word	0x08003e79
 8003e1c:	08003e79 	.word	0x08003e79
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e55 	.word	0x08003e55
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d913      	bls.n	8003e82 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e5e:	e010      	b.n	8003e82 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b07      	cmp	r3, #7
 8003e64:	d90f      	bls.n	8003e86 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e6a:	e00c      	b.n	8003e86 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	d90b      	bls.n	8003e8a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e76:	e008      	b.n	8003e8a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	e006      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e8a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 0118 	bic.w	r1, r3, #24
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7fe fc7a 	bl	80027bc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e316      	b.n	8004502 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a66      	ldr	r2, [pc, #408]	; (8004074 <HAL_DMA_Init+0x1b8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04a      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_DMA_Init+0x1bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d045      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a63      	ldr	r2, [pc, #396]	; (800407c <HAL_DMA_Init+0x1c0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d040      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a62      	ldr	r2, [pc, #392]	; (8004080 <HAL_DMA_Init+0x1c4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d03b      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_DMA_Init+0x1c8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d036      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <HAL_DMA_Init+0x1cc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d031      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a5d      	ldr	r2, [pc, #372]	; (800408c <HAL_DMA_Init+0x1d0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02c      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <HAL_DMA_Init+0x1d4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d027      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5a      	ldr	r2, [pc, #360]	; (8004094 <HAL_DMA_Init+0x1d8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a59      	ldr	r2, [pc, #356]	; (8004098 <HAL_DMA_Init+0x1dc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d01d      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_DMA_Init+0x1e0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a56      	ldr	r2, [pc, #344]	; (80040a0 <HAL_DMA_Init+0x1e4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a54      	ldr	r2, [pc, #336]	; (80040a4 <HAL_DMA_Init+0x1e8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a53      	ldr	r2, [pc, #332]	; (80040a8 <HAL_DMA_Init+0x1ec>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a51      	ldr	r2, [pc, #324]	; (80040ac <HAL_DMA_Init+0x1f0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_DMA_Init+0xb8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a50      	ldr	r2, [pc, #320]	; (80040b0 <HAL_DMA_Init+0x1f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_DMA_Init+0xbc>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_DMA_Init+0xbe>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 813b 	beq.w	80041f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a37      	ldr	r2, [pc, #220]	; (8004074 <HAL_DMA_Init+0x1b8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d04a      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a36      	ldr	r2, [pc, #216]	; (8004078 <HAL_DMA_Init+0x1bc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d045      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_DMA_Init+0x1c0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d040      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a33      	ldr	r2, [pc, #204]	; (8004080 <HAL_DMA_Init+0x1c4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d03b      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a31      	ldr	r2, [pc, #196]	; (8004084 <HAL_DMA_Init+0x1c8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d036      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a30      	ldr	r2, [pc, #192]	; (8004088 <HAL_DMA_Init+0x1cc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d031      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2e      	ldr	r2, [pc, #184]	; (800408c <HAL_DMA_Init+0x1d0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02c      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_DMA_Init+0x1d4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d027      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <HAL_DMA_Init+0x1d8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <HAL_DMA_Init+0x1dc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <HAL_DMA_Init+0x1e0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <HAL_DMA_Init+0x1e4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <HAL_DMA_Init+0x1e8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <HAL_DMA_Init+0x1ec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_Init+0x174>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_DMA_Init+0x1f0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_Init+0x174>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_DMA_Init+0x1f4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <HAL_DMA_Init+0x186>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e007      	b.n	8004052 <HAL_DMA_Init+0x196>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004052:	e02f      	b.n	80040b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004054:	f7fe fbb2 	bl	80027bc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b05      	cmp	r3, #5
 8004060:	d928      	bls.n	80040b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e246      	b.n	8004502 <HAL_DMA_Init+0x646>
 8004074:	40020010 	.word	0x40020010
 8004078:	40020028 	.word	0x40020028
 800407c:	40020040 	.word	0x40020040
 8004080:	40020058 	.word	0x40020058
 8004084:	40020070 	.word	0x40020070
 8004088:	40020088 	.word	0x40020088
 800408c:	400200a0 	.word	0x400200a0
 8004090:	400200b8 	.word	0x400200b8
 8004094:	40020410 	.word	0x40020410
 8004098:	40020428 	.word	0x40020428
 800409c:	40020440 	.word	0x40020440
 80040a0:	40020458 	.word	0x40020458
 80040a4:	40020470 	.word	0x40020470
 80040a8:	40020488 	.word	0x40020488
 80040ac:	400204a0 	.word	0x400204a0
 80040b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1c8      	bne.n	8004054 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4b83      	ldr	r3, [pc, #524]	; (80042dc <HAL_DMA_Init+0x420>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80040da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	4313      	orrs	r3, r2
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004118:	4b71      	ldr	r3, [pc, #452]	; (80042e0 <HAL_DMA_Init+0x424>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <HAL_DMA_Init+0x428>)
 800411e:	4013      	ands	r3, r2
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004124:	d328      	bcc.n	8004178 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b28      	cmp	r3, #40	; 0x28
 800412c:	d903      	bls.n	8004136 <HAL_DMA_Init+0x27a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b2e      	cmp	r3, #46	; 0x2e
 8004134:	d917      	bls.n	8004166 <HAL_DMA_Init+0x2aa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b3e      	cmp	r3, #62	; 0x3e
 800413c:	d903      	bls.n	8004146 <HAL_DMA_Init+0x28a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b42      	cmp	r3, #66	; 0x42
 8004144:	d90f      	bls.n	8004166 <HAL_DMA_Init+0x2aa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b46      	cmp	r3, #70	; 0x46
 800414c:	d903      	bls.n	8004156 <HAL_DMA_Init+0x29a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b48      	cmp	r3, #72	; 0x48
 8004154:	d907      	bls.n	8004166 <HAL_DMA_Init+0x2aa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b4e      	cmp	r3, #78	; 0x4e
 800415c:	d905      	bls.n	800416a <HAL_DMA_Init+0x2ae>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b52      	cmp	r3, #82	; 0x52
 8004164:	d801      	bhi.n	800416a <HAL_DMA_Init+0x2ae>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_DMA_Init+0x2b0>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004176:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d117      	bne.n	80041d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f002 fb31 	bl	800681c <DMA_CheckFifoParam>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e197      	b.n	8004502 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f002 fa6c 	bl	80066b8 <DMA_CalcBaseAndBitshift>
 80041e0:	4603      	mov	r3, r0
 80041e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	223f      	movs	r2, #63	; 0x3f
 80041ee:	409a      	lsls	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	e0cd      	b.n	8004392 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3b      	ldr	r2, [pc, #236]	; (80042e8 <HAL_DMA_Init+0x42c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a39      	ldr	r2, [pc, #228]	; (80042ec <HAL_DMA_Init+0x430>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01d      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <HAL_DMA_Init+0x434>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d018      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a36      	ldr	r2, [pc, #216]	; (80042f4 <HAL_DMA_Init+0x438>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a35      	ldr	r2, [pc, #212]	; (80042f8 <HAL_DMA_Init+0x43c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <HAL_DMA_Init+0x440>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a32      	ldr	r2, [pc, #200]	; (8004300 <HAL_DMA_Init+0x444>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_DMA_Init+0x38a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a30      	ldr	r2, [pc, #192]	; (8004304 <HAL_DMA_Init+0x448>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_DMA_Init+0x38e>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_DMA_Init+0x390>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <HAL_DMA_Init+0x42c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d021      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a22      	ldr	r2, [pc, #136]	; (80042ec <HAL_DMA_Init+0x430>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01c      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <HAL_DMA_Init+0x434>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d017      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <HAL_DMA_Init+0x438>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d012      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <HAL_DMA_Init+0x43c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00d      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_DMA_Init+0x440>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d008      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_DMA_Init+0x444>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_Init+0x3e4>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <HAL_DMA_Init+0x448>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_DMA_Init+0x44c>)
 80042be:	4013      	ands	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d020      	beq.n	800430c <HAL_DMA_Init+0x450>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d102      	bne.n	80042d8 <HAL_DMA_Init+0x41c>
 80042d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042d6:	e01a      	b.n	800430e <HAL_DMA_Init+0x452>
 80042d8:	2300      	movs	r3, #0
 80042da:	e018      	b.n	800430e <HAL_DMA_Init+0x452>
 80042dc:	fe10803f 	.word	0xfe10803f
 80042e0:	5c001000 	.word	0x5c001000
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494
 8004308:	fffe000f 	.word	0xfffe000f
 800430c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68d2      	ldr	r2, [r2, #12]
 8004312:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004314:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800431c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800432c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800433c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	4b6e      	ldr	r3, [pc, #440]	; (800450c <HAL_DMA_Init+0x650>)
 8004354:	4413      	add	r3, r2
 8004356:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_DMA_Init+0x654>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f002 f9a7 	bl	80066b8 <DMA_CalcBaseAndBitshift>
 800436a:	4603      	mov	r3, r0
 800436c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	e008      	b.n	8004392 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0b7      	b.n	8004502 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5f      	ldr	r2, [pc, #380]	; (8004514 <HAL_DMA_Init+0x658>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d072      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a5d      	ldr	r2, [pc, #372]	; (8004518 <HAL_DMA_Init+0x65c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d06d      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5c      	ldr	r2, [pc, #368]	; (800451c <HAL_DMA_Init+0x660>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d068      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_DMA_Init+0x664>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d063      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a59      	ldr	r2, [pc, #356]	; (8004524 <HAL_DMA_Init+0x668>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d05e      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a57      	ldr	r2, [pc, #348]	; (8004528 <HAL_DMA_Init+0x66c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d059      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a56      	ldr	r2, [pc, #344]	; (800452c <HAL_DMA_Init+0x670>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d054      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a54      	ldr	r2, [pc, #336]	; (8004530 <HAL_DMA_Init+0x674>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04f      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a53      	ldr	r2, [pc, #332]	; (8004534 <HAL_DMA_Init+0x678>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_DMA_Init+0x67c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_DMA_Init+0x680>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <HAL_DMA_Init+0x684>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a4d      	ldr	r2, [pc, #308]	; (8004544 <HAL_DMA_Init+0x688>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4b      	ldr	r2, [pc, #300]	; (8004548 <HAL_DMA_Init+0x68c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4a      	ldr	r2, [pc, #296]	; (800454c <HAL_DMA_Init+0x690>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a48      	ldr	r2, [pc, #288]	; (8004550 <HAL_DMA_Init+0x694>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a47      	ldr	r2, [pc, #284]	; (8004554 <HAL_DMA_Init+0x698>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a45      	ldr	r2, [pc, #276]	; (8004558 <HAL_DMA_Init+0x69c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a44      	ldr	r2, [pc, #272]	; (800455c <HAL_DMA_Init+0x6a0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a42      	ldr	r2, [pc, #264]	; (8004560 <HAL_DMA_Init+0x6a4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a41      	ldr	r2, [pc, #260]	; (8004564 <HAL_DMA_Init+0x6a8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_DMA_Init+0x6ac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3e      	ldr	r2, [pc, #248]	; (800456c <HAL_DMA_Init+0x6b0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_Init+0x5c6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3c      	ldr	r2, [pc, #240]	; (8004570 <HAL_DMA_Init+0x6b4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_DMA_Init+0x5ca>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_DMA_Init+0x5cc>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d032      	beq.n	80044f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f002 fa41 	bl	8006914 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d102      	bne.n	80044a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d010      	beq.n	80044e0 <HAL_DMA_Init+0x624>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d80c      	bhi.n	80044e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f002 fabe 	bl	8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	e008      	b.n	80044f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	a7fdabf8 	.word	0xa7fdabf8
 8004510:	cccccccd 	.word	0xcccccccd
 8004514:	40020010 	.word	0x40020010
 8004518:	40020028 	.word	0x40020028
 800451c:	40020040 	.word	0x40020040
 8004520:	40020058 	.word	0x40020058
 8004524:	40020070 	.word	0x40020070
 8004528:	40020088 	.word	0x40020088
 800452c:	400200a0 	.word	0x400200a0
 8004530:	400200b8 	.word	0x400200b8
 8004534:	40020410 	.word	0x40020410
 8004538:	40020428 	.word	0x40020428
 800453c:	40020440 	.word	0x40020440
 8004540:	40020458 	.word	0x40020458
 8004544:	40020470 	.word	0x40020470
 8004548:	40020488 	.word	0x40020488
 800454c:	400204a0 	.word	0x400204a0
 8004550:	400204b8 	.word	0x400204b8
 8004554:	58025408 	.word	0x58025408
 8004558:	5802541c 	.word	0x5802541c
 800455c:	58025430 	.word	0x58025430
 8004560:	58025444 	.word	0x58025444
 8004564:	58025458 	.word	0x58025458
 8004568:	5802546c 	.word	0x5802546c
 800456c:	58025480 	.word	0x58025480
 8004570:	58025494 	.word	0x58025494

08004574 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e226      	b.n	80049de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_DMA_Start_IT+0x2a>
 800459a:	2302      	movs	r3, #2
 800459c:	e21f      	b.n	80049de <HAL_DMA_Start_IT+0x46a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f040 820a 	bne.w	80049c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_DMA_Start_IT+0x1f4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a66      	ldr	r2, [pc, #408]	; (800476c <HAL_DMA_Start_IT+0x1f8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a65      	ldr	r2, [pc, #404]	; (8004770 <HAL_DMA_Start_IT+0x1fc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a63      	ldr	r2, [pc, #396]	; (8004774 <HAL_DMA_Start_IT+0x200>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a62      	ldr	r2, [pc, #392]	; (8004778 <HAL_DMA_Start_IT+0x204>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a60      	ldr	r2, [pc, #384]	; (800477c <HAL_DMA_Start_IT+0x208>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <HAL_DMA_Start_IT+0x20c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5d      	ldr	r2, [pc, #372]	; (8004784 <HAL_DMA_Start_IT+0x210>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5c      	ldr	r2, [pc, #368]	; (8004788 <HAL_DMA_Start_IT+0x214>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5a      	ldr	r2, [pc, #360]	; (800478c <HAL_DMA_Start_IT+0x218>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a59      	ldr	r2, [pc, #356]	; (8004790 <HAL_DMA_Start_IT+0x21c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a57      	ldr	r2, [pc, #348]	; (8004794 <HAL_DMA_Start_IT+0x220>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_DMA_Start_IT+0x224>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a54      	ldr	r2, [pc, #336]	; (800479c <HAL_DMA_Start_IT+0x228>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a53      	ldr	r2, [pc, #332]	; (80047a0 <HAL_DMA_Start_IT+0x22c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_Start_IT+0xee>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a51      	ldr	r2, [pc, #324]	; (80047a4 <HAL_DMA_Start_IT+0x230>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_DMA_Start_IT+0x100>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e007      	b.n	8004684 <HAL_DMA_Start_IT+0x110>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f001 fe68 	bl	8006360 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a34      	ldr	r2, [pc, #208]	; (8004768 <HAL_DMA_Start_IT+0x1f4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d04a      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a33      	ldr	r2, [pc, #204]	; (800476c <HAL_DMA_Start_IT+0x1f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d045      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a31      	ldr	r2, [pc, #196]	; (8004770 <HAL_DMA_Start_IT+0x1fc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d040      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <HAL_DMA_Start_IT+0x200>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d03b      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_DMA_Start_IT+0x204>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d036      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2d      	ldr	r2, [pc, #180]	; (800477c <HAL_DMA_Start_IT+0x208>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d031      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <HAL_DMA_Start_IT+0x20c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02c      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <HAL_DMA_Start_IT+0x210>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d027      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_DMA_Start_IT+0x214>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <HAL_DMA_Start_IT+0x218>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d01d      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a25      	ldr	r2, [pc, #148]	; (8004790 <HAL_DMA_Start_IT+0x21c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a24      	ldr	r2, [pc, #144]	; (8004794 <HAL_DMA_Start_IT+0x220>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <HAL_DMA_Start_IT+0x224>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_DMA_Start_IT+0x228>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <HAL_DMA_Start_IT+0x22c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_DMA_Start_IT+0x1bc>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_DMA_Start_IT+0x230>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_DMA_Start_IT+0x1c0>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_DMA_Start_IT+0x1c2>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d036      	beq.n	80047a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 021e 	bic.w	r2, r3, #30
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0216 	orr.w	r2, r2, #22
 800474c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d03e      	beq.n	80047d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0208 	orr.w	r2, r2, #8
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e035      	b.n	80047d4 <HAL_DMA_Start_IT+0x260>
 8004768:	40020010 	.word	0x40020010
 800476c:	40020028 	.word	0x40020028
 8004770:	40020040 	.word	0x40020040
 8004774:	40020058 	.word	0x40020058
 8004778:	40020070 	.word	0x40020070
 800477c:	40020088 	.word	0x40020088
 8004780:	400200a0 	.word	0x400200a0
 8004784:	400200b8 	.word	0x400200b8
 8004788:	40020410 	.word	0x40020410
 800478c:	40020428 	.word	0x40020428
 8004790:	40020440 	.word	0x40020440
 8004794:	40020458 	.word	0x40020458
 8004798:	40020470 	.word	0x40020470
 800479c:	40020488 	.word	0x40020488
 80047a0:	400204a0 	.word	0x400204a0
 80047a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 020e 	bic.w	r2, r3, #14
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 020a 	orr.w	r2, r2, #10
 80047ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0204 	orr.w	r2, r2, #4
 80047d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a83      	ldr	r2, [pc, #524]	; (80049e8 <HAL_DMA_Start_IT+0x474>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d072      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a82      	ldr	r2, [pc, #520]	; (80049ec <HAL_DMA_Start_IT+0x478>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d06d      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a80      	ldr	r2, [pc, #512]	; (80049f0 <HAL_DMA_Start_IT+0x47c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d068      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a7f      	ldr	r2, [pc, #508]	; (80049f4 <HAL_DMA_Start_IT+0x480>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d063      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a7d      	ldr	r2, [pc, #500]	; (80049f8 <HAL_DMA_Start_IT+0x484>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d05e      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7c      	ldr	r2, [pc, #496]	; (80049fc <HAL_DMA_Start_IT+0x488>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d059      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7a      	ldr	r2, [pc, #488]	; (8004a00 <HAL_DMA_Start_IT+0x48c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d054      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a79      	ldr	r2, [pc, #484]	; (8004a04 <HAL_DMA_Start_IT+0x490>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04f      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <HAL_DMA_Start_IT+0x494>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d04a      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a76      	ldr	r2, [pc, #472]	; (8004a0c <HAL_DMA_Start_IT+0x498>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d045      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a74      	ldr	r2, [pc, #464]	; (8004a10 <HAL_DMA_Start_IT+0x49c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d040      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a73      	ldr	r2, [pc, #460]	; (8004a14 <HAL_DMA_Start_IT+0x4a0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d03b      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a71      	ldr	r2, [pc, #452]	; (8004a18 <HAL_DMA_Start_IT+0x4a4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d036      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a70      	ldr	r2, [pc, #448]	; (8004a1c <HAL_DMA_Start_IT+0x4a8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d031      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <HAL_DMA_Start_IT+0x4ac>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d02c      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <HAL_DMA_Start_IT+0x4b0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d027      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <HAL_DMA_Start_IT+0x4b4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d022      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6a      	ldr	r2, [pc, #424]	; (8004a2c <HAL_DMA_Start_IT+0x4b8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d01d      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	; (8004a30 <HAL_DMA_Start_IT+0x4bc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a67      	ldr	r2, [pc, #412]	; (8004a34 <HAL_DMA_Start_IT+0x4c0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a65      	ldr	r2, [pc, #404]	; (8004a38 <HAL_DMA_Start_IT+0x4c4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a64      	ldr	r2, [pc, #400]	; (8004a3c <HAL_DMA_Start_IT+0x4c8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a62      	ldr	r2, [pc, #392]	; (8004a40 <HAL_DMA_Start_IT+0x4cc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a61      	ldr	r2, [pc, #388]	; (8004a44 <HAL_DMA_Start_IT+0x4d0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_Start_IT+0x354>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_DMA_Start_IT+0x356>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01a      	beq.n	8004904 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a37      	ldr	r2, [pc, #220]	; (80049e8 <HAL_DMA_Start_IT+0x474>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d04a      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a36      	ldr	r2, [pc, #216]	; (80049ec <HAL_DMA_Start_IT+0x478>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d045      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a34      	ldr	r2, [pc, #208]	; (80049f0 <HAL_DMA_Start_IT+0x47c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d040      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a33      	ldr	r2, [pc, #204]	; (80049f4 <HAL_DMA_Start_IT+0x480>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d03b      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <HAL_DMA_Start_IT+0x484>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d036      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a30      	ldr	r2, [pc, #192]	; (80049fc <HAL_DMA_Start_IT+0x488>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d031      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2e      	ldr	r2, [pc, #184]	; (8004a00 <HAL_DMA_Start_IT+0x48c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02c      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <HAL_DMA_Start_IT+0x490>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d027      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_DMA_Start_IT+0x494>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d022      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <HAL_DMA_Start_IT+0x498>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d01d      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <HAL_DMA_Start_IT+0x49c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <HAL_DMA_Start_IT+0x4a0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <HAL_DMA_Start_IT+0x4a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <HAL_DMA_Start_IT+0x4a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <HAL_DMA_Start_IT+0x4ac>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_DMA_Start_IT+0x430>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <HAL_DMA_Start_IT+0x4b0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <HAL_DMA_Start_IT+0x442>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e012      	b.n	80049dc <HAL_DMA_Start_IT+0x468>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e009      	b.n	80049dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	58025408 	.word	0x58025408
 8004a2c:	5802541c 	.word	0x5802541c
 8004a30:	58025430 	.word	0x58025430
 8004a34:	58025444 	.word	0x58025444
 8004a38:	58025458 	.word	0x58025458
 8004a3c:	5802546c 	.word	0x5802546c
 8004a40:	58025480 	.word	0x58025480
 8004a44:	58025494 	.word	0x58025494

08004a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a50:	f7fd feb4 	bl	80027bc <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e2dc      	b.n	800501a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d008      	beq.n	8004a7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e2cd      	b.n	800501a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a76      	ldr	r2, [pc, #472]	; (8004c5c <HAL_DMA_Abort+0x214>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d04a      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a74      	ldr	r2, [pc, #464]	; (8004c60 <HAL_DMA_Abort+0x218>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d045      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a73      	ldr	r2, [pc, #460]	; (8004c64 <HAL_DMA_Abort+0x21c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d040      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a71      	ldr	r2, [pc, #452]	; (8004c68 <HAL_DMA_Abort+0x220>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d03b      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a70      	ldr	r2, [pc, #448]	; (8004c6c <HAL_DMA_Abort+0x224>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d036      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a6e      	ldr	r2, [pc, #440]	; (8004c70 <HAL_DMA_Abort+0x228>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d031      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6d      	ldr	r2, [pc, #436]	; (8004c74 <HAL_DMA_Abort+0x22c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d02c      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6b      	ldr	r2, [pc, #428]	; (8004c78 <HAL_DMA_Abort+0x230>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d027      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6a      	ldr	r2, [pc, #424]	; (8004c7c <HAL_DMA_Abort+0x234>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a68      	ldr	r2, [pc, #416]	; (8004c80 <HAL_DMA_Abort+0x238>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01d      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a67      	ldr	r2, [pc, #412]	; (8004c84 <HAL_DMA_Abort+0x23c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a65      	ldr	r2, [pc, #404]	; (8004c88 <HAL_DMA_Abort+0x240>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a64      	ldr	r2, [pc, #400]	; (8004c8c <HAL_DMA_Abort+0x244>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a62      	ldr	r2, [pc, #392]	; (8004c90 <HAL_DMA_Abort+0x248>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a61      	ldr	r2, [pc, #388]	; (8004c94 <HAL_DMA_Abort+0x24c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_Abort+0xd6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a5f      	ldr	r2, [pc, #380]	; (8004c98 <HAL_DMA_Abort+0x250>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_DMA_Abort+0xda>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_DMA_Abort+0xdc>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 021e 	bic.w	r2, r2, #30
 8004b36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e00a      	b.n	8004b66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 020e 	bic.w	r2, r2, #14
 8004b5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <HAL_DMA_Abort+0x214>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d072      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <HAL_DMA_Abort+0x218>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d06d      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a39      	ldr	r2, [pc, #228]	; (8004c64 <HAL_DMA_Abort+0x21c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d068      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a37      	ldr	r2, [pc, #220]	; (8004c68 <HAL_DMA_Abort+0x220>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d063      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a36      	ldr	r2, [pc, #216]	; (8004c6c <HAL_DMA_Abort+0x224>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d05e      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a34      	ldr	r2, [pc, #208]	; (8004c70 <HAL_DMA_Abort+0x228>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d059      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a33      	ldr	r2, [pc, #204]	; (8004c74 <HAL_DMA_Abort+0x22c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d054      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a31      	ldr	r2, [pc, #196]	; (8004c78 <HAL_DMA_Abort+0x230>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04f      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a30      	ldr	r2, [pc, #192]	; (8004c7c <HAL_DMA_Abort+0x234>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d04a      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <HAL_DMA_Abort+0x238>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d045      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <HAL_DMA_Abort+0x23c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d040      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_DMA_Abort+0x240>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d03b      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <HAL_DMA_Abort+0x244>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d036      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <HAL_DMA_Abort+0x248>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d031      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <HAL_DMA_Abort+0x24c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d02c      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <HAL_DMA_Abort+0x250>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d027      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_DMA_Abort+0x254>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_DMA_Abort+0x258>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_DMA_Abort+0x25c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_DMA_Abort+0x260>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_DMA_Abort+0x264>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_DMA_Abort+0x268>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <HAL_DMA_Abort+0x26c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_DMA_Abort+0x20e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_DMA_Abort+0x270>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d132      	bne.n	8004cbc <HAL_DMA_Abort+0x274>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e031      	b.n	8004cbe <HAL_DMA_Abort+0x276>
 8004c5a:	bf00      	nop
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	58025408 	.word	0x58025408
 8004ca0:	5802541c 	.word	0x5802541c
 8004ca4:	58025430 	.word	0x58025430
 8004ca8:	58025444 	.word	0x58025444
 8004cac:	58025458 	.word	0x58025458
 8004cb0:	5802546c 	.word	0x5802546c
 8004cb4:	58025480 	.word	0x58025480
 8004cb8:	58025494 	.word	0x58025494
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6d      	ldr	r2, [pc, #436]	; (8004e8c <HAL_DMA_Abort+0x444>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d04a      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	; (8004e90 <HAL_DMA_Abort+0x448>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d045      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6a      	ldr	r2, [pc, #424]	; (8004e94 <HAL_DMA_Abort+0x44c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d040      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a68      	ldr	r2, [pc, #416]	; (8004e98 <HAL_DMA_Abort+0x450>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d03b      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a67      	ldr	r2, [pc, #412]	; (8004e9c <HAL_DMA_Abort+0x454>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d036      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a65      	ldr	r2, [pc, #404]	; (8004ea0 <HAL_DMA_Abort+0x458>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d031      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <HAL_DMA_Abort+0x45c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d02c      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a62      	ldr	r2, [pc, #392]	; (8004ea8 <HAL_DMA_Abort+0x460>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d027      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a61      	ldr	r2, [pc, #388]	; (8004eac <HAL_DMA_Abort+0x464>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d022      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_DMA_Abort+0x468>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01d      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	; (8004eb4 <HAL_DMA_Abort+0x46c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d018      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5c      	ldr	r2, [pc, #368]	; (8004eb8 <HAL_DMA_Abort+0x470>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	; (8004ebc <HAL_DMA_Abort+0x474>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a59      	ldr	r2, [pc, #356]	; (8004ec0 <HAL_DMA_Abort+0x478>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d009      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_DMA_Abort+0x47c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_DMA_Abort+0x32a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_DMA_Abort+0x480>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d108      	bne.n	8004d84 <HAL_DMA_Abort+0x33c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <HAL_DMA_Abort+0x34c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d94:	e013      	b.n	8004dbe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d96:	f7fd fd11 	bl	80027bc <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d90c      	bls.n	8004dbe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e12d      	b.n	800501a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <HAL_DMA_Abort+0x444>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2d      	ldr	r2, [pc, #180]	; (8004e90 <HAL_DMA_Abort+0x448>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2c      	ldr	r2, [pc, #176]	; (8004e94 <HAL_DMA_Abort+0x44c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <HAL_DMA_Abort+0x450>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <HAL_DMA_Abort+0x454>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <HAL_DMA_Abort+0x458>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_DMA_Abort+0x45c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <HAL_DMA_Abort+0x460>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a23      	ldr	r2, [pc, #140]	; (8004eac <HAL_DMA_Abort+0x464>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <HAL_DMA_Abort+0x468>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <HAL_DMA_Abort+0x46c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <HAL_DMA_Abort+0x470>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_DMA_Abort+0x474>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_DMA_Abort+0x478>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_DMA_Abort+0x47c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_Abort+0x422>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <HAL_DMA_Abort+0x480>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_DMA_Abort+0x426>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_DMA_Abort+0x428>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02b      	beq.n	8004ecc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	223f      	movs	r2, #63	; 0x3f
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	e02a      	b.n	8004ee2 <HAL_DMA_Abort+0x49a>
 8004e8c:	40020010 	.word	0x40020010
 8004e90:	40020028 	.word	0x40020028
 8004e94:	40020040 	.word	0x40020040
 8004e98:	40020058 	.word	0x40020058
 8004e9c:	40020070 	.word	0x40020070
 8004ea0:	40020088 	.word	0x40020088
 8004ea4:	400200a0 	.word	0x400200a0
 8004ea8:	400200b8 	.word	0x400200b8
 8004eac:	40020410 	.word	0x40020410
 8004eb0:	40020428 	.word	0x40020428
 8004eb4:	40020440 	.word	0x40020440
 8004eb8:	40020458 	.word	0x40020458
 8004ebc:	40020470 	.word	0x40020470
 8004ec0:	40020488 	.word	0x40020488
 8004ec4:	400204a0 	.word	0x400204a0
 8004ec8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2201      	movs	r2, #1
 8004edc:	409a      	lsls	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4f      	ldr	r2, [pc, #316]	; (8005024 <HAL_DMA_Abort+0x5dc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d072      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a4d      	ldr	r2, [pc, #308]	; (8005028 <HAL_DMA_Abort+0x5e0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d06d      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4c      	ldr	r2, [pc, #304]	; (800502c <HAL_DMA_Abort+0x5e4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d068      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a4a      	ldr	r2, [pc, #296]	; (8005030 <HAL_DMA_Abort+0x5e8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d063      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a49      	ldr	r2, [pc, #292]	; (8005034 <HAL_DMA_Abort+0x5ec>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d05e      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a47      	ldr	r2, [pc, #284]	; (8005038 <HAL_DMA_Abort+0x5f0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d059      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a46      	ldr	r2, [pc, #280]	; (800503c <HAL_DMA_Abort+0x5f4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d054      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a44      	ldr	r2, [pc, #272]	; (8005040 <HAL_DMA_Abort+0x5f8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d04f      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a43      	ldr	r2, [pc, #268]	; (8005044 <HAL_DMA_Abort+0x5fc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04a      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a41      	ldr	r2, [pc, #260]	; (8005048 <HAL_DMA_Abort+0x600>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d045      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a40      	ldr	r2, [pc, #256]	; (800504c <HAL_DMA_Abort+0x604>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d040      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3e      	ldr	r2, [pc, #248]	; (8005050 <HAL_DMA_Abort+0x608>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d03b      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a3d      	ldr	r2, [pc, #244]	; (8005054 <HAL_DMA_Abort+0x60c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d036      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <HAL_DMA_Abort+0x610>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d031      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3a      	ldr	r2, [pc, #232]	; (800505c <HAL_DMA_Abort+0x614>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d02c      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a38      	ldr	r2, [pc, #224]	; (8005060 <HAL_DMA_Abort+0x618>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d027      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a37      	ldr	r2, [pc, #220]	; (8005064 <HAL_DMA_Abort+0x61c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a35      	ldr	r2, [pc, #212]	; (8005068 <HAL_DMA_Abort+0x620>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a34      	ldr	r2, [pc, #208]	; (800506c <HAL_DMA_Abort+0x624>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a32      	ldr	r2, [pc, #200]	; (8005070 <HAL_DMA_Abort+0x628>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a31      	ldr	r2, [pc, #196]	; (8005074 <HAL_DMA_Abort+0x62c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	; (8005078 <HAL_DMA_Abort+0x630>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2e      	ldr	r2, [pc, #184]	; (800507c <HAL_DMA_Abort+0x634>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_DMA_Abort+0x58a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <HAL_DMA_Abort+0x638>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_DMA_Abort+0x58e>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_DMA_Abort+0x590>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d015      	beq.n	8005008 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fe4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005006:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	58025408 	.word	0x58025408
 8005068:	5802541c 	.word	0x5802541c
 800506c:	58025430 	.word	0x58025430
 8005070:	58025444 	.word	0x58025444
 8005074:	58025458 	.word	0x58025458
 8005078:	5802546c 	.word	0x5802546c
 800507c:	58025480 	.word	0x58025480
 8005080:	58025494 	.word	0x58025494

08005084 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e205      	b.n	80054a2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d004      	beq.n	80050ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e1fa      	b.n	80054a2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a8c      	ldr	r2, [pc, #560]	; (80052e4 <HAL_DMA_Abort_IT+0x260>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d04a      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a8b      	ldr	r2, [pc, #556]	; (80052e8 <HAL_DMA_Abort_IT+0x264>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d045      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a89      	ldr	r2, [pc, #548]	; (80052ec <HAL_DMA_Abort_IT+0x268>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d040      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a88      	ldr	r2, [pc, #544]	; (80052f0 <HAL_DMA_Abort_IT+0x26c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d03b      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a86      	ldr	r2, [pc, #536]	; (80052f4 <HAL_DMA_Abort_IT+0x270>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d036      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a85      	ldr	r2, [pc, #532]	; (80052f8 <HAL_DMA_Abort_IT+0x274>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d031      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a83      	ldr	r2, [pc, #524]	; (80052fc <HAL_DMA_Abort_IT+0x278>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02c      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a82      	ldr	r2, [pc, #520]	; (8005300 <HAL_DMA_Abort_IT+0x27c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d027      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a80      	ldr	r2, [pc, #512]	; (8005304 <HAL_DMA_Abort_IT+0x280>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7f      	ldr	r2, [pc, #508]	; (8005308 <HAL_DMA_Abort_IT+0x284>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01d      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a7d      	ldr	r2, [pc, #500]	; (800530c <HAL_DMA_Abort_IT+0x288>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7c      	ldr	r2, [pc, #496]	; (8005310 <HAL_DMA_Abort_IT+0x28c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7a      	ldr	r2, [pc, #488]	; (8005314 <HAL_DMA_Abort_IT+0x290>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a79      	ldr	r2, [pc, #484]	; (8005318 <HAL_DMA_Abort_IT+0x294>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a77      	ldr	r2, [pc, #476]	; (800531c <HAL_DMA_Abort_IT+0x298>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_DMA_Abort_IT+0xc8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a76      	ldr	r2, [pc, #472]	; (8005320 <HAL_DMA_Abort_IT+0x29c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d101      	bne.n	8005150 <HAL_DMA_Abort_IT+0xcc>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <HAL_DMA_Abort_IT+0xce>
 8005150:	2300      	movs	r3, #0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d065      	beq.n	8005222 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2204      	movs	r2, #4
 800515a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a60      	ldr	r2, [pc, #384]	; (80052e4 <HAL_DMA_Abort_IT+0x260>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d04a      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5e      	ldr	r2, [pc, #376]	; (80052e8 <HAL_DMA_Abort_IT+0x264>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d045      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_DMA_Abort_IT+0x268>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d040      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5b      	ldr	r2, [pc, #364]	; (80052f0 <HAL_DMA_Abort_IT+0x26c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d03b      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5a      	ldr	r2, [pc, #360]	; (80052f4 <HAL_DMA_Abort_IT+0x270>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d036      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <HAL_DMA_Abort_IT+0x274>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d031      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_DMA_Abort_IT+0x278>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d02c      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a55      	ldr	r2, [pc, #340]	; (8005300 <HAL_DMA_Abort_IT+0x27c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d027      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a54      	ldr	r2, [pc, #336]	; (8005304 <HAL_DMA_Abort_IT+0x280>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d022      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_DMA_Abort_IT+0x284>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01d      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a51      	ldr	r2, [pc, #324]	; (800530c <HAL_DMA_Abort_IT+0x288>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d018      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a4f      	ldr	r2, [pc, #316]	; (8005310 <HAL_DMA_Abort_IT+0x28c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a4e      	ldr	r2, [pc, #312]	; (8005314 <HAL_DMA_Abort_IT+0x290>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a4c      	ldr	r2, [pc, #304]	; (8005318 <HAL_DMA_Abort_IT+0x294>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a4b      	ldr	r2, [pc, #300]	; (800531c <HAL_DMA_Abort_IT+0x298>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_DMA_Abort_IT+0x17a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a49      	ldr	r2, [pc, #292]	; (8005320 <HAL_DMA_Abort_IT+0x29c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <HAL_DMA_Abort_IT+0x18c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e147      	b.n	80054a0 <HAL_DMA_Abort_IT+0x41c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e13e      	b.n	80054a0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 020e 	bic.w	r2, r2, #14
 8005230:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <HAL_DMA_Abort_IT+0x260>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d04a      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_DMA_Abort_IT+0x264>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d045      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a28      	ldr	r2, [pc, #160]	; (80052ec <HAL_DMA_Abort_IT+0x268>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d040      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <HAL_DMA_Abort_IT+0x26c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d03b      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_DMA_Abort_IT+0x270>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d036      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a23      	ldr	r2, [pc, #140]	; (80052f8 <HAL_DMA_Abort_IT+0x274>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d031      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_DMA_Abort_IT+0x278>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d02c      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_DMA_Abort_IT+0x27c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d027      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_DMA_Abort_IT+0x280>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_DMA_Abort_IT+0x284>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01d      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_DMA_Abort_IT+0x288>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_DMA_Abort_IT+0x28c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a19      	ldr	r2, [pc, #100]	; (8005314 <HAL_DMA_Abort_IT+0x290>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_DMA_Abort_IT+0x294>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a16      	ldr	r2, [pc, #88]	; (800531c <HAL_DMA_Abort_IT+0x298>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x24e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <HAL_DMA_Abort_IT+0x29c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d128      	bne.n	8005324 <HAL_DMA_Abort_IT+0x2a0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e027      	b.n	8005334 <HAL_DMA_Abort_IT+0x2b0>
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5c      	ldr	r2, [pc, #368]	; (80054ac <HAL_DMA_Abort_IT+0x428>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d072      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a5b      	ldr	r2, [pc, #364]	; (80054b0 <HAL_DMA_Abort_IT+0x42c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d06d      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a59      	ldr	r2, [pc, #356]	; (80054b4 <HAL_DMA_Abort_IT+0x430>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d068      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a58      	ldr	r2, [pc, #352]	; (80054b8 <HAL_DMA_Abort_IT+0x434>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d063      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a56      	ldr	r2, [pc, #344]	; (80054bc <HAL_DMA_Abort_IT+0x438>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d05e      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a55      	ldr	r2, [pc, #340]	; (80054c0 <HAL_DMA_Abort_IT+0x43c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d059      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a53      	ldr	r2, [pc, #332]	; (80054c4 <HAL_DMA_Abort_IT+0x440>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d054      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_DMA_Abort_IT+0x444>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04f      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a50      	ldr	r2, [pc, #320]	; (80054cc <HAL_DMA_Abort_IT+0x448>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a4f      	ldr	r2, [pc, #316]	; (80054d0 <HAL_DMA_Abort_IT+0x44c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4d      	ldr	r2, [pc, #308]	; (80054d4 <HAL_DMA_Abort_IT+0x450>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4c      	ldr	r2, [pc, #304]	; (80054d8 <HAL_DMA_Abort_IT+0x454>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a4a      	ldr	r2, [pc, #296]	; (80054dc <HAL_DMA_Abort_IT+0x458>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a49      	ldr	r2, [pc, #292]	; (80054e0 <HAL_DMA_Abort_IT+0x45c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a47      	ldr	r2, [pc, #284]	; (80054e4 <HAL_DMA_Abort_IT+0x460>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a46      	ldr	r2, [pc, #280]	; (80054e8 <HAL_DMA_Abort_IT+0x464>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a44      	ldr	r2, [pc, #272]	; (80054ec <HAL_DMA_Abort_IT+0x468>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a43      	ldr	r2, [pc, #268]	; (80054f0 <HAL_DMA_Abort_IT+0x46c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a41      	ldr	r2, [pc, #260]	; (80054f4 <HAL_DMA_Abort_IT+0x470>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a40      	ldr	r2, [pc, #256]	; (80054f8 <HAL_DMA_Abort_IT+0x474>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3e      	ldr	r2, [pc, #248]	; (80054fc <HAL_DMA_Abort_IT+0x478>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a3d      	ldr	r2, [pc, #244]	; (8005500 <HAL_DMA_Abort_IT+0x47c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <HAL_DMA_Abort_IT+0x480>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_Abort_IT+0x3a0>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3a      	ldr	r2, [pc, #232]	; (8005508 <HAL_DMA_Abort_IT+0x484>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Abort_IT+0x3a4>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_DMA_Abort_IT+0x3a6>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d028      	beq.n	8005480 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800545c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005474:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800547e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
 80054ec:	58025408 	.word	0x58025408
 80054f0:	5802541c 	.word	0x5802541c
 80054f4:	58025430 	.word	0x58025430
 80054f8:	58025444 	.word	0x58025444
 80054fc:	58025458 	.word	0x58025458
 8005500:	5802546c 	.word	0x5802546c
 8005504:	58025480 	.word	0x58025480
 8005508:	58025494 	.word	0x58025494

0800550c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005518:	4b67      	ldr	r3, [pc, #412]	; (80056b8 <HAL_DMA_IRQHandler+0x1ac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a67      	ldr	r2, [pc, #412]	; (80056bc <HAL_DMA_IRQHandler+0x1b0>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0a9b      	lsrs	r3, r3, #10
 8005524:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5f      	ldr	r2, [pc, #380]	; (80056c0 <HAL_DMA_IRQHandler+0x1b4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04a      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5d      	ldr	r2, [pc, #372]	; (80056c4 <HAL_DMA_IRQHandler+0x1b8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d045      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a5c      	ldr	r2, [pc, #368]	; (80056c8 <HAL_DMA_IRQHandler+0x1bc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d040      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a5a      	ldr	r2, [pc, #360]	; (80056cc <HAL_DMA_IRQHandler+0x1c0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03b      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a59      	ldr	r2, [pc, #356]	; (80056d0 <HAL_DMA_IRQHandler+0x1c4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d036      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a57      	ldr	r2, [pc, #348]	; (80056d4 <HAL_DMA_IRQHandler+0x1c8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d031      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a56      	ldr	r2, [pc, #344]	; (80056d8 <HAL_DMA_IRQHandler+0x1cc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02c      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a54      	ldr	r2, [pc, #336]	; (80056dc <HAL_DMA_IRQHandler+0x1d0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d027      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a53      	ldr	r2, [pc, #332]	; (80056e0 <HAL_DMA_IRQHandler+0x1d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a51      	ldr	r2, [pc, #324]	; (80056e4 <HAL_DMA_IRQHandler+0x1d8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a50      	ldr	r2, [pc, #320]	; (80056e8 <HAL_DMA_IRQHandler+0x1dc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4e      	ldr	r2, [pc, #312]	; (80056ec <HAL_DMA_IRQHandler+0x1e0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a4d      	ldr	r2, [pc, #308]	; (80056f0 <HAL_DMA_IRQHandler+0x1e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a4b      	ldr	r2, [pc, #300]	; (80056f4 <HAL_DMA_IRQHandler+0x1e8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a4a      	ldr	r2, [pc, #296]	; (80056f8 <HAL_DMA_IRQHandler+0x1ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_DMA_IRQHandler+0xd2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a48      	ldr	r2, [pc, #288]	; (80056fc <HAL_DMA_IRQHandler+0x1f0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <HAL_DMA_IRQHandler+0xd6>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_DMA_IRQHandler+0xd8>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 842b 	beq.w	8005e40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2208      	movs	r2, #8
 80055f4:	409a      	lsls	r2, r3
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80a2 	beq.w	8005744 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2e      	ldr	r2, [pc, #184]	; (80056c0 <HAL_DMA_IRQHandler+0x1b4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d04a      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <HAL_DMA_IRQHandler+0x1b8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d045      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <HAL_DMA_IRQHandler+0x1bc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d040      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <HAL_DMA_IRQHandler+0x1c0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d03b      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a28      	ldr	r2, [pc, #160]	; (80056d0 <HAL_DMA_IRQHandler+0x1c4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d036      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_DMA_IRQHandler+0x1c8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d031      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <HAL_DMA_IRQHandler+0x1cc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02c      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_DMA_IRQHandler+0x1d0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a22      	ldr	r2, [pc, #136]	; (80056e0 <HAL_DMA_IRQHandler+0x1d4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <HAL_DMA_IRQHandler+0x1d8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01d      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <HAL_DMA_IRQHandler+0x1dc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_DMA_IRQHandler+0x1e0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <HAL_DMA_IRQHandler+0x1e4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_DMA_IRQHandler+0x1e8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <HAL_DMA_IRQHandler+0x1ec>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x194>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_DMA_IRQHandler+0x1f0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d12f      	bne.n	8005700 <HAL_DMA_IRQHandler+0x1f4>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e02e      	b.n	8005714 <HAL_DMA_IRQHandler+0x208>
 80056b6:	bf00      	nop
 80056b8:	24000004 	.word	0x24000004
 80056bc:	1b4e81b5 	.word	0x1b4e81b5
 80056c0:	40020010 	.word	0x40020010
 80056c4:	40020028 	.word	0x40020028
 80056c8:	40020040 	.word	0x40020040
 80056cc:	40020058 	.word	0x40020058
 80056d0:	40020070 	.word	0x40020070
 80056d4:	40020088 	.word	0x40020088
 80056d8:	400200a0 	.word	0x400200a0
 80056dc:	400200b8 	.word	0x400200b8
 80056e0:	40020410 	.word	0x40020410
 80056e4:	40020428 	.word	0x40020428
 80056e8:	40020440 	.word	0x40020440
 80056ec:	40020458 	.word	0x40020458
 80056f0:	40020470 	.word	0x40020470
 80056f4:	40020488 	.word	0x40020488
 80056f8:	400204a0 	.word	0x400204a0
 80056fc:	400204b8 	.word	0x400204b8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2208      	movs	r2, #8
 8005732:	409a      	lsls	r2, r3
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06e      	beq.n	8005838 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a69      	ldr	r2, [pc, #420]	; (8005904 <HAL_DMA_IRQHandler+0x3f8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d04a      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a67      	ldr	r2, [pc, #412]	; (8005908 <HAL_DMA_IRQHandler+0x3fc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d045      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a66      	ldr	r2, [pc, #408]	; (800590c <HAL_DMA_IRQHandler+0x400>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d040      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a64      	ldr	r2, [pc, #400]	; (8005910 <HAL_DMA_IRQHandler+0x404>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d03b      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a63      	ldr	r2, [pc, #396]	; (8005914 <HAL_DMA_IRQHandler+0x408>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d036      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a61      	ldr	r2, [pc, #388]	; (8005918 <HAL_DMA_IRQHandler+0x40c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d031      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a60      	ldr	r2, [pc, #384]	; (800591c <HAL_DMA_IRQHandler+0x410>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d02c      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <HAL_DMA_IRQHandler+0x414>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d027      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a5d      	ldr	r2, [pc, #372]	; (8005924 <HAL_DMA_IRQHandler+0x418>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d022      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5b      	ldr	r2, [pc, #364]	; (8005928 <HAL_DMA_IRQHandler+0x41c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01d      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5a      	ldr	r2, [pc, #360]	; (800592c <HAL_DMA_IRQHandler+0x420>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d018      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a58      	ldr	r2, [pc, #352]	; (8005930 <HAL_DMA_IRQHandler+0x424>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a57      	ldr	r2, [pc, #348]	; (8005934 <HAL_DMA_IRQHandler+0x428>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a55      	ldr	r2, [pc, #340]	; (8005938 <HAL_DMA_IRQHandler+0x42c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a54      	ldr	r2, [pc, #336]	; (800593c <HAL_DMA_IRQHandler+0x430>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_DMA_IRQHandler+0x2ee>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a52      	ldr	r2, [pc, #328]	; (8005940 <HAL_DMA_IRQHandler+0x434>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10a      	bne.n	8005810 <HAL_DMA_IRQHandler+0x304>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e003      	b.n	8005818 <HAL_DMA_IRQHandler+0x30c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2201      	movs	r2, #1
 8005826:	409a      	lsls	r2, r3
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0202 	orr.w	r2, r3, #2
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2204      	movs	r2, #4
 8005842:	409a      	lsls	r2, r3
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 808f 	beq.w	800596c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <HAL_DMA_IRQHandler+0x3f8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <HAL_DMA_IRQHandler+0x3fc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_DMA_IRQHandler+0x400>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <HAL_DMA_IRQHandler+0x404>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a26      	ldr	r2, [pc, #152]	; (8005914 <HAL_DMA_IRQHandler+0x408>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a24      	ldr	r2, [pc, #144]	; (8005918 <HAL_DMA_IRQHandler+0x40c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a23      	ldr	r2, [pc, #140]	; (800591c <HAL_DMA_IRQHandler+0x410>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a21      	ldr	r2, [pc, #132]	; (8005920 <HAL_DMA_IRQHandler+0x414>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a20      	ldr	r2, [pc, #128]	; (8005924 <HAL_DMA_IRQHandler+0x418>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <HAL_DMA_IRQHandler+0x41c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_DMA_IRQHandler+0x420>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_DMA_IRQHandler+0x424>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_DMA_IRQHandler+0x428>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_DMA_IRQHandler+0x42c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_DMA_IRQHandler+0x430>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_IRQHandler+0x3e2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_DMA_IRQHandler+0x434>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d12a      	bne.n	8005944 <HAL_DMA_IRQHandler+0x438>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e023      	b.n	800594c <HAL_DMA_IRQHandler+0x440>
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2204      	movs	r2, #4
 800595a:	409a      	lsls	r2, r3
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f043 0204 	orr.w	r2, r3, #4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2210      	movs	r2, #16
 8005976:	409a      	lsls	r2, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a6 	beq.w	8005ace <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a85      	ldr	r2, [pc, #532]	; (8005b9c <HAL_DMA_IRQHandler+0x690>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a83      	ldr	r2, [pc, #524]	; (8005ba0 <HAL_DMA_IRQHandler+0x694>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a82      	ldr	r2, [pc, #520]	; (8005ba4 <HAL_DMA_IRQHandler+0x698>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a80      	ldr	r2, [pc, #512]	; (8005ba8 <HAL_DMA_IRQHandler+0x69c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7f      	ldr	r2, [pc, #508]	; (8005bac <HAL_DMA_IRQHandler+0x6a0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7d      	ldr	r2, [pc, #500]	; (8005bb0 <HAL_DMA_IRQHandler+0x6a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a7c      	ldr	r2, [pc, #496]	; (8005bb4 <HAL_DMA_IRQHandler+0x6a8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7a      	ldr	r2, [pc, #488]	; (8005bb8 <HAL_DMA_IRQHandler+0x6ac>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a79      	ldr	r2, [pc, #484]	; (8005bbc <HAL_DMA_IRQHandler+0x6b0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a77      	ldr	r2, [pc, #476]	; (8005bc0 <HAL_DMA_IRQHandler+0x6b4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a76      	ldr	r2, [pc, #472]	; (8005bc4 <HAL_DMA_IRQHandler+0x6b8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a74      	ldr	r2, [pc, #464]	; (8005bc8 <HAL_DMA_IRQHandler+0x6bc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a73      	ldr	r2, [pc, #460]	; (8005bcc <HAL_DMA_IRQHandler+0x6c0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a71      	ldr	r2, [pc, #452]	; (8005bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a70      	ldr	r2, [pc, #448]	; (8005bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x516>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a6e      	ldr	r2, [pc, #440]	; (8005bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10a      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x52c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e009      	b.n	8005a4c <HAL_DMA_IRQHandler+0x540>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf14      	ite	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	2300      	moveq	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d03e      	beq.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2210      	movs	r2, #16
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d018      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d024      	beq.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
 8005a8c:	e01f      	b.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01b      	beq.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
 8005a9e:	e016      	b.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0208 	bic.w	r2, r2, #8
 8005abc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8110 	beq.w	8005d04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2c      	ldr	r2, [pc, #176]	; (8005b9c <HAL_DMA_IRQHandler+0x690>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d04a      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2b      	ldr	r2, [pc, #172]	; (8005ba0 <HAL_DMA_IRQHandler+0x694>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d045      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_DMA_IRQHandler+0x698>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d040      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_DMA_IRQHandler+0x69c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d03b      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <HAL_DMA_IRQHandler+0x6a0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d036      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a25      	ldr	r2, [pc, #148]	; (8005bb0 <HAL_DMA_IRQHandler+0x6a4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d031      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <HAL_DMA_IRQHandler+0x6a8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02c      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <HAL_DMA_IRQHandler+0x6ac>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d027      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a20      	ldr	r2, [pc, #128]	; (8005bbc <HAL_DMA_IRQHandler+0x6b0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <HAL_DMA_IRQHandler+0x6b4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <HAL_DMA_IRQHandler+0x6b8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_DMA_IRQHandler+0x6bc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <HAL_DMA_IRQHandler+0x6c0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_DMA_IRQHandler+0x6c4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <HAL_DMA_IRQHandler+0x6c8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x678>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <HAL_DMA_IRQHandler+0x6cc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d12b      	bne.n	8005bdc <HAL_DMA_IRQHandler+0x6d0>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bf14      	ite	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2300      	moveq	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	e02a      	b.n	8005bf0 <HAL_DMA_IRQHandler+0x6e4>
 8005b9a:	bf00      	nop
 8005b9c:	40020010 	.word	0x40020010
 8005ba0:	40020028 	.word	0x40020028
 8005ba4:	40020040 	.word	0x40020040
 8005ba8:	40020058 	.word	0x40020058
 8005bac:	40020070 	.word	0x40020070
 8005bb0:	40020088 	.word	0x40020088
 8005bb4:	400200a0 	.word	0x400200a0
 8005bb8:	400200b8 	.word	0x400200b8
 8005bbc:	40020410 	.word	0x40020410
 8005bc0:	40020428 	.word	0x40020428
 8005bc4:	40020440 	.word	0x40020440
 8005bc8:	40020458 	.word	0x40020458
 8005bcc:	40020470 	.word	0x40020470
 8005bd0:	40020488 	.word	0x40020488
 8005bd4:	400204a0 	.word	0x400204a0
 8005bd8:	400204b8 	.word	0x400204b8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8087 	beq.w	8005d04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2220      	movs	r2, #32
 8005c00:	409a      	lsls	r2, r3
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d139      	bne.n	8005c86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0216 	bic.w	r2, r2, #22
 8005c20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x736>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0208 	bic.w	r2, r2, #8
 8005c50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	223f      	movs	r2, #63	; 0x3f
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 834a 	beq.w	8006310 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
          }
          return;
 8005c84:	e344      	b.n	8006310 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02c      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e027      	b.n	8005d04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	e01e      	b.n	8005d04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0210 	bic.w	r2, r2, #16
 8005ce2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8306 	beq.w	800631a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8088 	beq.w	8005e2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a7a      	ldr	r2, [pc, #488]	; (8005f14 <HAL_DMA_IRQHandler+0xa08>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04a      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a79      	ldr	r2, [pc, #484]	; (8005f18 <HAL_DMA_IRQHandler+0xa0c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d045      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a77      	ldr	r2, [pc, #476]	; (8005f1c <HAL_DMA_IRQHandler+0xa10>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d040      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a76      	ldr	r2, [pc, #472]	; (8005f20 <HAL_DMA_IRQHandler+0xa14>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d03b      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a74      	ldr	r2, [pc, #464]	; (8005f24 <HAL_DMA_IRQHandler+0xa18>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d036      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a73      	ldr	r2, [pc, #460]	; (8005f28 <HAL_DMA_IRQHandler+0xa1c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d031      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a71      	ldr	r2, [pc, #452]	; (8005f2c <HAL_DMA_IRQHandler+0xa20>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d02c      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a70      	ldr	r2, [pc, #448]	; (8005f30 <HAL_DMA_IRQHandler+0xa24>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d027      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_DMA_IRQHandler+0xa28>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d022      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a6d      	ldr	r2, [pc, #436]	; (8005f38 <HAL_DMA_IRQHandler+0xa2c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d01d      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6b      	ldr	r2, [pc, #428]	; (8005f3c <HAL_DMA_IRQHandler+0xa30>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6a      	ldr	r2, [pc, #424]	; (8005f40 <HAL_DMA_IRQHandler+0xa34>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a68      	ldr	r2, [pc, #416]	; (8005f44 <HAL_DMA_IRQHandler+0xa38>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a67      	ldr	r2, [pc, #412]	; (8005f48 <HAL_DMA_IRQHandler+0xa3c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a65      	ldr	r2, [pc, #404]	; (8005f4c <HAL_DMA_IRQHandler+0xa40>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x8b8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a64      	ldr	r2, [pc, #400]	; (8005f50 <HAL_DMA_IRQHandler+0xa44>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d108      	bne.n	8005dd6 <HAL_DMA_IRQHandler+0x8ca>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e007      	b.n	8005de6 <HAL_DMA_IRQHandler+0x8da>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d307      	bcc.n	8005e02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f2      	bne.n	8005de6 <HAL_DMA_IRQHandler+0x8da>
 8005e00:	e000      	b.n	8005e04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e02:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e22:	e003      	b.n	8005e2c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8272 	beq.w	800631a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	e26c      	b.n	800631a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a43      	ldr	r2, [pc, #268]	; (8005f54 <HAL_DMA_IRQHandler+0xa48>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a42      	ldr	r2, [pc, #264]	; (8005f58 <HAL_DMA_IRQHandler+0xa4c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01d      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <HAL_DMA_IRQHandler+0xa50>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a3f      	ldr	r2, [pc, #252]	; (8005f60 <HAL_DMA_IRQHandler+0xa54>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a3d      	ldr	r2, [pc, #244]	; (8005f64 <HAL_DMA_IRQHandler+0xa58>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <HAL_DMA_IRQHandler+0xa5c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a3a      	ldr	r2, [pc, #232]	; (8005f6c <HAL_DMA_IRQHandler+0xa60>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x984>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_DMA_IRQHandler+0xa64>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_DMA_IRQHandler+0x988>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_DMA_IRQHandler+0x98a>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 823f 	beq.w	800631a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	2204      	movs	r2, #4
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80cd 	beq.w	8006054 <HAL_DMA_IRQHandler+0xb48>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80c7 	beq.w	8006054 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2204      	movs	r2, #4
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d049      	beq.n	8005f74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8210 	beq.w	8006314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efc:	e20a      	b.n	8006314 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8206 	beq.w	8006314 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f10:	e200      	b.n	8006314 <HAL_DMA_IRQHandler+0xe08>
 8005f12:	bf00      	nop
 8005f14:	40020010 	.word	0x40020010
 8005f18:	40020028 	.word	0x40020028
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	40020058 	.word	0x40020058
 8005f24:	40020070 	.word	0x40020070
 8005f28:	40020088 	.word	0x40020088
 8005f2c:	400200a0 	.word	0x400200a0
 8005f30:	400200b8 	.word	0x400200b8
 8005f34:	40020410 	.word	0x40020410
 8005f38:	40020428 	.word	0x40020428
 8005f3c:	40020440 	.word	0x40020440
 8005f40:	40020458 	.word	0x40020458
 8005f44:	40020470 	.word	0x40020470
 8005f48:	40020488 	.word	0x40020488
 8005f4c:	400204a0 	.word	0x400204a0
 8005f50:	400204b8 	.word	0x400204b8
 8005f54:	58025408 	.word	0x58025408
 8005f58:	5802541c 	.word	0x5802541c
 8005f5c:	58025430 	.word	0x58025430
 8005f60:	58025444 	.word	0x58025444
 8005f64:	58025458 	.word	0x58025458
 8005f68:	5802546c 	.word	0x5802546c
 8005f6c:	58025480 	.word	0x58025480
 8005f70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d160      	bne.n	8006040 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a8c      	ldr	r2, [pc, #560]	; (80061b4 <HAL_DMA_IRQHandler+0xca8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a8a      	ldr	r2, [pc, #552]	; (80061b8 <HAL_DMA_IRQHandler+0xcac>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a89      	ldr	r2, [pc, #548]	; (80061bc <HAL_DMA_IRQHandler+0xcb0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a87      	ldr	r2, [pc, #540]	; (80061c0 <HAL_DMA_IRQHandler+0xcb4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a86      	ldr	r2, [pc, #536]	; (80061c4 <HAL_DMA_IRQHandler+0xcb8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a84      	ldr	r2, [pc, #528]	; (80061c8 <HAL_DMA_IRQHandler+0xcbc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a83      	ldr	r2, [pc, #524]	; (80061cc <HAL_DMA_IRQHandler+0xcc0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a81      	ldr	r2, [pc, #516]	; (80061d0 <HAL_DMA_IRQHandler+0xcc4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a80      	ldr	r2, [pc, #512]	; (80061d4 <HAL_DMA_IRQHandler+0xcc8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7e      	ldr	r2, [pc, #504]	; (80061d8 <HAL_DMA_IRQHandler+0xccc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a7d      	ldr	r2, [pc, #500]	; (80061dc <HAL_DMA_IRQHandler+0xcd0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a7b      	ldr	r2, [pc, #492]	; (80061e0 <HAL_DMA_IRQHandler+0xcd4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_DMA_IRQHandler+0xcd8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a78      	ldr	r2, [pc, #480]	; (80061e8 <HAL_DMA_IRQHandler+0xcdc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a77      	ldr	r2, [pc, #476]	; (80061ec <HAL_DMA_IRQHandler+0xce0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_IRQHandler+0xb12>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a75      	ldr	r2, [pc, #468]	; (80061f0 <HAL_DMA_IRQHandler+0xce4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <HAL_DMA_IRQHandler+0xb24>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0208 	bic.w	r2, r2, #8
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e007      	b.n	8006040 <HAL_DMA_IRQHandler+0xb34>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0204 	bic.w	r2, r2, #4
 800603e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8165 	beq.w	8006314 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006052:	e15f      	b.n	8006314 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	2202      	movs	r2, #2
 800605e:	409a      	lsls	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80c5 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xce8>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80bf 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2202      	movs	r2, #2
 8006080:	409a      	lsls	r2, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d018      	beq.n	80060c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 813a 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ac:	e134      	b.n	8006318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8130 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c0:	e12a      	b.n	8006318 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d168      	bne.n	800619e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a38      	ldr	r2, [pc, #224]	; (80061b4 <HAL_DMA_IRQHandler+0xca8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a37      	ldr	r2, [pc, #220]	; (80061b8 <HAL_DMA_IRQHandler+0xcac>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a35      	ldr	r2, [pc, #212]	; (80061bc <HAL_DMA_IRQHandler+0xcb0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_DMA_IRQHandler+0xcb4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a32      	ldr	r2, [pc, #200]	; (80061c4 <HAL_DMA_IRQHandler+0xcb8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a31      	ldr	r2, [pc, #196]	; (80061c8 <HAL_DMA_IRQHandler+0xcbc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <HAL_DMA_IRQHandler+0xcc0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2e      	ldr	r2, [pc, #184]	; (80061d0 <HAL_DMA_IRQHandler+0xcc4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <HAL_DMA_IRQHandler+0xcc8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2b      	ldr	r2, [pc, #172]	; (80061d8 <HAL_DMA_IRQHandler+0xccc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a29      	ldr	r2, [pc, #164]	; (80061dc <HAL_DMA_IRQHandler+0xcd0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a28      	ldr	r2, [pc, #160]	; (80061e0 <HAL_DMA_IRQHandler+0xcd4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a26      	ldr	r2, [pc, #152]	; (80061e4 <HAL_DMA_IRQHandler+0xcd8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a25      	ldr	r2, [pc, #148]	; (80061e8 <HAL_DMA_IRQHandler+0xcdc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <HAL_DMA_IRQHandler+0xce0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMA_IRQHandler+0xc60>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_DMA_IRQHandler+0xce4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <HAL_DMA_IRQHandler+0xc72>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0214 	bic.w	r2, r2, #20
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e007      	b.n	800618e <HAL_DMA_IRQHandler+0xc82>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 020a 	bic.w	r2, r2, #10
 800618c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80b8 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b0:	e0b2      	b.n	8006318 <HAL_DMA_IRQHandler+0xe0c>
 80061b2:	bf00      	nop
 80061b4:	40020010 	.word	0x40020010
 80061b8:	40020028 	.word	0x40020028
 80061bc:	40020040 	.word	0x40020040
 80061c0:	40020058 	.word	0x40020058
 80061c4:	40020070 	.word	0x40020070
 80061c8:	40020088 	.word	0x40020088
 80061cc:	400200a0 	.word	0x400200a0
 80061d0:	400200b8 	.word	0x400200b8
 80061d4:	40020410 	.word	0x40020410
 80061d8:	40020428 	.word	0x40020428
 80061dc:	40020440 	.word	0x40020440
 80061e0:	40020458 	.word	0x40020458
 80061e4:	40020470 	.word	0x40020470
 80061e8:	40020488 	.word	0x40020488
 80061ec:	400204a0 	.word	0x400204a0
 80061f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2208      	movs	r2, #8
 80061fe:	409a      	lsls	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8088 	beq.w	800631a <HAL_DMA_IRQHandler+0xe0e>
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8082 	beq.w	800631a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a41      	ldr	r2, [pc, #260]	; (8006320 <HAL_DMA_IRQHandler+0xe14>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04a      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3f      	ldr	r2, [pc, #252]	; (8006324 <HAL_DMA_IRQHandler+0xe18>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d045      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3e      	ldr	r2, [pc, #248]	; (8006328 <HAL_DMA_IRQHandler+0xe1c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d040      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3c      	ldr	r2, [pc, #240]	; (800632c <HAL_DMA_IRQHandler+0xe20>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d03b      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3b      	ldr	r2, [pc, #236]	; (8006330 <HAL_DMA_IRQHandler+0xe24>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d036      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a39      	ldr	r2, [pc, #228]	; (8006334 <HAL_DMA_IRQHandler+0xe28>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a38      	ldr	r2, [pc, #224]	; (8006338 <HAL_DMA_IRQHandler+0xe2c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d02c      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a36      	ldr	r2, [pc, #216]	; (800633c <HAL_DMA_IRQHandler+0xe30>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d027      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a35      	ldr	r2, [pc, #212]	; (8006340 <HAL_DMA_IRQHandler+0xe34>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a33      	ldr	r2, [pc, #204]	; (8006344 <HAL_DMA_IRQHandler+0xe38>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01d      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a32      	ldr	r2, [pc, #200]	; (8006348 <HAL_DMA_IRQHandler+0xe3c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a30      	ldr	r2, [pc, #192]	; (800634c <HAL_DMA_IRQHandler+0xe40>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_DMA_IRQHandler+0xe44>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2d      	ldr	r2, [pc, #180]	; (8006354 <HAL_DMA_IRQHandler+0xe48>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <HAL_DMA_IRQHandler+0xe4c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xdaa>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	; (800635c <HAL_DMA_IRQHandler+0xe50>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_DMA_IRQHandler+0xdbc>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 021c 	bic.w	r2, r2, #28
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e007      	b.n	80062d8 <HAL_DMA_IRQHandler+0xdcc>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	e004      	b.n	800631a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006318:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800631a:	3728      	adds	r7, #40	; 0x28
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40020010 	.word	0x40020010
 8006324:	40020028 	.word	0x40020028
 8006328:	40020040 	.word	0x40020040
 800632c:	40020058 	.word	0x40020058
 8006330:	40020070 	.word	0x40020070
 8006334:	40020088 	.word	0x40020088
 8006338:	400200a0 	.word	0x400200a0
 800633c:	400200b8 	.word	0x400200b8
 8006340:	40020410 	.word	0x40020410
 8006344:	40020428 	.word	0x40020428
 8006348:	40020440 	.word	0x40020440
 800634c:	40020458 	.word	0x40020458
 8006350:	40020470 	.word	0x40020470
 8006354:	40020488 	.word	0x40020488
 8006358:	400204a0 	.word	0x400204a0
 800635c:	400204b8 	.word	0x400204b8

08006360 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a84      	ldr	r2, [pc, #528]	; (8006590 <DMA_SetConfig+0x230>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d072      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a82      	ldr	r2, [pc, #520]	; (8006594 <DMA_SetConfig+0x234>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d06d      	beq.n	800646a <DMA_SetConfig+0x10a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a81      	ldr	r2, [pc, #516]	; (8006598 <DMA_SetConfig+0x238>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d068      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7f      	ldr	r2, [pc, #508]	; (800659c <DMA_SetConfig+0x23c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d063      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7e      	ldr	r2, [pc, #504]	; (80065a0 <DMA_SetConfig+0x240>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d05e      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a7c      	ldr	r2, [pc, #496]	; (80065a4 <DMA_SetConfig+0x244>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d059      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7b      	ldr	r2, [pc, #492]	; (80065a8 <DMA_SetConfig+0x248>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d054      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a79      	ldr	r2, [pc, #484]	; (80065ac <DMA_SetConfig+0x24c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04f      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a78      	ldr	r2, [pc, #480]	; (80065b0 <DMA_SetConfig+0x250>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a76      	ldr	r2, [pc, #472]	; (80065b4 <DMA_SetConfig+0x254>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a75      	ldr	r2, [pc, #468]	; (80065b8 <DMA_SetConfig+0x258>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a73      	ldr	r2, [pc, #460]	; (80065bc <DMA_SetConfig+0x25c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a72      	ldr	r2, [pc, #456]	; (80065c0 <DMA_SetConfig+0x260>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <DMA_SetConfig+0x10a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a70      	ldr	r2, [pc, #448]	; (80065c4 <DMA_SetConfig+0x264>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6f      	ldr	r2, [pc, #444]	; (80065c8 <DMA_SetConfig+0x268>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a6d      	ldr	r2, [pc, #436]	; (80065cc <DMA_SetConfig+0x26c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <DMA_SetConfig+0x10a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6c      	ldr	r2, [pc, #432]	; (80065d0 <DMA_SetConfig+0x270>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6a      	ldr	r2, [pc, #424]	; (80065d4 <DMA_SetConfig+0x274>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <DMA_SetConfig+0x10a>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a69      	ldr	r2, [pc, #420]	; (80065d8 <DMA_SetConfig+0x278>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a67      	ldr	r2, [pc, #412]	; (80065dc <DMA_SetConfig+0x27c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a66      	ldr	r2, [pc, #408]	; (80065e0 <DMA_SetConfig+0x280>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <DMA_SetConfig+0x10a>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a64      	ldr	r2, [pc, #400]	; (80065e4 <DMA_SetConfig+0x284>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a63      	ldr	r2, [pc, #396]	; (80065e8 <DMA_SetConfig+0x288>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <DMA_SetConfig+0x10a>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a61      	ldr	r2, [pc, #388]	; (80065ec <DMA_SetConfig+0x28c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <DMA_SetConfig+0x10e>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <DMA_SetConfig+0x110>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00d      	beq.n	8006490 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800647c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800648e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a3e      	ldr	r2, [pc, #248]	; (8006590 <DMA_SetConfig+0x230>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d04a      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a3d      	ldr	r2, [pc, #244]	; (8006594 <DMA_SetConfig+0x234>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d045      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a3b      	ldr	r2, [pc, #236]	; (8006598 <DMA_SetConfig+0x238>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d040      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a3a      	ldr	r2, [pc, #232]	; (800659c <DMA_SetConfig+0x23c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d03b      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a38      	ldr	r2, [pc, #224]	; (80065a0 <DMA_SetConfig+0x240>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d036      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a37      	ldr	r2, [pc, #220]	; (80065a4 <DMA_SetConfig+0x244>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d031      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a35      	ldr	r2, [pc, #212]	; (80065a8 <DMA_SetConfig+0x248>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d02c      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a34      	ldr	r2, [pc, #208]	; (80065ac <DMA_SetConfig+0x24c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d027      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a32      	ldr	r2, [pc, #200]	; (80065b0 <DMA_SetConfig+0x250>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a31      	ldr	r2, [pc, #196]	; (80065b4 <DMA_SetConfig+0x254>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2f      	ldr	r2, [pc, #188]	; (80065b8 <DMA_SetConfig+0x258>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2e      	ldr	r2, [pc, #184]	; (80065bc <DMA_SetConfig+0x25c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <DMA_SetConfig+0x260>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <DMA_SetConfig+0x264>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <DMA_SetConfig+0x268>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <DMA_SetConfig+0x1d0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a28      	ldr	r2, [pc, #160]	; (80065cc <DMA_SetConfig+0x26c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <DMA_SetConfig+0x1d4>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <DMA_SetConfig+0x1d6>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d05a      	beq.n	80065f0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	223f      	movs	r2, #63	; 0x3f
 8006544:	409a      	lsls	r2, r3
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006558:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d108      	bne.n	800657c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800657a:	e087      	b.n	800668c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	60da      	str	r2, [r3, #12]
}
 800658c:	e07e      	b.n	800668c <DMA_SetConfig+0x32c>
 800658e:	bf00      	nop
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	58025408 	.word	0x58025408
 80065d4:	5802541c 	.word	0x5802541c
 80065d8:	58025430 	.word	0x58025430
 80065dc:	58025444 	.word	0x58025444
 80065e0:	58025458 	.word	0x58025458
 80065e4:	5802546c 	.word	0x5802546c
 80065e8:	58025480 	.word	0x58025480
 80065ec:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a28      	ldr	r2, [pc, #160]	; (8006698 <DMA_SetConfig+0x338>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d022      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a27      	ldr	r2, [pc, #156]	; (800669c <DMA_SetConfig+0x33c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d01d      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <DMA_SetConfig+0x340>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <DMA_SetConfig+0x344>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <DMA_SetConfig+0x348>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a21      	ldr	r2, [pc, #132]	; (80066ac <DMA_SetConfig+0x34c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <DMA_SetConfig+0x350>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <DMA_SetConfig+0x2e0>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1e      	ldr	r2, [pc, #120]	; (80066b4 <DMA_SetConfig+0x354>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d101      	bne.n	8006644 <DMA_SetConfig+0x2e4>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <DMA_SetConfig+0x2e6>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d108      	bne.n	800667c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	60da      	str	r2, [r3, #12]
}
 800667a:	e007      	b.n	800668c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	58025408 	.word	0x58025408
 800669c:	5802541c 	.word	0x5802541c
 80066a0:	58025430 	.word	0x58025430
 80066a4:	58025444 	.word	0x58025444
 80066a8:	58025458 	.word	0x58025458
 80066ac:	5802546c 	.word	0x5802546c
 80066b0:	58025480 	.word	0x58025480
 80066b4:	58025494 	.word	0x58025494

080066b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <DMA_CalcBaseAndBitshift+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d04a      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a41      	ldr	r2, [pc, #260]	; (80067d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d045      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <DMA_CalcBaseAndBitshift+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d040      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3e      	ldr	r2, [pc, #248]	; (80067dc <DMA_CalcBaseAndBitshift+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d03b      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3c      	ldr	r2, [pc, #240]	; (80067e0 <DMA_CalcBaseAndBitshift+0x128>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d036      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a3b      	ldr	r2, [pc, #236]	; (80067e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d031      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a39      	ldr	r2, [pc, #228]	; (80067e8 <DMA_CalcBaseAndBitshift+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d02c      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a38      	ldr	r2, [pc, #224]	; (80067ec <DMA_CalcBaseAndBitshift+0x134>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d027      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <DMA_CalcBaseAndBitshift+0x138>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d022      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a35      	ldr	r2, [pc, #212]	; (80067f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d01d      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <DMA_CalcBaseAndBitshift+0x140>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d018      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a32      	ldr	r2, [pc, #200]	; (80067fc <DMA_CalcBaseAndBitshift+0x144>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a30      	ldr	r2, [pc, #192]	; (8006800 <DMA_CalcBaseAndBitshift+0x148>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00e      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2f      	ldr	r2, [pc, #188]	; (8006804 <DMA_CalcBaseAndBitshift+0x14c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d009      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2d      	ldr	r2, [pc, #180]	; (8006808 <DMA_CalcBaseAndBitshift+0x150>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <DMA_CalcBaseAndBitshift+0xa8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2c      	ldr	r2, [pc, #176]	; (800680c <DMA_CalcBaseAndBitshift+0x154>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d101      	bne.n	8006764 <DMA_CalcBaseAndBitshift+0xac>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <DMA_CalcBaseAndBitshift+0xae>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d024      	beq.n	80067b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	3b10      	subs	r3, #16
 8006772:	4a27      	ldr	r2, [pc, #156]	; (8006810 <DMA_CalcBaseAndBitshift+0x158>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	4a24      	ldr	r2, [pc, #144]	; (8006814 <DMA_CalcBaseAndBitshift+0x15c>)
 8006784:	5cd3      	ldrb	r3, [r2, r3]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d908      	bls.n	80067a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <DMA_CalcBaseAndBitshift+0x160>)
 800679a:	4013      	ands	r3, r2
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58
 80067a2:	e00d      	b.n	80067c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <DMA_CalcBaseAndBitshift+0x160>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6593      	str	r3, [r2, #88]	; 0x58
 80067b2:	e005      	b.n	80067c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	aaaaaaab 	.word	0xaaaaaaab
 8006814:	08012204 	.word	0x08012204
 8006818:	fffffc00 	.word	0xfffffc00

0800681c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d120      	bne.n	8006872 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	2b03      	cmp	r3, #3
 8006836:	d858      	bhi.n	80068ea <DMA_CheckFifoParam+0xce>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <DMA_CheckFifoParam+0x24>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006851 	.word	0x08006851
 8006844:	08006863 	.word	0x08006863
 8006848:	08006851 	.word	0x08006851
 800684c:	080068eb 	.word	0x080068eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d048      	beq.n	80068ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006860:	e045      	b.n	80068ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800686a:	d142      	bne.n	80068f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006870:	e03f      	b.n	80068f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687a:	d123      	bne.n	80068c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	2b03      	cmp	r3, #3
 8006882:	d838      	bhi.n	80068f6 <DMA_CheckFifoParam+0xda>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <DMA_CheckFifoParam+0x70>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	0800689d 	.word	0x0800689d
 8006890:	080068a3 	.word	0x080068a3
 8006894:	0800689d 	.word	0x0800689d
 8006898:	080068b5 	.word	0x080068b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
        break;
 80068a0:	e030      	b.n	8006904 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d025      	beq.n	80068fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068b2:	e022      	b.n	80068fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068bc:	d11f      	bne.n	80068fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068c2:	e01c      	b.n	80068fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d902      	bls.n	80068d2 <DMA_CheckFifoParam+0xb6>
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d003      	beq.n	80068d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80068d0:	e018      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
        break;
 80068d6:	e015      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
    break;
 80068e8:	e00b      	b.n	8006902 <DMA_CheckFifoParam+0xe6>
        break;
 80068ea:	bf00      	nop
 80068ec:	e00a      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068ee:	bf00      	nop
 80068f0:	e008      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068f2:	bf00      	nop
 80068f4:	e006      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068f6:	bf00      	nop
 80068f8:	e004      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
        break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <DMA_CheckFifoParam+0xe8>
    break;
 8006902:	bf00      	nop
    }
  }

  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a36      	ldr	r2, [pc, #216]	; (8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a33      	ldr	r2, [pc, #204]	; (8006a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a32      	ldr	r2, [pc, #200]	; (8006a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	3b08      	subs	r3, #8
 8006984:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2201      	movs	r2, #1
 80069aa:	409a      	lsls	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069b0:	e024      	b.n	80069fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	3b10      	subs	r3, #16
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d806      	bhi.n	80069da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d902      	bls.n	80069da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3308      	adds	r3, #8
 80069d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	58025408 	.word	0x58025408
 8006a0c:	5802541c 	.word	0x5802541c
 8006a10:	58025430 	.word	0x58025430
 8006a14:	58025444 	.word	0x58025444
 8006a18:	58025458 	.word	0x58025458
 8006a1c:	5802546c 	.word	0x5802546c
 8006a20:	58025480 	.word	0x58025480
 8006a24:	58025494 	.word	0x58025494
 8006a28:	cccccccd 	.word	0xcccccccd
 8006a2c:	16009600 	.word	0x16009600
 8006a30:	58025880 	.word	0x58025880
 8006a34:	aaaaaaab 	.word	0xaaaaaaab
 8006a38:	400204b8 	.word	0x400204b8
 8006a3c:	4002040f 	.word	0x4002040f
 8006a40:	10008200 	.word	0x10008200
 8006a44:	40020880 	.word	0x40020880

08006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d04a      	beq.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d847      	bhi.n	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a24      	ldr	r2, [pc, #144]	; (8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a22      	ldr	r2, [pc, #136]	; (8006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ad2:	e009      	b.n	8006ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ae6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2201      	movs	r2, #1
 8006aee:	409a      	lsls	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494
 8006b20:	1600963f 	.word	0x1600963f
 8006b24:	58025940 	.word	0x58025940
 8006b28:	1000823f 	.word	0x1000823f
 8006b2c:	40020940 	.word	0x40020940

08006b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b3e:	4b89      	ldr	r3, [pc, #548]	; (8006d64 <HAL_GPIO_Init+0x234>)
 8006b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b42:	e194      	b.n	8006e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8186 	beq.w	8006e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d00b      	beq.n	8006b7c <HAL_GPIO_Init+0x4c>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d007      	beq.n	8006b7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b70:	2b11      	cmp	r3, #17
 8006b72:	d003      	beq.n	8006b7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b12      	cmp	r3, #18
 8006b7a:	d130      	bne.n	8006bde <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	2203      	movs	r2, #3
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4013      	ands	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0201 	and.w	r2, r3, #1
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	2203      	movs	r2, #3
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d003      	beq.n	8006c1e <HAL_GPIO_Init+0xee>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b12      	cmp	r3, #18
 8006c1c:	d123      	bne.n	8006c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	08da      	lsrs	r2, r3, #3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3208      	adds	r2, #8
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	220f      	movs	r2, #15
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	08da      	lsrs	r2, r3, #3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3208      	adds	r2, #8
 8006c60:	69b9      	ldr	r1, [r7, #24]
 8006c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	2203      	movs	r2, #3
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0203 	and.w	r2, r3, #3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80e0 	beq.w	8006e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ca8:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <HAL_GPIO_Init+0x238>)
 8006caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cae:	4a2e      	ldr	r2, [pc, #184]	; (8006d68 <HAL_GPIO_Init+0x238>)
 8006cb0:	f043 0302 	orr.w	r3, r3, #2
 8006cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <HAL_GPIO_Init+0x238>)
 8006cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cc6:	4a29      	ldr	r2, [pc, #164]	; (8006d6c <HAL_GPIO_Init+0x23c>)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	089b      	lsrs	r3, r3, #2
 8006ccc:	3302      	adds	r3, #2
 8006cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	220f      	movs	r2, #15
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <HAL_GPIO_Init+0x240>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d052      	beq.n	8006d98 <HAL_GPIO_Init+0x268>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <HAL_GPIO_Init+0x244>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d031      	beq.n	8006d5e <HAL_GPIO_Init+0x22e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <HAL_GPIO_Init+0x248>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d02b      	beq.n	8006d5a <HAL_GPIO_Init+0x22a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <HAL_GPIO_Init+0x24c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d025      	beq.n	8006d56 <HAL_GPIO_Init+0x226>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <HAL_GPIO_Init+0x250>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01f      	beq.n	8006d52 <HAL_GPIO_Init+0x222>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <HAL_GPIO_Init+0x254>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d019      	beq.n	8006d4e <HAL_GPIO_Init+0x21e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1a      	ldr	r2, [pc, #104]	; (8006d88 <HAL_GPIO_Init+0x258>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_GPIO_Init+0x21a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <HAL_GPIO_Init+0x25c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00d      	beq.n	8006d46 <HAL_GPIO_Init+0x216>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_GPIO_Init+0x260>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d007      	beq.n	8006d42 <HAL_GPIO_Init+0x212>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <HAL_GPIO_Init+0x264>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <HAL_GPIO_Init+0x20e>
 8006d3a:	2309      	movs	r3, #9
 8006d3c:	e02d      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d3e:	230a      	movs	r3, #10
 8006d40:	e02b      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d42:	2308      	movs	r3, #8
 8006d44:	e029      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d46:	2307      	movs	r3, #7
 8006d48:	e027      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d4a:	2306      	movs	r3, #6
 8006d4c:	e025      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d4e:	2305      	movs	r3, #5
 8006d50:	e023      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e021      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d56:	2303      	movs	r3, #3
 8006d58:	e01f      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e01d      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e01b      	b.n	8006d9a <HAL_GPIO_Init+0x26a>
 8006d62:	bf00      	nop
 8006d64:	58000080 	.word	0x58000080
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	58000400 	.word	0x58000400
 8006d70:	58020000 	.word	0x58020000
 8006d74:	58020400 	.word	0x58020400
 8006d78:	58020800 	.word	0x58020800
 8006d7c:	58020c00 	.word	0x58020c00
 8006d80:	58021000 	.word	0x58021000
 8006d84:	58021400 	.word	0x58021400
 8006d88:	58021800 	.word	0x58021800
 8006d8c:	58021c00 	.word	0x58021c00
 8006d90:	58022000 	.word	0x58022000
 8006d94:	58022400 	.word	0x58022400
 8006d98:	2300      	movs	r3, #0
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	f002 0203 	and.w	r2, r2, #3
 8006da0:	0092      	lsls	r2, r2, #2
 8006da2:	4093      	lsls	r3, r2
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006daa:	4938      	ldr	r1, [pc, #224]	; (8006e8c <HAL_GPIO_Init+0x35c>)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4013      	ands	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	43db      	mvns	r3, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f ae63 	bne.w	8006b44 <HAL_GPIO_Init+0x14>
  }
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	3724      	adds	r7, #36	; 0x24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	58000400 	.word	0x58000400

08006e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e001      	b.n	8006eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ed0:	787b      	ldrb	r3, [r7, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006edc:	e003      	b.n	8006ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ede:	887b      	ldrh	r3, [r7, #2]
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	619a      	str	r2, [r3, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	4603      	mov	r3, r0
 8006efa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f804 	bl	8006f26 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006f44:	4b19      	ldr	r3, [pc, #100]	; (8006fac <HAL_PWREx_ConfigSupply+0x70>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d00a      	beq.n	8006f66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f50:	4b16      	ldr	r3, [pc, #88]	; (8006fac <HAL_PWREx_ConfigSupply+0x70>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d001      	beq.n	8006f62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e01f      	b.n	8006fa2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e01d      	b.n	8006fa2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_PWREx_ConfigSupply+0x70>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f023 0207 	bic.w	r2, r3, #7
 8006f6e:	490f      	ldr	r1, [pc, #60]	; (8006fac <HAL_PWREx_ConfigSupply+0x70>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f76:	f7fb fc21 	bl	80027bc <HAL_GetTick>
 8006f7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f7c:	e009      	b.n	8006f92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f7e:	f7fb fc1d 	bl	80027bc <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f8c:	d901      	bls.n	8006f92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e007      	b.n	8006fa2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <HAL_PWREx_ConfigSupply+0x70>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	58024800 	.word	0x58024800

08006fb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e3ff      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8087 	beq.w	80070de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd0:	4b99      	ldr	r3, [pc, #612]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fda:	4b97      	ldr	r3, [pc, #604]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d007      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x46>
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2b18      	cmp	r3, #24
 8006fea:	d110      	bne.n	800700e <HAL_RCC_OscConfig+0x5e>
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d10b      	bne.n	800700e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff6:	4b90      	ldr	r3, [pc, #576]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d06c      	beq.n	80070dc <HAL_RCC_OscConfig+0x12c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d168      	bne.n	80070dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e3d9      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d106      	bne.n	8007026 <HAL_RCC_OscConfig+0x76>
 8007018:	4b87      	ldr	r3, [pc, #540]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a86      	ldr	r2, [pc, #536]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800701e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	e02e      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0x98>
 800702e:	4b82      	ldr	r3, [pc, #520]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a81      	ldr	r2, [pc, #516]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b7f      	ldr	r3, [pc, #508]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a7e      	ldr	r2, [pc, #504]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e01d      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0xbc>
 8007052:	4b79      	ldr	r3, [pc, #484]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a78      	ldr	r2, [pc, #480]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a75      	ldr	r2, [pc, #468]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 800706c:	4b72      	ldr	r3, [pc, #456]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a71      	ldr	r2, [pc, #452]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b6f      	ldr	r3, [pc, #444]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6e      	ldr	r2, [pc, #440]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800707e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fb fb96 	bl	80027bc <HAL_GetTick>
 8007090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007094:	f7fb fb92 	bl	80027bc <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	; 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e38d      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070a6:	4b64      	ldr	r3, [pc, #400]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0xe4>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fb fb82 	bl	80027bc <HAL_GetTick>
 80070b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fb fb7e 	bl	80027bc <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	; 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e379      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070ce:	4b5a      	ldr	r3, [pc, #360]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x10c>
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80ae 	beq.w	8007248 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ec:	4b52      	ldr	r3, [pc, #328]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070f6:	4b50      	ldr	r3, [pc, #320]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <HAL_RCC_OscConfig+0x162>
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	2b18      	cmp	r3, #24
 8007106:	d13a      	bne.n	800717e <HAL_RCC_OscConfig+0x1ce>
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d135      	bne.n	800717e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007112:	4b49      	ldr	r3, [pc, #292]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_RCC_OscConfig+0x17a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e34b      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712a:	f7fb fb53 	bl	80027d4 <HAL_GetREVID>
 800712e:	4603      	mov	r3, r0
 8007130:	f241 0203 	movw	r2, #4099	; 0x1003
 8007134:	4293      	cmp	r3, r2
 8007136:	d817      	bhi.n	8007168 <HAL_RCC_OscConfig+0x1b8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d108      	bne.n	8007152 <HAL_RCC_OscConfig+0x1a2>
 8007140:	4b3d      	ldr	r3, [pc, #244]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007148:	4a3b      	ldr	r2, [pc, #236]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800714e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007150:	e07a      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007152:	4b39      	ldr	r3, [pc, #228]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	031b      	lsls	r3, r3, #12
 8007160:	4935      	ldr	r1, [pc, #212]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007166:	e06f      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007168:	4b33      	ldr	r3, [pc, #204]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	061b      	lsls	r3, r3, #24
 8007176:	4930      	ldr	r1, [pc, #192]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800717c:	e064      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d045      	beq.n	8007212 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007186:	4b2c      	ldr	r3, [pc, #176]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f023 0219 	bic.w	r2, r3, #25
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4929      	ldr	r1, [pc, #164]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fb fb10 	bl	80027bc <HAL_GetTick>
 800719c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071a0:	f7fb fb0c 	bl	80027bc <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e307      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071b2:	4b21      	ldr	r3, [pc, #132]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071be:	f7fb fb09 	bl	80027d4 <HAL_GetREVID>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d817      	bhi.n	80071fc <HAL_RCC_OscConfig+0x24c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d108      	bne.n	80071e6 <HAL_RCC_OscConfig+0x236>
 80071d4:	4b18      	ldr	r3, [pc, #96]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80071dc:	4a16      	ldr	r2, [pc, #88]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	6053      	str	r3, [r2, #4]
 80071e4:	e030      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	031b      	lsls	r3, r3, #12
 80071f4:	4910      	ldr	r1, [pc, #64]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	604b      	str	r3, [r1, #4]
 80071fa:	e025      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	061b      	lsls	r3, r3, #24
 800720a:	490b      	ldr	r1, [pc, #44]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 800720c:	4313      	orrs	r3, r2
 800720e:	604b      	str	r3, [r1, #4]
 8007210:	e01a      	b.n	8007248 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a08      	ldr	r2, [pc, #32]	; (8007238 <HAL_RCC_OscConfig+0x288>)
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7fb facd 	bl	80027bc <HAL_GetTick>
 8007222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007224:	e00a      	b.n	800723c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007226:	f7fb fac9 	bl	80027bc <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d903      	bls.n	800723c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e2c4      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
 8007238:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800723c:	4ba4      	ldr	r3, [pc, #656]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1ee      	bne.n	8007226 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80a9 	beq.w	80073a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007256:	4b9e      	ldr	r3, [pc, #632]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800725e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007260:	4b9b      	ldr	r3, [pc, #620]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d007      	beq.n	800727c <HAL_RCC_OscConfig+0x2cc>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b18      	cmp	r3, #24
 8007270:	d13a      	bne.n	80072e8 <HAL_RCC_OscConfig+0x338>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d135      	bne.n	80072e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800727c:	4b94      	ldr	r3, [pc, #592]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_OscConfig+0x2e4>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d001      	beq.n	8007294 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e296      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007294:	f7fb fa9e 	bl	80027d4 <HAL_GetREVID>
 8007298:	4603      	mov	r3, r0
 800729a:	f241 0203 	movw	r2, #4099	; 0x1003
 800729e:	4293      	cmp	r3, r2
 80072a0:	d817      	bhi.n	80072d2 <HAL_RCC_OscConfig+0x322>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d108      	bne.n	80072bc <HAL_RCC_OscConfig+0x30c>
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072b2:	4a87      	ldr	r2, [pc, #540]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072ba:	e075      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072bc:	4b84      	ldr	r3, [pc, #528]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	069b      	lsls	r3, r3, #26
 80072ca:	4981      	ldr	r1, [pc, #516]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072d0:	e06a      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072d2:	4b7f      	ldr	r3, [pc, #508]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	497b      	ldr	r1, [pc, #492]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072e6:	e05f      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d042      	beq.n	8007376 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072f0:	4b77      	ldr	r3, [pc, #476]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a76      	ldr	r2, [pc, #472]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80072f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fb fa5e 	bl	80027bc <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007304:	f7fb fa5a 	bl	80027bc <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e255      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007316:	4b6e      	ldr	r3, [pc, #440]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007322:	f7fb fa57 	bl	80027d4 <HAL_GetREVID>
 8007326:	4603      	mov	r3, r0
 8007328:	f241 0203 	movw	r2, #4099	; 0x1003
 800732c:	4293      	cmp	r3, r2
 800732e:	d817      	bhi.n	8007360 <HAL_RCC_OscConfig+0x3b0>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	2b20      	cmp	r3, #32
 8007336:	d108      	bne.n	800734a <HAL_RCC_OscConfig+0x39a>
 8007338:	4b65      	ldr	r3, [pc, #404]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007340:	4a63      	ldr	r2, [pc, #396]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	e02e      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
 800734a:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	069b      	lsls	r3, r3, #26
 8007358:	495d      	ldr	r1, [pc, #372]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800735a:	4313      	orrs	r3, r2
 800735c:	604b      	str	r3, [r1, #4]
 800735e:	e023      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
 8007360:	4b5b      	ldr	r3, [pc, #364]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	4958      	ldr	r1, [pc, #352]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007370:	4313      	orrs	r3, r2
 8007372:	60cb      	str	r3, [r1, #12]
 8007374:	e018      	b.n	80073a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007376:	4b56      	ldr	r3, [pc, #344]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a55      	ldr	r2, [pc, #340]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800737c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007382:	f7fb fa1b 	bl	80027bc <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800738a:	f7fb fa17 	bl	80027bc <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e212      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800739c:	4b4c      	ldr	r3, [pc, #304]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f0      	bne.n	800738a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d036      	beq.n	8007422 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d019      	beq.n	80073f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073bc:	4b44      	ldr	r3, [pc, #272]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80073be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c0:	4a43      	ldr	r2, [pc, #268]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fb f9f8 	bl	80027bc <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fb f9f4 	bl	80027bc <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e1ef      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073e2:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80073e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x420>
 80073ee:	e018      	b.n	8007422 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f0:	4b37      	ldr	r3, [pc, #220]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80073f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f4:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fb f9de 	bl	80027bc <HAL_GetTick>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007404:	f7fb f9da 	bl	80027bc <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e1d5      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007416:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d036      	beq.n	800749c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d019      	beq.n	800746a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007436:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800743c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007440:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007442:	f7fb f9bb 	bl	80027bc <HAL_GetTick>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800744a:	f7fb f9b7 	bl	80027bc <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e1b2      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <HAL_RCC_OscConfig+0x49a>
 8007468:	e018      	b.n	800749c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007474:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007476:	f7fb f9a1 	bl	80027bc <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800747e:	f7fb f99d 	bl	80027bc <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e198      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <HAL_RCC_OscConfig+0x520>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8085 	beq.w	80075b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCC_OscConfig+0x524>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <HAL_RCC_OscConfig+0x524>)
 80074b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b6:	f7fb f981 	bl	80027bc <HAL_GetTick>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074bc:	e00c      	b.n	80074d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074be:	f7fb f97d 	bl	80027bc <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b64      	cmp	r3, #100	; 0x64
 80074ca:	d905      	bls.n	80074d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e178      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
 80074d0:	58024400 	.word	0x58024400
 80074d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074d8:	4b96      	ldr	r3, [pc, #600]	; (8007734 <HAL_RCC_OscConfig+0x784>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ec      	beq.n	80074be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d106      	bne.n	80074fa <HAL_RCC_OscConfig+0x54a>
 80074ec:	4b92      	ldr	r3, [pc, #584]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	4a91      	ldr	r2, [pc, #580]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	6713      	str	r3, [r2, #112]	; 0x70
 80074f8:	e02d      	b.n	8007556 <HAL_RCC_OscConfig+0x5a6>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10c      	bne.n	800751c <HAL_RCC_OscConfig+0x56c>
 8007502:	4b8d      	ldr	r3, [pc, #564]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	4a8c      	ldr	r2, [pc, #560]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	6713      	str	r3, [r2, #112]	; 0x70
 800750e:	4b8a      	ldr	r3, [pc, #552]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	4a89      	ldr	r2, [pc, #548]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007514:	f023 0304 	bic.w	r3, r3, #4
 8007518:	6713      	str	r3, [r2, #112]	; 0x70
 800751a:	e01c      	b.n	8007556 <HAL_RCC_OscConfig+0x5a6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b05      	cmp	r3, #5
 8007522:	d10c      	bne.n	800753e <HAL_RCC_OscConfig+0x58e>
 8007524:	4b84      	ldr	r3, [pc, #528]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	4a83      	ldr	r2, [pc, #524]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800752a:	f043 0304 	orr.w	r3, r3, #4
 800752e:	6713      	str	r3, [r2, #112]	; 0x70
 8007530:	4b81      	ldr	r3, [pc, #516]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	4a80      	ldr	r2, [pc, #512]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	6713      	str	r3, [r2, #112]	; 0x70
 800753c:	e00b      	b.n	8007556 <HAL_RCC_OscConfig+0x5a6>
 800753e:	4b7e      	ldr	r3, [pc, #504]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	4a7d      	ldr	r2, [pc, #500]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	6713      	str	r3, [r2, #112]	; 0x70
 800754a:	4b7b      	ldr	r3, [pc, #492]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754e:	4a7a      	ldr	r2, [pc, #488]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007550:	f023 0304 	bic.w	r3, r3, #4
 8007554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755e:	f7fb f92d 	bl	80027bc <HAL_GetTick>
 8007562:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007564:	e00a      	b.n	800757c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fb f929 	bl	80027bc <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	; 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e122      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800757c:	4b6e      	ldr	r3, [pc, #440]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0ee      	beq.n	8007566 <HAL_RCC_OscConfig+0x5b6>
 8007588:	e014      	b.n	80075b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758a:	f7fb f917 	bl	80027bc <HAL_GetTick>
 800758e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007590:	e00a      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007592:	f7fb f913 	bl	80027bc <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e10c      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075a8:	4b63      	ldr	r3, [pc, #396]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ee      	bne.n	8007592 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8101 	beq.w	80077c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075be:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c6:	2b18      	cmp	r3, #24
 80075c8:	f000 80bc 	beq.w	8007744 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	f040 8095 	bne.w	8007700 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d6:	4b58      	ldr	r3, [pc, #352]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a57      	ldr	r2, [pc, #348]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80075dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e2:	f7fb f8eb 	bl	80027bc <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ea:	f7fb f8e7 	bl	80027bc <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e0e2      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075fc:	4b4e      	ldr	r3, [pc, #312]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f0      	bne.n	80075ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007608:	4b4b      	ldr	r3, [pc, #300]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800760a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800760c:	4b4b      	ldr	r3, [pc, #300]	; (800773c <HAL_RCC_OscConfig+0x78c>)
 800760e:	4013      	ands	r3, r2
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007618:	0112      	lsls	r2, r2, #4
 800761a:	430a      	orrs	r2, r1
 800761c:	4946      	ldr	r1, [pc, #280]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800761e:	4313      	orrs	r3, r2
 8007620:	628b      	str	r3, [r1, #40]	; 0x28
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	3b01      	subs	r3, #1
 8007628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007630:	3b01      	subs	r3, #1
 8007632:	025b      	lsls	r3, r3, #9
 8007634:	b29b      	uxth	r3, r3
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	3b01      	subs	r3, #1
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	3b01      	subs	r3, #1
 800764c:	061b      	lsls	r3, r3, #24
 800764e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007652:	4939      	ldr	r1, [pc, #228]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007654:	4313      	orrs	r3, r2
 8007656:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007658:	4b37      	ldr	r3, [pc, #220]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4a36      	ldr	r2, [pc, #216]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007664:	4b34      	ldr	r3, [pc, #208]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007668:	4b35      	ldr	r3, [pc, #212]	; (8007740 <HAL_RCC_OscConfig+0x790>)
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007670:	00d2      	lsls	r2, r2, #3
 8007672:	4931      	ldr	r1, [pc, #196]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007674:	4313      	orrs	r3, r2
 8007676:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007678:	4b2f      	ldr	r3, [pc, #188]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f023 020c 	bic.w	r2, r3, #12
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	492c      	ldr	r1, [pc, #176]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007686:	4313      	orrs	r3, r2
 8007688:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800768a:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	f023 0202 	bic.w	r2, r3, #2
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	4928      	ldr	r1, [pc, #160]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007698:	4313      	orrs	r3, r2
 800769a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800769c:	4b26      	ldr	r3, [pc, #152]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	4a25      	ldr	r2, [pc, #148]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a8:	4b23      	ldr	r3, [pc, #140]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a22      	ldr	r2, [pc, #136]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80076c0:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a19      	ldr	r2, [pc, #100]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fb f870 	bl	80027bc <HAL_GetTick>
 80076dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e0:	f7fb f86c 	bl	80027bc <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e067      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x730>
 80076fe:	e05f      	b.n	80077c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a0c      	ldr	r2, [pc, #48]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800770a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fb f856 	bl	80027bc <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007714:	f7fb f852 	bl	80027bc <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e04d      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007726:	4b04      	ldr	r3, [pc, #16]	; (8007738 <HAL_RCC_OscConfig+0x788>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x764>
 8007732:	e045      	b.n	80077c0 <HAL_RCC_OscConfig+0x810>
 8007734:	58024800 	.word	0x58024800
 8007738:	58024400 	.word	0x58024400
 800773c:	fffffc0c 	.word	0xfffffc0c
 8007740:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007744:	4b21      	ldr	r3, [pc, #132]	; (80077cc <HAL_RCC_OscConfig+0x81c>)
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800774a:	4b20      	ldr	r3, [pc, #128]	; (80077cc <HAL_RCC_OscConfig+0x81c>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b01      	cmp	r3, #1
 8007756:	d031      	beq.n	80077bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f003 0203 	and.w	r2, r3, #3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007762:	429a      	cmp	r2, r3
 8007764:	d12a      	bne.n	80077bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	091b      	lsrs	r3, r3, #4
 800776a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d122      	bne.n	80077bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007782:	429a      	cmp	r2, r3
 8007784:	d11a      	bne.n	80077bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	0a5b      	lsrs	r3, r3, #9
 800778a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007792:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d111      	bne.n	80077bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	0c1b      	lsrs	r3, r3, #16
 800779c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d108      	bne.n	80077bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3730      	adds	r7, #48	; 0x30
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400

080077d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e19c      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077e4:	4b8a      	ldr	r3, [pc, #552]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d910      	bls.n	8007814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f2:	4b87      	ldr	r3, [pc, #540]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f023 020f 	bic.w	r2, r3, #15
 80077fa:	4985      	ldr	r1, [pc, #532]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	4313      	orrs	r3, r2
 8007800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007802:	4b83      	ldr	r3, [pc, #524]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d001      	beq.n	8007814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e184      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	4b7b      	ldr	r3, [pc, #492]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800782c:	429a      	cmp	r2, r3
 800782e:	d908      	bls.n	8007842 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007830:	4b78      	ldr	r3, [pc, #480]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4975      	ldr	r1, [pc, #468]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800783e:	4313      	orrs	r3, r2
 8007840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695a      	ldr	r2, [r3, #20]
 8007852:	4b70      	ldr	r3, [pc, #448]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800785a:	429a      	cmp	r2, r3
 800785c:	d908      	bls.n	8007870 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800785e:	4b6d      	ldr	r3, [pc, #436]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	496a      	ldr	r1, [pc, #424]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800786c:	4313      	orrs	r3, r2
 800786e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	4b64      	ldr	r3, [pc, #400]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007888:	429a      	cmp	r2, r3
 800788a:	d908      	bls.n	800789e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800788c:	4b61      	ldr	r3, [pc, #388]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	495e      	ldr	r1, [pc, #376]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800789a:	4313      	orrs	r3, r2
 800789c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d010      	beq.n	80078cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	4b59      	ldr	r3, [pc, #356]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d908      	bls.n	80078cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078ba:	4b56      	ldr	r3, [pc, #344]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	4953      	ldr	r1, [pc, #332]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d010      	beq.n	80078fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	4b4d      	ldr	r3, [pc, #308]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d908      	bls.n	80078fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e8:	4b4a      	ldr	r3, [pc, #296]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f023 020f 	bic.w	r2, r3, #15
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4947      	ldr	r1, [pc, #284]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d055      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007906:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	4940      	ldr	r1, [pc, #256]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007914:	4313      	orrs	r3, r2
 8007916:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d107      	bne.n	8007930 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007920:	4b3c      	ldr	r3, [pc, #240]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d121      	bne.n	8007970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e0f6      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d107      	bne.n	8007948 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d115      	bne.n	8007970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0ea      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d107      	bne.n	8007960 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007950:	4b30      	ldr	r3, [pc, #192]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d109      	bne.n	8007970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e0de      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007960:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0d6      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f023 0207 	bic.w	r2, r3, #7
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4925      	ldr	r1, [pc, #148]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 800797e:	4313      	orrs	r3, r2
 8007980:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007982:	f7fa ff1b 	bl	80027bc <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007988:	e00a      	b.n	80079a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800798a:	f7fa ff17 	bl	80027bc <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e0be      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a0:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d1eb      	bne.n	800798a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d010      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d208      	bcs.n	80079e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f023 020f 	bic.w	r2, r3, #15
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	490e      	ldr	r1, [pc, #56]	; (8007a14 <HAL_RCC_ClockConfig+0x244>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d214      	bcs.n	8007a18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ee:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f023 020f 	bic.w	r2, r3, #15
 80079f6:	4906      	ldr	r1, [pc, #24]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <HAL_RCC_ClockConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d005      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e086      	b.n	8007b1e <HAL_RCC_ClockConfig+0x34e>
 8007a10:	52002000 	.word	0x52002000
 8007a14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d010      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	4b3f      	ldr	r3, [pc, #252]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d208      	bcs.n	8007a46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a34:	4b3c      	ldr	r3, [pc, #240]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	4939      	ldr	r1, [pc, #228]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695a      	ldr	r2, [r3, #20]
 8007a56:	4b34      	ldr	r3, [pc, #208]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d208      	bcs.n	8007a74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a62:	4b31      	ldr	r3, [pc, #196]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	492e      	ldr	r1, [pc, #184]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	4b28      	ldr	r3, [pc, #160]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d208      	bcs.n	8007aa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	4922      	ldr	r1, [pc, #136]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d010      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69da      	ldr	r2, [r3, #28]
 8007ab2:	4b1d      	ldr	r3, [pc, #116]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d208      	bcs.n	8007ad0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	4917      	ldr	r1, [pc, #92]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ad0:	f000 f89e 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	4912      	ldr	r1, [pc, #72]	; (8007b2c <HAL_RCC_ClockConfig+0x35c>)
 8007ae2:	5ccb      	ldrb	r3, [r1, r3]
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <HAL_RCC_ClockConfig+0x358>)
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <HAL_RCC_ClockConfig+0x35c>)
 8007af8:	5cd3      	ldrb	r3, [r2, r3]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_RCC_ClockConfig+0x360>)
 8007b06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b08:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <HAL_RCC_ClockConfig+0x364>)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <HAL_RCC_ClockConfig+0x368>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fa fc0c 	bl	8002330 <HAL_InitTick>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	080121f4 	.word	0x080121f4
 8007b30:	24000008 	.word	0x24000008
 8007b34:	24000004 	.word	0x24000004
 8007b38:	2400000c 	.word	0x2400000c

08007b3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08c      	sub	sp, #48	; 0x30
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d12a      	bne.n	8007ba4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007b4e:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b54:	4a2b      	ldr	r2, [pc, #172]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b5e:	4b29      	ldr	r3, [pc, #164]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b72:	2302      	movs	r3, #2
 8007b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b76:	2303      	movs	r3, #3
 8007b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007b82:	f107 031c 	add.w	r3, r7, #28
 8007b86:	4619      	mov	r1, r3
 8007b88:	481f      	ldr	r0, [pc, #124]	; (8007c08 <HAL_RCC_MCOConfig+0xcc>)
 8007b8a:	f7fe ffd1 	bl	8006b30 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	4919      	ldr	r1, [pc, #100]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007ba2:	e02a      	b.n	8007bfa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007ba4:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007baa:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007bac:	f043 0304 	orr.w	r3, r3, #4
 8007bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bb4:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007bd8:	f107 031c 	add.w	r3, r7, #28
 8007bdc:	4619      	mov	r1, r3
 8007bde:	480b      	ldr	r0, [pc, #44]	; (8007c0c <HAL_RCC_MCOConfig+0xd0>)
 8007be0:	f7fe ffa6 	bl	8006b30 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	01d9      	lsls	r1, r3, #7
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	4903      	ldr	r1, [pc, #12]	; (8007c04 <HAL_RCC_MCOConfig+0xc8>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	610b      	str	r3, [r1, #16]
}
 8007bfa:	bf00      	nop
 8007bfc:	3730      	adds	r7, #48	; 0x30
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	58024400 	.word	0x58024400
 8007c08:	58020000 	.word	0x58020000
 8007c0c:	58020800 	.word	0x58020800

08007c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	; 0x24
 8007c14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c16:	4bb3      	ldr	r3, [pc, #716]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c1e:	2b18      	cmp	r3, #24
 8007c20:	f200 8155 	bhi.w	8007ece <HAL_RCC_GetSysClockFreq+0x2be>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c91 	.word	0x08007c91
 8007c30:	08007ecf 	.word	0x08007ecf
 8007c34:	08007ecf 	.word	0x08007ecf
 8007c38:	08007ecf 	.word	0x08007ecf
 8007c3c:	08007ecf 	.word	0x08007ecf
 8007c40:	08007ecf 	.word	0x08007ecf
 8007c44:	08007ecf 	.word	0x08007ecf
 8007c48:	08007ecf 	.word	0x08007ecf
 8007c4c:	08007cb7 	.word	0x08007cb7
 8007c50:	08007ecf 	.word	0x08007ecf
 8007c54:	08007ecf 	.word	0x08007ecf
 8007c58:	08007ecf 	.word	0x08007ecf
 8007c5c:	08007ecf 	.word	0x08007ecf
 8007c60:	08007ecf 	.word	0x08007ecf
 8007c64:	08007ecf 	.word	0x08007ecf
 8007c68:	08007ecf 	.word	0x08007ecf
 8007c6c:	08007cbd 	.word	0x08007cbd
 8007c70:	08007ecf 	.word	0x08007ecf
 8007c74:	08007ecf 	.word	0x08007ecf
 8007c78:	08007ecf 	.word	0x08007ecf
 8007c7c:	08007ecf 	.word	0x08007ecf
 8007c80:	08007ecf 	.word	0x08007ecf
 8007c84:	08007ecf 	.word	0x08007ecf
 8007c88:	08007ecf 	.word	0x08007ecf
 8007c8c:	08007cc3 	.word	0x08007cc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c90:	4b94      	ldr	r3, [pc, #592]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c9c:	4b91      	ldr	r3, [pc, #580]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a90      	ldr	r2, [pc, #576]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007cae:	e111      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007cb0:	4b8d      	ldr	r3, [pc, #564]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cb2:	61bb      	str	r3, [r7, #24]
    break;
 8007cb4:	e10e      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007cb6:	4b8d      	ldr	r3, [pc, #564]	; (8007eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007cb8:	61bb      	str	r3, [r7, #24]
    break;
 8007cba:	e10b      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007cbc:	4b8c      	ldr	r3, [pc, #560]	; (8007ef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007cbe:	61bb      	str	r3, [r7, #24]
    break;
 8007cc0:	e108      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cc2:	4b88      	ldr	r3, [pc, #544]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ccc:	4b85      	ldr	r3, [pc, #532]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cd8:	4b82      	ldr	r3, [pc, #520]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ce2:	4b80      	ldr	r3, [pc, #512]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	08db      	lsrs	r3, r3, #3
 8007ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80e1 	beq.w	8007ec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	f000 8083 	beq.w	8007e14 <HAL_RCC_GetSysClockFreq+0x204>
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	f200 80a1 	bhi.w	8007e58 <HAL_RCC_GetSysClockFreq+0x248>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCC_GetSysClockFreq+0x114>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d056      	beq.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d22:	e099      	b.n	8007e58 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d24:	4b6f      	ldr	r3, [pc, #444]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d02d      	beq.n	8007d8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d30:	4b6c      	ldr	r3, [pc, #432]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	08db      	lsrs	r3, r3, #3
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	4a6b      	ldr	r2, [pc, #428]	; (8007ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b62      	ldr	r3, [pc, #392]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d8a:	e087      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9e:	4b51      	ldr	r3, [pc, #324]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007db2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dce:	e065      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de2:	4b40      	ldr	r3, [pc, #256]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007df6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e12:	e043      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007f00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e26:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e56:	e021      	b.n	8007e9c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e9a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e9c:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec0:	ee17 3a90 	vmov	r3, s15
 8007ec4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007ec6:	e005      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61bb      	str	r3, [r7, #24]
    break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ed0:	61bb      	str	r3, [r7, #24]
    break;
 8007ed2:	bf00      	nop
  }

  return sysclockfreq;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3724      	adds	r7, #36	; 0x24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	003d0900 	.word	0x003d0900
 8007ef0:	01e84800 	.word	0x01e84800
 8007ef4:	46000000 	.word	0x46000000
 8007ef8:	4c742400 	.word	0x4c742400
 8007efc:	4a742400 	.word	0x4a742400
 8007f00:	4bf42400 	.word	0x4bf42400

08007f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f0a:	f7ff fe81 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	490f      	ldr	r1, [pc, #60]	; (8007f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f1c:	5ccb      	ldrb	r3, [r1, r3]
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f32:	5cd3      	ldrb	r3, [r2, r3]
 8007f34:	f003 031f 	and.w	r3, r3, #31
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3e:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f42:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f48:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	58024400 	.word	0x58024400
 8007f58:	080121f4 	.word	0x080121f4
 8007f5c:	24000008 	.word	0x24000008
 8007f60:	24000004 	.word	0x24000004

08007f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f68:	f7ff ffcc 	bl	8007f04 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	080121f4 	.word	0x080121f4

08007f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f94:	f7ff ffb6 	bl	8007f04 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4904      	ldr	r1, [pc, #16]	; (8007fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	080121f4 	.word	0x080121f4

08007fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	223f      	movs	r2, #63	; 0x3f
 8007fca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 0207 	and.w	r2, r3, #7
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007fe4:	4b14      	ldr	r3, [pc, #80]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f003 020f 	and.w	r2, r3, #15
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008008:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <HAL_RCC_GetClockConfig+0x7c>)
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <HAL_RCC_GetClockConfig+0x80>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	601a      	str	r2, [r3, #0]
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	58024400 	.word	0x58024400
 800803c:	52002000 	.word	0x52002000

08008040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800804c:	2300      	movs	r3, #0
 800804e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d03f      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008060:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008064:	d02a      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008066:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800806a:	d824      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800806c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008070:	d018      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008076:	d81e      	bhi.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800807c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008080:	d007      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008082:	e018      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008084:	4bab      	ldr	r3, [pc, #684]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4aaa      	ldr	r2, [pc, #680]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008090:	e015      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3304      	adds	r3, #4
 8008096:	2102      	movs	r1, #2
 8008098:	4618      	mov	r0, r3
 800809a:	f001 fff3 	bl	800a084 <RCCEx_PLL2_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80080a2:	e00c      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3324      	adds	r3, #36	; 0x24
 80080a8:	2102      	movs	r1, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f002 f89c 	bl	800a1e8 <RCCEx_PLL3_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80080b4:	e003      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ba:	e000      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80080bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080c4:	4b9b      	ldr	r3, [pc, #620]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d0:	4998      	ldr	r1, [pc, #608]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	650b      	str	r3, [r1, #80]	; 0x50
 80080d6:	e001      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d03d      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d826      	bhi.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	0800810d 	.word	0x0800810d
 80080fc:	0800811b 	.word	0x0800811b
 8008100:	0800812d 	.word	0x0800812d
 8008104:	08008145 	.word	0x08008145
 8008108:	08008145 	.word	0x08008145
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810c:	4b89      	ldr	r3, [pc, #548]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	4a88      	ldr	r2, [pc, #544]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008118:	e015      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f001 ffaf 	bl	800a084 <RCCEx_PLL2_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800812a:	e00c      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f002 f858 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800813c:	e003      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
      break;
 8008142:	e000      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800814c:	4b79      	ldr	r3, [pc, #484]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008150:	f023 0207 	bic.w	r2, r3, #7
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	4976      	ldr	r1, [pc, #472]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800815a:	4313      	orrs	r3, r2
 800815c:	650b      	str	r3, [r1, #80]	; 0x50
 800815e:	e001      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800816c:	2b00      	cmp	r3, #0
 800816e:	d042      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008178:	d02b      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d825      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008180:	2bc0      	cmp	r3, #192	; 0xc0
 8008182:	d028      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008184:	2bc0      	cmp	r3, #192	; 0xc0
 8008186:	d821      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008188:	2b80      	cmp	r3, #128	; 0x80
 800818a:	d016      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d81d      	bhi.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d007      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008198:	e018      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819a:	4b66      	ldr	r3, [pc, #408]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4a65      	ldr	r2, [pc, #404]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80081a6:	e017      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 ff68 	bl	800a084 <RCCEx_PLL2_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80081b8:	e00e      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3324      	adds	r3, #36	; 0x24
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 f811 	bl	800a1e8 <RCCEx_PLL3_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80081ca:	e005      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]
      break;
 80081d0:	e002      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80081d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80081de:	4b55      	ldr	r3, [pc, #340]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	4952      	ldr	r1, [pc, #328]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	650b      	str	r3, [r1, #80]	; 0x50
 80081f0:	e001      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d049      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800820c:	d030      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800820e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008212:	d82a      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008218:	d02c      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800821a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800821e:	d824      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008224:	d018      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800822a:	d81e      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008234:	d007      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008236:	e018      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008238:	4b3e      	ldr	r3, [pc, #248]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	4a3d      	ldr	r2, [pc, #244]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008244:	e017      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3304      	adds	r3, #4
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f001 ff19 	bl	800a084 <RCCEx_PLL2_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008256:	e00e      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3324      	adds	r3, #36	; 0x24
 800825c:	2100      	movs	r1, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f001 ffc2 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008268:	e005      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	75fb      	strb	r3, [r7, #23]
      break;
 800826e:	e002      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800827c:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800827e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008280:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800828a:	492a      	ldr	r1, [pc, #168]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800828c:	4313      	orrs	r3, r2
 800828e:	658b      	str	r3, [r1, #88]	; 0x58
 8008290:	e001      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d04c      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082ac:	d030      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80082ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082b2:	d82a      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80082b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082b8:	d02c      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80082ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082be:	d824      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80082c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082c4:	d018      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80082c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ca:	d81e      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80082d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082d4:	d007      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80082d6:	e018      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d8:	4b16      	ldr	r3, [pc, #88]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	4a15      	ldr	r2, [pc, #84]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082e4:	e017      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 fec9 	bl	800a084 <RCCEx_PLL2_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80082f6:	e00e      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3324      	adds	r3, #36	; 0x24
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 ff72 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008308:	e005      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
      break;
 800830e:	e002      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008310:	bf00      	nop
 8008312:	e000      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10d      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800832a:	4902      	ldr	r1, [pc, #8]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800832c:	4313      	orrs	r3, r2
 800832e:	658b      	str	r3, [r1, #88]	; 0x58
 8008330:	e004      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008332:	bf00      	nop
 8008334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d032      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834c:	2b30      	cmp	r3, #48	; 0x30
 800834e:	d01c      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008350:	2b30      	cmp	r3, #48	; 0x30
 8008352:	d817      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008354:	2b20      	cmp	r3, #32
 8008356:	d00c      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008358:	2b20      	cmp	r3, #32
 800835a:	d813      	bhi.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d016      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008360:	2b10      	cmp	r3, #16
 8008362:	d10f      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4baf      	ldr	r3, [pc, #700]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	4aae      	ldr	r2, [pc, #696]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008370:	e00e      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3304      	adds	r3, #4
 8008376:	2102      	movs	r1, #2
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fe83 	bl	800a084 <RCCEx_PLL2_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008382:	e005      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
      break;
 8008388:	e002      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800838a:	bf00      	nop
 800838c:	e000      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800838e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008396:	4ba3      	ldr	r3, [pc, #652]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	49a0      	ldr	r1, [pc, #640]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083a8:	e001      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d047      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c2:	d030      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80083c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c8:	d82a      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80083ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083ce:	d02c      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80083d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083d4:	d824      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80083d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083da:	d018      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80083dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e0:	d81e      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80083e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ea:	d007      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80083ec:	e018      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ee:	4b8d      	ldr	r3, [pc, #564]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	4a8c      	ldr	r2, [pc, #560]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80083fa:	e017      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fe3e 	bl	800a084 <RCCEx_PLL2_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800840c:	e00e      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f001 fee7 	bl	800a1e8 <RCCEx_PLL3_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800841e:	e005      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e002      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008426:	bf00      	nop
 8008428:	e000      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800842a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008432:	4b7c      	ldr	r3, [pc, #496]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008436:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843e:	4979      	ldr	r1, [pc, #484]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008440:	4313      	orrs	r3, r2
 8008442:	650b      	str	r3, [r1, #80]	; 0x50
 8008444:	e001      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d049      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800845e:	d02e      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008464:	d828      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800846a:	d02a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800846c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008470:	d822      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008476:	d026      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008478:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800847c:	d81c      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800847e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008482:	d010      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008488:	d816      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01d      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800848e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008492:	d111      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	2101      	movs	r1, #1
 800849a:	4618      	mov	r0, r3
 800849c:	f001 fdf2 	bl	800a084 <RCCEx_PLL2_Config>
 80084a0:	4603      	mov	r3, r0
 80084a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80084a4:	e012      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3324      	adds	r3, #36	; 0x24
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fe9b 	bl	800a1e8 <RCCEx_PLL3_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80084b6:	e009      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
      break;
 80084bc:	e006      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80084be:	bf00      	nop
 80084c0:	e004      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80084ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084d2:	4b54      	ldr	r3, [pc, #336]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084de:	4951      	ldr	r1, [pc, #324]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	650b      	str	r3, [r1, #80]	; 0x50
 80084e4:	e001      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d04b      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008500:	d02e      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008506:	d828      	bhi.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850c:	d02a      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800850e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008512:	d822      	bhi.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008518:	d026      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800851a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800851e:	d81c      	bhi.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008524:	d010      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852a:	d816      	bhi.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01d      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008534:	d111      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	2101      	movs	r1, #1
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fda1 	bl	800a084 <RCCEx_PLL2_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008546:	e012      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3324      	adds	r3, #36	; 0x24
 800854c:	2101      	movs	r1, #1
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fe4a 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008558:	e009      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
      break;
 800855e:	e006      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008560:	bf00      	nop
 8008562:	e004      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008564:	bf00      	nop
 8008566:	e002      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008568:	bf00      	nop
 800856a:	e000      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800856c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008574:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008578:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008582:	4928      	ldr	r1, [pc, #160]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008584:	4313      	orrs	r3, r2
 8008586:	658b      	str	r3, [r1, #88]	; 0x58
 8008588:	e001      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d02f      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a2:	d00e      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a8:	d814      	bhi.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80085ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b2:	d10f      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b4:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	4a1a      	ldr	r2, [pc, #104]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80085c0:	e00c      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	2101      	movs	r1, #1
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 fd5b 	bl	800a084 <RCCEx_PLL2_Config>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80085d2:	e003      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	75fb      	strb	r3, [r7, #23]
      break;
 80085d8:	e000      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80085da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085e2:	4b10      	ldr	r3, [pc, #64]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ee:	490d      	ldr	r1, [pc, #52]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	650b      	str	r3, [r1, #80]	; 0x50
 80085f4:	e001      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d033      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	2b03      	cmp	r3, #3
 800860c:	d81c      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	0800864f 	.word	0x0800864f
 8008618:	08008629 	.word	0x08008629
 800861c:	08008637 	.word	0x08008637
 8008620:	0800864f 	.word	0x0800864f
 8008624:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008628:	4bb8      	ldr	r3, [pc, #736]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	4ab7      	ldr	r2, [pc, #732]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800862e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008634:	e00c      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	2102      	movs	r1, #2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fd21 	bl	800a084 <RCCEx_PLL2_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008646:	e003      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800864e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008656:	4bad      	ldr	r3, [pc, #692]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865a:	f023 0203 	bic.w	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	49aa      	ldr	r1, [pc, #680]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008664:	4313      	orrs	r3, r2
 8008666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008668:	e001      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8086 	beq.w	8008788 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800867c:	4ba4      	ldr	r3, [pc, #656]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4aa3      	ldr	r2, [pc, #652]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008686:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008688:	f7fa f898 	bl	80027bc <HAL_GetTick>
 800868c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800868e:	e009      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008690:	f7fa f894 	bl	80027bc <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b64      	cmp	r3, #100	; 0x64
 800869c:	d902      	bls.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	75fb      	strb	r3, [r7, #23]
        break;
 80086a2:	e005      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086a4:	4b9a      	ldr	r3, [pc, #616]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0ef      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d166      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086b6:	4b95      	ldr	r3, [pc, #596]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086c0:	4053      	eors	r3, r2
 80086c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d013      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086ca:	4b90      	ldr	r3, [pc, #576]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086d4:	4b8d      	ldr	r3, [pc, #564]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d8:	4a8c      	ldr	r2, [pc, #560]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086e0:	4b8a      	ldr	r3, [pc, #552]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e4:	4a89      	ldr	r2, [pc, #548]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086ec:	4a87      	ldr	r2, [pc, #540]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fc:	d115      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fe:	f7fa f85d 	bl	80027bc <HAL_GetTick>
 8008702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008704:	e00b      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7fa f859 	bl	80027bc <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f241 3288 	movw	r2, #5000	; 0x1388
 8008714:	4293      	cmp	r3, r2
 8008716:	d902      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	75fb      	strb	r3, [r7, #23]
            break;
 800871c:	e005      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800871e:	4b7b      	ldr	r3, [pc, #492]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0ed      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d126      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873e:	d10d      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008740:	4b72      	ldr	r3, [pc, #456]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800874e:	0919      	lsrs	r1, r3, #4
 8008750:	4b70      	ldr	r3, [pc, #448]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008752:	400b      	ands	r3, r1
 8008754:	496d      	ldr	r1, [pc, #436]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008756:	4313      	orrs	r3, r2
 8008758:	610b      	str	r3, [r1, #16]
 800875a:	e005      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800875c:	4b6b      	ldr	r3, [pc, #428]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	4a6a      	ldr	r2, [pc, #424]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008762:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008766:	6113      	str	r3, [r2, #16]
 8008768:	4b68      	ldr	r3, [pc, #416]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800876a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008776:	4965      	ldr	r1, [pc, #404]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008778:	4313      	orrs	r3, r2
 800877a:	670b      	str	r3, [r1, #112]	; 0x70
 800877c:	e004      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	75bb      	strb	r3, [r7, #22]
 8008782:	e001      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d07e      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008798:	2b28      	cmp	r3, #40	; 0x28
 800879a:	d867      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	08008873 	.word	0x08008873
 80087a8:	0800886d 	.word	0x0800886d
 80087ac:	0800886d 	.word	0x0800886d
 80087b0:	0800886d 	.word	0x0800886d
 80087b4:	0800886d 	.word	0x0800886d
 80087b8:	0800886d 	.word	0x0800886d
 80087bc:	0800886d 	.word	0x0800886d
 80087c0:	0800886d 	.word	0x0800886d
 80087c4:	08008849 	.word	0x08008849
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800886d 	.word	0x0800886d
 80087d0:	0800886d 	.word	0x0800886d
 80087d4:	0800886d 	.word	0x0800886d
 80087d8:	0800886d 	.word	0x0800886d
 80087dc:	0800886d 	.word	0x0800886d
 80087e0:	0800886d 	.word	0x0800886d
 80087e4:	0800885b 	.word	0x0800885b
 80087e8:	0800886d 	.word	0x0800886d
 80087ec:	0800886d 	.word	0x0800886d
 80087f0:	0800886d 	.word	0x0800886d
 80087f4:	0800886d 	.word	0x0800886d
 80087f8:	0800886d 	.word	0x0800886d
 80087fc:	0800886d 	.word	0x0800886d
 8008800:	0800886d 	.word	0x0800886d
 8008804:	08008873 	.word	0x08008873
 8008808:	0800886d 	.word	0x0800886d
 800880c:	0800886d 	.word	0x0800886d
 8008810:	0800886d 	.word	0x0800886d
 8008814:	0800886d 	.word	0x0800886d
 8008818:	0800886d 	.word	0x0800886d
 800881c:	0800886d 	.word	0x0800886d
 8008820:	0800886d 	.word	0x0800886d
 8008824:	08008873 	.word	0x08008873
 8008828:	0800886d 	.word	0x0800886d
 800882c:	0800886d 	.word	0x0800886d
 8008830:	0800886d 	.word	0x0800886d
 8008834:	0800886d 	.word	0x0800886d
 8008838:	0800886d 	.word	0x0800886d
 800883c:	0800886d 	.word	0x0800886d
 8008840:	0800886d 	.word	0x0800886d
 8008844:	08008873 	.word	0x08008873
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fc18 	bl	800a084 <RCCEx_PLL2_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008858:	e00c      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3324      	adds	r3, #36	; 0x24
 800885e:	2101      	movs	r1, #1
 8008860:	4618      	mov	r0, r3
 8008862:	f001 fcc1 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	75fb      	strb	r3, [r7, #23]
      break;
 8008870:	e000      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008886:	4921      	ldr	r1, [pc, #132]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008888:	4313      	orrs	r3, r2
 800888a:	654b      	str	r3, [r1, #84]	; 0x54
 800888c:	e001      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d03e      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d820      	bhi.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088ef 	.word	0x080088ef
 80088b0:	080088c5 	.word	0x080088c5
 80088b4:	080088d7 	.word	0x080088d7
 80088b8:	080088ef 	.word	0x080088ef
 80088bc:	080088ef 	.word	0x080088ef
 80088c0:	080088ef 	.word	0x080088ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3304      	adds	r3, #4
 80088c8:	2101      	movs	r1, #1
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 fbda 	bl	800a084 <RCCEx_PLL2_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80088d4:	e00c      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3324      	adds	r3, #36	; 0x24
 80088da:	2101      	movs	r1, #1
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fc83 	bl	800a1e8 <RCCEx_PLL3_Config>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
      break;
 80088ec:	e000      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80088ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d110      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	f023 0207 	bic.w	r2, r3, #7
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008902:	4902      	ldr	r1, [pc, #8]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008904:	4313      	orrs	r3, r2
 8008906:	654b      	str	r3, [r1, #84]	; 0x54
 8008908:	e008      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800890a:	bf00      	nop
 800890c:	58024400 	.word	0x58024400
 8008910:	58024800 	.word	0x58024800
 8008914:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d039      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892e:	2b05      	cmp	r3, #5
 8008930:	d820      	bhi.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	0800897b 	.word	0x0800897b
 800893c:	08008951 	.word	0x08008951
 8008940:	08008963 	.word	0x08008963
 8008944:	0800897b 	.word	0x0800897b
 8008948:	0800897b 	.word	0x0800897b
 800894c:	0800897b 	.word	0x0800897b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	2101      	movs	r1, #1
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fb94 	bl	800a084 <RCCEx_PLL2_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008960:	e00c      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3324      	adds	r3, #36	; 0x24
 8008966:	2101      	movs	r1, #1
 8008968:	4618      	mov	r0, r3
 800896a:	f001 fc3d 	bl	800a1e8 <RCCEx_PLL3_Config>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008972:	e003      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	e000      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800897a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008982:	4bb7      	ldr	r3, [pc, #732]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	f023 0207 	bic.w	r2, r3, #7
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008990:	49b3      	ldr	r1, [pc, #716]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008992:	4313      	orrs	r3, r2
 8008994:	658b      	str	r3, [r1, #88]	; 0x58
 8008996:	e001      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0320 	and.w	r3, r3, #32
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d04b      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b2:	d02e      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80089b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b8:	d828      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089be:	d02a      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80089c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c4:	d822      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80089c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089ca:	d026      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80089cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089d0:	d81c      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d6:	d010      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80089d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089dc:	d816      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d01d      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80089e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e6:	d111      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3304      	adds	r3, #4
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fb48 	bl	800a084 <RCCEx_PLL2_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80089f8:	e012      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3324      	adds	r3, #36	; 0x24
 80089fe:	2102      	movs	r1, #2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 fbf1 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a0a:	e009      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a10:	e006      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008a12:	bf00      	nop
 8008a14:	e004      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a26:	4b8e      	ldr	r3, [pc, #568]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a34:	498a      	ldr	r1, [pc, #552]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	654b      	str	r3, [r1, #84]	; 0x54
 8008a3a:	e001      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d04b      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a56:	d02e      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008a58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a5c:	d828      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	d02a      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a68:	d822      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a6e:	d026      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008a70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a74:	d81c      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a7a:	d010      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a80:	d816      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01d      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a8a:	d111      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 faf6 	bl	800a084 <RCCEx_PLL2_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008a9c:	e012      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3324      	adds	r3, #36	; 0x24
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 fb9f 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008aae:	e009      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab4:	e006      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e004      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008aba:	bf00      	nop
 8008abc:	e002      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008abe:	bf00      	nop
 8008ac0:	e000      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aca:	4b65      	ldr	r3, [pc, #404]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ace:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ad8:	4961      	ldr	r1, [pc, #388]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	658b      	str	r3, [r1, #88]	; 0x58
 8008ade:	e001      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d04b      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008af6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008afa:	d02e      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008afc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008b00:	d828      	bhi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b06:	d02a      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b0c:	d822      	bhi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008b0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b12:	d026      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008b14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b18:	d81c      	bhi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1e:	d010      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b24:	d816      	bhi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01d      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2e:	d111      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3304      	adds	r3, #4
 8008b34:	2100      	movs	r1, #0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f001 faa4 	bl	800a084 <RCCEx_PLL2_Config>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b40:	e012      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3324      	adds	r3, #36	; 0x24
 8008b46:	2102      	movs	r1, #2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f001 fb4d 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008b52:	e009      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
      break;
 8008b58:	e006      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e004      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e002      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008b62:	bf00      	nop
 8008b64:	e000      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b6e:	4b3c      	ldr	r3, [pc, #240]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b7c:	4938      	ldr	r1, [pc, #224]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	658b      	str	r3, [r1, #88]	; 0x58
 8008b82:	e001      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01a      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9e:	d10a      	bne.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3324      	adds	r3, #36	; 0x24
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fb1e 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bb6:	4b2a      	ldr	r3, [pc, #168]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc4:	4926      	ldr	r1, [pc, #152]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01a      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be0:	d10a      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2102      	movs	r1, #2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fafd 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c06:	4916      	ldr	r1, [pc, #88]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d036      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c22:	d01f      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c28:	d817      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c32:	d009      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008c34:	e011      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f001 fa21 	bl	800a084 <RCCEx_PLL2_Config>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c46:	e00e      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3324      	adds	r3, #36	; 0x24
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 faca 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008c58:	e005      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5e:	e002      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008c60:	58024400 	.word	0x58024400
      break;
 8008c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c6c:	4b93      	ldr	r3, [pc, #588]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c7a:	4990      	ldr	r1, [pc, #576]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	658b      	str	r3, [r1, #88]	; 0x58
 8008c80:	e001      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d033      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c9c:	d01c      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ca2:	d816      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca8:	d003      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cae:	d007      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008cb0:	e00f      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb2:	4b82      	ldr	r3, [pc, #520]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	4a81      	ldr	r2, [pc, #516]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008cbe:	e00c      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3324      	adds	r3, #36	; 0x24
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fa8e 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ce0:	4b76      	ldr	r3, [pc, #472]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cee:	4973      	ldr	r1, [pc, #460]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8008cf4:	e001      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d029      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d12:	d007      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008d14:	e00f      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d16:	4b69      	ldr	r3, [pc, #420]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a68      	ldr	r2, [pc, #416]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d22:	e00b      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3304      	adds	r3, #4
 8008d28:	2102      	movs	r1, #2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 f9aa 	bl	800a084 <RCCEx_PLL2_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d109      	bne.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d42:	4b5e      	ldr	r3, [pc, #376]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d4e:	495b      	ldr	r1, [pc, #364]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d54:	e001      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 fa3b 	bl	800a1e8 <RCCEx_PLL3_Config>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d030      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d90:	d017      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d96:	d811      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d9c:	d013      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da2:	d80b      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d010      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dac:	d106      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dae:	4b43      	ldr	r3, [pc, #268]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	4a42      	ldr	r2, [pc, #264]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008dba:	e007      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc0:	e004      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008dd2:	4b3a      	ldr	r3, [pc, #232]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dde:	4937      	ldr	r1, [pc, #220]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	654b      	str	r3, [r1, #84]	; 0x54
 8008de4:	e001      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008df6:	4b31      	ldr	r3, [pc, #196]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	492e      	ldr	r1, [pc, #184]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d009      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008e14:	4b29      	ldr	r3, [pc, #164]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e22:	4926      	ldr	r1, [pc, #152]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e34:	4b21      	ldr	r3, [pc, #132]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e40:	491e      	ldr	r1, [pc, #120]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00d      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e52:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	4a19      	ldr	r2, [pc, #100]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e5c:	6113      	str	r3, [r2, #16]
 8008e5e:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008e68:	4914      	ldr	r1, [pc, #80]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da08      	bge.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e82:	490e      	ldr	r1, [pc, #56]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea2:	4906      	ldr	r1, [pc, #24]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008ea8:	7dbb      	ldrb	r3, [r7, #22]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	58024400 	.word	0x58024400

08008ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b090      	sub	sp, #64	; 0x40
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ece:	f040 8095 	bne.w	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008ed2:	4bae      	ldr	r3, [pc, #696]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	f200 8088 	bhi.w	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008f01 	.word	0x08008f01
 8008ef0:	08008f29 	.word	0x08008f29
 8008ef4:	08008f51 	.word	0x08008f51
 8008ef8:	08008fed 	.word	0x08008fed
 8008efc:	08008f79 	.word	0x08008f79

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f00:	4ba2      	ldr	r3, [pc, #648]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f0c:	d108      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 ff64 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f1c:	f000 bc95 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f24:	f000 bc91 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f28:	4b98      	ldr	r3, [pc, #608]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f34:	d108      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f36:	f107 0318 	add.w	r3, r7, #24
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fca8 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f44:	f000 bc81 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4c:	f000 bc7d 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f50:	4b8e      	ldr	r3, [pc, #568]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5c:	d108      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f5e:	f107 030c 	add.w	r3, r7, #12
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fde8 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f6c:	f000 bc6d 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f74:	f000 bc69 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f78:	4b84      	ldr	r3, [pc, #528]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f82:	4b82      	ldr	r3, [pc, #520]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d10c      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d109      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f94:	4b7d      	ldr	r3, [pc, #500]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	4a7c      	ldr	r2, [pc, #496]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa6:	e01f      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa8:	4b78      	ldr	r3, [pc, #480]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb4:	d106      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbc:	d102      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fbe:	4b75      	ldr	r3, [pc, #468]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc2:	e011      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc4:	4b71      	ldr	r3, [pc, #452]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd0:	d106      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd8:	d102      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fda:	4b6f      	ldr	r3, [pc, #444]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fde:	e003      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fe4:	f000 bc31 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fe8:	f000 bc2f 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fec:	4b6b      	ldr	r3, [pc, #428]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff0:	f000 bc2b 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff8:	f000 bc27 	b.w	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009002:	f040 8095 	bne.w	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009006:	4b61      	ldr	r3, [pc, #388]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800900e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009016:	d04d      	beq.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800901e:	f200 8084 	bhi.w	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2bc0      	cmp	r3, #192	; 0xc0
 8009026:	d07d      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	2bc0      	cmp	r3, #192	; 0xc0
 800902c:	d87d      	bhi.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	2b80      	cmp	r3, #128	; 0x80
 8009032:	d02d      	beq.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	2b80      	cmp	r3, #128	; 0x80
 8009038:	d877      	bhi.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d012      	beq.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009046:	e070      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009048:	4b50      	ldr	r3, [pc, #320]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009054:	d107      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fec0 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009064:	e3f1      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800906a:	e3ee      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800906c:	4b47      	ldr	r3, [pc, #284]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009078:	d107      	bne.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800907a:	f107 0318 	add.w	r3, r7, #24
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fc06 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009088:	e3df      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800908e:	e3dc      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009090:	4b3e      	ldr	r3, [pc, #248]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909c:	d107      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909e:	f107 030c 	add.w	r3, r7, #12
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fd48 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090ac:	e3cd      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b2:	e3ca      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090b4:	4b35      	ldr	r3, [pc, #212]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090be:	4b33      	ldr	r3, [pc, #204]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d10c      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d0:	4b2e      	ldr	r3, [pc, #184]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	08db      	lsrs	r3, r3, #3
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	4a2d      	ldr	r2, [pc, #180]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e2:	e01e      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f0:	d106      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f8:	d102      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090fa:	4b26      	ldr	r3, [pc, #152]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090fe:	e010      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009100:	4b22      	ldr	r3, [pc, #136]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800910c:	d106      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009114:	d102      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009116:	4b20      	ldr	r3, [pc, #128]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800911a:	e002      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009120:	e393      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009122:	e392      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009128:	e38f      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912e:	e38c      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009136:	f040 80a7 	bne.w	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800913a:	4b14      	ldr	r3, [pc, #80]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800913c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009142:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800914a:	d05f      	beq.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009152:	f200 8096 	bhi.w	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800915c:	f000 808e 	beq.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009166:	f200 808c 	bhi.w	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009170:	d03a      	beq.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009178:	f200 8083 	bhi.w	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009188:	d01c      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800918a:	e07a      	b.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800918c:	58024400 	.word	0x58024400
 8009190:	03d09000 	.word	0x03d09000
 8009194:	003d0900 	.word	0x003d0900
 8009198:	01e84800 	.word	0x01e84800
 800919c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091a0:	4baa      	ldr	r3, [pc, #680]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ac:	d107      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fe14 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091bc:	e345      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c2:	e342      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c4:	4ba1      	ldr	r3, [pc, #644]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d0:	d107      	bne.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d2:	f107 0318 	add.w	r3, r7, #24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fb5a 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091e0:	e333      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e6:	e330      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091e8:	4b98      	ldr	r3, [pc, #608]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f4:	d107      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f6:	f107 030c 	add.w	r3, r7, #12
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fc9c 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009204:	e321      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800920a:	e31e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800920c:	4b8f      	ldr	r3, [pc, #572]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800920e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009214:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009216:	4b8d      	ldr	r3, [pc, #564]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b04      	cmp	r3, #4
 8009220:	d10c      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	2b00      	cmp	r3, #0
 8009226:	d109      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009228:	4b88      	ldr	r3, [pc, #544]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	08db      	lsrs	r3, r3, #3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	4a87      	ldr	r2, [pc, #540]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923a:	e01e      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800923c:	4b83      	ldr	r3, [pc, #524]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009248:	d106      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009250:	d102      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009252:	4b80      	ldr	r3, [pc, #512]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009256:	e010      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009258:	4b7c      	ldr	r3, [pc, #496]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009264:	d106      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800926c:	d102      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800926e:	4b7a      	ldr	r3, [pc, #488]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009272:	e002      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009278:	e2e7      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800927a:	e2e6      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800927c:	4b77      	ldr	r3, [pc, #476]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009280:	e2e3      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009286:	e2e0      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800928e:	f040 809c 	bne.w	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009292:	4b6e      	ldr	r3, [pc, #440]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009296:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800929a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092a2:	d054      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092aa:	f200 808b 	bhi.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092b4:	f000 8083 	beq.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092be:	f200 8081 	bhi.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c8:	d02f      	beq.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d0:	d878      	bhi.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092de:	d012      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80092e0:	e070      	b.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092e2:	4b5a      	ldr	r3, [pc, #360]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ee:	d107      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fd73 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092fe:	e2a4      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009304:	e2a1      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009306:	4b51      	ldr	r3, [pc, #324]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800930e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009312:	d107      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009314:	f107 0318 	add.w	r3, r7, #24
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fab9 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009322:	e292      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009328:	e28f      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800932a:	4b48      	ldr	r3, [pc, #288]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009336:	d107      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009338:	f107 030c 	add.w	r3, r7, #12
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fbfb 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009346:	e280      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934c:	e27d      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800934e:	4b3f      	ldr	r3, [pc, #252]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009356:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009358:	4b3c      	ldr	r3, [pc, #240]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b04      	cmp	r3, #4
 8009362:	d10c      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	2b00      	cmp	r3, #0
 8009368:	d109      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800936a:	4b38      	ldr	r3, [pc, #224]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	08db      	lsrs	r3, r3, #3
 8009370:	f003 0303 	and.w	r3, r3, #3
 8009374:	4a36      	ldr	r2, [pc, #216]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009376:	fa22 f303 	lsr.w	r3, r2, r3
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800937c:	e01e      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800937e:	4b33      	ldr	r3, [pc, #204]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800938a:	d106      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009392:	d102      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009394:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009398:	e010      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800939a:	4b2c      	ldr	r3, [pc, #176]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093a6:	d106      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ae:	d102      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093b0:	4b29      	ldr	r3, [pc, #164]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093ba:	e246      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093bc:	e245      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093be:	4b27      	ldr	r3, [pc, #156]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c2:	e242      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c8:	e23f      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	f040 80a8 	bne.w	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80093d4:	4b1d      	ldr	r3, [pc, #116]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093e4:	d060      	beq.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ec:	f200 8097 	bhi.w	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093f6:	f000 808f 	beq.w	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009400:	f200 808d 	bhi.w	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940a:	d03b      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009412:	f200 8084 	bhi.w	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009422:	d01d      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009424:	e07b      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009426:	4b09      	ldr	r3, [pc, #36]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009432:	d107      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fcd1 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009442:	e202      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009448:	e1ff      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800944a:	bf00      	nop
 800944c:	58024400 	.word	0x58024400
 8009450:	03d09000 	.word	0x03d09000
 8009454:	003d0900 	.word	0x003d0900
 8009458:	01e84800 	.word	0x01e84800
 800945c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009460:	4ba3      	ldr	r3, [pc, #652]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800946c:	d107      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946e:	f107 0318 	add.w	r3, r7, #24
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fa0c 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800947c:	e1e5      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009482:	e1e2      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009484:	4b9a      	ldr	r3, [pc, #616]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800948c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009490:	d107      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009492:	f107 030c 	add.w	r3, r7, #12
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fb4e 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094a0:	e1d3      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a6:	e1d0      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094a8:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094b2:	4b8f      	ldr	r3, [pc, #572]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d10c      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c4:	4b8a      	ldr	r3, [pc, #552]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	08db      	lsrs	r3, r3, #3
 80094ca:	f003 0303 	and.w	r3, r3, #3
 80094ce:	4a89      	ldr	r2, [pc, #548]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d6:	e01e      	b.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094d8:	4b85      	ldr	r3, [pc, #532]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e4:	d106      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80094e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ec:	d102      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094ee:	4b82      	ldr	r3, [pc, #520]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f2:	e010      	b.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094f4:	4b7e      	ldr	r3, [pc, #504]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009500:	d106      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009508:	d102      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800950a:	4b7c      	ldr	r3, [pc, #496]	; (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800950e:	e002      	b.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009514:	e199      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009516:	e198      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009518:	4b79      	ldr	r3, [pc, #484]	; (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951c:	e195      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009522:	e192      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800952a:	d173      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800952c:	4b70      	ldr	r3, [pc, #448]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800952e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009534:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800953c:	d02f      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009544:	d863      	bhi.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009552:	d012      	beq.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009554:	e05b      	b.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009556:	4b66      	ldr	r3, [pc, #408]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800955e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009562:	d107      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009564:	f107 0318 	add.w	r3, r7, #24
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f991 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009572:	e16a      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009578:	e167      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800957a:	4b5d      	ldr	r3, [pc, #372]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009586:	d107      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009588:	f107 030c 	add.w	r3, r7, #12
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fad3 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009596:	e158      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800959c:	e155      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800959e:	4b54      	ldr	r3, [pc, #336]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095a8:	4b51      	ldr	r3, [pc, #324]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d10c      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095ba:	4b4d      	ldr	r3, [pc, #308]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	4a4b      	ldr	r2, [pc, #300]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095c6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095cc:	e01e      	b.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095ce:	4b48      	ldr	r3, [pc, #288]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095da:	d106      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80095dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e2:	d102      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095e4:	4b44      	ldr	r3, [pc, #272]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e8:	e010      	b.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095ea:	4b41      	ldr	r3, [pc, #260]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095f6:	d106      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095fe:	d102      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009600:	4b3e      	ldr	r3, [pc, #248]	; (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009604:	e002      	b.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800960a:	e11e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800960c:	e11d      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009612:	e11a      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961a:	d133      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800961c:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800961e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009624:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009632:	d012      	beq.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009634:	e023      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009636:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009642:	d107      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fbc9 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009652:	e0fa      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009658:	e0f7      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800965a:	4b25      	ldr	r3, [pc, #148]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009666:	d107      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009668:	f107 0318 	add.w	r3, r7, #24
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f90f 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009676:	e0e8      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967c:	e0e5      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009682:	e0e2      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968a:	f040 808f 	bne.w	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800968e:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009696:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800969e:	d075      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a6:	d87e      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d060      	beq.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80096b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b6:	d876      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096be:	d045      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096c6:	d86e      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ce:	d02b      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d6:	d866      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096e4:	d00e      	beq.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80096e6:	e05e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80096e8:	f000 f8bc 	bl	8009864 <HAL_RCCEx_GetD3PCLK1Freq>
 80096ec:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80096ee:	e0ac      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096f0:	58024400 	.word	0x58024400
 80096f4:	03d09000 	.word	0x03d09000
 80096f8:	003d0900 	.word	0x003d0900
 80096fc:	01e84800 	.word	0x01e84800
 8009700:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009704:	4b53      	ldr	r3, [pc, #332]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800970c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009710:	d107      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f8ba 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009720:	e093      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009726:	e090      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009728:	4b4a      	ldr	r3, [pc, #296]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009734:	d107      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f9fc 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009744:	e081      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974a:	e07e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800974c:	4b41      	ldr	r3, [pc, #260]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d109      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009758:	4b3e      	ldr	r3, [pc, #248]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	08db      	lsrs	r3, r3, #3
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	4a3d      	ldr	r2, [pc, #244]	; (8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800976a:	e06e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009770:	e06b      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009772:	4b38      	ldr	r3, [pc, #224]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977e:	d102      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009780:	4b36      	ldr	r3, [pc, #216]	; (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009784:	e061      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800978a:	e05e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800978c:	4b31      	ldr	r3, [pc, #196]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009798:	d102      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800979a:	4b31      	ldr	r3, [pc, #196]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800979e:	e054      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a4:	e051      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097aa:	e04e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097b2:	d148      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80097b4:	4b27      	ldr	r3, [pc, #156]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c4:	d02a      	beq.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097cc:	d838      	bhi.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097da:	d00d      	beq.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80097dc:	e030      	b.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097de:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ea:	d102      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80097ec:	4b1c      	ldr	r3, [pc, #112]	; (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097f0:	e02b      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f6:	e028      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097f8:	4b16      	ldr	r3, [pc, #88]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009804:	d107      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fae8 	bl	8009de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009814:	e019      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800981a:	e016      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800981c:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009828:	d107      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982a:	f107 0318 	add.w	r3, r7, #24
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f82e 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009838:	e007      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800983e:	e004      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009844:	e001      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800984a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800984c:	4618      	mov	r0, r3
 800984e:	3740      	adds	r7, #64	; 0x40
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	58024400 	.word	0x58024400
 8009858:	03d09000 	.word	0x03d09000
 800985c:	003d0900 	.word	0x003d0900
 8009860:	01e84800 	.word	0x01e84800

08009864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009868:	f7fe fb4c 	bl	8007f04 <HAL_RCC_GetHCLKFreq>
 800986c:	4602      	mov	r2, r0
 800986e:	4b06      	ldr	r3, [pc, #24]	; (8009888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	091b      	lsrs	r3, r3, #4
 8009874:	f003 0307 	and.w	r3, r3, #7
 8009878:	4904      	ldr	r1, [pc, #16]	; (800988c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800987a:	5ccb      	ldrb	r3, [r1, r3]
 800987c:	f003 031f 	and.w	r3, r3, #31
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	58024400 	.word	0x58024400
 800988c:	080121f4 	.word	0x080121f4

08009890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009898:	4ba1      	ldr	r3, [pc, #644]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f003 0303 	and.w	r3, r3, #3
 80098a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80098a2:	4b9f      	ldr	r3, [pc, #636]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	0b1b      	lsrs	r3, r3, #12
 80098a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098ae:	4b9c      	ldr	r3, [pc, #624]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	091b      	lsrs	r3, r3, #4
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098ba:	4b99      	ldr	r3, [pc, #612]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098be:	08db      	lsrs	r3, r3, #3
 80098c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8111 	beq.w	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f000 8083 	beq.w	80099ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	f200 80a1 	bhi.w	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d056      	beq.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098fa:	e099      	b.n	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098fc:	4b88      	ldr	r3, [pc, #544]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02d      	beq.n	8009964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009908:	4b85      	ldr	r3, [pc, #532]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	4a84      	ldr	r2, [pc, #528]	; (8009b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
 8009918:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a03 	vldr	s12, [r7, #12]
 8009946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009962:	e087      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b6a      	ldr	r3, [pc, #424]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a03 	vldr	s12, [r7, #12]
 800998a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a6:	e065      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ba:	4b59      	ldr	r3, [pc, #356]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ea:	e043      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2e:	e021      	b.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	0a5b      	lsrs	r3, r3, #9
 8009a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9a:	ee17 2a90 	vmov	r2, s15
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009aa2:	4b1f      	ldr	r3, [pc, #124]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aac:	ee07 3a90 	vmov	s15, r3
 8009ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac8:	ee17 2a90 	vmov	r2, s15
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ad0:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	0e1b      	lsrs	r3, r3, #24
 8009ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af6:	ee17 2a90 	vmov	r2, s15
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009afe:	e008      	b.n	8009b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	609a      	str	r2, [r3, #8]
}
 8009b12:	bf00      	nop
 8009b14:	3724      	adds	r7, #36	; 0x24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	46000000 	.word	0x46000000
 8009b2c:	4c742400 	.word	0x4c742400
 8009b30:	4a742400 	.word	0x4a742400
 8009b34:	4bf42400 	.word	0x4bf42400

08009b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	; 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b40:	4ba1      	ldr	r3, [pc, #644]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b4a:	4b9f      	ldr	r3, [pc, #636]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	0d1b      	lsrs	r3, r3, #20
 8009b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b56:	4b9c      	ldr	r3, [pc, #624]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b62:	4b99      	ldr	r3, [pc, #612]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b66:	08db      	lsrs	r3, r3, #3
 8009b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 8111 	beq.w	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	f000 8083 	beq.w	8009c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	f200 80a1 	bhi.w	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d056      	beq.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ba2:	e099      	b.n	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba4:	4b88      	ldr	r3, [pc, #544]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d02d      	beq.n	8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bb0:	4b85      	ldr	r3, [pc, #532]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	08db      	lsrs	r3, r3, #3
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	4a84      	ldr	r2, [pc, #528]	; (8009dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b7b      	ldr	r3, [pc, #492]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c0a:	e087      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1e:	4b6a      	ldr	r3, [pc, #424]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4e:	e065      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c62:	4b59      	ldr	r3, [pc, #356]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c92:	e043      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca6:	4b48      	ldr	r3, [pc, #288]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cd6:	e021      	b.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cea:	4b37      	ldr	r3, [pc, #220]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d1c:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d42:	ee17 2a90 	vmov	r2, s15
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d4a:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	0c1b      	lsrs	r3, r3, #16
 8009d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d70:	ee17 2a90 	vmov	r2, s15
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	0e1b      	lsrs	r3, r3, #24
 8009d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d9e:	ee17 2a90 	vmov	r2, s15
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009da6:	e008      	b.n	8009dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
}
 8009dba:	bf00      	nop
 8009dbc:	3724      	adds	r7, #36	; 0x24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
 8009dcc:	03d09000 	.word	0x03d09000
 8009dd0:	46000000 	.word	0x46000000
 8009dd4:	4c742400 	.word	0x4c742400
 8009dd8:	4a742400 	.word	0x4a742400
 8009ddc:	4bf42400 	.word	0x4bf42400

08009de0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b089      	sub	sp, #36	; 0x24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009de8:	4ba0      	ldr	r3, [pc, #640]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009df2:	4b9e      	ldr	r3, [pc, #632]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df6:	091b      	lsrs	r3, r3, #4
 8009df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009dfe:	4b9b      	ldr	r3, [pc, #620]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009e08:	4b98      	ldr	r3, [pc, #608]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0c:	08db      	lsrs	r3, r3, #3
 8009e0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 8111 	beq.w	800a04e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	f000 8083 	beq.w	8009f3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	f200 80a1 	bhi.w	8009f7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d056      	beq.n	8009ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e48:	e099      	b.n	8009f7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e4a:	4b88      	ldr	r3, [pc, #544]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d02d      	beq.n	8009eb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e56:	4b85      	ldr	r3, [pc, #532]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	08db      	lsrs	r3, r3, #3
 8009e5c:	f003 0303 	and.w	r3, r3, #3
 8009e60:	4a83      	ldr	r2, [pc, #524]	; (800a070 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e62:	fa22 f303 	lsr.w	r3, r2, r3
 8009e66:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e80:	4b7a      	ldr	r3, [pc, #488]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e88:	ee07 3a90 	vmov	s15, r3
 8009e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e94:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009eb0:	e087      	b.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec4:	4b69      	ldr	r3, [pc, #420]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ecc:	ee07 3a90 	vmov	s15, r3
 8009ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ed8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ef4:	e065      	b.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a07c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f08:	4b58      	ldr	r3, [pc, #352]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f38:	e043      	b.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	ee07 3a90 	vmov	s15, r3
 8009f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4c:	4b47      	ldr	r3, [pc, #284]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f60:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f7c:	e021      	b.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	ee07 3a90 	vmov	s15, r3
 8009f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a078 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f90:	4b36      	ldr	r3, [pc, #216]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009fc2:	4b2a      	ldr	r3, [pc, #168]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc6:	0a5b      	lsrs	r3, r3, #9
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe8:	ee17 2a90 	vmov	r2, s15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009ff0:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	ee17 2a90 	vmov	r2, s15
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a022:	0e1b      	lsrs	r3, r3, #24
 800a024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a034:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a038:	edd7 6a07 	vldr	s13, [r7, #28]
 800a03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a044:	ee17 2a90 	vmov	r2, s15
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a04c:	e008      	b.n	800a060 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	609a      	str	r2, [r3, #8]
}
 800a060:	bf00      	nop
 800a062:	3724      	adds	r7, #36	; 0x24
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	58024400 	.word	0x58024400
 800a070:	03d09000 	.word	0x03d09000
 800a074:	46000000 	.word	0x46000000
 800a078:	4c742400 	.word	0x4c742400
 800a07c:	4a742400 	.word	0x4a742400
 800a080:	4bf42400 	.word	0x4bf42400

0800a084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a092:	4b53      	ldr	r3, [pc, #332]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d101      	bne.n	800a0a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e099      	b.n	800a1d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0a2:	4b4f      	ldr	r3, [pc, #316]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a4e      	ldr	r2, [pc, #312]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ae:	f7f8 fb85 	bl	80027bc <HAL_GetTick>
 800a0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0b4:	e008      	b.n	800a0c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0b6:	f7f8 fb81 	bl	80027bc <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d901      	bls.n	800a0c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e086      	b.n	800a1d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0c8:	4b45      	ldr	r3, [pc, #276]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1f0      	bne.n	800a0b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0d4:	4b42      	ldr	r3, [pc, #264]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	031b      	lsls	r3, r3, #12
 800a0e2:	493f      	ldr	r1, [pc, #252]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	628b      	str	r3, [r1, #40]	; 0x28
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	025b      	lsls	r3, r3, #9
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	3b01      	subs	r3, #1
 800a104:	041b      	lsls	r3, r3, #16
 800a106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a10a:	431a      	orrs	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	3b01      	subs	r3, #1
 800a112:	061b      	lsls	r3, r3, #24
 800a114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a118:	4931      	ldr	r1, [pc, #196]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a11e:	4b30      	ldr	r3, [pc, #192]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	492d      	ldr	r1, [pc, #180]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a130:	4b2b      	ldr	r3, [pc, #172]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	f023 0220 	bic.w	r2, r3, #32
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	4928      	ldr	r1, [pc, #160]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a142:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a26      	ldr	r2, [pc, #152]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a148:	f023 0310 	bic.w	r3, r3, #16
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a14e:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <RCCEx_PLL2_Config+0x160>)
 800a154:	4013      	ands	r3, r2
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	69d2      	ldr	r2, [r2, #28]
 800a15a:	00d2      	lsls	r2, r2, #3
 800a15c:	4920      	ldr	r1, [pc, #128]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a162:	4b1f      	ldr	r3, [pc, #124]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a168:	f043 0310 	orr.w	r3, r3, #16
 800a16c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a174:	4b1a      	ldr	r3, [pc, #104]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a19      	ldr	r2, [pc, #100]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a17a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a17e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a180:	e00f      	b.n	800a1a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d106      	bne.n	800a196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a188:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	4a14      	ldr	r2, [pc, #80]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a18e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a192:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a194:	e005      	b.n	800a1a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a196:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	4a11      	ldr	r2, [pc, #68]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a19c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1a2:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a0e      	ldr	r2, [pc, #56]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a1a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ae:	f7f8 fb05 	bl	80027bc <HAL_GetTick>
 800a1b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1b4:	e008      	b.n	800a1c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1b6:	f7f8 fb01 	bl	80027bc <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e006      	b.n	800a1d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <RCCEx_PLL2_Config+0x15c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0f0      	beq.n	800a1b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	58024400 	.word	0x58024400
 800a1e4:	ffff0007 	.word	0xffff0007

0800a1e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1f6:	4b53      	ldr	r3, [pc, #332]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d101      	bne.n	800a206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e099      	b.n	800a33a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a206:	4b4f      	ldr	r3, [pc, #316]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a4e      	ldr	r2, [pc, #312]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a212:	f7f8 fad3 	bl	80027bc <HAL_GetTick>
 800a216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a218:	e008      	b.n	800a22c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a21a:	f7f8 facf 	bl	80027bc <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d901      	bls.n	800a22c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e086      	b.n	800a33a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a22c:	4b45      	ldr	r3, [pc, #276]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1f0      	bne.n	800a21a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a238:	4b42      	ldr	r3, [pc, #264]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	051b      	lsls	r3, r3, #20
 800a246:	493f      	ldr	r1, [pc, #252]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	628b      	str	r3, [r1, #40]	; 0x28
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	3b01      	subs	r3, #1
 800a252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	025b      	lsls	r3, r3, #9
 800a25e:	b29b      	uxth	r3, r3
 800a260:	431a      	orrs	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	3b01      	subs	r3, #1
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	3b01      	subs	r3, #1
 800a276:	061b      	lsls	r3, r3, #24
 800a278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a27c:	4931      	ldr	r1, [pc, #196]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a27e:	4313      	orrs	r3, r2
 800a280:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a282:	4b30      	ldr	r3, [pc, #192]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	492d      	ldr	r1, [pc, #180]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a290:	4313      	orrs	r3, r2
 800a292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a294:	4b2b      	ldr	r3, [pc, #172]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	4928      	ldr	r1, [pc, #160]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2a6:	4b27      	ldr	r3, [pc, #156]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	4a26      	ldr	r2, [pc, #152]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2b2:	4b24      	ldr	r3, [pc, #144]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2b6:	4b24      	ldr	r3, [pc, #144]	; (800a348 <RCCEx_PLL3_Config+0x160>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	69d2      	ldr	r2, [r2, #28]
 800a2be:	00d2      	lsls	r2, r2, #3
 800a2c0:	4920      	ldr	r1, [pc, #128]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2c6:	4b1f      	ldr	r3, [pc, #124]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	4a1e      	ldr	r2, [pc, #120]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4a19      	ldr	r2, [pc, #100]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2e4:	e00f      	b.n	800a306 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d106      	bne.n	800a2fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2ec:	4b15      	ldr	r3, [pc, #84]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f0:	4a14      	ldr	r2, [pc, #80]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2f8:	e005      	b.n	800a306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	4a11      	ldr	r2, [pc, #68]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a306:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a0e      	ldr	r2, [pc, #56]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a30c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a312:	f7f8 fa53 	bl	80027bc <HAL_GetTick>
 800a316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a318:	e008      	b.n	800a32c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a31a:	f7f8 fa4f 	bl	80027bc <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d901      	bls.n	800a32c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e006      	b.n	800a33a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <RCCEx_PLL3_Config+0x15c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0f0      	beq.n	800a31a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	58024400 	.word	0x58024400
 800a348:	ffff0007 	.word	0xffff0007

0800a34c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d067      	beq.n	800a42e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7f7 fc82 	bl	8001c7c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	22ca      	movs	r2, #202	; 0xca
 800a386:	625a      	str	r2, [r3, #36]	; 0x24
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2253      	movs	r2, #83	; 0x53
 800a38e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f879 	bl	800a488 <RTC_EnterInitMode>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d13b      	bne.n	800a418 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6899      	ldr	r1, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b23      	ldr	r3, [pc, #140]	; (800a438 <HAL_RTC_Init+0xec>)
 800a3ac:	400b      	ands	r3, r1
 800a3ae:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6899      	ldr	r1, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	0419      	lsls	r1, r3, #16
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f881 	bl	800a4e8 <RTC_ExitInitMode>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d113      	bne.n	800a418 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0203 	bic.w	r2, r2, #3
 800a3fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69da      	ldr	r2, [r3, #28]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	22ff      	movs	r2, #255	; 0xff
 800a41e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	ff8fffbf 	.word	0xff8fffbf

0800a43c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a452:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a454:	f7f8 f9b2 	bl	80027bc <HAL_GetTick>
 800a458:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a45a:	e009      	b.n	800a470 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a45c:	f7f8 f9ae 	bl	80027bc <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46a:	d901      	bls.n	800a470 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e007      	b.n	800a480 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f003 0320 	and.w	r3, r3, #32
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0ee      	beq.n	800a45c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d11d      	bne.n	800a4de <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a4ac:	f7f8 f986 	bl	80027bc <HAL_GetTick>
 800a4b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4b2:	e00d      	b.n	800a4d0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4b4:	f7f8 f982 	bl	80027bc <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c2:	d905      	bls.n	800a4d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0ea      	beq.n	800a4b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a4f4:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	4a19      	ldr	r2, [pc, #100]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4fe:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a500:	4b17      	ldr	r3, [pc, #92]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10c      	bne.n	800a526 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ff95 	bl	800a43c <HAL_RTC_WaitForSynchro>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d01e      	beq.n	800a556 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2203      	movs	r2, #3
 800a51c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	73fb      	strb	r3, [r7, #15]
 800a524:	e017      	b.n	800a556 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a526:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	4a0d      	ldr	r2, [pc, #52]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a52c:	f023 0320 	bic.w	r3, r3, #32
 800a530:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff ff82 	bl	800a43c <HAL_RTC_WaitForSynchro>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2203      	movs	r2, #3
 800a542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4a04      	ldr	r2, [pc, #16]	; (800a560 <RTC_ExitInitMode+0x78>)
 800a550:	f043 0320 	orr.w	r3, r3, #32
 800a554:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	58004000 	.word	0x58004000

0800a564 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e0eb      	b.n	800a752 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a75      	ldr	r2, [pc, #468]	; (800a75c <HAL_SPI_Init+0x1f8>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d00f      	beq.n	800a5aa <HAL_SPI_Init+0x46>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a74      	ldr	r2, [pc, #464]	; (800a760 <HAL_SPI_Init+0x1fc>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d00a      	beq.n	800a5aa <HAL_SPI_Init+0x46>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a72      	ldr	r2, [pc, #456]	; (800a764 <HAL_SPI_Init+0x200>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d005      	beq.n	800a5aa <HAL_SPI_Init+0x46>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	2b0f      	cmp	r3, #15
 800a5a4:	d901      	bls.n	800a5aa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e0d3      	b.n	800a752 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fb9e 	bl	800acec <SPI_GetPacketSize>
 800a5b0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a69      	ldr	r2, [pc, #420]	; (800a75c <HAL_SPI_Init+0x1f8>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d00c      	beq.n	800a5d6 <HAL_SPI_Init+0x72>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a67      	ldr	r2, [pc, #412]	; (800a760 <HAL_SPI_Init+0x1fc>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d007      	beq.n	800a5d6 <HAL_SPI_Init+0x72>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a66      	ldr	r2, [pc, #408]	; (800a764 <HAL_SPI_Init+0x200>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d002      	beq.n	800a5d6 <HAL_SPI_Init+0x72>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b08      	cmp	r3, #8
 800a5d4:	d811      	bhi.n	800a5fa <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a5da:	4a60      	ldr	r2, [pc, #384]	; (800a75c <HAL_SPI_Init+0x1f8>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d009      	beq.n	800a5f4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a5e      	ldr	r2, [pc, #376]	; (800a760 <HAL_SPI_Init+0x1fc>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d004      	beq.n	800a5f4 <HAL_SPI_Init+0x90>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a5d      	ldr	r2, [pc, #372]	; (800a764 <HAL_SPI_Init+0x200>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d104      	bne.n	800a5fe <HAL_SPI_Init+0x9a>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d901      	bls.n	800a5fe <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e0a9      	b.n	800a752 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7f7 fb62 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0201 	bic.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a638:	d119      	bne.n	800a66e <HAL_SPI_Init+0x10a>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a642:	d103      	bne.n	800a64c <HAL_SPI_Init+0xe8>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d008      	beq.n	800a65e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10c      	bne.n	800a66e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a65c:	d107      	bne.n	800a66e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a66c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	69da      	ldr	r2, [r3, #28]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	431a      	orrs	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	431a      	orrs	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a680:	ea42 0103 	orr.w	r1, r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	431a      	orrs	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ce:	ea42 0103 	orr.w	r1, r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d113      	bne.n	800a70e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a70c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0201 	bic.w	r2, r2, #1
 800a71c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	40013000 	.word	0x40013000
 800a760:	40003800 	.word	0x40003800
 800a764:	40003c00 	.word	0x40003c00

0800a768 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	; 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a780:	6a3a      	ldr	r2, [r7, #32]
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4013      	ands	r3, r2
 800a786:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a790:	2300      	movs	r3, #0
 800a792:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a79a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3330      	adds	r3, #48	; 0x30
 800a7a2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d113      	bne.n	800a7d6 <HAL_SPI_IRQHandler+0x6e>
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10e      	bne.n	800a7d6 <HAL_SPI_IRQHandler+0x6e>
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d009      	beq.n	800a7d6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	4798      	blx	r3
    handled = 1UL;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10f      	bne.n	800a800 <HAL_SPI_IRQHandler+0x98>
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <HAL_SPI_IRQHandler+0x98>
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d105      	bne.n	800a800 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
    handled = 1UL;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10f      	bne.n	800a82a <HAL_SPI_IRQHandler+0xc2>
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00a      	beq.n	800a82a <HAL_SPI_IRQHandler+0xc2>
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
    handled = 1UL;
 800a826:	2301      	movs	r3, #1
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 816f 	bne.w	800ab10 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80a0 	beq.w	800a97e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f042 0208 	orr.w	r2, r2, #8
 800a84c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0210 	orr.w	r2, r2, #16
 800a85c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	699a      	ldr	r2, [r3, #24]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a86c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	691a      	ldr	r2, [r3, #16]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0208 	bic.w	r2, r2, #8
 800a87c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00f      	beq.n	800a8a8 <HAL_SPI_IRQHandler+0x140>
 800a888:	7cfb      	ldrb	r3, [r7, #19]
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d004      	beq.n	800a898 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <HAL_SPI_IRQHandler+0x140>
 800a898:	7cfb      	ldrb	r3, [r7, #19]
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d059      	beq.n	800a952 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d154      	bne.n	800a952 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d13d      	bne.n	800a932 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a8b6:	e036      	b.n	800a926 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	2b0f      	cmp	r3, #15
 800a8be:	d90b      	bls.n	800a8d8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a8ca:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d0:	1d1a      	adds	r2, r3, #4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	665a      	str	r2, [r3, #100]	; 0x64
 800a8d6:	e01d      	b.n	800a914 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	d90b      	bls.n	800a8f8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	8812      	ldrh	r2, [r2, #0]
 800a8e8:	b292      	uxth	r2, r2
 800a8ea:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f0:	1c9a      	adds	r2, r3, #2
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	665a      	str	r2, [r3, #100]	; 0x64
 800a8f6:	e00d      	b.n	800a914 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a904:	7812      	ldrb	r2, [r2, #0]
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	3b01      	subs	r3, #1
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1c2      	bne.n	800a8b8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f93a 	bl	800abac <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f90a 	bl	800ab64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a950:	e0e3      	b.n	800ab1a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a952:	7cfb      	ldrb	r3, [r7, #19]
 800a954:	2b05      	cmp	r3, #5
 800a956:	d103      	bne.n	800a960 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f8f9 	bl	800ab50 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a95e:	e0d9      	b.n	800ab14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a960:	7cfb      	ldrb	r3, [r7, #19]
 800a962:	2b04      	cmp	r3, #4
 800a964:	d103      	bne.n	800a96e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8e8 	bl	800ab3c <HAL_SPI_RxCpltCallback>
    return;
 800a96c:	e0d2      	b.n	800ab14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a96e:	7cfb      	ldrb	r3, [r7, #19]
 800a970:	2b03      	cmp	r3, #3
 800a972:	f040 80cf 	bne.w	800ab14 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8d6 	bl	800ab28 <HAL_SPI_TxCpltCallback>
    return;
 800a97c:	e0ca      	b.n	800ab14 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00d      	beq.n	800a9a4 <HAL_SPI_IRQHandler+0x23c>
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	f003 0308 	and.w	r3, r3, #8
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d008      	beq.n	800a9a4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	699a      	ldr	r2, [r3, #24]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9a0:	619a      	str	r2, [r3, #24]

    return;
 800a9a2:	e0ba      	b.n	800ab1a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80b5 	beq.w	800ab1a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00f      	beq.n	800a9da <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9c0:	f043 0204 	orr.w	r2, r3, #4
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699a      	ldr	r2, [r3, #24]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9ea:	f043 0201 	orr.w	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00f      	beq.n	800aa2e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa14:	f043 0208 	orr.w	r2, r3, #8
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0220 	orr.w	r2, r2, #32
 800aa56:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d05a      	beq.n	800ab18 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0201 	bic.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6919      	ldr	r1, [r3, #16]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b28      	ldr	r3, [pc, #160]	; (800ab20 <HAL_SPI_IRQHandler+0x3b8>)
 800aa7e:	400b      	ands	r3, r1
 800aa80:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa8c:	d138      	bne.n	800ab00 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	689a      	ldr	r2, [r3, #8]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800aa9c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d013      	beq.n	800aace <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaaa:	4a1e      	ldr	r2, [pc, #120]	; (800ab24 <HAL_SPI_IRQHandler+0x3bc>)
 800aaac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fa fae6 	bl	8005084 <HAL_DMA_Abort_IT>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d020      	beq.n	800ab18 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aada:	4a12      	ldr	r2, [pc, #72]	; (800ab24 <HAL_SPI_IRQHandler+0x3bc>)
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fa face 	bl	8005084 <HAL_DMA_Abort_IT>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d014      	beq.n	800ab18 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aafe:	e00b      	b.n	800ab18 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f82b 	bl	800ab64 <HAL_SPI_ErrorCallback>
    return;
 800ab0e:	e003      	b.n	800ab18 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800ab10:	bf00      	nop
 800ab12:	e002      	b.n	800ab1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800ab18:	bf00      	nop
  }
}
 800ab1a:	3728      	adds	r7, #40	; 0x28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	fffffc94 	.word	0xfffffc94
 800ab24:	0800ab79 	.word	0x0800ab79

0800ab28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7ff ffe0 	bl	800ab64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aba4:	bf00      	nop
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0208 	orr.w	r2, r2, #8
 800abca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	699a      	ldr	r2, [r3, #24]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f042 0210 	orr.w	r2, r2, #16
 800abda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6919      	ldr	r1, [r3, #16]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4b3c      	ldr	r3, [pc, #240]	; (800ace8 <SPI_CloseTransfer+0x13c>)
 800abf8:	400b      	ands	r3, r1
 800abfa:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	689a      	ldr	r2, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d014      	beq.n	800ac42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00f      	beq.n	800ac42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	699a      	ldr	r2, [r3, #24]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f042 0220 	orr.w	r2, r2, #32
 800ac40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d014      	beq.n	800ac78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00f      	beq.n	800ac78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac5e:	f043 0204 	orr.w	r2, r3, #4
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac88:	f043 0201 	orr.w	r2, r3, #1
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aca0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00f      	beq.n	800accc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acb2:	f043 0208 	orr.w	r2, r3, #8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800acdc:	bf00      	nop
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	fffffc90 	.word	0xfffffc90

0800acec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	3301      	adds	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	3307      	adds	r3, #7
 800ad0a:	08db      	lsrs	r3, r3, #3
 800ad0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e049      	b.n	800adc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f7 f859 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2202      	movs	r2, #2
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f000 fcb9 	bl	800b6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d001      	beq.n	800ade8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e047      	b.n	800ae78 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a23      	ldr	r2, [pc, #140]	; (800ae84 <HAL_TIM_Base_Start+0xb4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d01d      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae02:	d018      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a1f      	ldr	r2, [pc, #124]	; (800ae88 <HAL_TIM_Base_Start+0xb8>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d013      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a1e      	ldr	r2, [pc, #120]	; (800ae8c <HAL_TIM_Base_Start+0xbc>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d00e      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a1c      	ldr	r2, [pc, #112]	; (800ae90 <HAL_TIM_Base_Start+0xc0>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d009      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a1b      	ldr	r2, [pc, #108]	; (800ae94 <HAL_TIM_Base_Start+0xc4>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d004      	beq.n	800ae36 <HAL_TIM_Base_Start+0x66>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a19      	ldr	r2, [pc, #100]	; (800ae98 <HAL_TIM_Base_Start+0xc8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d115      	bne.n	800ae62 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	4b17      	ldr	r3, [pc, #92]	; (800ae9c <HAL_TIM_Base_Start+0xcc>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b06      	cmp	r3, #6
 800ae46:	d015      	beq.n	800ae74 <HAL_TIM_Base_Start+0xa4>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae4e:	d011      	beq.n	800ae74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f042 0201 	orr.w	r2, r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae60:	e008      	b.n	800ae74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0201 	orr.w	r2, r2, #1
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	e000      	b.n	800ae76 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	40010000 	.word	0x40010000
 800ae88:	40000400 	.word	0x40000400
 800ae8c:	40000800 	.word	0x40000800
 800ae90:	40000c00 	.word	0x40000c00
 800ae94:	40010400 	.word	0x40010400
 800ae98:	40001800 	.word	0x40001800
 800ae9c:	00010007 	.word	0x00010007

0800aea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d001      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e04f      	b.n	800af58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0201 	orr.w	r2, r2, #1
 800aece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a23      	ldr	r2, [pc, #140]	; (800af64 <HAL_TIM_Base_Start_IT+0xc4>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d01d      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee2:	d018      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a1f      	ldr	r2, [pc, #124]	; (800af68 <HAL_TIM_Base_Start_IT+0xc8>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d013      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1e      	ldr	r2, [pc, #120]	; (800af6c <HAL_TIM_Base_Start_IT+0xcc>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00e      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a1c      	ldr	r2, [pc, #112]	; (800af70 <HAL_TIM_Base_Start_IT+0xd0>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d009      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <HAL_TIM_Base_Start_IT+0xd4>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d004      	beq.n	800af16 <HAL_TIM_Base_Start_IT+0x76>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a19      	ldr	r2, [pc, #100]	; (800af78 <HAL_TIM_Base_Start_IT+0xd8>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d115      	bne.n	800af42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689a      	ldr	r2, [r3, #8]
 800af1c:	4b17      	ldr	r3, [pc, #92]	; (800af7c <HAL_TIM_Base_Start_IT+0xdc>)
 800af1e:	4013      	ands	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b06      	cmp	r3, #6
 800af26:	d015      	beq.n	800af54 <HAL_TIM_Base_Start_IT+0xb4>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af2e:	d011      	beq.n	800af54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0201 	orr.w	r2, r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af40:	e008      	b.n	800af54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f042 0201 	orr.w	r2, r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e000      	b.n	800af56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	40010000 	.word	0x40010000
 800af68:	40000400 	.word	0x40000400
 800af6c:	40000800 	.word	0x40000800
 800af70:	40000c00 	.word	0x40000c00
 800af74:	40010400 	.word	0x40010400
 800af78:	40001800 	.word	0x40001800
 800af7c:	00010007 	.word	0x00010007

0800af80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e049      	b.n	800b026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f841 	bl	800b02e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2202      	movs	r2, #2
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3304      	adds	r3, #4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f000 fb8a 	bl	800b6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b02      	cmp	r3, #2
 800b056:	d122      	bne.n	800b09e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b02      	cmp	r3, #2
 800b064:	d11b      	bne.n	800b09e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f06f 0202 	mvn.w	r2, #2
 800b06e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	f003 0303 	and.w	r3, r3, #3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fb09 	bl	800b69c <HAL_TIM_IC_CaptureCallback>
 800b08a:	e005      	b.n	800b098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fafb 	bl	800b688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fb0c 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d122      	bne.n	800b0f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d11b      	bne.n	800b0f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f06f 0204 	mvn.w	r2, #4
 800b0c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fadf 	bl	800b69c <HAL_TIM_IC_CaptureCallback>
 800b0de:	e005      	b.n	800b0ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fad1 	bl	800b688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fae2 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b08      	cmp	r3, #8
 800b0fe:	d122      	bne.n	800b146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	f003 0308 	and.w	r3, r3, #8
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	d11b      	bne.n	800b146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f06f 0208 	mvn.w	r2, #8
 800b116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2204      	movs	r2, #4
 800b11c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fab5 	bl	800b69c <HAL_TIM_IC_CaptureCallback>
 800b132:	e005      	b.n	800b140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 faa7 	bl	800b688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fab8 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2b10      	cmp	r3, #16
 800b152:	d122      	bne.n	800b19a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	f003 0310 	and.w	r3, r3, #16
 800b15e:	2b10      	cmp	r3, #16
 800b160:	d11b      	bne.n	800b19a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f06f 0210 	mvn.w	r2, #16
 800b16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2208      	movs	r2, #8
 800b170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa8b 	bl	800b69c <HAL_TIM_IC_CaptureCallback>
 800b186:	e005      	b.n	800b194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa7d 	bl	800b688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fa8e 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d10e      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d107      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f06f 0201 	mvn.w	r2, #1
 800b1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7f6 fcbb 	bl	8001b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d0:	2b80      	cmp	r3, #128	; 0x80
 800b1d2:	d10e      	bne.n	800b1f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1de:	2b80      	cmp	r3, #128	; 0x80
 800b1e0:	d107      	bne.n	800b1f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 ff0b 	bl	800c008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b200:	d10e      	bne.n	800b220 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20c:	2b80      	cmp	r3, #128	; 0x80
 800b20e:	d107      	bne.n	800b220 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fefe 	bl	800c01c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d10e      	bne.n	800b24c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b238:	2b40      	cmp	r3, #64	; 0x40
 800b23a:	d107      	bne.n	800b24c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa3c 	bl	800b6c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0320 	and.w	r3, r3, #32
 800b256:	2b20      	cmp	r3, #32
 800b258:	d10e      	bne.n	800b278 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0320 	and.w	r3, r3, #32
 800b264:	2b20      	cmp	r3, #32
 800b266:	d107      	bne.n	800b278 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0220 	mvn.w	r2, #32
 800b270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 febe 	bl	800bff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b296:	2302      	movs	r3, #2
 800b298:	e0fd      	b.n	800b496 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b14      	cmp	r3, #20
 800b2a6:	f200 80f0 	bhi.w	800b48a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b305 	.word	0x0800b305
 800b2b4:	0800b48b 	.word	0x0800b48b
 800b2b8:	0800b48b 	.word	0x0800b48b
 800b2bc:	0800b48b 	.word	0x0800b48b
 800b2c0:	0800b345 	.word	0x0800b345
 800b2c4:	0800b48b 	.word	0x0800b48b
 800b2c8:	0800b48b 	.word	0x0800b48b
 800b2cc:	0800b48b 	.word	0x0800b48b
 800b2d0:	0800b387 	.word	0x0800b387
 800b2d4:	0800b48b 	.word	0x0800b48b
 800b2d8:	0800b48b 	.word	0x0800b48b
 800b2dc:	0800b48b 	.word	0x0800b48b
 800b2e0:	0800b3c7 	.word	0x0800b3c7
 800b2e4:	0800b48b 	.word	0x0800b48b
 800b2e8:	0800b48b 	.word	0x0800b48b
 800b2ec:	0800b48b 	.word	0x0800b48b
 800b2f0:	0800b409 	.word	0x0800b409
 800b2f4:	0800b48b 	.word	0x0800b48b
 800b2f8:	0800b48b 	.word	0x0800b48b
 800b2fc:	0800b48b 	.word	0x0800b48b
 800b300:	0800b449 	.word	0x0800b449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fa7e 	bl	800b80c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	699a      	ldr	r2, [r3, #24]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f042 0208 	orr.w	r2, r2, #8
 800b31e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699a      	ldr	r2, [r3, #24]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f022 0204 	bic.w	r2, r2, #4
 800b32e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6999      	ldr	r1, [r3, #24]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	691a      	ldr	r2, [r3, #16]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	619a      	str	r2, [r3, #24]
      break;
 800b342:	e0a3      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 faee 	bl	800b92c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699a      	ldr	r2, [r3, #24]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b35e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	699a      	ldr	r2, [r3, #24]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b36e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6999      	ldr	r1, [r3, #24]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	021a      	lsls	r2, r3, #8
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	619a      	str	r2, [r3, #24]
      break;
 800b384:	e082      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fb57 	bl	800ba40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69da      	ldr	r2, [r3, #28]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f042 0208 	orr.w	r2, r2, #8
 800b3a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f022 0204 	bic.w	r2, r2, #4
 800b3b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	69d9      	ldr	r1, [r3, #28]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	61da      	str	r2, [r3, #28]
      break;
 800b3c4:	e062      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68b9      	ldr	r1, [r7, #8]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 fbbd 	bl	800bb4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69da      	ldr	r2, [r3, #28]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	69da      	ldr	r2, [r3, #28]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69d9      	ldr	r1, [r3, #28]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	021a      	lsls	r2, r3, #8
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	61da      	str	r2, [r3, #28]
      break;
 800b406:	e041      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fc04 	bl	800bc1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f042 0208 	orr.w	r2, r2, #8
 800b422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f022 0204 	bic.w	r2, r2, #4
 800b432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	691a      	ldr	r2, [r3, #16]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	430a      	orrs	r2, r1
 800b444:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b446:	e021      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 fc46 	bl	800bce0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b462:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b472:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	021a      	lsls	r2, r3, #8
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	430a      	orrs	r2, r1
 800b486:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b488:	e000      	b.n	800b48c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b48a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop

0800b4a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_TIM_ConfigClockSource+0x18>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e0db      	b.n	800b670 <HAL_TIM_ConfigClockSource+0x1d0>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4b69      	ldr	r3, [pc, #420]	; (800b678 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a63      	ldr	r2, [pc, #396]	; (800b67c <HAL_TIM_ConfigClockSource+0x1dc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f000 80a9 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b4f4:	4a61      	ldr	r2, [pc, #388]	; (800b67c <HAL_TIM_ConfigClockSource+0x1dc>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	f200 80ae 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b4fc:	4a60      	ldr	r2, [pc, #384]	; (800b680 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	f000 80a1 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b504:	4a5e      	ldr	r2, [pc, #376]	; (800b680 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	f200 80a6 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b50c:	4a5d      	ldr	r2, [pc, #372]	; (800b684 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	f000 8099 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b514:	4a5b      	ldr	r2, [pc, #364]	; (800b684 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b516:	4293      	cmp	r3, r2
 800b518:	f200 809e 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b51c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b520:	f000 8091 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b524:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b528:	f200 8096 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b52c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b530:	f000 8089 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b538:	f200 808e 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b540:	d03e      	beq.n	800b5c0 <HAL_TIM_ConfigClockSource+0x120>
 800b542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b546:	f200 8087 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54e:	f000 8085 	beq.w	800b65c <HAL_TIM_ConfigClockSource+0x1bc>
 800b552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b556:	d87f      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b558:	2b70      	cmp	r3, #112	; 0x70
 800b55a:	d01a      	beq.n	800b592 <HAL_TIM_ConfigClockSource+0xf2>
 800b55c:	2b70      	cmp	r3, #112	; 0x70
 800b55e:	d87b      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b560:	2b60      	cmp	r3, #96	; 0x60
 800b562:	d050      	beq.n	800b606 <HAL_TIM_ConfigClockSource+0x166>
 800b564:	2b60      	cmp	r3, #96	; 0x60
 800b566:	d877      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b568:	2b50      	cmp	r3, #80	; 0x50
 800b56a:	d03c      	beq.n	800b5e6 <HAL_TIM_ConfigClockSource+0x146>
 800b56c:	2b50      	cmp	r3, #80	; 0x50
 800b56e:	d873      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b570:	2b40      	cmp	r3, #64	; 0x40
 800b572:	d058      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x186>
 800b574:	2b40      	cmp	r3, #64	; 0x40
 800b576:	d86f      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b578:	2b30      	cmp	r3, #48	; 0x30
 800b57a:	d064      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b57c:	2b30      	cmp	r3, #48	; 0x30
 800b57e:	d86b      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b580:	2b20      	cmp	r3, #32
 800b582:	d060      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b584:	2b20      	cmp	r3, #32
 800b586:	d867      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05c      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	d05a      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b590:	e062      	b.n	800b658 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	6899      	ldr	r1, [r3, #8]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	f000 fc7f 	bl	800bea4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	609a      	str	r2, [r3, #8]
      break;
 800b5be:	e04e      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6899      	ldr	r1, [r3, #8]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f000 fc68 	bl	800bea4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5e2:	609a      	str	r2, [r3, #8]
      break;
 800b5e4:	e03b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	6859      	ldr	r1, [r3, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f000 fbd8 	bl	800bda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2150      	movs	r1, #80	; 0x50
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 fc32 	bl	800be68 <TIM_ITRx_SetConfig>
      break;
 800b604:	e02b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6859      	ldr	r1, [r3, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	461a      	mov	r2, r3
 800b614:	f000 fbf7 	bl	800be06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2160      	movs	r1, #96	; 0x60
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 fc22 	bl	800be68 <TIM_ITRx_SetConfig>
      break;
 800b624:	e01b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	6859      	ldr	r1, [r3, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	461a      	mov	r2, r3
 800b634:	f000 fbb8 	bl	800bda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2140      	movs	r1, #64	; 0x40
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fc12 	bl	800be68 <TIM_ITRx_SetConfig>
      break;
 800b644:	e00b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f000 fc09 	bl	800be68 <TIM_ITRx_SetConfig>
        break;
 800b656:	e002      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b658:	bf00      	nop
 800b65a:	e000      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b65c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	ffceff88 	.word	0xffceff88
 800b67c:	00100040 	.word	0x00100040
 800b680:	00100030 	.word	0x00100030
 800b684:	00100020 	.word	0x00100020

0800b688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a40      	ldr	r2, [pc, #256]	; (800b7ec <TIM_Base_SetConfig+0x114>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d013      	beq.n	800b718 <TIM_Base_SetConfig+0x40>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6f6:	d00f      	beq.n	800b718 <TIM_Base_SetConfig+0x40>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a3d      	ldr	r2, [pc, #244]	; (800b7f0 <TIM_Base_SetConfig+0x118>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00b      	beq.n	800b718 <TIM_Base_SetConfig+0x40>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a3c      	ldr	r2, [pc, #240]	; (800b7f4 <TIM_Base_SetConfig+0x11c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d007      	beq.n	800b718 <TIM_Base_SetConfig+0x40>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a3b      	ldr	r2, [pc, #236]	; (800b7f8 <TIM_Base_SetConfig+0x120>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d003      	beq.n	800b718 <TIM_Base_SetConfig+0x40>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a3a      	ldr	r2, [pc, #232]	; (800b7fc <TIM_Base_SetConfig+0x124>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d108      	bne.n	800b72a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a2f      	ldr	r2, [pc, #188]	; (800b7ec <TIM_Base_SetConfig+0x114>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01f      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b738:	d01b      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a2c      	ldr	r2, [pc, #176]	; (800b7f0 <TIM_Base_SetConfig+0x118>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d017      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a2b      	ldr	r2, [pc, #172]	; (800b7f4 <TIM_Base_SetConfig+0x11c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d013      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a2a      	ldr	r2, [pc, #168]	; (800b7f8 <TIM_Base_SetConfig+0x120>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00f      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a29      	ldr	r2, [pc, #164]	; (800b7fc <TIM_Base_SetConfig+0x124>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d00b      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a28      	ldr	r2, [pc, #160]	; (800b800 <TIM_Base_SetConfig+0x128>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d007      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a27      	ldr	r2, [pc, #156]	; (800b804 <TIM_Base_SetConfig+0x12c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d003      	beq.n	800b772 <TIM_Base_SetConfig+0x9a>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a26      	ldr	r2, [pc, #152]	; (800b808 <TIM_Base_SetConfig+0x130>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d108      	bne.n	800b784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a10      	ldr	r2, [pc, #64]	; (800b7ec <TIM_Base_SetConfig+0x114>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00f      	beq.n	800b7d0 <TIM_Base_SetConfig+0xf8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a12      	ldr	r2, [pc, #72]	; (800b7fc <TIM_Base_SetConfig+0x124>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d00b      	beq.n	800b7d0 <TIM_Base_SetConfig+0xf8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a11      	ldr	r2, [pc, #68]	; (800b800 <TIM_Base_SetConfig+0x128>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d007      	beq.n	800b7d0 <TIM_Base_SetConfig+0xf8>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a10      	ldr	r2, [pc, #64]	; (800b804 <TIM_Base_SetConfig+0x12c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_Base_SetConfig+0xf8>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a0f      	ldr	r2, [pc, #60]	; (800b808 <TIM_Base_SetConfig+0x130>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d103      	bne.n	800b7d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	691a      	ldr	r2, [r3, #16]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	615a      	str	r2, [r3, #20]
}
 800b7de:	bf00      	nop
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	40010000 	.word	0x40010000
 800b7f0:	40000400 	.word	0x40000400
 800b7f4:	40000800 	.word	0x40000800
 800b7f8:	40000c00 	.word	0x40000c00
 800b7fc:	40010400 	.word	0x40010400
 800b800:	40014000 	.word	0x40014000
 800b804:	40014400 	.word	0x40014400
 800b808:	40014800 	.word	0x40014800

0800b80c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f023 0201 	bic.w	r2, r3, #1
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4b37      	ldr	r3, [pc, #220]	; (800b914 <TIM_OC1_SetConfig+0x108>)
 800b838:	4013      	ands	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f023 0302 	bic.w	r3, r3, #2
 800b854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a2d      	ldr	r2, [pc, #180]	; (800b918 <TIM_OC1_SetConfig+0x10c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00f      	beq.n	800b888 <TIM_OC1_SetConfig+0x7c>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a2c      	ldr	r2, [pc, #176]	; (800b91c <TIM_OC1_SetConfig+0x110>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00b      	beq.n	800b888 <TIM_OC1_SetConfig+0x7c>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a2b      	ldr	r2, [pc, #172]	; (800b920 <TIM_OC1_SetConfig+0x114>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d007      	beq.n	800b888 <TIM_OC1_SetConfig+0x7c>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a2a      	ldr	r2, [pc, #168]	; (800b924 <TIM_OC1_SetConfig+0x118>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d003      	beq.n	800b888 <TIM_OC1_SetConfig+0x7c>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a29      	ldr	r2, [pc, #164]	; (800b928 <TIM_OC1_SetConfig+0x11c>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d10c      	bne.n	800b8a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f023 0308 	bic.w	r3, r3, #8
 800b88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f023 0304 	bic.w	r3, r3, #4
 800b8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a1c      	ldr	r2, [pc, #112]	; (800b918 <TIM_OC1_SetConfig+0x10c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00f      	beq.n	800b8ca <TIM_OC1_SetConfig+0xbe>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a1b      	ldr	r2, [pc, #108]	; (800b91c <TIM_OC1_SetConfig+0x110>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00b      	beq.n	800b8ca <TIM_OC1_SetConfig+0xbe>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a1a      	ldr	r2, [pc, #104]	; (800b920 <TIM_OC1_SetConfig+0x114>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d007      	beq.n	800b8ca <TIM_OC1_SetConfig+0xbe>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a19      	ldr	r2, [pc, #100]	; (800b924 <TIM_OC1_SetConfig+0x118>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d003      	beq.n	800b8ca <TIM_OC1_SetConfig+0xbe>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a18      	ldr	r2, [pc, #96]	; (800b928 <TIM_OC1_SetConfig+0x11c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d111      	bne.n	800b8ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685a      	ldr	r2, [r3, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	621a      	str	r2, [r3, #32]
}
 800b908:	bf00      	nop
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	fffeff8f 	.word	0xfffeff8f
 800b918:	40010000 	.word	0x40010000
 800b91c:	40010400 	.word	0x40010400
 800b920:	40014000 	.word	0x40014000
 800b924:	40014400 	.word	0x40014400
 800b928:	40014800 	.word	0x40014800

0800b92c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	f023 0210 	bic.w	r2, r3, #16
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4b34      	ldr	r3, [pc, #208]	; (800ba28 <TIM_OC2_SetConfig+0xfc>)
 800b958:	4013      	ands	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f023 0320 	bic.w	r3, r3, #32
 800b976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <TIM_OC2_SetConfig+0x100>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d003      	beq.n	800b994 <TIM_OC2_SetConfig+0x68>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a28      	ldr	r2, [pc, #160]	; (800ba30 <TIM_OC2_SetConfig+0x104>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d10d      	bne.n	800b9b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	011b      	lsls	r3, r3, #4
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a1e      	ldr	r2, [pc, #120]	; (800ba2c <TIM_OC2_SetConfig+0x100>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d00f      	beq.n	800b9d8 <TIM_OC2_SetConfig+0xac>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a1d      	ldr	r2, [pc, #116]	; (800ba30 <TIM_OC2_SetConfig+0x104>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00b      	beq.n	800b9d8 <TIM_OC2_SetConfig+0xac>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a1c      	ldr	r2, [pc, #112]	; (800ba34 <TIM_OC2_SetConfig+0x108>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d007      	beq.n	800b9d8 <TIM_OC2_SetConfig+0xac>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a1b      	ldr	r2, [pc, #108]	; (800ba38 <TIM_OC2_SetConfig+0x10c>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <TIM_OC2_SetConfig+0xac>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a1a      	ldr	r2, [pc, #104]	; (800ba3c <TIM_OC2_SetConfig+0x110>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d113      	bne.n	800ba00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	621a      	str	r2, [r3, #32]
}
 800ba1a:	bf00      	nop
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	feff8fff 	.word	0xfeff8fff
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40010400 	.word	0x40010400
 800ba34:	40014000 	.word	0x40014000
 800ba38:	40014400 	.word	0x40014400
 800ba3c:	40014800 	.word	0x40014800

0800ba40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a27      	ldr	r2, [pc, #156]	; (800bb38 <TIM_OC3_SetConfig+0xf8>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d003      	beq.n	800baa6 <TIM_OC3_SetConfig+0x66>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a26      	ldr	r2, [pc, #152]	; (800bb3c <TIM_OC3_SetConfig+0xfc>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d10d      	bne.n	800bac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800baac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a1c      	ldr	r2, [pc, #112]	; (800bb38 <TIM_OC3_SetConfig+0xf8>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00f      	beq.n	800baea <TIM_OC3_SetConfig+0xaa>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a1b      	ldr	r2, [pc, #108]	; (800bb3c <TIM_OC3_SetConfig+0xfc>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00b      	beq.n	800baea <TIM_OC3_SetConfig+0xaa>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1a      	ldr	r2, [pc, #104]	; (800bb40 <TIM_OC3_SetConfig+0x100>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d007      	beq.n	800baea <TIM_OC3_SetConfig+0xaa>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a19      	ldr	r2, [pc, #100]	; (800bb44 <TIM_OC3_SetConfig+0x104>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d003      	beq.n	800baea <TIM_OC3_SetConfig+0xaa>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a18      	ldr	r2, [pc, #96]	; (800bb48 <TIM_OC3_SetConfig+0x108>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d113      	bne.n	800bb12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	011b      	lsls	r3, r3, #4
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	621a      	str	r2, [r3, #32]
}
 800bb2c:	bf00      	nop
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	40010000 	.word	0x40010000
 800bb3c:	40010400 	.word	0x40010400
 800bb40:	40014000 	.word	0x40014000
 800bb44:	40014400 	.word	0x40014400
 800bb48:	40014800 	.word	0x40014800

0800bb4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	021b      	lsls	r3, r3, #8
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	031b      	lsls	r3, r3, #12
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a18      	ldr	r2, [pc, #96]	; (800bc08 <TIM_OC4_SetConfig+0xbc>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d00f      	beq.n	800bbcc <TIM_OC4_SetConfig+0x80>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a17      	ldr	r2, [pc, #92]	; (800bc0c <TIM_OC4_SetConfig+0xc0>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d00b      	beq.n	800bbcc <TIM_OC4_SetConfig+0x80>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a16      	ldr	r2, [pc, #88]	; (800bc10 <TIM_OC4_SetConfig+0xc4>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d007      	beq.n	800bbcc <TIM_OC4_SetConfig+0x80>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a15      	ldr	r2, [pc, #84]	; (800bc14 <TIM_OC4_SetConfig+0xc8>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d003      	beq.n	800bbcc <TIM_OC4_SetConfig+0x80>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a14      	ldr	r2, [pc, #80]	; (800bc18 <TIM_OC4_SetConfig+0xcc>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d109      	bne.n	800bbe0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	019b      	lsls	r3, r3, #6
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	621a      	str	r2, [r3, #32]
}
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	40010000 	.word	0x40010000
 800bc0c:	40010400 	.word	0x40010400
 800bc10:	40014000 	.word	0x40014000
 800bc14:	40014400 	.word	0x40014400
 800bc18:	40014800 	.word	0x40014800

0800bc1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	041b      	lsls	r3, r3, #16
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a17      	ldr	r2, [pc, #92]	; (800bccc <TIM_OC5_SetConfig+0xb0>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_OC5_SetConfig+0x76>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a16      	ldr	r2, [pc, #88]	; (800bcd0 <TIM_OC5_SetConfig+0xb4>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_OC5_SetConfig+0x76>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a15      	ldr	r2, [pc, #84]	; (800bcd4 <TIM_OC5_SetConfig+0xb8>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_OC5_SetConfig+0x76>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a14      	ldr	r2, [pc, #80]	; (800bcd8 <TIM_OC5_SetConfig+0xbc>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_OC5_SetConfig+0x76>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a13      	ldr	r2, [pc, #76]	; (800bcdc <TIM_OC5_SetConfig+0xc0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d109      	bne.n	800bca6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	021b      	lsls	r3, r3, #8
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	621a      	str	r2, [r3, #32]
}
 800bcc0:	bf00      	nop
 800bcc2:	371c      	adds	r7, #28
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	40010000 	.word	0x40010000
 800bcd0:	40010400 	.word	0x40010400
 800bcd4:	40014000 	.word	0x40014000
 800bcd8:	40014400 	.word	0x40014400
 800bcdc:	40014800 	.word	0x40014800

0800bce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b087      	sub	sp, #28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	021b      	lsls	r3, r3, #8
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	051b      	lsls	r3, r3, #20
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a18      	ldr	r2, [pc, #96]	; (800bd94 <TIM_OC6_SetConfig+0xb4>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d00f      	beq.n	800bd58 <TIM_OC6_SetConfig+0x78>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <TIM_OC6_SetConfig+0xb8>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d00b      	beq.n	800bd58 <TIM_OC6_SetConfig+0x78>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a16      	ldr	r2, [pc, #88]	; (800bd9c <TIM_OC6_SetConfig+0xbc>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d007      	beq.n	800bd58 <TIM_OC6_SetConfig+0x78>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a15      	ldr	r2, [pc, #84]	; (800bda0 <TIM_OC6_SetConfig+0xc0>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d003      	beq.n	800bd58 <TIM_OC6_SetConfig+0x78>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a14      	ldr	r2, [pc, #80]	; (800bda4 <TIM_OC6_SetConfig+0xc4>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d109      	bne.n	800bd6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bd5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	029b      	lsls	r3, r3, #10
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	621a      	str	r2, [r3, #32]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40010000 	.word	0x40010000
 800bd98:	40010400 	.word	0x40010400
 800bd9c:	40014000 	.word	0x40014000
 800bda0:	40014400 	.word	0x40014400
 800bda4:	40014800 	.word	0x40014800

0800bda8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	f023 0201 	bic.w	r2, r3, #1
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bdd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f023 030a 	bic.w	r3, r3, #10
 800bde4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be06:	b480      	push	{r7}
 800be08:	b087      	sub	sp, #28
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	f023 0210 	bic.w	r2, r3, #16
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	031b      	lsls	r3, r3, #12
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	4313      	orrs	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	621a      	str	r2, [r3, #32]
}
 800be5a:	bf00      	nop
 800be5c:	371c      	adds	r7, #28
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
	...

0800be68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <TIM_ITRx_SetConfig+0x38>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4313      	orrs	r3, r2
 800be86:	f043 0307 	orr.w	r3, r3, #7
 800be8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	609a      	str	r2, [r3, #8]
}
 800be92:	bf00      	nop
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	ffcfff8f 	.word	0xffcfff8f

0800bea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	021a      	lsls	r2, r3, #8
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	4313      	orrs	r3, r2
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	4313      	orrs	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	609a      	str	r2, [r3, #8]
}
 800bed8:	bf00      	nop
 800beda:	371c      	adds	r7, #28
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d101      	bne.n	800befc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bef8:	2302      	movs	r3, #2
 800befa:	e068      	b.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a2e      	ldr	r2, [pc, #184]	; (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d004      	beq.n	800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a2d      	ldr	r2, [pc, #180]	; (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d108      	bne.n	800bf42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a1e      	ldr	r2, [pc, #120]	; (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d01d      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf6e:	d018      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a1b      	ldr	r2, [pc, #108]	; (800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d013      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a1a      	ldr	r2, [pc, #104]	; (800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d00e      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a18      	ldr	r2, [pc, #96]	; (800bfec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d009      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a13      	ldr	r2, [pc, #76]	; (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d004      	beq.n	800bfa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a14      	ldr	r2, [pc, #80]	; (800bff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d10c      	bne.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	40010000 	.word	0x40010000
 800bfe0:	40010400 	.word	0x40010400
 800bfe4:	40000400 	.word	0x40000400
 800bfe8:	40000800 	.word	0x40000800
 800bfec:	40000c00 	.word	0x40000c00
 800bff0:	40001800 	.word	0x40001800

0800bff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bffc:	bf00      	nop
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e042      	b.n	800c0c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d106      	bne.n	800c05a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7f5 ff85 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2224      	movs	r2, #36	; 0x24
 800c05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f022 0201 	bic.w	r2, r2, #1
 800c070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fd40 	bl	800caf8 <UART_SetConfig>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d101      	bne.n	800c082 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e022      	b.n	800c0c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f001 fa94 	bl	800d5b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c09e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689a      	ldr	r2, [r3, #8]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f042 0201 	orr.w	r2, r2, #1
 800c0be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 fb1b 	bl	800d6fc <UART_CheckIdleState>
 800c0c6:	4603      	mov	r3, r0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b08a      	sub	sp, #40	; 0x28
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0e6:	2b20      	cmp	r3, #32
 800c0e8:	f040 8083 	bne.w	800c1f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <HAL_UART_Transmit+0x28>
 800c0f2:	88fb      	ldrh	r3, [r7, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e07b      	b.n	800c1f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c102:	2b01      	cmp	r3, #1
 800c104:	d101      	bne.n	800c10a <HAL_UART_Transmit+0x3a>
 800c106:	2302      	movs	r3, #2
 800c108:	e074      	b.n	800c1f4 <HAL_UART_Transmit+0x124>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2221      	movs	r2, #33	; 0x21
 800c11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c122:	f7f6 fb4b 	bl	80027bc <HAL_GetTick>
 800c126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	88fa      	ldrh	r2, [r7, #6]
 800c12c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	88fa      	ldrh	r2, [r7, #6]
 800c134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c140:	d108      	bne.n	800c154 <HAL_UART_Transmit+0x84>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c14a:	2300      	movs	r3, #0
 800c14c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	61bb      	str	r3, [r7, #24]
 800c152:	e003      	b.n	800c15c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c158:	2300      	movs	r3, #0
 800c15a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c164:	e02c      	b.n	800c1c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	2200      	movs	r2, #0
 800c16e:	2180      	movs	r1, #128	; 0x80
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f001 fb0e 	bl	800d792 <UART_WaitOnFlagUntilTimeout>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e039      	b.n	800c1f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10b      	bne.n	800c19e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c194:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	3302      	adds	r3, #2
 800c19a:	61bb      	str	r3, [r7, #24]
 800c19c:	e007      	b.n	800c1ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	781a      	ldrb	r2, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1cc      	bne.n	800c166 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2140      	movs	r1, #64	; 0x40
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f001 fadb 	bl	800d792 <UART_WaitOnFlagUntilTimeout>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e006      	b.n	800c1f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e000      	b.n	800c1f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c1f2:	2302      	movs	r3, #2
  }
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08a      	sub	sp, #40	; 0x28
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	4613      	mov	r3, r2
 800c20a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c212:	2b20      	cmp	r3, #32
 800c214:	f040 80c0 	bne.w	800c398 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <HAL_UART_Receive+0x28>
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e0b8      	b.n	800c39a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d101      	bne.n	800c236 <HAL_UART_Receive+0x3a>
 800c232:	2302      	movs	r3, #2
 800c234:	e0b1      	b.n	800c39a <HAL_UART_Receive+0x19e>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2222      	movs	r2, #34	; 0x22
 800c24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c254:	f7f6 fab2 	bl	80027bc <HAL_GetTick>
 800c258:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	88fa      	ldrh	r2, [r7, #6]
 800c25e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	88fa      	ldrh	r2, [r7, #6]
 800c266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c272:	d10e      	bne.n	800c292 <HAL_UART_Receive+0x96>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d105      	bne.n	800c288 <HAL_UART_Receive+0x8c>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c286:	e02d      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	22ff      	movs	r2, #255	; 0xff
 800c28c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c290:	e028      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10d      	bne.n	800c2b6 <HAL_UART_Receive+0xba>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d104      	bne.n	800c2ac <HAL_UART_Receive+0xb0>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	22ff      	movs	r2, #255	; 0xff
 800c2a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2aa:	e01b      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	227f      	movs	r2, #127	; 0x7f
 800c2b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2b4:	e016      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2be:	d10d      	bne.n	800c2dc <HAL_UART_Receive+0xe0>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <HAL_UART_Receive+0xd6>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	227f      	movs	r2, #127	; 0x7f
 800c2cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2d0:	e008      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	223f      	movs	r2, #63	; 0x3f
 800c2d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c2da:	e003      	b.n	800c2e4 <HAL_UART_Receive+0xe8>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2f4:	d108      	bne.n	800c308 <HAL_UART_Receive+0x10c>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	e003      	b.n	800c310 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c318:	e032      	b.n	800c380 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2200      	movs	r2, #0
 800c322:	2120      	movs	r1, #32
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f001 fa34 	bl	800d792 <UART_WaitOnFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e032      	b.n	800c39a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10c      	bne.n	800c354 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c340:	b29a      	uxth	r2, r3
 800c342:	8a7b      	ldrh	r3, [r7, #18]
 800c344:	4013      	ands	r3, r2
 800c346:	b29a      	uxth	r2, r3
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	3302      	adds	r3, #2
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	e00c      	b.n	800c36e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	8a7b      	ldrh	r3, [r7, #18]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4013      	ands	r3, r2
 800c362:	b2da      	uxtb	r2, r3
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3301      	adds	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c374:	b29b      	uxth	r3, r3
 800c376:	3b01      	subs	r3, #1
 800c378:	b29a      	uxth	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c386:	b29b      	uxth	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1c6      	bne.n	800c31a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2220      	movs	r2, #32
 800c390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	e000      	b.n	800c39a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800c398:	2302      	movs	r3, #2
  }
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3720      	adds	r7, #32
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	d168      	bne.n	800c48e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <HAL_UART_Transmit_DMA+0x24>
 800c3c2:	88fb      	ldrh	r3, [r7, #6]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e061      	b.n	800c490 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d101      	bne.n	800c3da <HAL_UART_Transmit_DMA+0x36>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	e05a      	b.n	800c490 <HAL_UART_Transmit_DMA+0xec>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	88fa      	ldrh	r2, [r7, #6]
 800c3ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	88fa      	ldrh	r2, [r7, #6]
 800c3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2221      	movs	r2, #33	; 0x21
 800c404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d02c      	beq.n	800c46a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c414:	4a20      	ldr	r2, [pc, #128]	; (800c498 <HAL_UART_Transmit_DMA+0xf4>)
 800c416:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c41c:	4a1f      	ldr	r2, [pc, #124]	; (800c49c <HAL_UART_Transmit_DMA+0xf8>)
 800c41e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c424:	4a1e      	ldr	r2, [pc, #120]	; (800c4a0 <HAL_UART_Transmit_DMA+0xfc>)
 800c426:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c42c:	2200      	movs	r2, #0
 800c42e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c438:	4619      	mov	r1, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3328      	adds	r3, #40	; 0x28
 800c440:	461a      	mov	r2, r3
 800c442:	88fb      	ldrh	r3, [r7, #6]
 800c444:	f7f8 f896 	bl	8004574 <HAL_DMA_Start_IT>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00d      	beq.n	800c46a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2210      	movs	r2, #16
 800c452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2220      	movs	r2, #32
 800c462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e012      	b.n	800c490 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2240      	movs	r2, #64	; 0x40
 800c470:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	689a      	ldr	r2, [r3, #8]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c488:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	e000      	b.n	800c490 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800c48e:	2302      	movs	r3, #2
  }
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	0800da11 	.word	0x0800da11
 800c49c:	0800da61 	.word	0x0800da61
 800c4a0:	0800db4b 	.word	0x0800db4b

0800c4a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d131      	bne.n	800c520 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <HAL_UART_Receive_DMA+0x24>
 800c4c2:	88fb      	ldrh	r3, [r7, #6]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e02a      	b.n	800c522 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Receive_DMA+0x36>
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	e023      	b.n	800c522 <HAL_UART_Receive_DMA+0x7e>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a0f      	ldr	r2, [pc, #60]	; (800c52c <HAL_UART_Receive_DMA+0x88>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00e      	beq.n	800c510 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d007      	beq.n	800c510 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c50e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c510:	88fb      	ldrh	r3, [r7, #6]
 800c512:	461a      	mov	r2, r3
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f001 f9bc 	bl	800d894 <UART_Start_Receive_DMA>
 800c51c:	4603      	mov	r3, r0
 800c51e:	e000      	b.n	800c522 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c520:	2302      	movs	r3, #2
  }
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	58000c00 	.word	0x58000c00

0800c530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	f640 030f 	movw	r3, #2063	; 0x80f
 800c556:	4013      	ands	r3, r2
 800c558:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d118      	bne.n	800c592 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	f003 0320 	and.w	r3, r3, #32
 800c566:	2b00      	cmp	r3, #0
 800c568:	d013      	beq.n	800c592 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	f003 0320 	and.w	r3, r3, #32
 800c570:	2b00      	cmp	r3, #0
 800c572:	d104      	bne.n	800c57e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8282 	beq.w	800ca8c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	4798      	blx	r3
      }
      return;
 800c590:	e27c      	b.n	800ca8c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 80ef 	beq.w	800c778 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	4b73      	ldr	r3, [pc, #460]	; (800c76c <HAL_UART_IRQHandler+0x23c>)
 800c59e:	4013      	ands	r3, r2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	4b72      	ldr	r3, [pc, #456]	; (800c770 <HAL_UART_IRQHandler+0x240>)
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 80e4 	beq.w	800c778 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d010      	beq.n	800c5dc <HAL_UART_IRQHandler+0xac>
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00b      	beq.n	800c5dc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5d2:	f043 0201 	orr.w	r2, r3, #1
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	f003 0302 	and.w	r3, r3, #2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d010      	beq.n	800c608 <HAL_UART_IRQHandler+0xd8>
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5fe:	f043 0204 	orr.w	r2, r3, #4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d010      	beq.n	800c634 <HAL_UART_IRQHandler+0x104>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2204      	movs	r2, #4
 800c622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c62a:	f043 0202 	orr.w	r2, r3, #2
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	f003 0308 	and.w	r3, r3, #8
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d015      	beq.n	800c66a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	f003 0320 	and.w	r3, r3, #32
 800c644:	2b00      	cmp	r3, #0
 800c646:	d104      	bne.n	800c652 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	4b48      	ldr	r3, [pc, #288]	; (800c76c <HAL_UART_IRQHandler+0x23c>)
 800c64c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2208      	movs	r2, #8
 800c658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c660:	f043 0208 	orr.w	r2, r3, #8
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c670:	2b00      	cmp	r3, #0
 800c672:	d011      	beq.n	800c698 <HAL_UART_IRQHandler+0x168>
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c68e:	f043 0220 	orr.w	r2, r3, #32
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 81f6 	beq.w	800ca90 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	f003 0320 	and.w	r3, r3, #32
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d011      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	f003 0320 	and.w	r3, r3, #32
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d104      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e4:	2b40      	cmp	r3, #64	; 0x40
 800c6e6:	d004      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d031      	beq.n	800c756 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 f95a 	bl	800d9ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c702:	2b40      	cmp	r3, #64	; 0x40
 800c704:	d123      	bne.n	800c74e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c714:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d013      	beq.n	800c746 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c722:	4a14      	ldr	r2, [pc, #80]	; (800c774 <HAL_UART_IRQHandler+0x244>)
 800c724:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f8 fcaa 	bl	8005084 <HAL_DMA_Abort_IT>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d017      	beq.n	800c766 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c740:	4610      	mov	r0, r2
 800c742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c744:	e00f      	b.n	800c766 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9c0 	bl	800cacc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c74c:	e00b      	b.n	800c766 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f9bc 	bl	800cacc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c754:	e007      	b.n	800c766 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9b8 	bl	800cacc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c764:	e194      	b.n	800ca90 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c766:	bf00      	nop
    return;
 800c768:	e192      	b.n	800ca90 <HAL_UART_IRQHandler+0x560>
 800c76a:	bf00      	nop
 800c76c:	10000001 	.word	0x10000001
 800c770:	04000120 	.word	0x04000120
 800c774:	0800dbcb 	.word	0x0800dbcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	f040 810f 	bne.w	800c9a0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 8109 	beq.w	800c9a0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 8103 	beq.w	800c9a0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2210      	movs	r2, #16
 800c7a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ac:	2b40      	cmp	r3, #64	; 0x40
 800c7ae:	f040 80bb 	bne.w	800c928 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a96      	ldr	r2, [pc, #600]	; (800ca14 <HAL_UART_IRQHandler+0x4e4>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d059      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a94      	ldr	r2, [pc, #592]	; (800ca18 <HAL_UART_IRQHandler+0x4e8>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d053      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a92      	ldr	r2, [pc, #584]	; (800ca1c <HAL_UART_IRQHandler+0x4ec>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d04d      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a90      	ldr	r2, [pc, #576]	; (800ca20 <HAL_UART_IRQHandler+0x4f0>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d047      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a8e      	ldr	r2, [pc, #568]	; (800ca24 <HAL_UART_IRQHandler+0x4f4>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d041      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a8c      	ldr	r2, [pc, #560]	; (800ca28 <HAL_UART_IRQHandler+0x4f8>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d03b      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a8a      	ldr	r2, [pc, #552]	; (800ca2c <HAL_UART_IRQHandler+0x4fc>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d035      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a88      	ldr	r2, [pc, #544]	; (800ca30 <HAL_UART_IRQHandler+0x500>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d02f      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a86      	ldr	r2, [pc, #536]	; (800ca34 <HAL_UART_IRQHandler+0x504>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d029      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a84      	ldr	r2, [pc, #528]	; (800ca38 <HAL_UART_IRQHandler+0x508>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d023      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a82      	ldr	r2, [pc, #520]	; (800ca3c <HAL_UART_IRQHandler+0x50c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d01d      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a80      	ldr	r2, [pc, #512]	; (800ca40 <HAL_UART_IRQHandler+0x510>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d017      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a7e      	ldr	r2, [pc, #504]	; (800ca44 <HAL_UART_IRQHandler+0x514>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d011      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a7c      	ldr	r2, [pc, #496]	; (800ca48 <HAL_UART_IRQHandler+0x518>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d00b      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a7a      	ldr	r2, [pc, #488]	; (800ca4c <HAL_UART_IRQHandler+0x51c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d005      	beq.n	800c872 <HAL_UART_IRQHandler+0x342>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a78      	ldr	r2, [pc, #480]	; (800ca50 <HAL_UART_IRQHandler+0x520>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d105      	bne.n	800c87e <HAL_UART_IRQHandler+0x34e>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	e004      	b.n	800c888 <HAL_UART_IRQHandler+0x358>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	b29b      	uxth	r3, r3
 800c888:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c88a:	893b      	ldrh	r3, [r7, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8101 	beq.w	800ca94 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c898:	893a      	ldrh	r2, [r7, #8]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	f080 80fa 	bcs.w	800ca94 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	893a      	ldrh	r2, [r7, #8]
 800c8a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d02b      	beq.n	800c90c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689a      	ldr	r2, [r3, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0201 	bic.w	r2, r2, #1
 800c8d2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689a      	ldr	r2, [r3, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8e2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f022 0210 	bic.w	r2, r2, #16
 800c900:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c906:	4618      	mov	r0, r3
 800c908:	f7f8 f89e 	bl	8004a48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c918:	b29b      	uxth	r3, r3
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f8dd 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c926:	e0b5      	b.n	800ca94 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c934:	b29b      	uxth	r3, r3
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c940:	b29b      	uxth	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 80a8 	beq.w	800ca98 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800c948:	897b      	ldrh	r3, [r7, #10]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 80a4 	beq.w	800ca98 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c95e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6899      	ldr	r1, [r3, #8]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b3a      	ldr	r3, [pc, #232]	; (800ca54 <HAL_UART_IRQHandler+0x524>)
 800c96c:	400b      	ands	r3, r1
 800c96e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2220      	movs	r2, #32
 800c974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0210 	bic.w	r2, r2, #16
 800c992:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c994:	897b      	ldrh	r3, [r7, #10]
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f8a1 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c99e:	e07b      	b.n	800ca98 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00d      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x496>
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c9bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f001 f933 	bl	800dc2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9c4:	e06b      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d104      	bne.n	800c9e4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d057      	beq.n	800ca9c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	4798      	blx	r3
    }
    return;
 800c9f4:	e052      	b.n	800ca9c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02b      	beq.n	800ca58 <HAL_UART_IRQHandler+0x528>
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d026      	beq.n	800ca58 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f001 f8f3 	bl	800dbf6 <UART_EndTransmit_IT>
    return;
 800ca10:	e045      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
 800ca12:	bf00      	nop
 800ca14:	40020010 	.word	0x40020010
 800ca18:	40020028 	.word	0x40020028
 800ca1c:	40020040 	.word	0x40020040
 800ca20:	40020058 	.word	0x40020058
 800ca24:	40020070 	.word	0x40020070
 800ca28:	40020088 	.word	0x40020088
 800ca2c:	400200a0 	.word	0x400200a0
 800ca30:	400200b8 	.word	0x400200b8
 800ca34:	40020410 	.word	0x40020410
 800ca38:	40020428 	.word	0x40020428
 800ca3c:	40020440 	.word	0x40020440
 800ca40:	40020458 	.word	0x40020458
 800ca44:	40020470 	.word	0x40020470
 800ca48:	40020488 	.word	0x40020488
 800ca4c:	400204a0 	.word	0x400204a0
 800ca50:	400204b8 	.word	0x400204b8
 800ca54:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d008      	beq.n	800ca74 <HAL_UART_IRQHandler+0x544>
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 f8f0 	bl	800dc52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca72:	e014      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00f      	beq.n	800ca9e <HAL_UART_IRQHandler+0x56e>
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da0c      	bge.n	800ca9e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f001 f8da 	bl	800dc3e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca8a:	e008      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
      return;
 800ca8c:	bf00      	nop
 800ca8e:	e006      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
    return;
 800ca90:	bf00      	nop
 800ca92:	e004      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
      return;
 800ca94:	bf00      	nop
 800ca96:	e002      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
      return;
 800ca98:	bf00      	nop
 800ca9a:	e000      	b.n	800ca9e <HAL_UART_IRQHandler+0x56e>
    return;
 800ca9c:	bf00      	nop
  }
}
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800caf8:	b5b0      	push	{r4, r5, r7, lr}
 800cafa:	b08e      	sub	sp, #56	; 0x38
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	689a      	ldr	r2, [r3, #8]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	431a      	orrs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	4bbf      	ldr	r3, [pc, #764]	; (800ce24 <UART_SetConfig+0x32c>)
 800cb26:	4013      	ands	r3, r2
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6812      	ldr	r2, [r2, #0]
 800cb2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb2e:	430b      	orrs	r3, r1
 800cb30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68da      	ldr	r2, [r3, #12]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4ab5      	ldr	r2, [pc, #724]	; (800ce28 <UART_SetConfig+0x330>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d004      	beq.n	800cb62 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	689a      	ldr	r2, [r3, #8]
 800cb68:	4bb0      	ldr	r3, [pc, #704]	; (800ce2c <UART_SetConfig+0x334>)
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb72:	430b      	orrs	r3, r1
 800cb74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	f023 010f 	bic.w	r1, r3, #15
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4aa7      	ldr	r2, [pc, #668]	; (800ce30 <UART_SetConfig+0x338>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d176      	bne.n	800cc84 <UART_SetConfig+0x18c>
 800cb96:	4ba7      	ldr	r3, [pc, #668]	; (800ce34 <UART_SetConfig+0x33c>)
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb9e:	2b28      	cmp	r3, #40	; 0x28
 800cba0:	d86c      	bhi.n	800cc7c <UART_SetConfig+0x184>
 800cba2:	a201      	add	r2, pc, #4	; (adr r2, 800cba8 <UART_SetConfig+0xb0>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cc4d 	.word	0x0800cc4d
 800cbac:	0800cc7d 	.word	0x0800cc7d
 800cbb0:	0800cc7d 	.word	0x0800cc7d
 800cbb4:	0800cc7d 	.word	0x0800cc7d
 800cbb8:	0800cc7d 	.word	0x0800cc7d
 800cbbc:	0800cc7d 	.word	0x0800cc7d
 800cbc0:	0800cc7d 	.word	0x0800cc7d
 800cbc4:	0800cc7d 	.word	0x0800cc7d
 800cbc8:	0800cc55 	.word	0x0800cc55
 800cbcc:	0800cc7d 	.word	0x0800cc7d
 800cbd0:	0800cc7d 	.word	0x0800cc7d
 800cbd4:	0800cc7d 	.word	0x0800cc7d
 800cbd8:	0800cc7d 	.word	0x0800cc7d
 800cbdc:	0800cc7d 	.word	0x0800cc7d
 800cbe0:	0800cc7d 	.word	0x0800cc7d
 800cbe4:	0800cc7d 	.word	0x0800cc7d
 800cbe8:	0800cc5d 	.word	0x0800cc5d
 800cbec:	0800cc7d 	.word	0x0800cc7d
 800cbf0:	0800cc7d 	.word	0x0800cc7d
 800cbf4:	0800cc7d 	.word	0x0800cc7d
 800cbf8:	0800cc7d 	.word	0x0800cc7d
 800cbfc:	0800cc7d 	.word	0x0800cc7d
 800cc00:	0800cc7d 	.word	0x0800cc7d
 800cc04:	0800cc7d 	.word	0x0800cc7d
 800cc08:	0800cc65 	.word	0x0800cc65
 800cc0c:	0800cc7d 	.word	0x0800cc7d
 800cc10:	0800cc7d 	.word	0x0800cc7d
 800cc14:	0800cc7d 	.word	0x0800cc7d
 800cc18:	0800cc7d 	.word	0x0800cc7d
 800cc1c:	0800cc7d 	.word	0x0800cc7d
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc7d 	.word	0x0800cc7d
 800cc28:	0800cc6d 	.word	0x0800cc6d
 800cc2c:	0800cc7d 	.word	0x0800cc7d
 800cc30:	0800cc7d 	.word	0x0800cc7d
 800cc34:	0800cc7d 	.word	0x0800cc7d
 800cc38:	0800cc7d 	.word	0x0800cc7d
 800cc3c:	0800cc7d 	.word	0x0800cc7d
 800cc40:	0800cc7d 	.word	0x0800cc7d
 800cc44:	0800cc7d 	.word	0x0800cc7d
 800cc48:	0800cc75 	.word	0x0800cc75
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e222      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc54:	2304      	movs	r3, #4
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5a:	e21e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc5c:	2308      	movs	r3, #8
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e21a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc64:	2310      	movs	r3, #16
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e216      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc6c:	2320      	movs	r3, #32
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e212      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc74:	2340      	movs	r3, #64	; 0x40
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e20e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc7c:	2380      	movs	r3, #128	; 0x80
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e20a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a6b      	ldr	r2, [pc, #428]	; (800ce38 <UART_SetConfig+0x340>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d130      	bne.n	800ccf0 <UART_SetConfig+0x1f8>
 800cc8e:	4b69      	ldr	r3, [pc, #420]	; (800ce34 <UART_SetConfig+0x33c>)
 800cc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	d826      	bhi.n	800cce8 <UART_SetConfig+0x1f0>
 800cc9a:	a201      	add	r2, pc, #4	; (adr r2, 800cca0 <UART_SetConfig+0x1a8>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ccb9 	.word	0x0800ccb9
 800cca4:	0800ccc1 	.word	0x0800ccc1
 800cca8:	0800ccc9 	.word	0x0800ccc9
 800ccac:	0800ccd1 	.word	0x0800ccd1
 800ccb0:	0800ccd9 	.word	0x0800ccd9
 800ccb4:	0800cce1 	.word	0x0800cce1
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e1ec      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ccc0:	2304      	movs	r3, #4
 800ccc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc6:	e1e8      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ccc8:	2308      	movs	r3, #8
 800ccca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccce:	e1e4      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ccd0:	2310      	movs	r3, #16
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e1e0      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ccd8:	2320      	movs	r3, #32
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e1dc      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cce0:	2340      	movs	r3, #64	; 0x40
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e1d8      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cce8:	2380      	movs	r3, #128	; 0x80
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e1d4      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a51      	ldr	r2, [pc, #324]	; (800ce3c <UART_SetConfig+0x344>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d130      	bne.n	800cd5c <UART_SetConfig+0x264>
 800ccfa:	4b4e      	ldr	r3, [pc, #312]	; (800ce34 <UART_SetConfig+0x33c>)
 800ccfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccfe:	f003 0307 	and.w	r3, r3, #7
 800cd02:	2b05      	cmp	r3, #5
 800cd04:	d826      	bhi.n	800cd54 <UART_SetConfig+0x25c>
 800cd06:	a201      	add	r2, pc, #4	; (adr r2, 800cd0c <UART_SetConfig+0x214>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd25 	.word	0x0800cd25
 800cd10:	0800cd2d 	.word	0x0800cd2d
 800cd14:	0800cd35 	.word	0x0800cd35
 800cd18:	0800cd3d 	.word	0x0800cd3d
 800cd1c:	0800cd45 	.word	0x0800cd45
 800cd20:	0800cd4d 	.word	0x0800cd4d
 800cd24:	2300      	movs	r3, #0
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e1b6      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd2c:	2304      	movs	r3, #4
 800cd2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd32:	e1b2      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd34:	2308      	movs	r3, #8
 800cd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3a:	e1ae      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd3c:	2310      	movs	r3, #16
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e1aa      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd44:	2320      	movs	r3, #32
 800cd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4a:	e1a6      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd4c:	2340      	movs	r3, #64	; 0x40
 800cd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd52:	e1a2      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd54:	2380      	movs	r3, #128	; 0x80
 800cd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5a:	e19e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a37      	ldr	r2, [pc, #220]	; (800ce40 <UART_SetConfig+0x348>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d130      	bne.n	800cdc8 <UART_SetConfig+0x2d0>
 800cd66:	4b33      	ldr	r3, [pc, #204]	; (800ce34 <UART_SetConfig+0x33c>)
 800cd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd6a:	f003 0307 	and.w	r3, r3, #7
 800cd6e:	2b05      	cmp	r3, #5
 800cd70:	d826      	bhi.n	800cdc0 <UART_SetConfig+0x2c8>
 800cd72:	a201      	add	r2, pc, #4	; (adr r2, 800cd78 <UART_SetConfig+0x280>)
 800cd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd78:	0800cd91 	.word	0x0800cd91
 800cd7c:	0800cd99 	.word	0x0800cd99
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800cda9 	.word	0x0800cda9
 800cd88:	0800cdb1 	.word	0x0800cdb1
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	2300      	movs	r3, #0
 800cd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd96:	e180      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cd98:	2304      	movs	r3, #4
 800cd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9e:	e17c      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cda0:	2308      	movs	r3, #8
 800cda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda6:	e178      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cda8:	2310      	movs	r3, #16
 800cdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdae:	e174      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cdb0:	2320      	movs	r3, #32
 800cdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb6:	e170      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cdb8:	2340      	movs	r3, #64	; 0x40
 800cdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdbe:	e16c      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cdc0:	2380      	movs	r3, #128	; 0x80
 800cdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdc6:	e168      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a1d      	ldr	r2, [pc, #116]	; (800ce44 <UART_SetConfig+0x34c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d142      	bne.n	800ce58 <UART_SetConfig+0x360>
 800cdd2:	4b18      	ldr	r3, [pc, #96]	; (800ce34 <UART_SetConfig+0x33c>)
 800cdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd6:	f003 0307 	and.w	r3, r3, #7
 800cdda:	2b05      	cmp	r3, #5
 800cddc:	d838      	bhi.n	800ce50 <UART_SetConfig+0x358>
 800cdde:	a201      	add	r2, pc, #4	; (adr r2, 800cde4 <UART_SetConfig+0x2ec>)
 800cde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde4:	0800cdfd 	.word	0x0800cdfd
 800cde8:	0800ce05 	.word	0x0800ce05
 800cdec:	0800ce0d 	.word	0x0800ce0d
 800cdf0:	0800ce15 	.word	0x0800ce15
 800cdf4:	0800ce1d 	.word	0x0800ce1d
 800cdf8:	0800ce49 	.word	0x0800ce49
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce02:	e14a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce04:	2304      	movs	r3, #4
 800ce06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0a:	e146      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce12:	e142      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce14:	2310      	movs	r3, #16
 800ce16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce1a:	e13e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce22:	e13a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce24:	cfff69f3 	.word	0xcfff69f3
 800ce28:	58000c00 	.word	0x58000c00
 800ce2c:	11fff4ff 	.word	0x11fff4ff
 800ce30:	40011000 	.word	0x40011000
 800ce34:	58024400 	.word	0x58024400
 800ce38:	40004400 	.word	0x40004400
 800ce3c:	40004800 	.word	0x40004800
 800ce40:	40004c00 	.word	0x40004c00
 800ce44:	40005000 	.word	0x40005000
 800ce48:	2340      	movs	r3, #64	; 0x40
 800ce4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4e:	e124      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce50:	2380      	movs	r3, #128	; 0x80
 800ce52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce56:	e120      	b.n	800d09a <UART_SetConfig+0x5a2>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4acc      	ldr	r2, [pc, #816]	; (800d190 <UART_SetConfig+0x698>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d176      	bne.n	800cf50 <UART_SetConfig+0x458>
 800ce62:	4bcc      	ldr	r3, [pc, #816]	; (800d194 <UART_SetConfig+0x69c>)
 800ce64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce6a:	2b28      	cmp	r3, #40	; 0x28
 800ce6c:	d86c      	bhi.n	800cf48 <UART_SetConfig+0x450>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <UART_SetConfig+0x37c>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800cf19 	.word	0x0800cf19
 800ce78:	0800cf49 	.word	0x0800cf49
 800ce7c:	0800cf49 	.word	0x0800cf49
 800ce80:	0800cf49 	.word	0x0800cf49
 800ce84:	0800cf49 	.word	0x0800cf49
 800ce88:	0800cf49 	.word	0x0800cf49
 800ce8c:	0800cf49 	.word	0x0800cf49
 800ce90:	0800cf49 	.word	0x0800cf49
 800ce94:	0800cf21 	.word	0x0800cf21
 800ce98:	0800cf49 	.word	0x0800cf49
 800ce9c:	0800cf49 	.word	0x0800cf49
 800cea0:	0800cf49 	.word	0x0800cf49
 800cea4:	0800cf49 	.word	0x0800cf49
 800cea8:	0800cf49 	.word	0x0800cf49
 800ceac:	0800cf49 	.word	0x0800cf49
 800ceb0:	0800cf49 	.word	0x0800cf49
 800ceb4:	0800cf29 	.word	0x0800cf29
 800ceb8:	0800cf49 	.word	0x0800cf49
 800cebc:	0800cf49 	.word	0x0800cf49
 800cec0:	0800cf49 	.word	0x0800cf49
 800cec4:	0800cf49 	.word	0x0800cf49
 800cec8:	0800cf49 	.word	0x0800cf49
 800cecc:	0800cf49 	.word	0x0800cf49
 800ced0:	0800cf49 	.word	0x0800cf49
 800ced4:	0800cf31 	.word	0x0800cf31
 800ced8:	0800cf49 	.word	0x0800cf49
 800cedc:	0800cf49 	.word	0x0800cf49
 800cee0:	0800cf49 	.word	0x0800cf49
 800cee4:	0800cf49 	.word	0x0800cf49
 800cee8:	0800cf49 	.word	0x0800cf49
 800ceec:	0800cf49 	.word	0x0800cf49
 800cef0:	0800cf49 	.word	0x0800cf49
 800cef4:	0800cf39 	.word	0x0800cf39
 800cef8:	0800cf49 	.word	0x0800cf49
 800cefc:	0800cf49 	.word	0x0800cf49
 800cf00:	0800cf49 	.word	0x0800cf49
 800cf04:	0800cf49 	.word	0x0800cf49
 800cf08:	0800cf49 	.word	0x0800cf49
 800cf0c:	0800cf49 	.word	0x0800cf49
 800cf10:	0800cf49 	.word	0x0800cf49
 800cf14:	0800cf41 	.word	0x0800cf41
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1e:	e0bc      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf20:	2304      	movs	r3, #4
 800cf22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf26:	e0b8      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf28:	2308      	movs	r3, #8
 800cf2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf2e:	e0b4      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf30:	2310      	movs	r3, #16
 800cf32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf36:	e0b0      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf3e:	e0ac      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf40:	2340      	movs	r3, #64	; 0x40
 800cf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf46:	e0a8      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf48:	2380      	movs	r3, #128	; 0x80
 800cf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf4e:	e0a4      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a90      	ldr	r2, [pc, #576]	; (800d198 <UART_SetConfig+0x6a0>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d130      	bne.n	800cfbc <UART_SetConfig+0x4c4>
 800cf5a:	4b8e      	ldr	r3, [pc, #568]	; (800d194 <UART_SetConfig+0x69c>)
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d826      	bhi.n	800cfb4 <UART_SetConfig+0x4bc>
 800cf66:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <UART_SetConfig+0x474>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8a:	e086      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf92:	e082      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf9a:	e07e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfa2:	e07a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfaa:	e076      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfb2:	e072      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfba:	e06e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a76      	ldr	r2, [pc, #472]	; (800d19c <UART_SetConfig+0x6a4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d130      	bne.n	800d028 <UART_SetConfig+0x530>
 800cfc6:	4b73      	ldr	r3, [pc, #460]	; (800d194 <UART_SetConfig+0x69c>)
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b05      	cmp	r3, #5
 800cfd0:	d826      	bhi.n	800d020 <UART_SetConfig+0x528>
 800cfd2:	a201      	add	r2, pc, #4	; (adr r2, 800cfd8 <UART_SetConfig+0x4e0>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cff1 	.word	0x0800cff1
 800cfdc:	0800cff9 	.word	0x0800cff9
 800cfe0:	0800d001 	.word	0x0800d001
 800cfe4:	0800d009 	.word	0x0800d009
 800cfe8:	0800d011 	.word	0x0800d011
 800cfec:	0800d019 	.word	0x0800d019
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e050      	b.n	800d09a <UART_SetConfig+0x5a2>
 800cff8:	2304      	movs	r3, #4
 800cffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffe:	e04c      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d006:	e048      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d008:	2310      	movs	r3, #16
 800d00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d00e:	e044      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d010:	2320      	movs	r3, #32
 800d012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d016:	e040      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d018:	2340      	movs	r3, #64	; 0x40
 800d01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d01e:	e03c      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d020:	2380      	movs	r3, #128	; 0x80
 800d022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d026:	e038      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a5c      	ldr	r2, [pc, #368]	; (800d1a0 <UART_SetConfig+0x6a8>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d130      	bne.n	800d094 <UART_SetConfig+0x59c>
 800d032:	4b58      	ldr	r3, [pc, #352]	; (800d194 <UART_SetConfig+0x69c>)
 800d034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b05      	cmp	r3, #5
 800d03c:	d826      	bhi.n	800d08c <UART_SetConfig+0x594>
 800d03e:	a201      	add	r2, pc, #4	; (adr r2, 800d044 <UART_SetConfig+0x54c>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d05d 	.word	0x0800d05d
 800d048:	0800d065 	.word	0x0800d065
 800d04c:	0800d06d 	.word	0x0800d06d
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d07d 	.word	0x0800d07d
 800d058:	0800d085 	.word	0x0800d085
 800d05c:	2302      	movs	r3, #2
 800d05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d062:	e01a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d064:	2304      	movs	r3, #4
 800d066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d06a:	e016      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d06c:	2308      	movs	r3, #8
 800d06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d072:	e012      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d074:	2310      	movs	r3, #16
 800d076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d07a:	e00e      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d07c:	2320      	movs	r3, #32
 800d07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d082:	e00a      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d084:	2340      	movs	r3, #64	; 0x40
 800d086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d08a:	e006      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d08c:	2380      	movs	r3, #128	; 0x80
 800d08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d092:	e002      	b.n	800d09a <UART_SetConfig+0x5a2>
 800d094:	2380      	movs	r3, #128	; 0x80
 800d096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a40      	ldr	r2, [pc, #256]	; (800d1a0 <UART_SetConfig+0x6a8>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	f040 80ef 	bne.w	800d284 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0aa:	2b20      	cmp	r3, #32
 800d0ac:	dc46      	bgt.n	800d13c <UART_SetConfig+0x644>
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	f2c0 8081 	blt.w	800d1b6 <UART_SetConfig+0x6be>
 800d0b4:	3b02      	subs	r3, #2
 800d0b6:	2b1e      	cmp	r3, #30
 800d0b8:	d87d      	bhi.n	800d1b6 <UART_SetConfig+0x6be>
 800d0ba:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <UART_SetConfig+0x5c8>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d143 	.word	0x0800d143
 800d0c4:	0800d1b7 	.word	0x0800d1b7
 800d0c8:	0800d14b 	.word	0x0800d14b
 800d0cc:	0800d1b7 	.word	0x0800d1b7
 800d0d0:	0800d1b7 	.word	0x0800d1b7
 800d0d4:	0800d1b7 	.word	0x0800d1b7
 800d0d8:	0800d15b 	.word	0x0800d15b
 800d0dc:	0800d1b7 	.word	0x0800d1b7
 800d0e0:	0800d1b7 	.word	0x0800d1b7
 800d0e4:	0800d1b7 	.word	0x0800d1b7
 800d0e8:	0800d1b7 	.word	0x0800d1b7
 800d0ec:	0800d1b7 	.word	0x0800d1b7
 800d0f0:	0800d1b7 	.word	0x0800d1b7
 800d0f4:	0800d1b7 	.word	0x0800d1b7
 800d0f8:	0800d16b 	.word	0x0800d16b
 800d0fc:	0800d1b7 	.word	0x0800d1b7
 800d100:	0800d1b7 	.word	0x0800d1b7
 800d104:	0800d1b7 	.word	0x0800d1b7
 800d108:	0800d1b7 	.word	0x0800d1b7
 800d10c:	0800d1b7 	.word	0x0800d1b7
 800d110:	0800d1b7 	.word	0x0800d1b7
 800d114:	0800d1b7 	.word	0x0800d1b7
 800d118:	0800d1b7 	.word	0x0800d1b7
 800d11c:	0800d1b7 	.word	0x0800d1b7
 800d120:	0800d1b7 	.word	0x0800d1b7
 800d124:	0800d1b7 	.word	0x0800d1b7
 800d128:	0800d1b7 	.word	0x0800d1b7
 800d12c:	0800d1b7 	.word	0x0800d1b7
 800d130:	0800d1b7 	.word	0x0800d1b7
 800d134:	0800d1b7 	.word	0x0800d1b7
 800d138:	0800d1a9 	.word	0x0800d1a9
 800d13c:	2b40      	cmp	r3, #64	; 0x40
 800d13e:	d036      	beq.n	800d1ae <UART_SetConfig+0x6b6>
 800d140:	e039      	b.n	800d1b6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d142:	f7fc fb8f 	bl	8009864 <HAL_RCCEx_GetD3PCLK1Freq>
 800d146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d148:	e03b      	b.n	800d1c2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d14a:	f107 0314 	add.w	r3, r7, #20
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fc fb9e 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d158:	e033      	b.n	800d1c2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fc fcea 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d168:	e02b      	b.n	800d1c2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d16a:	4b0a      	ldr	r3, [pc, #40]	; (800d194 <UART_SetConfig+0x69c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0320 	and.w	r3, r3, #32
 800d172:	2b00      	cmp	r3, #0
 800d174:	d009      	beq.n	800d18a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <UART_SetConfig+0x69c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	08db      	lsrs	r3, r3, #3
 800d17c:	f003 0303 	and.w	r3, r3, #3
 800d180:	4a08      	ldr	r2, [pc, #32]	; (800d1a4 <UART_SetConfig+0x6ac>)
 800d182:	fa22 f303 	lsr.w	r3, r2, r3
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d188:	e01b      	b.n	800d1c2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d18a:	4b06      	ldr	r3, [pc, #24]	; (800d1a4 <UART_SetConfig+0x6ac>)
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d18e:	e018      	b.n	800d1c2 <UART_SetConfig+0x6ca>
 800d190:	40011400 	.word	0x40011400
 800d194:	58024400 	.word	0x58024400
 800d198:	40007800 	.word	0x40007800
 800d19c:	40007c00 	.word	0x40007c00
 800d1a0:	58000c00 	.word	0x58000c00
 800d1a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1a8:	4bc4      	ldr	r3, [pc, #784]	; (800d4bc <UART_SetConfig+0x9c4>)
 800d1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1ac:	e009      	b.n	800d1c2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1b4:	e005      	b.n	800d1c2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d1c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 81da 	beq.w	800d57e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ce:	4abc      	ldr	r2, [pc, #752]	; (800d4c0 <UART_SetConfig+0x9c8>)
 800d1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1dc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	6a3a      	ldr	r2, [r7, #32]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d305      	bcc.n	800d1fa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1f4:	6a3a      	ldr	r2, [r7, #32]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d903      	bls.n	800d202 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d200:	e1bd      	b.n	800d57e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	4618      	mov	r0, r3
 800d206:	f04f 0100 	mov.w	r1, #0
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20e:	4aac      	ldr	r2, [pc, #688]	; (800d4c0 <UART_SetConfig+0x9c8>)
 800d210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d214:	b29a      	uxth	r2, r3
 800d216:	f04f 0300 	mov.w	r3, #0
 800d21a:	f7f3 f8b9 	bl	8000390 <__aeabi_uldivmod>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	f04f 0200 	mov.w	r2, #0
 800d22a:	f04f 0300 	mov.w	r3, #0
 800d22e:	020b      	lsls	r3, r1, #8
 800d230:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d234:	0202      	lsls	r2, r0, #8
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	6849      	ldr	r1, [r1, #4]
 800d23a:	0849      	lsrs	r1, r1, #1
 800d23c:	4608      	mov	r0, r1
 800d23e:	f04f 0100 	mov.w	r1, #0
 800d242:	1814      	adds	r4, r2, r0
 800d244:	eb43 0501 	adc.w	r5, r3, r1
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	461a      	mov	r2, r3
 800d24e:	f04f 0300 	mov.w	r3, #0
 800d252:	4620      	mov	r0, r4
 800d254:	4629      	mov	r1, r5
 800d256:	f7f3 f89b 	bl	8000390 <__aeabi_uldivmod>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4613      	mov	r3, r2
 800d260:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d268:	d308      	bcc.n	800d27c <UART_SetConfig+0x784>
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d270:	d204      	bcs.n	800d27c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d278:	60da      	str	r2, [r3, #12]
 800d27a:	e180      	b.n	800d57e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d282:	e17c      	b.n	800d57e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d28c:	f040 80bf 	bne.w	800d40e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d294:	2b20      	cmp	r3, #32
 800d296:	dc49      	bgt.n	800d32c <UART_SetConfig+0x834>
 800d298:	2b00      	cmp	r3, #0
 800d29a:	db7c      	blt.n	800d396 <UART_SetConfig+0x89e>
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	d87a      	bhi.n	800d396 <UART_SetConfig+0x89e>
 800d2a0:	a201      	add	r2, pc, #4	; (adr r2, 800d2a8 <UART_SetConfig+0x7b0>)
 800d2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a6:	bf00      	nop
 800d2a8:	0800d333 	.word	0x0800d333
 800d2ac:	0800d33b 	.word	0x0800d33b
 800d2b0:	0800d397 	.word	0x0800d397
 800d2b4:	0800d397 	.word	0x0800d397
 800d2b8:	0800d343 	.word	0x0800d343
 800d2bc:	0800d397 	.word	0x0800d397
 800d2c0:	0800d397 	.word	0x0800d397
 800d2c4:	0800d397 	.word	0x0800d397
 800d2c8:	0800d353 	.word	0x0800d353
 800d2cc:	0800d397 	.word	0x0800d397
 800d2d0:	0800d397 	.word	0x0800d397
 800d2d4:	0800d397 	.word	0x0800d397
 800d2d8:	0800d397 	.word	0x0800d397
 800d2dc:	0800d397 	.word	0x0800d397
 800d2e0:	0800d397 	.word	0x0800d397
 800d2e4:	0800d397 	.word	0x0800d397
 800d2e8:	0800d363 	.word	0x0800d363
 800d2ec:	0800d397 	.word	0x0800d397
 800d2f0:	0800d397 	.word	0x0800d397
 800d2f4:	0800d397 	.word	0x0800d397
 800d2f8:	0800d397 	.word	0x0800d397
 800d2fc:	0800d397 	.word	0x0800d397
 800d300:	0800d397 	.word	0x0800d397
 800d304:	0800d397 	.word	0x0800d397
 800d308:	0800d397 	.word	0x0800d397
 800d30c:	0800d397 	.word	0x0800d397
 800d310:	0800d397 	.word	0x0800d397
 800d314:	0800d397 	.word	0x0800d397
 800d318:	0800d397 	.word	0x0800d397
 800d31c:	0800d397 	.word	0x0800d397
 800d320:	0800d397 	.word	0x0800d397
 800d324:	0800d397 	.word	0x0800d397
 800d328:	0800d389 	.word	0x0800d389
 800d32c:	2b40      	cmp	r3, #64	; 0x40
 800d32e:	d02e      	beq.n	800d38e <UART_SetConfig+0x896>
 800d330:	e031      	b.n	800d396 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d332:	f7fa fe17 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 800d336:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d338:	e033      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d33a:	f7fa fe29 	bl	8007f90 <HAL_RCC_GetPCLK2Freq>
 800d33e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d340:	e02f      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d342:	f107 0314 	add.w	r3, r7, #20
 800d346:	4618      	mov	r0, r3
 800d348:	f7fc faa2 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d350:	e027      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d352:	f107 0308 	add.w	r3, r7, #8
 800d356:	4618      	mov	r0, r3
 800d358:	f7fc fbee 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d360:	e01f      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d362:	4b58      	ldr	r3, [pc, #352]	; (800d4c4 <UART_SetConfig+0x9cc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d009      	beq.n	800d382 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d36e:	4b55      	ldr	r3, [pc, #340]	; (800d4c4 <UART_SetConfig+0x9cc>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	08db      	lsrs	r3, r3, #3
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	4a53      	ldr	r2, [pc, #332]	; (800d4c8 <UART_SetConfig+0x9d0>)
 800d37a:	fa22 f303 	lsr.w	r3, r2, r3
 800d37e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d380:	e00f      	b.n	800d3a2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d382:	4b51      	ldr	r3, [pc, #324]	; (800d4c8 <UART_SetConfig+0x9d0>)
 800d384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d386:	e00c      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d388:	4b4c      	ldr	r3, [pc, #304]	; (800d4bc <UART_SetConfig+0x9c4>)
 800d38a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d38c:	e009      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d38e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d394:	e005      	b.n	800d3a2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d396:	2300      	movs	r3, #0
 800d398:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d3a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 80ea 	beq.w	800d57e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ae:	4a44      	ldr	r2, [pc, #272]	; (800d4c0 <UART_SetConfig+0x9c8>)
 800d3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3bc:	005a      	lsls	r2, r3, #1
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	085b      	lsrs	r3, r3, #1
 800d3c4:	441a      	add	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	2b0f      	cmp	r3, #15
 800d3d6:	d916      	bls.n	800d406 <UART_SetConfig+0x90e>
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3de:	d212      	bcs.n	800d406 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	f023 030f 	bic.w	r3, r3, #15
 800d3e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	085b      	lsrs	r3, r3, #1
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	f003 0307 	and.w	r3, r3, #7
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d402:	60da      	str	r2, [r3, #12]
 800d404:	e0bb      	b.n	800d57e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d40c:	e0b7      	b.n	800d57e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d40e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d412:	2b20      	cmp	r3, #32
 800d414:	dc4a      	bgt.n	800d4ac <UART_SetConfig+0x9b4>
 800d416:	2b00      	cmp	r3, #0
 800d418:	f2c0 8086 	blt.w	800d528 <UART_SetConfig+0xa30>
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	f200 8083 	bhi.w	800d528 <UART_SetConfig+0xa30>
 800d422:	a201      	add	r2, pc, #4	; (adr r2, 800d428 <UART_SetConfig+0x930>)
 800d424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d428:	0800d4b3 	.word	0x0800d4b3
 800d42c:	0800d4cd 	.word	0x0800d4cd
 800d430:	0800d529 	.word	0x0800d529
 800d434:	0800d529 	.word	0x0800d529
 800d438:	0800d4d5 	.word	0x0800d4d5
 800d43c:	0800d529 	.word	0x0800d529
 800d440:	0800d529 	.word	0x0800d529
 800d444:	0800d529 	.word	0x0800d529
 800d448:	0800d4e5 	.word	0x0800d4e5
 800d44c:	0800d529 	.word	0x0800d529
 800d450:	0800d529 	.word	0x0800d529
 800d454:	0800d529 	.word	0x0800d529
 800d458:	0800d529 	.word	0x0800d529
 800d45c:	0800d529 	.word	0x0800d529
 800d460:	0800d529 	.word	0x0800d529
 800d464:	0800d529 	.word	0x0800d529
 800d468:	0800d4f5 	.word	0x0800d4f5
 800d46c:	0800d529 	.word	0x0800d529
 800d470:	0800d529 	.word	0x0800d529
 800d474:	0800d529 	.word	0x0800d529
 800d478:	0800d529 	.word	0x0800d529
 800d47c:	0800d529 	.word	0x0800d529
 800d480:	0800d529 	.word	0x0800d529
 800d484:	0800d529 	.word	0x0800d529
 800d488:	0800d529 	.word	0x0800d529
 800d48c:	0800d529 	.word	0x0800d529
 800d490:	0800d529 	.word	0x0800d529
 800d494:	0800d529 	.word	0x0800d529
 800d498:	0800d529 	.word	0x0800d529
 800d49c:	0800d529 	.word	0x0800d529
 800d4a0:	0800d529 	.word	0x0800d529
 800d4a4:	0800d529 	.word	0x0800d529
 800d4a8:	0800d51b 	.word	0x0800d51b
 800d4ac:	2b40      	cmp	r3, #64	; 0x40
 800d4ae:	d037      	beq.n	800d520 <UART_SetConfig+0xa28>
 800d4b0:	e03a      	b.n	800d528 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4b2:	f7fa fd57 	bl	8007f64 <HAL_RCC_GetPCLK1Freq>
 800d4b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d4b8:	e03c      	b.n	800d534 <UART_SetConfig+0xa3c>
 800d4ba:	bf00      	nop
 800d4bc:	003d0900 	.word	0x003d0900
 800d4c0:	0801220c 	.word	0x0801220c
 800d4c4:	58024400 	.word	0x58024400
 800d4c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4cc:	f7fa fd60 	bl	8007f90 <HAL_RCC_GetPCLK2Freq>
 800d4d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d4d2:	e02f      	b.n	800d534 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4d4:	f107 0314 	add.w	r3, r7, #20
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fc f9d9 	bl	8009890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4e2:	e027      	b.n	800d534 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4e4:	f107 0308 	add.w	r3, r7, #8
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fc fb25 	bl	8009b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4f2:	e01f      	b.n	800d534 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4f4:	4b2c      	ldr	r3, [pc, #176]	; (800d5a8 <UART_SetConfig+0xab0>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 0320 	and.w	r3, r3, #32
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d009      	beq.n	800d514 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d500:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <UART_SetConfig+0xab0>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	08db      	lsrs	r3, r3, #3
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	4a28      	ldr	r2, [pc, #160]	; (800d5ac <UART_SetConfig+0xab4>)
 800d50c:	fa22 f303 	lsr.w	r3, r2, r3
 800d510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d512:	e00f      	b.n	800d534 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d514:	4b25      	ldr	r3, [pc, #148]	; (800d5ac <UART_SetConfig+0xab4>)
 800d516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d518:	e00c      	b.n	800d534 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d51a:	4b25      	ldr	r3, [pc, #148]	; (800d5b0 <UART_SetConfig+0xab8>)
 800d51c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d51e:	e009      	b.n	800d534 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d526:	e005      	b.n	800d534 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d532:	bf00      	nop
    }

    if (pclk != 0U)
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	2b00      	cmp	r3, #0
 800d538:	d021      	beq.n	800d57e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53e:	4a1d      	ldr	r2, [pc, #116]	; (800d5b4 <UART_SetConfig+0xabc>)
 800d540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d544:	461a      	mov	r2, r3
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	fbb3 f2f2 	udiv	r2, r3, r2
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	085b      	lsrs	r3, r3, #1
 800d552:	441a      	add	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	fbb2 f3f3 	udiv	r3, r2, r3
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	2b0f      	cmp	r3, #15
 800d564:	d908      	bls.n	800d578 <UART_SetConfig+0xa80>
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d56c:	d204      	bcs.n	800d578 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	e002      	b.n	800d57e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d59a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3738      	adds	r7, #56	; 0x38
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	58024400 	.word	0x58024400
 800d5ac:	03d09000 	.word	0x03d09000
 800d5b0:	003d0900 	.word	0x003d0900
 800d5b4:	0801220c 	.word	0x0801220c

0800d5b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c4:	f003 0301 	and.w	r3, r3, #1
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00a      	beq.n	800d604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	430a      	orrs	r2, r1
 800d602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	430a      	orrs	r2, r1
 800d624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64c:	f003 0310 	and.w	r3, r3, #16
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00a      	beq.n	800d66a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66e:	f003 0320 	and.w	r3, r3, #32
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	430a      	orrs	r2, r1
 800d68a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01a      	beq.n	800d6ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6b6:	d10a      	bne.n	800d6ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	605a      	str	r2, [r3, #4]
  }
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af02      	add	r7, sp, #8
 800d702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d70c:	f7f5 f856 	bl	80027bc <HAL_GetTick>
 800d710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d10e      	bne.n	800d73e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f82f 	bl	800d792 <UART_WaitOnFlagUntilTimeout>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e025      	b.n	800d78a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 0304 	and.w	r3, r3, #4
 800d748:	2b04      	cmp	r3, #4
 800d74a:	d10e      	bne.n	800d76a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d74c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2200      	movs	r2, #0
 800d756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f819 	bl	800d792 <UART_WaitOnFlagUntilTimeout>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e00f      	b.n	800d78a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2220      	movs	r2, #32
 800d76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b084      	sub	sp, #16
 800d796:	af00      	add	r7, sp, #0
 800d798:	60f8      	str	r0, [r7, #12]
 800d79a:	60b9      	str	r1, [r7, #8]
 800d79c:	603b      	str	r3, [r7, #0]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7a2:	e062      	b.n	800d86a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7aa:	d05e      	beq.n	800d86a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7ac:	f7f5 f806 	bl	80027bc <HAL_GetTick>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d302      	bcc.n	800d7c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d11d      	bne.n	800d7fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d7d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689a      	ldr	r2, [r3, #8]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 0201 	bic.w	r2, r2, #1
 800d7e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2220      	movs	r2, #32
 800d7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2220      	movs	r2, #32
 800d7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	e045      	b.n	800d88a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0304 	and.w	r3, r3, #4
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d02e      	beq.n	800d86a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d81a:	d126      	bne.n	800d86a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d824:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d834:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689a      	ldr	r2, [r3, #8]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f022 0201 	bic.w	r2, r2, #1
 800d844:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2220      	movs	r2, #32
 800d84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2220      	movs	r2, #32
 800d852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2220      	movs	r2, #32
 800d85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d866:	2303      	movs	r3, #3
 800d868:	e00f      	b.n	800d88a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	69da      	ldr	r2, [r3, #28]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	4013      	ands	r3, r2
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	429a      	cmp	r2, r3
 800d878:	bf0c      	ite	eq
 800d87a:	2301      	moveq	r3, #1
 800d87c:	2300      	movne	r3, #0
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	461a      	mov	r2, r3
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	429a      	cmp	r2, r3
 800d886:	d08d      	beq.n	800d7a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	88fa      	ldrh	r2, [r7, #6]
 800d8ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2222      	movs	r2, #34	; 0x22
 800d8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d02c      	beq.n	800d922 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8cc:	4a25      	ldr	r2, [pc, #148]	; (800d964 <UART_Start_Receive_DMA+0xd0>)
 800d8ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d4:	4a24      	ldr	r2, [pc, #144]	; (800d968 <UART_Start_Receive_DMA+0xd4>)
 800d8d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8dc:	4a23      	ldr	r2, [pc, #140]	; (800d96c <UART_Start_Receive_DMA+0xd8>)
 800d8de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3324      	adds	r3, #36	; 0x24
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	88fb      	ldrh	r3, [r7, #6]
 800d8fc:	f7f6 fe3a 	bl	8004574 <HAL_DMA_Start_IT>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00d      	beq.n	800d922 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2210      	movs	r2, #16
 800d90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2220      	movs	r2, #32
 800d91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e01c      	b.n	800d95c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d938:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689a      	ldr	r2, [r3, #8]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f042 0201 	orr.w	r2, r2, #1
 800d948:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	689a      	ldr	r2, [r3, #8]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d958:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	0800da7d 	.word	0x0800da7d
 800d968:	0800db13 	.word	0x0800db13
 800d96c:	0800db4b 	.word	0x0800db4b

0800d970 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d986:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	689a      	ldr	r2, [r3, #8]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d996:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2220      	movs	r2, #32
 800d99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d9c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6899      	ldr	r1, [r3, #8]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4b0f      	ldr	r3, [pc, #60]	; (800da0c <UART_EndRxTransfer+0x60>)
 800d9d0:	400b      	ands	r3, r1
 800d9d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d107      	bne.n	800d9ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0210 	bic.w	r2, r2, #16
 800d9ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2220      	movs	r2, #32
 800d9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	effffffe 	.word	0xeffffffe

0800da10 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da26:	d014      	beq.n	800da52 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689a      	ldr	r2, [r3, #8]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da3e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da4e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da50:	e002      	b.n	800da58 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f003 fd96 	bl	8011584 <HAL_UART_TxCpltCallback>
}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f7ff f818 	bl	800caa4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da74:	bf00      	nop
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da92:	d02b      	beq.n	800daec <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2200      	movs	r2, #0
 800da98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800daaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	689a      	ldr	r2, [r3, #8]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f022 0201 	bic.w	r2, r2, #1
 800daba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689a      	ldr	r2, [r3, #8]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2220      	movs	r2, #32
 800dad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d107      	bne.n	800daec <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 0210 	bic.w	r2, r2, #16
 800daea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d107      	bne.n	800db04 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dafa:	4619      	mov	r1, r3
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7fe ffef 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db02:	e002      	b.n	800db0a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f003 fd63 	bl	80115d0 <HAL_UART_RxCpltCallback>
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b084      	sub	sp, #16
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db24:	2b01      	cmp	r3, #1
 800db26:	d109      	bne.n	800db3c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db2e:	085b      	lsrs	r3, r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	4619      	mov	r1, r3
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f7fe ffd3 	bl	800cae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db3a:	e002      	b.n	800db42 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7fe ffbb 	bl	800cab8 <HAL_UART_RxHalfCpltCallback>
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b086      	sub	sp, #24
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db72:	2b80      	cmp	r3, #128	; 0x80
 800db74:	d109      	bne.n	800db8a <UART_DMAError+0x40>
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2b21      	cmp	r3, #33	; 0x21
 800db7a:	d106      	bne.n	800db8a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2200      	movs	r2, #0
 800db80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db84:	6978      	ldr	r0, [r7, #20]
 800db86:	f7ff fef3 	bl	800d970 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db94:	2b40      	cmp	r3, #64	; 0x40
 800db96:	d109      	bne.n	800dbac <UART_DMAError+0x62>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b22      	cmp	r3, #34	; 0x22
 800db9c:	d106      	bne.n	800dbac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dba6:	6978      	ldr	r0, [r7, #20]
 800dba8:	f7ff ff00 	bl	800d9ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbb2:	f043 0210 	orr.w	r2, r3, #16
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbbc:	6978      	ldr	r0, [r7, #20]
 800dbbe:	f7fe ff85 	bl	800cacc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbc2:	bf00      	nop
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b084      	sub	sp, #16
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7fe ff6f 	bl	800cacc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbee:	bf00      	nop
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc0c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2220      	movs	r2, #32
 800dc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f003 fcb1 	bl	8011584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc5a:	bf00      	nop
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b085      	sub	sp, #20
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_UARTEx_DisableFifoMode+0x16>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e027      	b.n	800dccc <HAL_UARTEx_DisableFifoMode+0x66>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2224      	movs	r2, #36	; 0x24
 800dc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 0201 	bic.w	r2, r2, #1
 800dca2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2220      	movs	r2, #32
 800dcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dcec:	2302      	movs	r3, #2
 800dcee:	e02d      	b.n	800dd4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2224      	movs	r2, #36	; 0x24
 800dcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f022 0201 	bic.w	r2, r2, #1
 800dd16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f84f 	bl	800ddd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d101      	bne.n	800dd6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd68:	2302      	movs	r3, #2
 800dd6a:	e02d      	b.n	800ddc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2224      	movs	r2, #36	; 0x24
 800dd78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f022 0201 	bic.w	r2, r2, #1
 800dd92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	430a      	orrs	r2, r1
 800dda6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f811 	bl	800ddd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d108      	bne.n	800ddf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ddf0:	e031      	b.n	800de56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ddf2:	2310      	movs	r3, #16
 800ddf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ddf6:	2310      	movs	r3, #16
 800ddf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	0e5b      	lsrs	r3, r3, #25
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 0307 	and.w	r3, r3, #7
 800de08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	0f5b      	lsrs	r3, r3, #29
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0307 	and.w	r3, r3, #7
 800de18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	7b3a      	ldrb	r2, [r7, #12]
 800de1e:	4911      	ldr	r1, [pc, #68]	; (800de64 <UARTEx_SetNbDataToProcess+0x94>)
 800de20:	5c8a      	ldrb	r2, [r1, r2]
 800de22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de26:	7b3a      	ldrb	r2, [r7, #12]
 800de28:	490f      	ldr	r1, [pc, #60]	; (800de68 <UARTEx_SetNbDataToProcess+0x98>)
 800de2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	7b7a      	ldrb	r2, [r7, #13]
 800de3c:	4909      	ldr	r1, [pc, #36]	; (800de64 <UARTEx_SetNbDataToProcess+0x94>)
 800de3e:	5c8a      	ldrb	r2, [r1, r2]
 800de40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de44:	7b7a      	ldrb	r2, [r7, #13]
 800de46:	4908      	ldr	r1, [pc, #32]	; (800de68 <UARTEx_SetNbDataToProcess+0x98>)
 800de48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800de56:	bf00      	nop
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	08012224 	.word	0x08012224
 800de68:	0801222c 	.word	0x0801222c

0800de6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800de70:	f001 f88c 	bl	800ef8c <vTaskStartScheduler>
  
  return osOK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	bd80      	pop	{r7, pc}

0800de7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de7a:	b480      	push	{r7}
 800de7c:	b083      	sub	sp, #12
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f103 0208 	add.w	r2, r3, #8
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295
 800de92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f103 0208 	add.w	r2, r3, #8
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f103 0208 	add.w	r2, r3, #8
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800deae:	bf00      	nop
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800deba:	b480      	push	{r7}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689a      	ldr	r2, [r3, #8]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	601a      	str	r2, [r3, #0]
}
 800df10:	bf00      	nop
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df32:	d103      	bne.n	800df3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	60fb      	str	r3, [r7, #12]
 800df3a:	e00c      	b.n	800df56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3308      	adds	r3, #8
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	e002      	b.n	800df4a <vListInsert+0x2e>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	429a      	cmp	r2, r3
 800df54:	d2f6      	bcs.n	800df44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	601a      	str	r2, [r3, #0]
}
 800df82:	bf00      	nop
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6892      	ldr	r2, [r2, #8]
 800dfa4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	6852      	ldr	r2, [r2, #4]
 800dfae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d103      	bne.n	800dfc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	1e5a      	subs	r2, r3, #1
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <xQueueGenericReset+0x2a>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	60bb      	str	r3, [r7, #8]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e00e:	f002 fa99 	bl	8010544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01a:	68f9      	ldr	r1, [r7, #12]
 800e01c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e01e:	fb01 f303 	mul.w	r3, r1, r3
 800e022:	441a      	add	r2, r3
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03e:	3b01      	subs	r3, #1
 800e040:	68f9      	ldr	r1, [r7, #12]
 800e042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e044:	fb01 f303 	mul.w	r3, r1, r3
 800e048:	441a      	add	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	22ff      	movs	r2, #255	; 0xff
 800e052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	22ff      	movs	r2, #255	; 0xff
 800e05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d114      	bne.n	800e08e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d01a      	beq.n	800e0a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3310      	adds	r3, #16
 800e070:	4618      	mov	r0, r3
 800e072:	f001 fa07 	bl	800f484 <xTaskRemoveFromEventList>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d012      	beq.n	800e0a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e07c:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <xQueueGenericReset+0xcc>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	e009      	b.n	800e0a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3310      	adds	r3, #16
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff fef1 	bl	800de7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3324      	adds	r3, #36	; 0x24
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7ff feec 	bl	800de7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0a2:	f002 fa7f 	bl	80105a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0a6:	2301      	movs	r3, #1
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	e000ed04 	.word	0xe000ed04

0800e0b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08a      	sub	sp, #40	; 0x28
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <xQueueGenericCreate+0x2a>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	613b      	str	r3, [r7, #16]
}
 800e0da:	bf00      	nop
 800e0dc:	e7fe      	b.n	800e0dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	fb02 f303 	mul.w	r3, r2, r3
 800e0e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	3348      	adds	r3, #72	; 0x48
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f002 fb4b 	bl	8010788 <pvPortMalloc>
 800e0f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00d      	beq.n	800e116 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	3348      	adds	r3, #72	; 0x48
 800e102:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e104:	79fa      	ldrb	r2, [r7, #7]
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	4613      	mov	r3, r2
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 f805 	bl	800e120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e116:	69bb      	ldr	r3, [r7, #24]
	}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d103      	bne.n	800e13c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	69ba      	ldr	r2, [r7, #24]
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e002      	b.n	800e142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e14e:	2101      	movs	r1, #1
 800e150:	69b8      	ldr	r0, [r7, #24]
 800e152:	f7ff ff47 	bl	800dfe4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08e      	sub	sp, #56	; 0x38
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e16e:	2300      	movs	r3, #0
 800e170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10a      	bne.n	800e192 <xQueueGenericSend+0x32>
	__asm volatile
 800e17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e180:	f383 8811 	msr	BASEPRI, r3
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e18e:	bf00      	nop
 800e190:	e7fe      	b.n	800e190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <xQueueGenericSend+0x40>
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <xQueueGenericSend+0x44>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e000      	b.n	800e1a6 <xQueueGenericSend+0x46>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10a      	bne.n	800e1c0 <xQueueGenericSend+0x60>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d103      	bne.n	800e1ce <xQueueGenericSend+0x6e>
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d101      	bne.n	800e1d2 <xQueueGenericSend+0x72>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <xQueueGenericSend+0x74>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <xQueueGenericSend+0x8e>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	623b      	str	r3, [r7, #32]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1ee:	f001 faeb 	bl	800f7c8 <xTaskGetSchedulerState>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <xQueueGenericSend+0x9e>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <xQueueGenericSend+0xa2>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <xQueueGenericSend+0xa4>
 800e202:	2300      	movs	r3, #0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <xQueueGenericSend+0xbe>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	61fb      	str	r3, [r7, #28]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e21e:	f002 f991 	bl	8010544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d302      	bcc.n	800e234 <xQueueGenericSend+0xd4>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d129      	bne.n	800e288 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e234:	683a      	ldr	r2, [r7, #0]
 800e236:	68b9      	ldr	r1, [r7, #8]
 800e238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e23a:	f000 fbbb 	bl	800e9b4 <prvCopyDataToQueue>
 800e23e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d010      	beq.n	800e26a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24a:	3324      	adds	r3, #36	; 0x24
 800e24c:	4618      	mov	r0, r3
 800e24e:	f001 f919 	bl	800f484 <xTaskRemoveFromEventList>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d013      	beq.n	800e280 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e258:	4b3f      	ldr	r3, [pc, #252]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	e00a      	b.n	800e280 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e270:	4b39      	ldr	r3, [pc, #228]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e280:	f002 f990 	bl	80105a4 <vPortExitCritical>
				return pdPASS;
 800e284:	2301      	movs	r3, #1
 800e286:	e063      	b.n	800e350 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d103      	bne.n	800e296 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e28e:	f002 f989 	bl	80105a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e292:	2300      	movs	r3, #0
 800e294:	e05c      	b.n	800e350 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e29c:	f107 0314 	add.w	r3, r7, #20
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f001 f951 	bl	800f548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2aa:	f002 f97b 	bl	80105a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ae:	f000 fec5 	bl	800f03c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2b2:	f002 f947 	bl	8010544 <vPortEnterCritical>
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2bc:	b25b      	sxtb	r3, r3
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d103      	bne.n	800e2cc <xQueueGenericSend+0x16c>
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2d2:	b25b      	sxtb	r3, r3
 800e2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d8:	d103      	bne.n	800e2e2 <xQueueGenericSend+0x182>
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2e2:	f002 f95f 	bl	80105a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2e6:	1d3a      	adds	r2, r7, #4
 800e2e8:	f107 0314 	add.w	r3, r7, #20
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f001 f940 	bl	800f574 <xTaskCheckForTimeOut>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d124      	bne.n	800e344 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2fc:	f000 fc52 	bl	800eba4 <prvIsQueueFull>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d018      	beq.n	800e338 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	3310      	adds	r3, #16
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f001 f868 	bl	800f3e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e316:	f000 fbdd 	bl	800ead4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e31a:	f000 fe9d 	bl	800f058 <xTaskResumeAll>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	f47f af7c 	bne.w	800e21e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e32c:	601a      	str	r2, [r3, #0]
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	e772      	b.n	800e21e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e33a:	f000 fbcb 	bl	800ead4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e33e:	f000 fe8b 	bl	800f058 <xTaskResumeAll>
 800e342:	e76c      	b.n	800e21e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e346:	f000 fbc5 	bl	800ead4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e34a:	f000 fe85 	bl	800f058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e34e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e350:	4618      	mov	r0, r3
 800e352:	3738      	adds	r7, #56	; 0x38
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b090      	sub	sp, #64	; 0x40
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10a      	bne.n	800e38a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d103      	bne.n	800e398 <xQueueGenericSendFromISR+0x3c>
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <xQueueGenericSendFromISR+0x40>
 800e398:	2301      	movs	r3, #1
 800e39a:	e000      	b.n	800e39e <xQueueGenericSendFromISR+0x42>
 800e39c:	2300      	movs	r3, #0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10a      	bne.n	800e3b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d103      	bne.n	800e3c6 <xQueueGenericSendFromISR+0x6a>
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d101      	bne.n	800e3ca <xQueueGenericSendFromISR+0x6e>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e000      	b.n	800e3cc <xQueueGenericSendFromISR+0x70>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	623b      	str	r3, [r7, #32]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3e6:	f002 f98f 	bl	8010708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e3ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	61fa      	str	r2, [r7, #28]
 800e400:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e402:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e404:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <xQueueGenericSendFromISR+0xbc>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d12f      	bne.n	800e478 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e426:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	68b9      	ldr	r1, [r7, #8]
 800e42c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e42e:	f000 fac1 	bl	800e9b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e432:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43a:	d112      	bne.n	800e462 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	d016      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	3324      	adds	r3, #36	; 0x24
 800e448:	4618      	mov	r0, r3
 800e44a:	f001 f81b 	bl	800f484 <xTaskRemoveFromEventList>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00e      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00b      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	e007      	b.n	800e472 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e466:	3301      	adds	r3, #1
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	b25a      	sxtb	r2, r3
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e472:	2301      	movs	r3, #1
 800e474:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e476:	e001      	b.n	800e47c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3740      	adds	r7, #64	; 0x40
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b08e      	sub	sp, #56	; 0x38
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10a      	bne.n	800e4bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	623b      	str	r3, [r7, #32]
}
 800e4b8:	bf00      	nop
 800e4ba:	e7fe      	b.n	800e4ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00a      	beq.n	800e4da <xQueueGiveFromISR+0x48>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	61fb      	str	r3, [r7, #28]
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d103      	bne.n	800e4ea <xQueueGiveFromISR+0x58>
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d101      	bne.n	800e4ee <xQueueGiveFromISR+0x5c>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e000      	b.n	800e4f0 <xQueueGiveFromISR+0x5e>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10a      	bne.n	800e50a <xQueueGiveFromISR+0x78>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	61bb      	str	r3, [r7, #24]
}
 800e506:	bf00      	nop
 800e508:	e7fe      	b.n	800e508 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e50a:	f002 f8fd 	bl	8010708 <vPortValidateInterruptPriority>
	__asm volatile
 800e50e:	f3ef 8211 	mrs	r2, BASEPRI
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	617a      	str	r2, [r7, #20]
 800e524:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e526:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e536:	429a      	cmp	r2, r3
 800e538:	d22b      	bcs.n	800e592 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e54c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e554:	d112      	bne.n	800e57c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d016      	beq.n	800e58c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	3324      	adds	r3, #36	; 0x24
 800e562:	4618      	mov	r0, r3
 800e564:	f000 ff8e 	bl	800f484 <xTaskRemoveFromEventList>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00e      	beq.n	800e58c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00b      	beq.n	800e58c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2201      	movs	r2, #1
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	e007      	b.n	800e58c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e580:	3301      	adds	r3, #1
 800e582:	b2db      	uxtb	r3, r3
 800e584:	b25a      	sxtb	r2, r3
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e58c:	2301      	movs	r3, #1
 800e58e:	637b      	str	r3, [r7, #52]	; 0x34
 800e590:	e001      	b.n	800e596 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e592:	2300      	movs	r3, #0
 800e594:	637b      	str	r3, [r7, #52]	; 0x34
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f383 8811 	msr	BASEPRI, r3
}
 800e5a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3738      	adds	r7, #56	; 0x38
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08c      	sub	sp, #48	; 0x30
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <xQueueReceive+0x30>
	__asm volatile
 800e5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ca:	f383 8811 	msr	BASEPRI, r3
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	623b      	str	r3, [r7, #32]
}
 800e5d8:	bf00      	nop
 800e5da:	e7fe      	b.n	800e5da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d103      	bne.n	800e5ea <xQueueReceive+0x3e>
 800e5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d101      	bne.n	800e5ee <xQueueReceive+0x42>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <xQueueReceive+0x44>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10a      	bne.n	800e60a <xQueueReceive+0x5e>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	61fb      	str	r3, [r7, #28]
}
 800e606:	bf00      	nop
 800e608:	e7fe      	b.n	800e608 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e60a:	f001 f8dd 	bl	800f7c8 <xTaskGetSchedulerState>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d102      	bne.n	800e61a <xQueueReceive+0x6e>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d101      	bne.n	800e61e <xQueueReceive+0x72>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e000      	b.n	800e620 <xQueueReceive+0x74>
 800e61e:	2300      	movs	r3, #0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <xQueueReceive+0x8e>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	61bb      	str	r3, [r7, #24]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e63a:	f001 ff83 	bl	8010544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	2b00      	cmp	r3, #0
 800e648:	d01f      	beq.n	800e68a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e64e:	f000 fa1b 	bl	800ea88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	1e5a      	subs	r2, r3, #1
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	691b      	ldr	r3, [r3, #16]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00f      	beq.n	800e682 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	3310      	adds	r3, #16
 800e666:	4618      	mov	r0, r3
 800e668:	f000 ff0c 	bl	800f484 <xTaskRemoveFromEventList>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d007      	beq.n	800e682 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e672:	4b3d      	ldr	r3, [pc, #244]	; (800e768 <xQueueReceive+0x1bc>)
 800e674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e682:	f001 ff8f 	bl	80105a4 <vPortExitCritical>
				return pdPASS;
 800e686:	2301      	movs	r3, #1
 800e688:	e069      	b.n	800e75e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e690:	f001 ff88 	bl	80105a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e694:	2300      	movs	r3, #0
 800e696:	e062      	b.n	800e75e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e69e:	f107 0310 	add.w	r3, r7, #16
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 ff50 	bl	800f548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6ac:	f001 ff7a 	bl	80105a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6b0:	f000 fcc4 	bl	800f03c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6b4:	f001 ff46 	bl	8010544 <vPortEnterCritical>
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6be:	b25b      	sxtb	r3, r3
 800e6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c4:	d103      	bne.n	800e6ce <xQueueReceive+0x122>
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6d4:	b25b      	sxtb	r3, r3
 800e6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6da:	d103      	bne.n	800e6e4 <xQueueReceive+0x138>
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6e4:	f001 ff5e 	bl	80105a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6e8:	1d3a      	adds	r2, r7, #4
 800e6ea:	f107 0310 	add.w	r3, r7, #16
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f000 ff3f 	bl	800f574 <xTaskCheckForTimeOut>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d123      	bne.n	800e744 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6fe:	f000 fa3b 	bl	800eb78 <prvIsQueueEmpty>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d017      	beq.n	800e738 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	3324      	adds	r3, #36	; 0x24
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	4611      	mov	r1, r2
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fe67 	bl	800f3e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e718:	f000 f9dc 	bl	800ead4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e71c:	f000 fc9c 	bl	800f058 <xTaskResumeAll>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d189      	bne.n	800e63a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e726:	4b10      	ldr	r3, [pc, #64]	; (800e768 <xQueueReceive+0x1bc>)
 800e728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	e780      	b.n	800e63a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e73a:	f000 f9cb 	bl	800ead4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e73e:	f000 fc8b 	bl	800f058 <xTaskResumeAll>
 800e742:	e77a      	b.n	800e63a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e746:	f000 f9c5 	bl	800ead4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e74a:	f000 fc85 	bl	800f058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e750:	f000 fa12 	bl	800eb78 <prvIsQueueEmpty>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	f43f af6f 	beq.w	800e63a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e75c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3730      	adds	r7, #48	; 0x30
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	e000ed04 	.word	0xe000ed04

0800e76c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08e      	sub	sp, #56	; 0x38
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e776:	2300      	movs	r3, #0
 800e778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e77e:	2300      	movs	r3, #0
 800e780:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10a      	bne.n	800e79e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	623b      	str	r3, [r7, #32]
}
 800e79a:	bf00      	nop
 800e79c:	e7fe      	b.n	800e79c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00a      	beq.n	800e7bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	61fb      	str	r3, [r7, #28]
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7bc:	f001 f804 	bl	800f7c8 <xTaskGetSchedulerState>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d102      	bne.n	800e7cc <xQueueSemaphoreTake+0x60>
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <xQueueSemaphoreTake+0x64>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <xQueueSemaphoreTake+0x66>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	61bb      	str	r3, [r7, #24]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7ec:	f001 feaa 	bl	8010544 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d024      	beq.n	800e846 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	1e5a      	subs	r2, r3, #1
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d104      	bne.n	800e816 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e80c:	f001 f984 	bl	800fb18 <pvTaskIncrementMutexHeldCount>
 800e810:	4602      	mov	r2, r0
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00f      	beq.n	800e83e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	3310      	adds	r3, #16
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fe2e 	bl	800f484 <xTaskRemoveFromEventList>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d007      	beq.n	800e83e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e82e:	4b54      	ldr	r3, [pc, #336]	; (800e980 <xQueueSemaphoreTake+0x214>)
 800e830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e83e:	f001 feb1 	bl	80105a4 <vPortExitCritical>
				return pdPASS;
 800e842:	2301      	movs	r3, #1
 800e844:	e097      	b.n	800e976 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d111      	bne.n	800e870 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00a      	beq.n	800e868 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	617b      	str	r3, [r7, #20]
}
 800e864:	bf00      	nop
 800e866:	e7fe      	b.n	800e866 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e868:	f001 fe9c 	bl	80105a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e86c:	2300      	movs	r3, #0
 800e86e:	e082      	b.n	800e976 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	2b00      	cmp	r3, #0
 800e874:	d106      	bne.n	800e884 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e876:	f107 030c 	add.w	r3, r7, #12
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fe64 	bl	800f548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e880:	2301      	movs	r3, #1
 800e882:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e884:	f001 fe8e 	bl	80105a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e888:	f000 fbd8 	bl	800f03c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e88c:	f001 fe5a 	bl	8010544 <vPortEnterCritical>
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e896:	b25b      	sxtb	r3, r3
 800e898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89c:	d103      	bne.n	800e8a6 <xQueueSemaphoreTake+0x13a>
 800e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8ac:	b25b      	sxtb	r3, r3
 800e8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b2:	d103      	bne.n	800e8bc <xQueueSemaphoreTake+0x150>
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8bc:	f001 fe72 	bl	80105a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8c0:	463a      	mov	r2, r7
 800e8c2:	f107 030c 	add.w	r3, r7, #12
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fe53 	bl	800f574 <xTaskCheckForTimeOut>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d132      	bne.n	800e93a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d6:	f000 f94f 	bl	800eb78 <prvIsQueueEmpty>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d026      	beq.n	800e92e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d109      	bne.n	800e8fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e8e8:	f001 fe2c 	bl	8010544 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f000 ff87 	bl	800f804 <xTaskPriorityInherit>
 800e8f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e8f8:	f001 fe54 	bl	80105a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	3324      	adds	r3, #36	; 0x24
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f000 fd6d 	bl	800f3e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e90a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e90c:	f000 f8e2 	bl	800ead4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e910:	f000 fba2 	bl	800f058 <xTaskResumeAll>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	f47f af68 	bne.w	800e7ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e91c:	4b18      	ldr	r3, [pc, #96]	; (800e980 <xQueueSemaphoreTake+0x214>)
 800e91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	e75e      	b.n	800e7ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e930:	f000 f8d0 	bl	800ead4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e934:	f000 fb90 	bl	800f058 <xTaskResumeAll>
 800e938:	e758      	b.n	800e7ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e93a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e93c:	f000 f8ca 	bl	800ead4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e940:	f000 fb8a 	bl	800f058 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e946:	f000 f917 	bl	800eb78 <prvIsQueueEmpty>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f43f af4d 	beq.w	800e7ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00d      	beq.n	800e974 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e958:	f001 fdf4 	bl	8010544 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e95e:	f000 f811 	bl	800e984 <prvGetDisinheritPriorityAfterTimeout>
 800e962:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e96a:	4618      	mov	r0, r3
 800e96c:	f001 f846 	bl	800f9fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e970:	f001 fe18 	bl	80105a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e976:	4618      	mov	r0, r3
 800e978:	3738      	adds	r7, #56	; 0x38
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e984:	b480      	push	{r7}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d006      	beq.n	800e9a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f1c3 0307 	rsb	r3, r3, #7
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	e001      	b.n	800e9a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
	}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3714      	adds	r7, #20
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10d      	bne.n	800e9ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d14d      	bne.n	800ea76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	689b      	ldr	r3, [r3, #8]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f000 ff86 	bl	800f8f0 <xTaskPriorityDisinherit>
 800e9e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	609a      	str	r2, [r3, #8]
 800e9ec:	e043      	b.n	800ea76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d119      	bne.n	800ea28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6858      	ldr	r0, [r3, #4]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	68b9      	ldr	r1, [r7, #8]
 800ea00:	f002 fe46 	bl	8011690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea0c:	441a      	add	r2, r3
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d32b      	bcc.n	800ea76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	605a      	str	r2, [r3, #4]
 800ea26:	e026      	b.n	800ea76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	68d8      	ldr	r0, [r3, #12]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea30:	461a      	mov	r2, r3
 800ea32:	68b9      	ldr	r1, [r7, #8]
 800ea34:	f002 fe2c 	bl	8011690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68da      	ldr	r2, [r3, #12]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea40:	425b      	negs	r3, r3
 800ea42:	441a      	add	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d207      	bcs.n	800ea64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	689a      	ldr	r2, [r3, #8]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5c:	425b      	negs	r3, r3
 800ea5e:	441a      	add	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d105      	bne.n	800ea76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	3b01      	subs	r3, #1
 800ea74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ea7e:	697b      	ldr	r3, [r7, #20]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3718      	adds	r7, #24
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d018      	beq.n	800eacc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68da      	ldr	r2, [r3, #12]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa2:	441a      	add	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d303      	bcc.n	800eabc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68d9      	ldr	r1, [r3, #12]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac4:	461a      	mov	r2, r3
 800eac6:	6838      	ldr	r0, [r7, #0]
 800eac8:	f002 fde2 	bl	8011690 <memcpy>
	}
}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eadc:	f001 fd32 	bl	8010544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eae8:	e011      	b.n	800eb0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d012      	beq.n	800eb18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	3324      	adds	r3, #36	; 0x24
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f000 fcc4 	bl	800f484 <xTaskRemoveFromEventList>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb02:	f000 fd99 	bl	800f638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	dce9      	bgt.n	800eaea <prvUnlockQueue+0x16>
 800eb16:	e000      	b.n	800eb1a <prvUnlockQueue+0x46>
					break;
 800eb18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	22ff      	movs	r2, #255	; 0xff
 800eb1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eb22:	f001 fd3f 	bl	80105a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb26:	f001 fd0d 	bl	8010544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb32:	e011      	b.n	800eb58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d012      	beq.n	800eb62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3310      	adds	r3, #16
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 fc9f 	bl	800f484 <xTaskRemoveFromEventList>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb4c:	f000 fd74 	bl	800f638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb50:	7bbb      	ldrb	r3, [r7, #14]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	dce9      	bgt.n	800eb34 <prvUnlockQueue+0x60>
 800eb60:	e000      	b.n	800eb64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	22ff      	movs	r2, #255	; 0xff
 800eb68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eb6c:	f001 fd1a 	bl	80105a4 <vPortExitCritical>
}
 800eb70:	bf00      	nop
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb80:	f001 fce0 	bl	8010544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d102      	bne.n	800eb92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	e001      	b.n	800eb96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb92:	2300      	movs	r3, #0
 800eb94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb96:	f001 fd05 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebac:	f001 fcca 	bl	8010544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d102      	bne.n	800ebc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e001      	b.n	800ebc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebc6:	f001 fced 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800ebca:	68fb      	ldr	r3, [r7, #12]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	e014      	b.n	800ec0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ebe4:	4a0f      	ldr	r2, [pc, #60]	; (800ec24 <vQueueAddToRegistry+0x50>)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10b      	bne.n	800ec08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ebf0:	490c      	ldr	r1, [pc, #48]	; (800ec24 <vQueueAddToRegistry+0x50>)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ebfa:	4a0a      	ldr	r2, [pc, #40]	; (800ec24 <vQueueAddToRegistry+0x50>)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	4413      	add	r3, r2
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec06:	e006      	b.n	800ec16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b07      	cmp	r3, #7
 800ec12:	d9e7      	bls.n	800ebe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	24027c48 	.word	0x24027c48

0800ec28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec38:	f001 fc84 	bl	8010544 <vPortEnterCritical>
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec42:	b25b      	sxtb	r3, r3
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec48:	d103      	bne.n	800ec52 <vQueueWaitForMessageRestricted+0x2a>
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec58:	b25b      	sxtb	r3, r3
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5e:	d103      	bne.n	800ec68 <vQueueWaitForMessageRestricted+0x40>
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec68:	f001 fc9c 	bl	80105a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d106      	bne.n	800ec82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	3324      	adds	r3, #36	; 0x24
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	68b9      	ldr	r1, [r7, #8]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 fbd5 	bl	800f42c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec82:	6978      	ldr	r0, [r7, #20]
 800ec84:	f7ff ff26 	bl	800ead4 <prvUnlockQueue>
	}
 800ec88:	bf00      	nop
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08c      	sub	sp, #48	; 0x30
 800ec94:	af04      	add	r7, sp, #16
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	603b      	str	r3, [r7, #0]
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eca0:	88fb      	ldrh	r3, [r7, #6]
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4618      	mov	r0, r3
 800eca6:	f001 fd6f 	bl	8010788 <pvPortMalloc>
 800ecaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00e      	beq.n	800ecd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecb2:	20b4      	movs	r0, #180	; 0xb4
 800ecb4:	f001 fd68 	bl	8010788 <pvPortMalloc>
 800ecb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d003      	beq.n	800ecc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	631a      	str	r2, [r3, #48]	; 0x30
 800ecc6:	e005      	b.n	800ecd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecc8:	6978      	ldr	r0, [r7, #20]
 800ecca:	f001 fe29 	bl	8010920 <vPortFree>
 800ecce:	e001      	b.n	800ecd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d013      	beq.n	800ed02 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ecda:	88fa      	ldrh	r2, [r7, #6]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9303      	str	r3, [sp, #12]
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	9302      	str	r3, [sp, #8]
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	9301      	str	r3, [sp, #4]
 800ece8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	68b9      	ldr	r1, [r7, #8]
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 f80f 	bl	800ed14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecf6:	69f8      	ldr	r0, [r7, #28]
 800ecf8:	f000 f8aa 	bl	800ee50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	61bb      	str	r3, [r7, #24]
 800ed00:	e002      	b.n	800ed08 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed02:	f04f 33ff 	mov.w	r3, #4294967295
 800ed06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed08:	69bb      	ldr	r3, [r7, #24]
	}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3720      	adds	r7, #32
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ed2c:	440b      	add	r3, r1
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	f023 0307 	bic.w	r3, r3, #7
 800ed3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	f003 0307 	and.w	r3, r3, #7
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00a      	beq.n	800ed5c <prvInitialiseNewTask+0x48>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	617b      	str	r3, [r7, #20]
}
 800ed58:	bf00      	nop
 800ed5a:	e7fe      	b.n	800ed5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d01f      	beq.n	800eda2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed62:	2300      	movs	r3, #0
 800ed64:	61fb      	str	r3, [r7, #28]
 800ed66:	e012      	b.n	800ed8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	7819      	ldrb	r1, [r3, #0]
 800ed70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4413      	add	r3, r2
 800ed76:	3334      	adds	r3, #52	; 0x34
 800ed78:	460a      	mov	r2, r1
 800ed7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	4413      	add	r3, r2
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d006      	beq.n	800ed96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	61fb      	str	r3, [r7, #28]
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	2b0f      	cmp	r3, #15
 800ed92:	d9e9      	bls.n	800ed68 <prvInitialiseNewTask+0x54>
 800ed94:	e000      	b.n	800ed98 <prvInitialiseNewTask+0x84>
			{
				break;
 800ed96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eda0:	e003      	b.n	800edaa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800edaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edac:	2b06      	cmp	r3, #6
 800edae:	d901      	bls.n	800edb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800edb0:	2306      	movs	r3, #6
 800edb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	2200      	movs	r2, #0
 800edc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	3304      	adds	r3, #4
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff f875 	bl	800deba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd2:	3318      	adds	r3, #24
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff f870 	bl	800deba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ede0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede2:	f1c3 0207 	rsb	r2, r3, #7
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	334c      	adds	r3, #76	; 0x4c
 800ee04:	2260      	movs	r2, #96	; 0x60
 800ee06:	2100      	movs	r1, #0
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f002 fc4f 	bl	80116ac <memset>
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	4a0c      	ldr	r2, [pc, #48]	; (800ee44 <prvInitialiseNewTask+0x130>)
 800ee12:	651a      	str	r2, [r3, #80]	; 0x50
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	4a0c      	ldr	r2, [pc, #48]	; (800ee48 <prvInitialiseNewTask+0x134>)
 800ee18:	655a      	str	r2, [r3, #84]	; 0x54
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	4a0b      	ldr	r2, [pc, #44]	; (800ee4c <prvInitialiseNewTask+0x138>)
 800ee1e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	68f9      	ldr	r1, [r7, #12]
 800ee24:	69b8      	ldr	r0, [r7, #24]
 800ee26:	f001 fa5f 	bl	80102e8 <pxPortInitialiseStack>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee3c:	bf00      	nop
 800ee3e:	3720      	adds	r7, #32
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	08012254 	.word	0x08012254
 800ee48:	08012274 	.word	0x08012274
 800ee4c:	08012234 	.word	0x08012234

0800ee50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee58:	f001 fb74 	bl	8010544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee5c:	4b2a      	ldr	r3, [pc, #168]	; (800ef08 <prvAddNewTaskToReadyList+0xb8>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3301      	adds	r3, #1
 800ee62:	4a29      	ldr	r2, [pc, #164]	; (800ef08 <prvAddNewTaskToReadyList+0xb8>)
 800ee64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee66:	4b29      	ldr	r3, [pc, #164]	; (800ef0c <prvAddNewTaskToReadyList+0xbc>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d109      	bne.n	800ee82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee6e:	4a27      	ldr	r2, [pc, #156]	; (800ef0c <prvAddNewTaskToReadyList+0xbc>)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee74:	4b24      	ldr	r3, [pc, #144]	; (800ef08 <prvAddNewTaskToReadyList+0xb8>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d110      	bne.n	800ee9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee7c:	f000 fc00 	bl	800f680 <prvInitialiseTaskLists>
 800ee80:	e00d      	b.n	800ee9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee82:	4b23      	ldr	r3, [pc, #140]	; (800ef10 <prvAddNewTaskToReadyList+0xc0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee8a:	4b20      	ldr	r3, [pc, #128]	; (800ef0c <prvAddNewTaskToReadyList+0xbc>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d802      	bhi.n	800ee9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee98:	4a1c      	ldr	r2, [pc, #112]	; (800ef0c <prvAddNewTaskToReadyList+0xbc>)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee9e:	4b1d      	ldr	r3, [pc, #116]	; (800ef14 <prvAddNewTaskToReadyList+0xc4>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	4a1b      	ldr	r2, [pc, #108]	; (800ef14 <prvAddNewTaskToReadyList+0xc4>)
 800eea6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeac:	2201      	movs	r2, #1
 800eeae:	409a      	lsls	r2, r3
 800eeb0:	4b19      	ldr	r3, [pc, #100]	; (800ef18 <prvAddNewTaskToReadyList+0xc8>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	4a18      	ldr	r2, [pc, #96]	; (800ef18 <prvAddNewTaskToReadyList+0xc8>)
 800eeb8:	6013      	str	r3, [r2, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eebe:	4613      	mov	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4a15      	ldr	r2, [pc, #84]	; (800ef1c <prvAddNewTaskToReadyList+0xcc>)
 800eec8:	441a      	add	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	3304      	adds	r3, #4
 800eece:	4619      	mov	r1, r3
 800eed0:	4610      	mov	r0, r2
 800eed2:	f7fe ffff 	bl	800ded4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eed6:	f001 fb65 	bl	80105a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eeda:	4b0d      	ldr	r3, [pc, #52]	; (800ef10 <prvAddNewTaskToReadyList+0xc0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00e      	beq.n	800ef00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eee2:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <prvAddNewTaskToReadyList+0xbc>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d207      	bcs.n	800ef00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eef0:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <prvAddNewTaskToReadyList+0xd0>)
 800eef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	240001b0 	.word	0x240001b0
 800ef0c:	240000b0 	.word	0x240000b0
 800ef10:	240001bc 	.word	0x240001bc
 800ef14:	240001cc 	.word	0x240001cc
 800ef18:	240001b8 	.word	0x240001b8
 800ef1c:	240000b4 	.word	0x240000b4
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d017      	beq.n	800ef66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef36:	4b13      	ldr	r3, [pc, #76]	; (800ef84 <vTaskDelay+0x60>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <vTaskDelay+0x30>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	60bb      	str	r3, [r7, #8]
}
 800ef50:	bf00      	nop
 800ef52:	e7fe      	b.n	800ef52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ef54:	f000 f872 	bl	800f03c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef58:	2100      	movs	r1, #0
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fdf0 	bl	800fb40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef60:	f000 f87a 	bl	800f058 <xTaskResumeAll>
 800ef64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d107      	bne.n	800ef7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef6c:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <vTaskDelay+0x64>)
 800ef6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef7c:	bf00      	nop
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	240001d8 	.word	0x240001d8
 800ef88:	e000ed04 	.word	0xe000ed04

0800ef8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ef92:	4b22      	ldr	r3, [pc, #136]	; (800f01c <vTaskStartScheduler+0x90>)
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	2300      	movs	r3, #0
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efa0:	491f      	ldr	r1, [pc, #124]	; (800f020 <vTaskStartScheduler+0x94>)
 800efa2:	4820      	ldr	r0, [pc, #128]	; (800f024 <vTaskStartScheduler+0x98>)
 800efa4:	f7ff fe74 	bl	800ec90 <xTaskCreate>
 800efa8:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d102      	bne.n	800efb6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800efb0:	f000 fe2c 	bl	800fc0c <xTimerCreateTimerTask>
 800efb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d11b      	bne.n	800eff4 <vTaskStartScheduler+0x68>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	60bb      	str	r3, [r7, #8]
}
 800efce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800efd0:	4b15      	ldr	r3, [pc, #84]	; (800f028 <vTaskStartScheduler+0x9c>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	334c      	adds	r3, #76	; 0x4c
 800efd6:	4a15      	ldr	r2, [pc, #84]	; (800f02c <vTaskStartScheduler+0xa0>)
 800efd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800efda:	4b15      	ldr	r3, [pc, #84]	; (800f030 <vTaskStartScheduler+0xa4>)
 800efdc:	f04f 32ff 	mov.w	r2, #4294967295
 800efe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800efe2:	4b14      	ldr	r3, [pc, #80]	; (800f034 <vTaskStartScheduler+0xa8>)
 800efe4:	2201      	movs	r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <vTaskStartScheduler+0xac>)
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800efee:	f001 fa07 	bl	8010400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eff2:	e00e      	b.n	800f012 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effa:	d10a      	bne.n	800f012 <vTaskStartScheduler+0x86>
	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f000:	f383 8811 	msr	BASEPRI, r3
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	607b      	str	r3, [r7, #4]
}
 800f00e:	bf00      	nop
 800f010:	e7fe      	b.n	800f010 <vTaskStartScheduler+0x84>
}
 800f012:	bf00      	nop
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	240001d4 	.word	0x240001d4
 800f020:	080121c4 	.word	0x080121c4
 800f024:	0800f651 	.word	0x0800f651
 800f028:	240000b0 	.word	0x240000b0
 800f02c:	24000018 	.word	0x24000018
 800f030:	240001d0 	.word	0x240001d0
 800f034:	240001bc 	.word	0x240001bc
 800f038:	240001b4 	.word	0x240001b4

0800f03c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f03c:	b480      	push	{r7}
 800f03e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f040:	4b04      	ldr	r3, [pc, #16]	; (800f054 <vTaskSuspendAll+0x18>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	3301      	adds	r3, #1
 800f046:	4a03      	ldr	r2, [pc, #12]	; (800f054 <vTaskSuspendAll+0x18>)
 800f048:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f04a:	bf00      	nop
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	240001d8 	.word	0x240001d8

0800f058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f05e:	2300      	movs	r3, #0
 800f060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f062:	2300      	movs	r3, #0
 800f064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f066:	4b41      	ldr	r3, [pc, #260]	; (800f16c <xTaskResumeAll+0x114>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <xTaskResumeAll+0x2c>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	603b      	str	r3, [r7, #0]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f084:	f001 fa5e 	bl	8010544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f088:	4b38      	ldr	r3, [pc, #224]	; (800f16c <xTaskResumeAll+0x114>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	4a37      	ldr	r2, [pc, #220]	; (800f16c <xTaskResumeAll+0x114>)
 800f090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f092:	4b36      	ldr	r3, [pc, #216]	; (800f16c <xTaskResumeAll+0x114>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d161      	bne.n	800f15e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f09a:	4b35      	ldr	r3, [pc, #212]	; (800f170 <xTaskResumeAll+0x118>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d05d      	beq.n	800f15e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0a2:	e02e      	b.n	800f102 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a4:	4b33      	ldr	r3, [pc, #204]	; (800f174 <xTaskResumeAll+0x11c>)
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3318      	adds	r3, #24
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe ff6c 	bl	800df8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe ff67 	bl	800df8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	409a      	lsls	r2, r3
 800f0c8:	4b2b      	ldr	r3, [pc, #172]	; (800f178 <xTaskResumeAll+0x120>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	4a2a      	ldr	r2, [pc, #168]	; (800f178 <xTaskResumeAll+0x120>)
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4a27      	ldr	r2, [pc, #156]	; (800f17c <xTaskResumeAll+0x124>)
 800f0e0:	441a      	add	r2, r3
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7fe fef3 	bl	800ded4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f2:	4b23      	ldr	r3, [pc, #140]	; (800f180 <xTaskResumeAll+0x128>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d302      	bcc.n	800f102 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f0fc:	4b21      	ldr	r3, [pc, #132]	; (800f184 <xTaskResumeAll+0x12c>)
 800f0fe:	2201      	movs	r2, #1
 800f100:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f102:	4b1c      	ldr	r3, [pc, #112]	; (800f174 <xTaskResumeAll+0x11c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1cc      	bne.n	800f0a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d001      	beq.n	800f114 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f110:	f000 fb3a 	bl	800f788 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f114:	4b1c      	ldr	r3, [pc, #112]	; (800f188 <xTaskResumeAll+0x130>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d010      	beq.n	800f142 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f120:	f000 f846 	bl	800f1b0 <xTaskIncrementTick>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d002      	beq.n	800f130 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f12a:	4b16      	ldr	r3, [pc, #88]	; (800f184 <xTaskResumeAll+0x12c>)
 800f12c:	2201      	movs	r2, #1
 800f12e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3b01      	subs	r3, #1
 800f134:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1f1      	bne.n	800f120 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f13c:	4b12      	ldr	r3, [pc, #72]	; (800f188 <xTaskResumeAll+0x130>)
 800f13e:	2200      	movs	r2, #0
 800f140:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f142:	4b10      	ldr	r3, [pc, #64]	; (800f184 <xTaskResumeAll+0x12c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d009      	beq.n	800f15e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f14a:	2301      	movs	r3, #1
 800f14c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f14e:	4b0f      	ldr	r3, [pc, #60]	; (800f18c <xTaskResumeAll+0x134>)
 800f150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f15e:	f001 fa21 	bl	80105a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f162:	68bb      	ldr	r3, [r7, #8]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	240001d8 	.word	0x240001d8
 800f170:	240001b0 	.word	0x240001b0
 800f174:	24000170 	.word	0x24000170
 800f178:	240001b8 	.word	0x240001b8
 800f17c:	240000b4 	.word	0x240000b4
 800f180:	240000b0 	.word	0x240000b0
 800f184:	240001c4 	.word	0x240001c4
 800f188:	240001c0 	.word	0x240001c0
 800f18c:	e000ed04 	.word	0xe000ed04

0800f190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f196:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <xTaskGetTickCount+0x1c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f19c:	687b      	ldr	r3, [r7, #4]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	240001b4 	.word	0x240001b4

0800f1b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1ba:	4b4e      	ldr	r3, [pc, #312]	; (800f2f4 <xTaskIncrementTick+0x144>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f040 808e 	bne.w	800f2e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1c4:	4b4c      	ldr	r3, [pc, #304]	; (800f2f8 <xTaskIncrementTick+0x148>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1cc:	4a4a      	ldr	r2, [pc, #296]	; (800f2f8 <xTaskIncrementTick+0x148>)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d120      	bne.n	800f21a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1d8:	4b48      	ldr	r3, [pc, #288]	; (800f2fc <xTaskIncrementTick+0x14c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00a      	beq.n	800f1f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	603b      	str	r3, [r7, #0]
}
 800f1f4:	bf00      	nop
 800f1f6:	e7fe      	b.n	800f1f6 <xTaskIncrementTick+0x46>
 800f1f8:	4b40      	ldr	r3, [pc, #256]	; (800f2fc <xTaskIncrementTick+0x14c>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	60fb      	str	r3, [r7, #12]
 800f1fe:	4b40      	ldr	r3, [pc, #256]	; (800f300 <xTaskIncrementTick+0x150>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4a3e      	ldr	r2, [pc, #248]	; (800f2fc <xTaskIncrementTick+0x14c>)
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	4a3e      	ldr	r2, [pc, #248]	; (800f300 <xTaskIncrementTick+0x150>)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6013      	str	r3, [r2, #0]
 800f20c:	4b3d      	ldr	r3, [pc, #244]	; (800f304 <xTaskIncrementTick+0x154>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3301      	adds	r3, #1
 800f212:	4a3c      	ldr	r2, [pc, #240]	; (800f304 <xTaskIncrementTick+0x154>)
 800f214:	6013      	str	r3, [r2, #0]
 800f216:	f000 fab7 	bl	800f788 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f21a:	4b3b      	ldr	r3, [pc, #236]	; (800f308 <xTaskIncrementTick+0x158>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	693a      	ldr	r2, [r7, #16]
 800f220:	429a      	cmp	r2, r3
 800f222:	d348      	bcc.n	800f2b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f224:	4b35      	ldr	r3, [pc, #212]	; (800f2fc <xTaskIncrementTick+0x14c>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d104      	bne.n	800f238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f22e:	4b36      	ldr	r3, [pc, #216]	; (800f308 <xTaskIncrementTick+0x158>)
 800f230:	f04f 32ff 	mov.w	r2, #4294967295
 800f234:	601a      	str	r2, [r3, #0]
					break;
 800f236:	e03e      	b.n	800f2b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f238:	4b30      	ldr	r3, [pc, #192]	; (800f2fc <xTaskIncrementTick+0x14c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f248:	693a      	ldr	r2, [r7, #16]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d203      	bcs.n	800f258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f250:	4a2d      	ldr	r2, [pc, #180]	; (800f308 <xTaskIncrementTick+0x158>)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f256:	e02e      	b.n	800f2b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	3304      	adds	r3, #4
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fe fe96 	bl	800df8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f266:	2b00      	cmp	r3, #0
 800f268:	d004      	beq.n	800f274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	3318      	adds	r3, #24
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fe8d 	bl	800df8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f278:	2201      	movs	r2, #1
 800f27a:	409a      	lsls	r2, r3
 800f27c:	4b23      	ldr	r3, [pc, #140]	; (800f30c <xTaskIncrementTick+0x15c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4313      	orrs	r3, r2
 800f282:	4a22      	ldr	r2, [pc, #136]	; (800f30c <xTaskIncrementTick+0x15c>)
 800f284:	6013      	str	r3, [r2, #0]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f28a:	4613      	mov	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4a1f      	ldr	r2, [pc, #124]	; (800f310 <xTaskIncrementTick+0x160>)
 800f294:	441a      	add	r2, r3
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	3304      	adds	r3, #4
 800f29a:	4619      	mov	r1, r3
 800f29c:	4610      	mov	r0, r2
 800f29e:	f7fe fe19 	bl	800ded4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a6:	4b1b      	ldr	r3, [pc, #108]	; (800f314 <xTaskIncrementTick+0x164>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d3b9      	bcc.n	800f224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2b4:	e7b6      	b.n	800f224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2b6:	4b17      	ldr	r3, [pc, #92]	; (800f314 <xTaskIncrementTick+0x164>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2bc:	4914      	ldr	r1, [pc, #80]	; (800f310 <xTaskIncrementTick+0x160>)
 800f2be:	4613      	mov	r3, r2
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4413      	add	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	440b      	add	r3, r1
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d901      	bls.n	800f2d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f2d2:	4b11      	ldr	r3, [pc, #68]	; (800f318 <xTaskIncrementTick+0x168>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d007      	beq.n	800f2ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e004      	b.n	800f2ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f2e0:	4b0e      	ldr	r3, [pc, #56]	; (800f31c <xTaskIncrementTick+0x16c>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	4a0d      	ldr	r2, [pc, #52]	; (800f31c <xTaskIncrementTick+0x16c>)
 800f2e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f2ea:	697b      	ldr	r3, [r7, #20]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3718      	adds	r7, #24
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	240001d8 	.word	0x240001d8
 800f2f8:	240001b4 	.word	0x240001b4
 800f2fc:	24000168 	.word	0x24000168
 800f300:	2400016c 	.word	0x2400016c
 800f304:	240001c8 	.word	0x240001c8
 800f308:	240001d0 	.word	0x240001d0
 800f30c:	240001b8 	.word	0x240001b8
 800f310:	240000b4 	.word	0x240000b4
 800f314:	240000b0 	.word	0x240000b0
 800f318:	240001c4 	.word	0x240001c4
 800f31c:	240001c0 	.word	0x240001c0

0800f320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f320:	b480      	push	{r7}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f326:	4b29      	ldr	r3, [pc, #164]	; (800f3cc <vTaskSwitchContext+0xac>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f32e:	4b28      	ldr	r3, [pc, #160]	; (800f3d0 <vTaskSwitchContext+0xb0>)
 800f330:	2201      	movs	r2, #1
 800f332:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f334:	e044      	b.n	800f3c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800f336:	4b26      	ldr	r3, [pc, #152]	; (800f3d0 <vTaskSwitchContext+0xb0>)
 800f338:	2200      	movs	r2, #0
 800f33a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f33c:	4b25      	ldr	r3, [pc, #148]	; (800f3d4 <vTaskSwitchContext+0xb4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	fab3 f383 	clz	r3, r3
 800f348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f34a:	7afb      	ldrb	r3, [r7, #11]
 800f34c:	f1c3 031f 	rsb	r3, r3, #31
 800f350:	617b      	str	r3, [r7, #20]
 800f352:	4921      	ldr	r1, [pc, #132]	; (800f3d8 <vTaskSwitchContext+0xb8>)
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4613      	mov	r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	440b      	add	r3, r1
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10a      	bne.n	800f37c <vTaskSwitchContext+0x5c>
	__asm volatile
 800f366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
 800f376:	607b      	str	r3, [r7, #4]
}
 800f378:	bf00      	nop
 800f37a:	e7fe      	b.n	800f37a <vTaskSwitchContext+0x5a>
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	4613      	mov	r3, r2
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	4413      	add	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4a14      	ldr	r2, [pc, #80]	; (800f3d8 <vTaskSwitchContext+0xb8>)
 800f388:	4413      	add	r3, r2
 800f38a:	613b      	str	r3, [r7, #16]
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	605a      	str	r2, [r3, #4]
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	3308      	adds	r3, #8
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d104      	bne.n	800f3ac <vTaskSwitchContext+0x8c>
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	605a      	str	r2, [r3, #4]
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	4a0a      	ldr	r2, [pc, #40]	; (800f3dc <vTaskSwitchContext+0xbc>)
 800f3b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f3b6:	4b09      	ldr	r3, [pc, #36]	; (800f3dc <vTaskSwitchContext+0xbc>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	334c      	adds	r3, #76	; 0x4c
 800f3bc:	4a08      	ldr	r2, [pc, #32]	; (800f3e0 <vTaskSwitchContext+0xc0>)
 800f3be:	6013      	str	r3, [r2, #0]
}
 800f3c0:	bf00      	nop
 800f3c2:	371c      	adds	r7, #28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	240001d8 	.word	0x240001d8
 800f3d0:	240001c4 	.word	0x240001c4
 800f3d4:	240001b8 	.word	0x240001b8
 800f3d8:	240000b4 	.word	0x240000b4
 800f3dc:	240000b0 	.word	0x240000b0
 800f3e0:	24000018 	.word	0x24000018

0800f3e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10a      	bne.n	800f40a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	60fb      	str	r3, [r7, #12]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f40a:	4b07      	ldr	r3, [pc, #28]	; (800f428 <vTaskPlaceOnEventList+0x44>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	3318      	adds	r3, #24
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7fe fd82 	bl	800df1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f418:	2101      	movs	r1, #1
 800f41a:	6838      	ldr	r0, [r7, #0]
 800f41c:	f000 fb90 	bl	800fb40 <prvAddCurrentTaskToDelayedList>
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	240000b0 	.word	0x240000b0

0800f42c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b086      	sub	sp, #24
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10a      	bne.n	800f454 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	617b      	str	r3, [r7, #20]
}
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f454:	4b0a      	ldr	r3, [pc, #40]	; (800f480 <vTaskPlaceOnEventListRestricted+0x54>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	3318      	adds	r3, #24
 800f45a:	4619      	mov	r1, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7fe fd39 	bl	800ded4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d002      	beq.n	800f46e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f468:	f04f 33ff 	mov.w	r3, #4294967295
 800f46c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f46e:	6879      	ldr	r1, [r7, #4]
 800f470:	68b8      	ldr	r0, [r7, #8]
 800f472:	f000 fb65 	bl	800fb40 <prvAddCurrentTaskToDelayedList>
	}
 800f476:	bf00      	nop
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	240000b0 	.word	0x240000b0

0800f484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10a      	bne.n	800f4b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	60fb      	str	r3, [r7, #12]
}
 800f4ac:	bf00      	nop
 800f4ae:	e7fe      	b.n	800f4ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	3318      	adds	r3, #24
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fe fd6a 	bl	800df8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ba:	4b1d      	ldr	r3, [pc, #116]	; (800f530 <xTaskRemoveFromEventList+0xac>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d11c      	bne.n	800f4fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	3304      	adds	r3, #4
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fe fd61 	bl	800df8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	409a      	lsls	r2, r3
 800f4d4:	4b17      	ldr	r3, [pc, #92]	; (800f534 <xTaskRemoveFromEventList+0xb0>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	4a16      	ldr	r2, [pc, #88]	; (800f534 <xTaskRemoveFromEventList+0xb0>)
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	4413      	add	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4a13      	ldr	r2, [pc, #76]	; (800f538 <xTaskRemoveFromEventList+0xb4>)
 800f4ec:	441a      	add	r2, r3
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	f7fe fced 	bl	800ded4 <vListInsertEnd>
 800f4fa:	e005      	b.n	800f508 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	3318      	adds	r3, #24
 800f500:	4619      	mov	r1, r3
 800f502:	480e      	ldr	r0, [pc, #56]	; (800f53c <xTaskRemoveFromEventList+0xb8>)
 800f504:	f7fe fce6 	bl	800ded4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50c:	4b0c      	ldr	r3, [pc, #48]	; (800f540 <xTaskRemoveFromEventList+0xbc>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f512:	429a      	cmp	r2, r3
 800f514:	d905      	bls.n	800f522 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f516:	2301      	movs	r3, #1
 800f518:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f51a:	4b0a      	ldr	r3, [pc, #40]	; (800f544 <xTaskRemoveFromEventList+0xc0>)
 800f51c:	2201      	movs	r2, #1
 800f51e:	601a      	str	r2, [r3, #0]
 800f520:	e001      	b.n	800f526 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f522:	2300      	movs	r3, #0
 800f524:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f526:	697b      	ldr	r3, [r7, #20]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	240001d8 	.word	0x240001d8
 800f534:	240001b8 	.word	0x240001b8
 800f538:	240000b4 	.word	0x240000b4
 800f53c:	24000170 	.word	0x24000170
 800f540:	240000b0 	.word	0x240000b0
 800f544:	240001c4 	.word	0x240001c4

0800f548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f550:	4b06      	ldr	r3, [pc, #24]	; (800f56c <vTaskInternalSetTimeOutState+0x24>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f558:	4b05      	ldr	r3, [pc, #20]	; (800f570 <vTaskInternalSetTimeOutState+0x28>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	605a      	str	r2, [r3, #4]
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	240001c8 	.word	0x240001c8
 800f570:	240001b4 	.word	0x240001b4

0800f574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10a      	bne.n	800f59a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	613b      	str	r3, [r7, #16]
}
 800f596:	bf00      	nop
 800f598:	e7fe      	b.n	800f598 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10a      	bne.n	800f5b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	60fb      	str	r3, [r7, #12]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f5b6:	f000 ffc5 	bl	8010544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f5ba:	4b1d      	ldr	r3, [pc, #116]	; (800f630 <xTaskCheckForTimeOut+0xbc>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	69ba      	ldr	r2, [r7, #24]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5d2:	d102      	bne.n	800f5da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61fb      	str	r3, [r7, #28]
 800f5d8:	e023      	b.n	800f622 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	4b15      	ldr	r3, [pc, #84]	; (800f634 <xTaskCheckForTimeOut+0xc0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d007      	beq.n	800f5f6 <xTaskCheckForTimeOut+0x82>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	69ba      	ldr	r2, [r7, #24]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d302      	bcc.n	800f5f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	e015      	b.n	800f622 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d20b      	bcs.n	800f618 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff ff9b 	bl	800f548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f612:	2300      	movs	r3, #0
 800f614:	61fb      	str	r3, [r7, #28]
 800f616:	e004      	b.n	800f622 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	2200      	movs	r2, #0
 800f61c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f61e:	2301      	movs	r3, #1
 800f620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f622:	f000 ffbf 	bl	80105a4 <vPortExitCritical>

	return xReturn;
 800f626:	69fb      	ldr	r3, [r7, #28]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3720      	adds	r7, #32
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	240001b4 	.word	0x240001b4
 800f634:	240001c8 	.word	0x240001c8

0800f638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f638:	b480      	push	{r7}
 800f63a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f63c:	4b03      	ldr	r3, [pc, #12]	; (800f64c <vTaskMissedYield+0x14>)
 800f63e:	2201      	movs	r2, #1
 800f640:	601a      	str	r2, [r3, #0]
}
 800f642:	bf00      	nop
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	240001c4 	.word	0x240001c4

0800f650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f658:	f000 f852 	bl	800f700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f65c:	4b06      	ldr	r3, [pc, #24]	; (800f678 <prvIdleTask+0x28>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d9f9      	bls.n	800f658 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f664:	4b05      	ldr	r3, [pc, #20]	; (800f67c <prvIdleTask+0x2c>)
 800f666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f66a:	601a      	str	r2, [r3, #0]
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f674:	e7f0      	b.n	800f658 <prvIdleTask+0x8>
 800f676:	bf00      	nop
 800f678:	240000b4 	.word	0x240000b4
 800f67c:	e000ed04 	.word	0xe000ed04

0800f680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f686:	2300      	movs	r3, #0
 800f688:	607b      	str	r3, [r7, #4]
 800f68a:	e00c      	b.n	800f6a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4a12      	ldr	r2, [pc, #72]	; (800f6e0 <prvInitialiseTaskLists+0x60>)
 800f698:	4413      	add	r3, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe fbed 	bl	800de7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	607b      	str	r3, [r7, #4]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b06      	cmp	r3, #6
 800f6aa:	d9ef      	bls.n	800f68c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6ac:	480d      	ldr	r0, [pc, #52]	; (800f6e4 <prvInitialiseTaskLists+0x64>)
 800f6ae:	f7fe fbe4 	bl	800de7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6b2:	480d      	ldr	r0, [pc, #52]	; (800f6e8 <prvInitialiseTaskLists+0x68>)
 800f6b4:	f7fe fbe1 	bl	800de7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6b8:	480c      	ldr	r0, [pc, #48]	; (800f6ec <prvInitialiseTaskLists+0x6c>)
 800f6ba:	f7fe fbde 	bl	800de7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6be:	480c      	ldr	r0, [pc, #48]	; (800f6f0 <prvInitialiseTaskLists+0x70>)
 800f6c0:	f7fe fbdb 	bl	800de7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6c4:	480b      	ldr	r0, [pc, #44]	; (800f6f4 <prvInitialiseTaskLists+0x74>)
 800f6c6:	f7fe fbd8 	bl	800de7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6ca:	4b0b      	ldr	r3, [pc, #44]	; (800f6f8 <prvInitialiseTaskLists+0x78>)
 800f6cc:	4a05      	ldr	r2, [pc, #20]	; (800f6e4 <prvInitialiseTaskLists+0x64>)
 800f6ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <prvInitialiseTaskLists+0x7c>)
 800f6d2:	4a05      	ldr	r2, [pc, #20]	; (800f6e8 <prvInitialiseTaskLists+0x68>)
 800f6d4:	601a      	str	r2, [r3, #0]
}
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	240000b4 	.word	0x240000b4
 800f6e4:	24000140 	.word	0x24000140
 800f6e8:	24000154 	.word	0x24000154
 800f6ec:	24000170 	.word	0x24000170
 800f6f0:	24000184 	.word	0x24000184
 800f6f4:	2400019c 	.word	0x2400019c
 800f6f8:	24000168 	.word	0x24000168
 800f6fc:	2400016c 	.word	0x2400016c

0800f700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f706:	e019      	b.n	800f73c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f708:	f000 ff1c 	bl	8010544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f70c:	4b10      	ldr	r3, [pc, #64]	; (800f750 <prvCheckTasksWaitingTermination+0x50>)
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3304      	adds	r3, #4
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe fc38 	bl	800df8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <prvCheckTasksWaitingTermination+0x54>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	3b01      	subs	r3, #1
 800f724:	4a0b      	ldr	r2, [pc, #44]	; (800f754 <prvCheckTasksWaitingTermination+0x54>)
 800f726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f728:	4b0b      	ldr	r3, [pc, #44]	; (800f758 <prvCheckTasksWaitingTermination+0x58>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	4a0a      	ldr	r2, [pc, #40]	; (800f758 <prvCheckTasksWaitingTermination+0x58>)
 800f730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f732:	f000 ff37 	bl	80105a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f810 	bl	800f75c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f73c:	4b06      	ldr	r3, [pc, #24]	; (800f758 <prvCheckTasksWaitingTermination+0x58>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1e1      	bne.n	800f708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	24000184 	.word	0x24000184
 800f754:	240001b0 	.word	0x240001b0
 800f758:	24000198 	.word	0x24000198

0800f75c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	334c      	adds	r3, #76	; 0x4c
 800f768:	4618      	mov	r0, r3
 800f76a:	f002 f80f 	bl	801178c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f772:	4618      	mov	r0, r3
 800f774:	f001 f8d4 	bl	8010920 <vPortFree>
			vPortFree( pxTCB );
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f001 f8d1 	bl	8010920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
	...

0800f788 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f78e:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <prvResetNextTaskUnblockTime+0x38>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d104      	bne.n	800f7a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f798:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <prvResetNextTaskUnblockTime+0x3c>)
 800f79a:	f04f 32ff 	mov.w	r2, #4294967295
 800f79e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7a0:	e008      	b.n	800f7b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a2:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <prvResetNextTaskUnblockTime+0x38>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a04      	ldr	r2, [pc, #16]	; (800f7c4 <prvResetNextTaskUnblockTime+0x3c>)
 800f7b2:	6013      	str	r3, [r2, #0]
}
 800f7b4:	bf00      	nop
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	24000168 	.word	0x24000168
 800f7c4:	240001d0 	.word	0x240001d0

0800f7c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7ce:	4b0b      	ldr	r3, [pc, #44]	; (800f7fc <xTaskGetSchedulerState+0x34>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d102      	bne.n	800f7dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	607b      	str	r3, [r7, #4]
 800f7da:	e008      	b.n	800f7ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7dc:	4b08      	ldr	r3, [pc, #32]	; (800f800 <xTaskGetSchedulerState+0x38>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d102      	bne.n	800f7ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	607b      	str	r3, [r7, #4]
 800f7e8:	e001      	b.n	800f7ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7ee:	687b      	ldr	r3, [r7, #4]
	}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	240001bc 	.word	0x240001bc
 800f800:	240001d8 	.word	0x240001d8

0800f804 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f810:	2300      	movs	r3, #0
 800f812:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d05e      	beq.n	800f8d8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81e:	4b31      	ldr	r3, [pc, #196]	; (800f8e4 <xTaskPriorityInherit+0xe0>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f824:	429a      	cmp	r2, r3
 800f826:	d24e      	bcs.n	800f8c6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	699b      	ldr	r3, [r3, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	db06      	blt.n	800f83e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f830:	4b2c      	ldr	r3, [pc, #176]	; (800f8e4 <xTaskPriorityInherit+0xe0>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f836:	f1c3 0207 	rsb	r2, r3, #7
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	6959      	ldr	r1, [r3, #20]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f846:	4613      	mov	r3, r2
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	4413      	add	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	4a26      	ldr	r2, [pc, #152]	; (800f8e8 <xTaskPriorityInherit+0xe4>)
 800f850:	4413      	add	r3, r2
 800f852:	4299      	cmp	r1, r3
 800f854:	d12f      	bne.n	800f8b6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	3304      	adds	r3, #4
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fb97 	bl	800df8e <uxListRemove>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10a      	bne.n	800f87c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f86a:	2201      	movs	r2, #1
 800f86c:	fa02 f303 	lsl.w	r3, r2, r3
 800f870:	43da      	mvns	r2, r3
 800f872:	4b1e      	ldr	r3, [pc, #120]	; (800f8ec <xTaskPriorityInherit+0xe8>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4013      	ands	r3, r2
 800f878:	4a1c      	ldr	r2, [pc, #112]	; (800f8ec <xTaskPriorityInherit+0xe8>)
 800f87a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f87c:	4b19      	ldr	r3, [pc, #100]	; (800f8e4 <xTaskPriorityInherit+0xe0>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88a:	2201      	movs	r2, #1
 800f88c:	409a      	lsls	r2, r3
 800f88e:	4b17      	ldr	r3, [pc, #92]	; (800f8ec <xTaskPriorityInherit+0xe8>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4313      	orrs	r3, r2
 800f894:	4a15      	ldr	r2, [pc, #84]	; (800f8ec <xTaskPriorityInherit+0xe8>)
 800f896:	6013      	str	r3, [r2, #0]
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f89c:	4613      	mov	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4a10      	ldr	r2, [pc, #64]	; (800f8e8 <xTaskPriorityInherit+0xe4>)
 800f8a6:	441a      	add	r2, r3
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	f7fe fb10 	bl	800ded4 <vListInsertEnd>
 800f8b4:	e004      	b.n	800f8c0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f8b6:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <xTaskPriorityInherit+0xe0>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	e008      	b.n	800f8d8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <xTaskPriorityInherit+0xe0>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d201      	bcs.n	800f8d8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
	}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	240000b0 	.word	0x240000b0
 800f8e8:	240000b4 	.word	0x240000b4
 800f8ec:	240001b8 	.word	0x240001b8

0800f8f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d06e      	beq.n	800f9e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f906:	4b3a      	ldr	r3, [pc, #232]	; (800f9f0 <xTaskPriorityDisinherit+0x100>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	693a      	ldr	r2, [r7, #16]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d00a      	beq.n	800f926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	60fb      	str	r3, [r7, #12]
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d10a      	bne.n	800f944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	60bb      	str	r3, [r7, #8]
}
 800f940:	bf00      	nop
 800f942:	e7fe      	b.n	800f942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f948:	1e5a      	subs	r2, r3, #1
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f956:	429a      	cmp	r2, r3
 800f958:	d044      	beq.n	800f9e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d140      	bne.n	800f9e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	3304      	adds	r3, #4
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fb11 	bl	800df8e <uxListRemove>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d115      	bne.n	800f99e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f976:	491f      	ldr	r1, [pc, #124]	; (800f9f4 <xTaskPriorityDisinherit+0x104>)
 800f978:	4613      	mov	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	440b      	add	r3, r1
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d10a      	bne.n	800f99e <xTaskPriorityDisinherit+0xae>
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98c:	2201      	movs	r2, #1
 800f98e:	fa02 f303 	lsl.w	r3, r2, r3
 800f992:	43da      	mvns	r2, r3
 800f994:	4b18      	ldr	r3, [pc, #96]	; (800f9f8 <xTaskPriorityDisinherit+0x108>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4013      	ands	r3, r2
 800f99a:	4a17      	ldr	r2, [pc, #92]	; (800f9f8 <xTaskPriorityDisinherit+0x108>)
 800f99c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9aa:	f1c3 0207 	rsb	r2, r3, #7
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	409a      	lsls	r2, r3
 800f9ba:	4b0f      	ldr	r3, [pc, #60]	; (800f9f8 <xTaskPriorityDisinherit+0x108>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	4a0d      	ldr	r2, [pc, #52]	; (800f9f8 <xTaskPriorityDisinherit+0x108>)
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	4a08      	ldr	r2, [pc, #32]	; (800f9f4 <xTaskPriorityDisinherit+0x104>)
 800f9d2:	441a      	add	r2, r3
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7fe fa7a 	bl	800ded4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9e4:	697b      	ldr	r3, [r7, #20]
	}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3718      	adds	r7, #24
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	240000b0 	.word	0x240000b0
 800f9f4:	240000b4 	.word	0x240000b4
 800f9f8:	240001b8 	.word	0x240001b8

0800f9fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d077      	beq.n	800fb04 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	60fb      	str	r3, [r7, #12]
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa36:	683a      	ldr	r2, [r7, #0]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d902      	bls.n	800fa42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	61fb      	str	r3, [r7, #28]
 800fa40:	e002      	b.n	800fa48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4c:	69fa      	ldr	r2, [r7, #28]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d058      	beq.n	800fb04 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa56:	697a      	ldr	r2, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d153      	bne.n	800fb04 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fa5c:	4b2b      	ldr	r3, [pc, #172]	; (800fb0c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d10a      	bne.n	800fa7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	60bb      	str	r3, [r7, #8]
}
 800fa78:	bf00      	nop
 800fa7a:	e7fe      	b.n	800fa7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	db04      	blt.n	800fa9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	f1c3 0207 	rsb	r2, r3, #7
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	6959      	ldr	r1, [r3, #20]
 800fa9e:	693a      	ldr	r2, [r7, #16]
 800faa0:	4613      	mov	r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	4413      	add	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4a19      	ldr	r2, [pc, #100]	; (800fb10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800faaa:	4413      	add	r3, r2
 800faac:	4299      	cmp	r1, r3
 800faae:	d129      	bne.n	800fb04 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	3304      	adds	r3, #4
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fe fa6a 	bl	800df8e <uxListRemove>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d10a      	bne.n	800fad6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac4:	2201      	movs	r2, #1
 800fac6:	fa02 f303 	lsl.w	r3, r2, r3
 800faca:	43da      	mvns	r2, r3
 800facc:	4b11      	ldr	r3, [pc, #68]	; (800fb14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4013      	ands	r3, r2
 800fad2:	4a10      	ldr	r2, [pc, #64]	; (800fb14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fad4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fada:	2201      	movs	r2, #1
 800fadc:	409a      	lsls	r2, r3
 800fade:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4313      	orrs	r3, r2
 800fae4:	4a0b      	ldr	r2, [pc, #44]	; (800fb14 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faec:	4613      	mov	r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4a06      	ldr	r2, [pc, #24]	; (800fb10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800faf6:	441a      	add	r2, r3
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	3304      	adds	r3, #4
 800fafc:	4619      	mov	r1, r3
 800fafe:	4610      	mov	r0, r2
 800fb00:	f7fe f9e8 	bl	800ded4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb04:	bf00      	nop
 800fb06:	3720      	adds	r7, #32
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	240000b0 	.word	0x240000b0
 800fb10:	240000b4 	.word	0x240000b4
 800fb14:	240001b8 	.word	0x240001b8

0800fb18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fb18:	b480      	push	{r7}
 800fb1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fb1c:	4b07      	ldr	r3, [pc, #28]	; (800fb3c <pvTaskIncrementMutexHeldCount+0x24>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d004      	beq.n	800fb2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fb24:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <pvTaskIncrementMutexHeldCount+0x24>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb2a:	3201      	adds	r2, #1
 800fb2c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fb2e:	4b03      	ldr	r3, [pc, #12]	; (800fb3c <pvTaskIncrementMutexHeldCount+0x24>)
 800fb30:	681b      	ldr	r3, [r3, #0]
	}
 800fb32:	4618      	mov	r0, r3
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	240000b0 	.word	0x240000b0

0800fb40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb4a:	4b29      	ldr	r3, [pc, #164]	; (800fbf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb50:	4b28      	ldr	r3, [pc, #160]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3304      	adds	r3, #4
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fe fa19 	bl	800df8e <uxListRemove>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10b      	bne.n	800fb7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fb62:	4b24      	ldr	r3, [pc, #144]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb68:	2201      	movs	r2, #1
 800fb6a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb6e:	43da      	mvns	r2, r3
 800fb70:	4b21      	ldr	r3, [pc, #132]	; (800fbf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4013      	ands	r3, r2
 800fb76:	4a20      	ldr	r2, [pc, #128]	; (800fbf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d10a      	bne.n	800fb98 <prvAddCurrentTaskToDelayedList+0x58>
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d007      	beq.n	800fb98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb88:	4b1a      	ldr	r3, [pc, #104]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4619      	mov	r1, r3
 800fb90:	481a      	ldr	r0, [pc, #104]	; (800fbfc <prvAddCurrentTaskToDelayedList+0xbc>)
 800fb92:	f7fe f99f 	bl	800ded4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb96:	e026      	b.n	800fbe6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fba0:	4b14      	ldr	r3, [pc, #80]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d209      	bcs.n	800fbc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbb0:	4b13      	ldr	r3, [pc, #76]	; (800fc00 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	f7fe f9ad 	bl	800df1c <vListInsert>
}
 800fbc2:	e010      	b.n	800fbe6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbc4:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	4619      	mov	r1, r3
 800fbd0:	4610      	mov	r0, r2
 800fbd2:	f7fe f9a3 	bl	800df1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fbd6:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d202      	bcs.n	800fbe6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fbe0:	4a09      	ldr	r2, [pc, #36]	; (800fc08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	6013      	str	r3, [r2, #0]
}
 800fbe6:	bf00      	nop
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	240001b4 	.word	0x240001b4
 800fbf4:	240000b0 	.word	0x240000b0
 800fbf8:	240001b8 	.word	0x240001b8
 800fbfc:	2400019c 	.word	0x2400019c
 800fc00:	2400016c 	.word	0x2400016c
 800fc04:	24000168 	.word	0x24000168
 800fc08:	240001d0 	.word	0x240001d0

0800fc0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fc16:	f000 fb31 	bl	801027c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fc1a:	4b11      	ldr	r3, [pc, #68]	; (800fc60 <xTimerCreateTimerTask+0x54>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00b      	beq.n	800fc3a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800fc22:	4b10      	ldr	r3, [pc, #64]	; (800fc64 <xTimerCreateTimerTask+0x58>)
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	2305      	movs	r3, #5
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc30:	490d      	ldr	r1, [pc, #52]	; (800fc68 <xTimerCreateTimerTask+0x5c>)
 800fc32:	480e      	ldr	r0, [pc, #56]	; (800fc6c <xTimerCreateTimerTask+0x60>)
 800fc34:	f7ff f82c 	bl	800ec90 <xTaskCreate>
 800fc38:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10a      	bne.n	800fc56 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	603b      	str	r3, [r7, #0]
}
 800fc52:	bf00      	nop
 800fc54:	e7fe      	b.n	800fc54 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800fc56:	687b      	ldr	r3, [r7, #4]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	2400020c 	.word	0x2400020c
 800fc64:	24000210 	.word	0x24000210
 800fc68:	080121cc 	.word	0x080121cc
 800fc6c:	0800fe5d 	.word	0x0800fe5d

0800fc70 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af02      	add	r7, sp, #8
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800fc7e:	2028      	movs	r0, #40	; 0x28
 800fc80:	f000 fd82 	bl	8010788 <pvPortMalloc>
 800fc84:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00d      	beq.n	800fca8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f000 f805 	bl	800fcb2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fca8:	697b      	ldr	r3, [r7, #20]
	}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3718      	adds	r7, #24
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b086      	sub	sp, #24
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	60f8      	str	r0, [r7, #12]
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	607a      	str	r2, [r7, #4]
 800fcbe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10a      	bne.n	800fcdc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800fcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	617b      	str	r3, [r7, #20]
}
 800fcd8:	bf00      	nop
 800fcda:	e7fe      	b.n	800fcda <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d01e      	beq.n	800fd20 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800fce2:	f000 facb 	bl	801027c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	6a3a      	ldr	r2, [r7, #32]
 800fcfc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	3304      	adds	r3, #4
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe f8d9 	bl	800deba <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d008      	beq.n	800fd20 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800fd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fd14:	f043 0304 	orr.w	r3, r3, #4
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800fd20:	bf00      	nop
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b08a      	sub	sp, #40	; 0x28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fd36:	2300      	movs	r3, #0
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10a      	bne.n	800fd56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	623b      	str	r3, [r7, #32]
}
 800fd52:	bf00      	nop
 800fd54:	e7fe      	b.n	800fd54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fd56:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <xTimerGenericCommand+0x98>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d02a      	beq.n	800fdb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2b05      	cmp	r3, #5
 800fd6e:	dc18      	bgt.n	800fda2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd70:	f7ff fd2a 	bl	800f7c8 <xTaskGetSchedulerState>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d109      	bne.n	800fd8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd7a:	4b11      	ldr	r3, [pc, #68]	; (800fdc0 <xTimerGenericCommand+0x98>)
 800fd7c:	6818      	ldr	r0, [r3, #0]
 800fd7e:	f107 0114 	add.w	r1, r7, #20
 800fd82:	2300      	movs	r3, #0
 800fd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd86:	f7fe f9eb 	bl	800e160 <xQueueGenericSend>
 800fd8a:	6278      	str	r0, [r7, #36]	; 0x24
 800fd8c:	e012      	b.n	800fdb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd8e:	4b0c      	ldr	r3, [pc, #48]	; (800fdc0 <xTimerGenericCommand+0x98>)
 800fd90:	6818      	ldr	r0, [r3, #0]
 800fd92:	f107 0114 	add.w	r1, r7, #20
 800fd96:	2300      	movs	r3, #0
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f7fe f9e1 	bl	800e160 <xQueueGenericSend>
 800fd9e:	6278      	str	r0, [r7, #36]	; 0x24
 800fda0:	e008      	b.n	800fdb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fda2:	4b07      	ldr	r3, [pc, #28]	; (800fdc0 <xTimerGenericCommand+0x98>)
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	f107 0114 	add.w	r1, r7, #20
 800fdaa:	2300      	movs	r3, #0
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	f7fe fad5 	bl	800e35c <xQueueGenericSendFromISR>
 800fdb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3728      	adds	r7, #40	; 0x28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	2400020c 	.word	0x2400020c

0800fdc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b088      	sub	sp, #32
 800fdc8:	af02      	add	r7, sp, #8
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdce:	4b22      	ldr	r3, [pc, #136]	; (800fe58 <prvProcessExpiredTimer+0x94>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	3304      	adds	r3, #4
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe f8d6 	bl	800df8e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fde8:	f003 0304 	and.w	r3, r3, #4
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d022      	beq.n	800fe36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	699a      	ldr	r2, [r3, #24]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	18d1      	adds	r1, r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	683a      	ldr	r2, [r7, #0]
 800fdfc:	6978      	ldr	r0, [r7, #20]
 800fdfe:	f000 f8d1 	bl	800ffa4 <prvInsertTimerInActiveList>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01f      	beq.n	800fe48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	2100      	movs	r1, #0
 800fe12:	6978      	ldr	r0, [r7, #20]
 800fe14:	f7ff ff88 	bl	800fd28 <xTimerGenericCommand>
 800fe18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d113      	bne.n	800fe48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fe20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	60fb      	str	r3, [r7, #12]
}
 800fe32:	bf00      	nop
 800fe34:	e7fe      	b.n	800fe34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fe3c:	f023 0301 	bic.w	r3, r3, #1
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	6978      	ldr	r0, [r7, #20]
 800fe4e:	4798      	blx	r3
}
 800fe50:	bf00      	nop
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	24000204 	.word	0x24000204

0800fe5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe64:	f107 0308 	add.w	r3, r7, #8
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f000 f857 	bl	800ff1c <prvGetNextExpireTime>
 800fe6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	4619      	mov	r1, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 f803 	bl	800fe80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fe7a:	f000 f8d5 	bl	8010028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe7e:	e7f1      	b.n	800fe64 <prvTimerTask+0x8>

0800fe80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fe8a:	f7ff f8d7 	bl	800f03c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe8e:	f107 0308 	add.w	r3, r7, #8
 800fe92:	4618      	mov	r0, r3
 800fe94:	f000 f866 	bl	800ff64 <prvSampleTimeNow>
 800fe98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d130      	bne.n	800ff02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10a      	bne.n	800febc <prvProcessTimerOrBlockTask+0x3c>
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d806      	bhi.n	800febc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800feae:	f7ff f8d3 	bl	800f058 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800feb2:	68f9      	ldr	r1, [r7, #12]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7ff ff85 	bl	800fdc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800feba:	e024      	b.n	800ff06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d008      	beq.n	800fed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fec2:	4b13      	ldr	r3, [pc, #76]	; (800ff10 <prvProcessTimerOrBlockTask+0x90>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d101      	bne.n	800fed0 <prvProcessTimerOrBlockTask+0x50>
 800fecc:	2301      	movs	r3, #1
 800fece:	e000      	b.n	800fed2 <prvProcessTimerOrBlockTask+0x52>
 800fed0:	2300      	movs	r3, #0
 800fed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fed4:	4b0f      	ldr	r3, [pc, #60]	; (800ff14 <prvProcessTimerOrBlockTask+0x94>)
 800fed6:	6818      	ldr	r0, [r3, #0]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	683a      	ldr	r2, [r7, #0]
 800fee0:	4619      	mov	r1, r3
 800fee2:	f7fe fea1 	bl	800ec28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fee6:	f7ff f8b7 	bl	800f058 <xTaskResumeAll>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d10a      	bne.n	800ff06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fef0:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <prvProcessTimerOrBlockTask+0x98>)
 800fef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef6:	601a      	str	r2, [r3, #0]
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	f3bf 8f6f 	isb	sy
}
 800ff00:	e001      	b.n	800ff06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ff02:	f7ff f8a9 	bl	800f058 <xTaskResumeAll>
}
 800ff06:	bf00      	nop
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	24000208 	.word	0x24000208
 800ff14:	2400020c 	.word	0x2400020c
 800ff18:	e000ed04 	.word	0xe000ed04

0800ff1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff24:	4b0e      	ldr	r3, [pc, #56]	; (800ff60 <prvGetNextExpireTime+0x44>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <prvGetNextExpireTime+0x16>
 800ff2e:	2201      	movs	r2, #1
 800ff30:	e000      	b.n	800ff34 <prvGetNextExpireTime+0x18>
 800ff32:	2200      	movs	r2, #0
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d105      	bne.n	800ff4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff40:	4b07      	ldr	r3, [pc, #28]	; (800ff60 <prvGetNextExpireTime+0x44>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	60fb      	str	r3, [r7, #12]
 800ff4a:	e001      	b.n	800ff50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ff50:	68fb      	ldr	r3, [r7, #12]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	24000204 	.word	0x24000204

0800ff64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ff6c:	f7ff f910 	bl	800f190 <xTaskGetTickCount>
 800ff70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ff72:	4b0b      	ldr	r3, [pc, #44]	; (800ffa0 <prvSampleTimeNow+0x3c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d205      	bcs.n	800ff88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ff7c:	f000 f91a 	bl	80101b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2201      	movs	r2, #1
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	e002      	b.n	800ff8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ff8e:	4a04      	ldr	r2, [pc, #16]	; (800ffa0 <prvSampleTimeNow+0x3c>)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ff94:	68fb      	ldr	r3, [r7, #12]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	24000214 	.word	0x24000214

0800ffa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d812      	bhi.n	800fff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	1ad2      	subs	r2, r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	699b      	ldr	r3, [r3, #24]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d302      	bcc.n	800ffde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	617b      	str	r3, [r7, #20]
 800ffdc:	e01b      	b.n	8010016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ffde:	4b10      	ldr	r3, [pc, #64]	; (8010020 <prvInsertTimerInActiveList+0x7c>)
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	4610      	mov	r0, r2
 800ffea:	f7fd ff97 	bl	800df1c <vListInsert>
 800ffee:	e012      	b.n	8010016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d206      	bcs.n	8010006 <prvInsertTimerInActiveList+0x62>
 800fff8:	68ba      	ldr	r2, [r7, #8]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d302      	bcc.n	8010006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010000:	2301      	movs	r3, #1
 8010002:	617b      	str	r3, [r7, #20]
 8010004:	e007      	b.n	8010016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010006:	4b07      	ldr	r3, [pc, #28]	; (8010024 <prvInsertTimerInActiveList+0x80>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	3304      	adds	r3, #4
 801000e:	4619      	mov	r1, r3
 8010010:	4610      	mov	r0, r2
 8010012:	f7fd ff83 	bl	800df1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010016:	697b      	ldr	r3, [r7, #20]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	24000208 	.word	0x24000208
 8010024:	24000204 	.word	0x24000204

08010028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b08c      	sub	sp, #48	; 0x30
 801002c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801002e:	e0ae      	b.n	801018e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	2b00      	cmp	r3, #0
 8010034:	f2c0 80aa 	blt.w	801018c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	695b      	ldr	r3, [r3, #20]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d004      	beq.n	801004e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	3304      	adds	r3, #4
 8010048:	4618      	mov	r0, r3
 801004a:	f7fd ffa0 	bl	800df8e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801004e:	1d3b      	adds	r3, r7, #4
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff ff87 	bl	800ff64 <prvSampleTimeNow>
 8010056:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2b09      	cmp	r3, #9
 801005c:	f200 8097 	bhi.w	801018e <prvProcessReceivedCommands+0x166>
 8010060:	a201      	add	r2, pc, #4	; (adr r2, 8010068 <prvProcessReceivedCommands+0x40>)
 8010062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010066:	bf00      	nop
 8010068:	08010091 	.word	0x08010091
 801006c:	08010091 	.word	0x08010091
 8010070:	08010091 	.word	0x08010091
 8010074:	08010105 	.word	0x08010105
 8010078:	08010119 	.word	0x08010119
 801007c:	08010163 	.word	0x08010163
 8010080:	08010091 	.word	0x08010091
 8010084:	08010091 	.word	0x08010091
 8010088:	08010105 	.word	0x08010105
 801008c:	08010119 	.word	0x08010119
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010096:	f043 0301 	orr.w	r3, r3, #1
 801009a:	b2da      	uxtb	r2, r3
 801009c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	699b      	ldr	r3, [r3, #24]
 80100a8:	18d1      	adds	r1, r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6a3a      	ldr	r2, [r7, #32]
 80100ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100b0:	f7ff ff78 	bl	800ffa4 <prvInsertTimerInActiveList>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d069      	beq.n	801018e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100bc:	6a1b      	ldr	r3, [r3, #32]
 80100be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80100c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80100c8:	f003 0304 	and.w	r3, r3, #4
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d05e      	beq.n	801018e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	441a      	add	r2, r3
 80100d8:	2300      	movs	r3, #0
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	2300      	movs	r3, #0
 80100de:	2100      	movs	r1, #0
 80100e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100e2:	f7ff fe21 	bl	800fd28 <xTimerGenericCommand>
 80100e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d14f      	bne.n	801018e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	61bb      	str	r3, [r7, #24]
}
 8010100:	bf00      	nop
 8010102:	e7fe      	b.n	8010102 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801010a:	f023 0301 	bic.w	r3, r3, #1
 801010e:	b2da      	uxtb	r2, r3
 8010110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8010116:	e03a      	b.n	801018e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801011e:	f043 0301 	orr.w	r3, r3, #1
 8010122:	b2da      	uxtb	r2, r3
 8010124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	617b      	str	r3, [r7, #20]
}
 801014a:	bf00      	nop
 801014c:	e7fe      	b.n	801014c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801014e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010150:	699a      	ldr	r2, [r3, #24]
 8010152:	6a3b      	ldr	r3, [r7, #32]
 8010154:	18d1      	adds	r1, r2, r3
 8010156:	6a3b      	ldr	r3, [r7, #32]
 8010158:	6a3a      	ldr	r2, [r7, #32]
 801015a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801015c:	f7ff ff22 	bl	800ffa4 <prvInsertTimerInActiveList>
					break;
 8010160:	e015      	b.n	801018e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010168:	f003 0302 	and.w	r3, r3, #2
 801016c:	2b00      	cmp	r3, #0
 801016e:	d103      	bne.n	8010178 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8010170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010172:	f000 fbd5 	bl	8010920 <vPortFree>
 8010176:	e00a      	b.n	801018e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801017e:	f023 0301 	bic.w	r3, r3, #1
 8010182:	b2da      	uxtb	r2, r3
 8010184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801018a:	e000      	b.n	801018e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801018c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801018e:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <prvProcessReceivedCommands+0x188>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f107 0108 	add.w	r1, r7, #8
 8010196:	2200      	movs	r2, #0
 8010198:	4618      	mov	r0, r3
 801019a:	f7fe fa07 	bl	800e5ac <xQueueReceive>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f47f af45 	bne.w	8010030 <prvProcessReceivedCommands+0x8>
	}
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	3728      	adds	r7, #40	; 0x28
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	2400020c 	.word	0x2400020c

080101b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101ba:	e048      	b.n	801024e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101bc:	4b2d      	ldr	r3, [pc, #180]	; (8010274 <prvSwitchTimerLists+0xc0>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c6:	4b2b      	ldr	r3, [pc, #172]	; (8010274 <prvSwitchTimerLists+0xc0>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fd feda 	bl	800df8e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6a1b      	ldr	r3, [r3, #32]
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80101e8:	f003 0304 	and.w	r3, r3, #4
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d02e      	beq.n	801024e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	4413      	add	r3, r2
 80101f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d90e      	bls.n	8010220 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801020e:	4b19      	ldr	r3, [pc, #100]	; (8010274 <prvSwitchTimerLists+0xc0>)
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3304      	adds	r3, #4
 8010216:	4619      	mov	r1, r3
 8010218:	4610      	mov	r0, r2
 801021a:	f7fd fe7f 	bl	800df1c <vListInsert>
 801021e:	e016      	b.n	801024e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010220:	2300      	movs	r3, #0
 8010222:	9300      	str	r3, [sp, #0]
 8010224:	2300      	movs	r3, #0
 8010226:	693a      	ldr	r2, [r7, #16]
 8010228:	2100      	movs	r1, #0
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f7ff fd7c 	bl	800fd28 <xTimerGenericCommand>
 8010230:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10a      	bne.n	801024e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	603b      	str	r3, [r7, #0]
}
 801024a:	bf00      	nop
 801024c:	e7fe      	b.n	801024c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801024e:	4b09      	ldr	r3, [pc, #36]	; (8010274 <prvSwitchTimerLists+0xc0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1b1      	bne.n	80101bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010258:	4b06      	ldr	r3, [pc, #24]	; (8010274 <prvSwitchTimerLists+0xc0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801025e:	4b06      	ldr	r3, [pc, #24]	; (8010278 <prvSwitchTimerLists+0xc4>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4a04      	ldr	r2, [pc, #16]	; (8010274 <prvSwitchTimerLists+0xc0>)
 8010264:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010266:	4a04      	ldr	r2, [pc, #16]	; (8010278 <prvSwitchTimerLists+0xc4>)
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	6013      	str	r3, [r2, #0]
}
 801026c:	bf00      	nop
 801026e:	3718      	adds	r7, #24
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	24000204 	.word	0x24000204
 8010278:	24000208 	.word	0x24000208

0801027c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010280:	f000 f960 	bl	8010544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010284:	4b12      	ldr	r3, [pc, #72]	; (80102d0 <prvCheckForValidListAndQueue+0x54>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d11d      	bne.n	80102c8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801028c:	4811      	ldr	r0, [pc, #68]	; (80102d4 <prvCheckForValidListAndQueue+0x58>)
 801028e:	f7fd fdf4 	bl	800de7a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010292:	4811      	ldr	r0, [pc, #68]	; (80102d8 <prvCheckForValidListAndQueue+0x5c>)
 8010294:	f7fd fdf1 	bl	800de7a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010298:	4b10      	ldr	r3, [pc, #64]	; (80102dc <prvCheckForValidListAndQueue+0x60>)
 801029a:	4a0e      	ldr	r2, [pc, #56]	; (80102d4 <prvCheckForValidListAndQueue+0x58>)
 801029c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801029e:	4b10      	ldr	r3, [pc, #64]	; (80102e0 <prvCheckForValidListAndQueue+0x64>)
 80102a0:	4a0d      	ldr	r2, [pc, #52]	; (80102d8 <prvCheckForValidListAndQueue+0x5c>)
 80102a2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80102a4:	2200      	movs	r2, #0
 80102a6:	210c      	movs	r1, #12
 80102a8:	2010      	movs	r0, #16
 80102aa:	f7fd ff03 	bl	800e0b4 <xQueueGenericCreate>
 80102ae:	4603      	mov	r3, r0
 80102b0:	4a07      	ldr	r2, [pc, #28]	; (80102d0 <prvCheckForValidListAndQueue+0x54>)
 80102b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80102b4:	4b06      	ldr	r3, [pc, #24]	; (80102d0 <prvCheckForValidListAndQueue+0x54>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d005      	beq.n	80102c8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80102bc:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <prvCheckForValidListAndQueue+0x54>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4908      	ldr	r1, [pc, #32]	; (80102e4 <prvCheckForValidListAndQueue+0x68>)
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe fc86 	bl	800ebd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102c8:	f000 f96c 	bl	80105a4 <vPortExitCritical>
}
 80102cc:	bf00      	nop
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	2400020c 	.word	0x2400020c
 80102d4:	240001dc 	.word	0x240001dc
 80102d8:	240001f0 	.word	0x240001f0
 80102dc:	24000204 	.word	0x24000204
 80102e0:	24000208 	.word	0x24000208
 80102e4:	080121d4 	.word	0x080121d4

080102e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3b04      	subs	r3, #4
 80102f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	3b04      	subs	r3, #4
 8010306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	f023 0201 	bic.w	r2, r3, #1
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	3b04      	subs	r3, #4
 8010316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010318:	4a0c      	ldr	r2, [pc, #48]	; (801034c <pxPortInitialiseStack+0x64>)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3b14      	subs	r3, #20
 8010322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3b04      	subs	r3, #4
 801032e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f06f 0202 	mvn.w	r2, #2
 8010336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3b20      	subs	r3, #32
 801033c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801033e:	68fb      	ldr	r3, [r7, #12]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	08010351 	.word	0x08010351

08010350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010356:	2300      	movs	r3, #0
 8010358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801035a:	4b12      	ldr	r3, [pc, #72]	; (80103a4 <prvTaskExitError+0x54>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d00a      	beq.n	801037a <prvTaskExitError+0x2a>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	60fb      	str	r3, [r7, #12]
}
 8010376:	bf00      	nop
 8010378:	e7fe      	b.n	8010378 <prvTaskExitError+0x28>
	__asm volatile
 801037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037e:	f383 8811 	msr	BASEPRI, r3
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	60bb      	str	r3, [r7, #8]
}
 801038c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801038e:	bf00      	nop
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d0fc      	beq.n	8010390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010396:	bf00      	nop
 8010398:	bf00      	nop
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	24000014 	.word	0x24000014
	...

080103b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103b0:	4b07      	ldr	r3, [pc, #28]	; (80103d0 <pxCurrentTCBConst2>)
 80103b2:	6819      	ldr	r1, [r3, #0]
 80103b4:	6808      	ldr	r0, [r1, #0]
 80103b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ba:	f380 8809 	msr	PSP, r0
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f04f 0000 	mov.w	r0, #0
 80103c6:	f380 8811 	msr	BASEPRI, r0
 80103ca:	4770      	bx	lr
 80103cc:	f3af 8000 	nop.w

080103d0 <pxCurrentTCBConst2>:
 80103d0:	240000b0 	.word	0x240000b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80103d4:	bf00      	nop
 80103d6:	bf00      	nop

080103d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80103d8:	4808      	ldr	r0, [pc, #32]	; (80103fc <prvPortStartFirstTask+0x24>)
 80103da:	6800      	ldr	r0, [r0, #0]
 80103dc:	6800      	ldr	r0, [r0, #0]
 80103de:	f380 8808 	msr	MSP, r0
 80103e2:	f04f 0000 	mov.w	r0, #0
 80103e6:	f380 8814 	msr	CONTROL, r0
 80103ea:	b662      	cpsie	i
 80103ec:	b661      	cpsie	f
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	df00      	svc	0
 80103f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103fa:	bf00      	nop
 80103fc:	e000ed08 	.word	0xe000ed08

08010400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010406:	4b46      	ldr	r3, [pc, #280]	; (8010520 <xPortStartScheduler+0x120>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a46      	ldr	r2, [pc, #280]	; (8010524 <xPortStartScheduler+0x124>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d10a      	bne.n	8010426 <xPortStartScheduler+0x26>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	613b      	str	r3, [r7, #16]
}
 8010422:	bf00      	nop
 8010424:	e7fe      	b.n	8010424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010426:	4b3e      	ldr	r3, [pc, #248]	; (8010520 <xPortStartScheduler+0x120>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a3f      	ldr	r2, [pc, #252]	; (8010528 <xPortStartScheduler+0x128>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d10a      	bne.n	8010446 <xPortStartScheduler+0x46>
	__asm volatile
 8010430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	60fb      	str	r3, [r7, #12]
}
 8010442:	bf00      	nop
 8010444:	e7fe      	b.n	8010444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010446:	4b39      	ldr	r3, [pc, #228]	; (801052c <xPortStartScheduler+0x12c>)
 8010448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	b2db      	uxtb	r3, r3
 8010450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	22ff      	movs	r2, #255	; 0xff
 8010456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b2db      	uxtb	r3, r3
 801045e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010460:	78fb      	ldrb	r3, [r7, #3]
 8010462:	b2db      	uxtb	r3, r3
 8010464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010468:	b2da      	uxtb	r2, r3
 801046a:	4b31      	ldr	r3, [pc, #196]	; (8010530 <xPortStartScheduler+0x130>)
 801046c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801046e:	4b31      	ldr	r3, [pc, #196]	; (8010534 <xPortStartScheduler+0x134>)
 8010470:	2207      	movs	r2, #7
 8010472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010474:	e009      	b.n	801048a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010476:	4b2f      	ldr	r3, [pc, #188]	; (8010534 <xPortStartScheduler+0x134>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	3b01      	subs	r3, #1
 801047c:	4a2d      	ldr	r2, [pc, #180]	; (8010534 <xPortStartScheduler+0x134>)
 801047e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	b2db      	uxtb	r3, r3
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	b2db      	uxtb	r3, r3
 8010488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010492:	2b80      	cmp	r3, #128	; 0x80
 8010494:	d0ef      	beq.n	8010476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010496:	4b27      	ldr	r3, [pc, #156]	; (8010534 <xPortStartScheduler+0x134>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f1c3 0307 	rsb	r3, r3, #7
 801049e:	2b04      	cmp	r3, #4
 80104a0:	d00a      	beq.n	80104b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80104a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	60bb      	str	r3, [r7, #8]
}
 80104b4:	bf00      	nop
 80104b6:	e7fe      	b.n	80104b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104b8:	4b1e      	ldr	r3, [pc, #120]	; (8010534 <xPortStartScheduler+0x134>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	4a1d      	ldr	r2, [pc, #116]	; (8010534 <xPortStartScheduler+0x134>)
 80104c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104c2:	4b1c      	ldr	r3, [pc, #112]	; (8010534 <xPortStartScheduler+0x134>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104ca:	4a1a      	ldr	r2, [pc, #104]	; (8010534 <xPortStartScheduler+0x134>)
 80104cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104d6:	4b18      	ldr	r3, [pc, #96]	; (8010538 <xPortStartScheduler+0x138>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a17      	ldr	r2, [pc, #92]	; (8010538 <xPortStartScheduler+0x138>)
 80104dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104e2:	4b15      	ldr	r3, [pc, #84]	; (8010538 <xPortStartScheduler+0x138>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a14      	ldr	r2, [pc, #80]	; (8010538 <xPortStartScheduler+0x138>)
 80104e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104ee:	f000 f8dd 	bl	80106ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104f2:	4b12      	ldr	r3, [pc, #72]	; (801053c <xPortStartScheduler+0x13c>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104f8:	f000 f8fc 	bl	80106f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80104fc:	4b10      	ldr	r3, [pc, #64]	; (8010540 <xPortStartScheduler+0x140>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a0f      	ldr	r2, [pc, #60]	; (8010540 <xPortStartScheduler+0x140>)
 8010502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010508:	f7ff ff66 	bl	80103d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801050c:	f7fe ff08 	bl	800f320 <vTaskSwitchContext>
	prvTaskExitError();
 8010510:	f7ff ff1e 	bl	8010350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	e000ed00 	.word	0xe000ed00
 8010524:	410fc271 	.word	0x410fc271
 8010528:	410fc270 	.word	0x410fc270
 801052c:	e000e400 	.word	0xe000e400
 8010530:	24000218 	.word	0x24000218
 8010534:	2400021c 	.word	0x2400021c
 8010538:	e000ed20 	.word	0xe000ed20
 801053c:	24000014 	.word	0x24000014
 8010540:	e000ef34 	.word	0xe000ef34

08010544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
	__asm volatile
 801054a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	607b      	str	r3, [r7, #4]
}
 801055c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801055e:	4b0f      	ldr	r3, [pc, #60]	; (801059c <vPortEnterCritical+0x58>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3301      	adds	r3, #1
 8010564:	4a0d      	ldr	r2, [pc, #52]	; (801059c <vPortEnterCritical+0x58>)
 8010566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010568:	4b0c      	ldr	r3, [pc, #48]	; (801059c <vPortEnterCritical+0x58>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d10f      	bne.n	8010590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010570:	4b0b      	ldr	r3, [pc, #44]	; (80105a0 <vPortEnterCritical+0x5c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00a      	beq.n	8010590 <vPortEnterCritical+0x4c>
	__asm volatile
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	603b      	str	r3, [r7, #0]
}
 801058c:	bf00      	nop
 801058e:	e7fe      	b.n	801058e <vPortEnterCritical+0x4a>
	}
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr
 801059c:	24000014 	.word	0x24000014
 80105a0:	e000ed04 	.word	0xe000ed04

080105a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80105aa:	4b12      	ldr	r3, [pc, #72]	; (80105f4 <vPortExitCritical+0x50>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10a      	bne.n	80105c8 <vPortExitCritical+0x24>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	607b      	str	r3, [r7, #4]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80105c8:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <vPortExitCritical+0x50>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	4a09      	ldr	r2, [pc, #36]	; (80105f4 <vPortExitCritical+0x50>)
 80105d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80105d2:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <vPortExitCritical+0x50>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d105      	bne.n	80105e6 <vPortExitCritical+0x42>
 80105da:	2300      	movs	r3, #0
 80105dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	f383 8811 	msr	BASEPRI, r3
}
 80105e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105e6:	bf00      	nop
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	24000014 	.word	0x24000014
	...

08010600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010600:	f3ef 8009 	mrs	r0, PSP
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	4b15      	ldr	r3, [pc, #84]	; (8010660 <pxCurrentTCBConst>)
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	f01e 0f10 	tst.w	lr, #16
 8010610:	bf08      	it	eq
 8010612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061a:	6010      	str	r0, [r2, #0]
 801061c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010624:	f380 8811 	msr	BASEPRI, r0
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f7fe fe76 	bl	800f320 <vTaskSwitchContext>
 8010634:	f04f 0000 	mov.w	r0, #0
 8010638:	f380 8811 	msr	BASEPRI, r0
 801063c:	bc09      	pop	{r0, r3}
 801063e:	6819      	ldr	r1, [r3, #0]
 8010640:	6808      	ldr	r0, [r1, #0]
 8010642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010646:	f01e 0f10 	tst.w	lr, #16
 801064a:	bf08      	it	eq
 801064c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010650:	f380 8809 	msr	PSP, r0
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	f3af 8000 	nop.w

08010660 <pxCurrentTCBConst>:
 8010660:	240000b0 	.word	0x240000b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010664:	bf00      	nop
 8010666:	bf00      	nop

08010668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
	__asm volatile
 801066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010672:	f383 8811 	msr	BASEPRI, r3
 8010676:	f3bf 8f6f 	isb	sy
 801067a:	f3bf 8f4f 	dsb	sy
 801067e:	607b      	str	r3, [r7, #4]
}
 8010680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010682:	f7fe fd95 	bl	800f1b0 <xTaskIncrementTick>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801068c:	4b06      	ldr	r3, [pc, #24]	; (80106a8 <SysTick_Handler+0x40>)
 801068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	2300      	movs	r3, #0
 8010696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	f383 8811 	msr	BASEPRI, r3
}
 801069e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	e000ed04 	.word	0xe000ed04

080106ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80106ac:	b480      	push	{r7}
 80106ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80106b0:	4b0b      	ldr	r3, [pc, #44]	; (80106e0 <vPortSetupTimerInterrupt+0x34>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80106b6:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <vPortSetupTimerInterrupt+0x38>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80106bc:	4b0a      	ldr	r3, [pc, #40]	; (80106e8 <vPortSetupTimerInterrupt+0x3c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a0a      	ldr	r2, [pc, #40]	; (80106ec <vPortSetupTimerInterrupt+0x40>)
 80106c2:	fba2 2303 	umull	r2, r3, r2, r3
 80106c6:	099b      	lsrs	r3, r3, #6
 80106c8:	4a09      	ldr	r2, [pc, #36]	; (80106f0 <vPortSetupTimerInterrupt+0x44>)
 80106ca:	3b01      	subs	r3, #1
 80106cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80106ce:	4b04      	ldr	r3, [pc, #16]	; (80106e0 <vPortSetupTimerInterrupt+0x34>)
 80106d0:	2207      	movs	r2, #7
 80106d2:	601a      	str	r2, [r3, #0]
}
 80106d4:	bf00      	nop
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop
 80106e0:	e000e010 	.word	0xe000e010
 80106e4:	e000e018 	.word	0xe000e018
 80106e8:	24000004 	.word	0x24000004
 80106ec:	10624dd3 	.word	0x10624dd3
 80106f0:	e000e014 	.word	0xe000e014

080106f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010704 <vPortEnableVFP+0x10>
 80106f8:	6801      	ldr	r1, [r0, #0]
 80106fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80106fe:	6001      	str	r1, [r0, #0]
 8010700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010702:	bf00      	nop
 8010704:	e000ed88 	.word	0xe000ed88

08010708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010708:	b480      	push	{r7}
 801070a:	b085      	sub	sp, #20
 801070c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801070e:	f3ef 8305 	mrs	r3, IPSR
 8010712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2b0f      	cmp	r3, #15
 8010718:	d914      	bls.n	8010744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801071a:	4a17      	ldr	r2, [pc, #92]	; (8010778 <vPortValidateInterruptPriority+0x70>)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	4413      	add	r3, r2
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010724:	4b15      	ldr	r3, [pc, #84]	; (801077c <vPortValidateInterruptPriority+0x74>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	7afa      	ldrb	r2, [r7, #11]
 801072a:	429a      	cmp	r2, r3
 801072c:	d20a      	bcs.n	8010744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	607b      	str	r3, [r7, #4]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010744:	4b0e      	ldr	r3, [pc, #56]	; (8010780 <vPortValidateInterruptPriority+0x78>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801074c:	4b0d      	ldr	r3, [pc, #52]	; (8010784 <vPortValidateInterruptPriority+0x7c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	429a      	cmp	r2, r3
 8010752:	d90a      	bls.n	801076a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010758:	f383 8811 	msr	BASEPRI, r3
 801075c:	f3bf 8f6f 	isb	sy
 8010760:	f3bf 8f4f 	dsb	sy
 8010764:	603b      	str	r3, [r7, #0]
}
 8010766:	bf00      	nop
 8010768:	e7fe      	b.n	8010768 <vPortValidateInterruptPriority+0x60>
	}
 801076a:	bf00      	nop
 801076c:	3714      	adds	r7, #20
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	e000e3f0 	.word	0xe000e3f0
 801077c:	24000218 	.word	0x24000218
 8010780:	e000ed0c 	.word	0xe000ed0c
 8010784:	2400021c 	.word	0x2400021c

08010788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b08a      	sub	sp, #40	; 0x28
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010790:	2300      	movs	r3, #0
 8010792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010794:	f7fe fc52 	bl	800f03c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010798:	4b5b      	ldr	r3, [pc, #364]	; (8010908 <pvPortMalloc+0x180>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80107a0:	f000 f920 	bl	80109e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80107a4:	4b59      	ldr	r3, [pc, #356]	; (801090c <pvPortMalloc+0x184>)
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4013      	ands	r3, r2
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f040 8093 	bne.w	80108d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d01d      	beq.n	80107f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80107b8:	2208      	movs	r2, #8
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4413      	add	r3, r2
 80107be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f003 0307 	and.w	r3, r3, #7
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d014      	beq.n	80107f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f023 0307 	bic.w	r3, r3, #7
 80107d0:	3308      	adds	r3, #8
 80107d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f003 0307 	and.w	r3, r3, #7
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00a      	beq.n	80107f4 <pvPortMalloc+0x6c>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	617b      	str	r3, [r7, #20]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d06e      	beq.n	80108d8 <pvPortMalloc+0x150>
 80107fa:	4b45      	ldr	r3, [pc, #276]	; (8010910 <pvPortMalloc+0x188>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	429a      	cmp	r2, r3
 8010802:	d869      	bhi.n	80108d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010804:	4b43      	ldr	r3, [pc, #268]	; (8010914 <pvPortMalloc+0x18c>)
 8010806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010808:	4b42      	ldr	r3, [pc, #264]	; (8010914 <pvPortMalloc+0x18c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801080e:	e004      	b.n	801081a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	429a      	cmp	r2, r3
 8010822:	d903      	bls.n	801082c <pvPortMalloc+0xa4>
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1f1      	bne.n	8010810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801082c:	4b36      	ldr	r3, [pc, #216]	; (8010908 <pvPortMalloc+0x180>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010832:	429a      	cmp	r2, r3
 8010834:	d050      	beq.n	80108d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2208      	movs	r2, #8
 801083c:	4413      	add	r3, r2
 801083e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084a:	685a      	ldr	r2, [r3, #4]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	1ad2      	subs	r2, r2, r3
 8010850:	2308      	movs	r3, #8
 8010852:	005b      	lsls	r3, r3, #1
 8010854:	429a      	cmp	r2, r3
 8010856:	d91f      	bls.n	8010898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4413      	add	r3, r2
 801085e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	f003 0307 	and.w	r3, r3, #7
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00a      	beq.n	8010880 <pvPortMalloc+0xf8>
	__asm volatile
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	f383 8811 	msr	BASEPRI, r3
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	f3bf 8f4f 	dsb	sy
 801087a:	613b      	str	r3, [r7, #16]
}
 801087c:	bf00      	nop
 801087e:	e7fe      	b.n	801087e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	685a      	ldr	r2, [r3, #4]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	1ad2      	subs	r2, r2, r3
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010892:	69b8      	ldr	r0, [r7, #24]
 8010894:	f000 f90a 	bl	8010aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010898:	4b1d      	ldr	r3, [pc, #116]	; (8010910 <pvPortMalloc+0x188>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	4a1b      	ldr	r2, [pc, #108]	; (8010910 <pvPortMalloc+0x188>)
 80108a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108a6:	4b1a      	ldr	r3, [pc, #104]	; (8010910 <pvPortMalloc+0x188>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	4b1b      	ldr	r3, [pc, #108]	; (8010918 <pvPortMalloc+0x190>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d203      	bcs.n	80108ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108b2:	4b17      	ldr	r3, [pc, #92]	; (8010910 <pvPortMalloc+0x188>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a18      	ldr	r2, [pc, #96]	; (8010918 <pvPortMalloc+0x190>)
 80108b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	4b13      	ldr	r3, [pc, #76]	; (801090c <pvPortMalloc+0x184>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	431a      	orrs	r2, r3
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	2200      	movs	r2, #0
 80108cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80108ce:	4b13      	ldr	r3, [pc, #76]	; (801091c <pvPortMalloc+0x194>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3301      	adds	r3, #1
 80108d4:	4a11      	ldr	r2, [pc, #68]	; (801091c <pvPortMalloc+0x194>)
 80108d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80108d8:	f7fe fbbe 	bl	800f058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f003 0307 	and.w	r3, r3, #7
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00a      	beq.n	80108fc <pvPortMalloc+0x174>
	__asm volatile
 80108e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	60fb      	str	r3, [r7, #12]
}
 80108f8:	bf00      	nop
 80108fa:	e7fe      	b.n	80108fa <pvPortMalloc+0x172>
	return pvReturn;
 80108fc:	69fb      	ldr	r3, [r7, #28]
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3728      	adds	r7, #40	; 0x28
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	24027328 	.word	0x24027328
 801090c:	2402733c 	.word	0x2402733c
 8010910:	2402732c 	.word	0x2402732c
 8010914:	24027320 	.word	0x24027320
 8010918:	24027330 	.word	0x24027330
 801091c:	24027334 	.word	0x24027334

08010920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b086      	sub	sp, #24
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d04d      	beq.n	80109ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010932:	2308      	movs	r3, #8
 8010934:	425b      	negs	r3, r3
 8010936:	697a      	ldr	r2, [r7, #20]
 8010938:	4413      	add	r3, r2
 801093a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	685a      	ldr	r2, [r3, #4]
 8010944:	4b24      	ldr	r3, [pc, #144]	; (80109d8 <vPortFree+0xb8>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4013      	ands	r3, r2
 801094a:	2b00      	cmp	r3, #0
 801094c:	d10a      	bne.n	8010964 <vPortFree+0x44>
	__asm volatile
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	f383 8811 	msr	BASEPRI, r3
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	f3bf 8f4f 	dsb	sy
 801095e:	60fb      	str	r3, [r7, #12]
}
 8010960:	bf00      	nop
 8010962:	e7fe      	b.n	8010962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d00a      	beq.n	8010982 <vPortFree+0x62>
	__asm volatile
 801096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010970:	f383 8811 	msr	BASEPRI, r3
 8010974:	f3bf 8f6f 	isb	sy
 8010978:	f3bf 8f4f 	dsb	sy
 801097c:	60bb      	str	r3, [r7, #8]
}
 801097e:	bf00      	nop
 8010980:	e7fe      	b.n	8010980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	685a      	ldr	r2, [r3, #4]
 8010986:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <vPortFree+0xb8>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4013      	ands	r3, r2
 801098c:	2b00      	cmp	r3, #0
 801098e:	d01e      	beq.n	80109ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d11a      	bne.n	80109ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	685a      	ldr	r2, [r3, #4]
 801099c:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <vPortFree+0xb8>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	43db      	mvns	r3, r3
 80109a2:	401a      	ands	r2, r3
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80109a8:	f7fe fb48 	bl	800f03c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	685a      	ldr	r2, [r3, #4]
 80109b0:	4b0a      	ldr	r3, [pc, #40]	; (80109dc <vPortFree+0xbc>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4413      	add	r3, r2
 80109b6:	4a09      	ldr	r2, [pc, #36]	; (80109dc <vPortFree+0xbc>)
 80109b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109ba:	6938      	ldr	r0, [r7, #16]
 80109bc:	f000 f876 	bl	8010aac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80109c0:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <vPortFree+0xc0>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	4a06      	ldr	r2, [pc, #24]	; (80109e0 <vPortFree+0xc0>)
 80109c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80109ca:	f7fe fb45 	bl	800f058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80109ce:	bf00      	nop
 80109d0:	3718      	adds	r7, #24
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2402733c 	.word	0x2402733c
 80109dc:	2402732c 	.word	0x2402732c
 80109e0:	24027338 	.word	0x24027338

080109e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109ea:	4b29      	ldr	r3, [pc, #164]	; (8010a90 <prvHeapInit+0xac>)
 80109ec:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109ee:	4b29      	ldr	r3, [pc, #164]	; (8010a94 <prvHeapInit+0xb0>)
 80109f0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f003 0307 	and.w	r3, r3, #7
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00c      	beq.n	8010a16 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	3307      	adds	r3, #7
 8010a00:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f023 0307 	bic.w	r3, r3, #7
 8010a08:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	4a20      	ldr	r2, [pc, #128]	; (8010a94 <prvHeapInit+0xb0>)
 8010a12:	4413      	add	r3, r2
 8010a14:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a1a:	4a1f      	ldr	r2, [pc, #124]	; (8010a98 <prvHeapInit+0xb4>)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a20:	4b1d      	ldr	r3, [pc, #116]	; (8010a98 <prvHeapInit+0xb4>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a2e:	2208      	movs	r2, #8
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	1a9b      	subs	r3, r3, r2
 8010a34:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f023 0307 	bic.w	r3, r3, #7
 8010a3c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	4a16      	ldr	r2, [pc, #88]	; (8010a9c <prvHeapInit+0xb8>)
 8010a42:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a44:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <prvHeapInit+0xb8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a4c:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <prvHeapInit+0xb8>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2200      	movs	r2, #0
 8010a52:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	1ad2      	subs	r2, r2, r3
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a62:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <prvHeapInit+0xb8>)
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	4a0c      	ldr	r2, [pc, #48]	; (8010aa0 <prvHeapInit+0xbc>)
 8010a70:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	4a0b      	ldr	r2, [pc, #44]	; (8010aa4 <prvHeapInit+0xc0>)
 8010a78:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a7a:	4b0b      	ldr	r3, [pc, #44]	; (8010aa8 <prvHeapInit+0xc4>)
 8010a7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a80:	601a      	str	r2, [r3, #0]
}
 8010a82:	bf00      	nop
 8010a84:	3714      	adds	r7, #20
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	00027100 	.word	0x00027100
 8010a94:	24000220 	.word	0x24000220
 8010a98:	24027320 	.word	0x24027320
 8010a9c:	24027328 	.word	0x24027328
 8010aa0:	24027330 	.word	0x24027330
 8010aa4:	2402732c 	.word	0x2402732c
 8010aa8:	2402733c 	.word	0x2402733c

08010aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ab4:	4b28      	ldr	r3, [pc, #160]	; (8010b58 <prvInsertBlockIntoFreeList+0xac>)
 8010ab6:	60fb      	str	r3, [r7, #12]
 8010ab8:	e002      	b.n	8010ac0 <prvInsertBlockIntoFreeList+0x14>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	60fb      	str	r3, [r7, #12]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d8f7      	bhi.n	8010aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	68ba      	ldr	r2, [r7, #8]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d108      	bne.n	8010aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	441a      	add	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	441a      	add	r2, r3
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d118      	bne.n	8010b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <prvInsertBlockIntoFreeList+0xb0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d00d      	beq.n	8010b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	441a      	add	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	601a      	str	r2, [r3, #0]
 8010b28:	e008      	b.n	8010b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b2a:	4b0c      	ldr	r3, [pc, #48]	; (8010b5c <prvInsertBlockIntoFreeList+0xb0>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	e003      	b.n	8010b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d002      	beq.n	8010b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	24027320 	.word	0x24027320
 8010b5c:	24027328 	.word	0x24027328

08010b60 <B_tcpStart>:
  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
B_tcpHandle_t* B_tcpStart(uint8_t senderID, B_uartHandle_t** transmitBuarts,
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b088      	sub	sp, #32
 8010b64:	af02      	add	r7, sp, #8
 8010b66:	60b9      	str	r1, [r7, #8]
 8010b68:	607a      	str	r2, [r7, #4]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	73fb      	strb	r3, [r7, #15]
 8010b70:	4613      	mov	r3, r2
 8010b72:	73bb      	strb	r3, [r7, #14]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 8010b74:	2020      	movs	r0, #32
 8010b76:	f7ff fe07 	bl	8010788 <pvPortMalloc>
 8010b7a:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	7bba      	ldrb	r2, [r7, #14]
 8010b80:	721a      	strb	r2, [r3, #8]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7ff fdfe 	bl	8010788 <pvPortMalloc>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < numTransmitBuarts; i++){
 8010b92:	2300      	movs	r3, #0
 8010b94:	617b      	str	r3, [r7, #20]
 8010b96:	e00d      	b.n	8010bb4 <B_tcpStart+0x54>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	441a      	add	r2, r3
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	6859      	ldr	r1, [r3, #4]
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	440b      	add	r3, r1
 8010baa:	6812      	ldr	r2, [r2, #0]
 8010bac:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	617b      	str	r3, [r7, #20]
 8010bb4:	7bbb      	ldrb	r3, [r7, #14]
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	dbed      	blt.n	8010b98 <B_tcpStart+0x38>
    }
    btcp->senderID = senderID;
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	7bfa      	ldrb	r2, [r7, #15]
 8010bc0:	701a      	strb	r2, [r3, #0]
    btcp->rxBuart = rxBuart;
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	60da      	str	r2, [r3, #12]
    btcp->tcpSeqNum = 0;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	741a      	strb	r2, [r3, #16]
    btcp->crc = crc;
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	6a3a      	ldr	r2, [r7, #32]
 8010bd2:	61da      	str	r2, [r3, #28]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2110      	movs	r1, #16
 8010bd8:	2040      	movs	r0, #64	; 0x40
 8010bda:	f7fd fa6b 	bl	800e0b4 <xQueueGenericCreate>
 8010bde:	4602      	mov	r2, r0
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	615a      	str	r2, [r3, #20]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	3318      	adds	r3, #24
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	2304      	movs	r3, #4
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bf4:	4904      	ldr	r1, [pc, #16]	; (8010c08 <B_tcpStart+0xa8>)
 8010bf6:	4805      	ldr	r0, [pc, #20]	; (8010c0c <B_tcpStart+0xac>)
 8010bf8:	f7fe f84a 	bl	800ec90 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 8010bfc:	693b      	ldr	r3, [r7, #16]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	080121dc 	.word	0x080121dc
 8010c0c:	08010e2b 	.word	0x08010e2b

08010c10 <B_tcpSend>:
			senderAddress: the address of the sender
  * @note	msg array can be up to MAX_PACKET_SIZE (256) bytes long if it does not contain values that must be escaped. 
			If it contains values that need to be escaped, the msg array can be up to (MAX_PACKET_SIZE - number_of_values_to_be_escaped) bytes long
  * @retval B_tcpHandle_t*: pointer to a B_tcpHandle_t struct which stores uart, task handles and other transmission information 
  */
void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08c      	sub	sp, #48	; 0x30
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	71fb      	strb	r3, [r7, #7]
	
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8)); 
 8010c1e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010c22:	f7ff fdb1 	bl	8010788 <pvPortMalloc>
 8010c26:	61f8      	str	r0, [r7, #28]

    //buf without escape character to generate crc
	buf[0] = BSSR_SERIAL_START;
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	22a5      	movs	r2, #165	; 0xa5
 8010c2c:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	3301      	adds	r3, #1
 8010c32:	79fa      	ldrb	r2, [r7, #7]
 8010c34:	701a      	strb	r2, [r3, #0]
    buf[2] = btcp->senderID;
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	3302      	adds	r3, #2
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	7812      	ldrb	r2, [r2, #0]
 8010c3e:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	3303      	adds	r3, #3
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	7c12      	ldrb	r2, [r2, #16]
 8010c48:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length);
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	79fa      	ldrb	r2, [r7, #7]
 8010c50:	68b9      	ldr	r1, [r7, #8]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 fd1c 	bl	8011690 <memcpy>
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	69d8      	ldr	r0, [r3, #28]
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	3304      	adds	r3, #4
 8010c60:	461a      	mov	r2, r3
 8010c62:	69f9      	ldr	r1, [r7, #28]
 8010c64:	f7f2 ff90 	bl	8003b88 <HAL_CRC_Calculate>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	43db      	mvns	r3, r3
 8010c6c:	61bb      	str	r3, [r7, #24]

    //buf with escape character
    uint16_t buf_pos = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	
    buf[buf_pos] = BSSR_SERIAL_START;
 8010c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c74:	69fa      	ldr	r2, [r7, #28]
 8010c76:	4413      	add	r3, r2
 8010c78:	22a5      	movs	r2, #165	; 0xa5
 8010c7a:	701a      	strb	r2, [r3, #0]
    buf_pos++;
 8010c7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c7e:	3301      	adds	r3, #1
 8010c80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	
    //check if length needs to be escaped
	if(length == BSSR_SERIAL_START || length == BSSR_SERIAL_ESCAPE){
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	2ba5      	cmp	r3, #165	; 0xa5
 8010c86:	d002      	beq.n	8010c8e <B_tcpSend+0x7e>
 8010c88:	79fb      	ldrb	r3, [r7, #7]
 8010c8a:	2b5a      	cmp	r3, #90	; 0x5a
 8010c8c:	d110      	bne.n	8010cb0 <B_tcpSend+0xa0>
    	buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8010c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c90:	69fa      	ldr	r2, [r7, #28]
 8010c92:	4413      	add	r3, r2
 8010c94:	225a      	movs	r2, #90	; 0x5a
 8010c96:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010c98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    	buf[buf_pos] = length;
 8010c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ca0:	69fa      	ldr	r2, [r7, #28]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010ca8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010caa:	3301      	adds	r3, #1
 8010cac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010cae:	e007      	b.n	8010cc0 <B_tcpSend+0xb0>
    } else{
    	buf[buf_pos] = length;
 8010cb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	79fa      	ldrb	r2, [r7, #7]
 8010cb8:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
	
    buf[buf_pos] = btcp->senderID;;
 8010cc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cc2:	69fa      	ldr	r2, [r7, #28]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	7812      	ldrb	r2, [r2, #0]
 8010cca:	701a      	strb	r2, [r3, #0]
    buf_pos++;
 8010ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cce:	3301      	adds	r3, #1
 8010cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    //check if sequence number needs to be escaped
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	7c1b      	ldrb	r3, [r3, #16]
 8010cd6:	2ba5      	cmp	r3, #165	; 0xa5
 8010cd8:	d003      	beq.n	8010ce2 <B_tcpSend+0xd2>
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	7c1b      	ldrb	r3, [r3, #16]
 8010cde:	2b5a      	cmp	r3, #90	; 0x5a
 8010ce0:	d111      	bne.n	8010d06 <B_tcpSend+0xf6>
    	buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8010ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ce4:	69fa      	ldr	r2, [r7, #28]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	225a      	movs	r2, #90	; 0x5a
 8010cea:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cee:	3301      	adds	r3, #1
 8010cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    	buf[buf_pos] = btcp->tcpSeqNum;
 8010cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cf4:	69fa      	ldr	r2, [r7, #28]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	7c12      	ldrb	r2, [r2, #16]
 8010cfc:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d00:	3301      	adds	r3, #1
 8010d02:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d04:	e008      	b.n	8010d18 <B_tcpSend+0x108>
    } else{
    	buf[buf_pos] = btcp->tcpSeqNum;
 8010d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d08:	69fa      	ldr	r2, [r7, #28]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	68fa      	ldr	r2, [r7, #12]
 8010d0e:	7c12      	ldrb	r2, [r2, #16]
 8010d10:	701a      	strb	r2, [r3, #0]
    	buf_pos++;
 8010d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d14:	3301      	adds	r3, #1
 8010d16:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    btcp->tcpSeqNum++;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	7c1b      	ldrb	r3, [r3, #16]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	741a      	strb	r2, [r3, #16]

    //check if each data needs to be escaped
    for(int i=0; i<length; i++){
 8010d24:	2300      	movs	r3, #0
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d28:	e02d      	b.n	8010d86 <B_tcpSend+0x176>
    	if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){
 8010d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2c:	68ba      	ldr	r2, [r7, #8]
 8010d2e:	4413      	add	r3, r2
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b5a      	cmp	r3, #90	; 0x5a
 8010d34:	d005      	beq.n	8010d42 <B_tcpSend+0x132>
 8010d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2ba5      	cmp	r3, #165	; 0xa5
 8010d40:	d113      	bne.n	8010d6a <B_tcpSend+0x15a>
    		buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8010d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d44:	69fa      	ldr	r2, [r7, #28]
 8010d46:	4413      	add	r3, r2
 8010d48:	225a      	movs	r2, #90	; 0x5a
 8010d4a:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010d4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d4e:	3301      	adds	r3, #1
 8010d50:	85fb      	strh	r3, [r7, #46]	; 0x2e
    		buf[buf_pos] = msg[i];
 8010d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	441a      	add	r2, r3
 8010d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d5a:	69f9      	ldr	r1, [r7, #28]
 8010d5c:	440b      	add	r3, r1
 8010d5e:	7812      	ldrb	r2, [r2, #0]
 8010d60:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d64:	3301      	adds	r3, #1
 8010d66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d68:	e00a      	b.n	8010d80 <B_tcpSend+0x170>
    	} else{
    		buf[buf_pos] = msg[i];
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	441a      	add	r2, r3
 8010d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d72:	69f9      	ldr	r1, [r7, #28]
 8010d74:	440b      	add	r3, r1
 8010d76:	7812      	ldrb	r2, [r2, #0]
 8010d78:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(int i=0; i<length; i++){
 8010d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d82:	3301      	adds	r3, #1
 8010d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	dbcd      	blt.n	8010d2a <B_tcpSend+0x11a>
    	}
    }

	//checks if each crc value needs to be escaped
    for(int i=0; i<4; i++){
 8010d8e:	2300      	movs	r3, #0
 8010d90:	627b      	str	r3, [r7, #36]	; 0x24
 8010d92:	e029      	b.n	8010de8 <B_tcpSend+0x1d8>
    	uint8_t crc = (crc_result>>(8*(3-i))) & 255;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d96:	f1c3 0303 	rsb	r3, r3, #3
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	69ba      	ldr	r2, [r7, #24]
 8010d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8010da2:	75fb      	strb	r3, [r7, #23]
    	if(crc == BSSR_SERIAL_ESCAPE || crc == BSSR_SERIAL_START){
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
 8010da6:	2b5a      	cmp	r3, #90	; 0x5a
 8010da8:	d002      	beq.n	8010db0 <B_tcpSend+0x1a0>
 8010daa:	7dfb      	ldrb	r3, [r7, #23]
 8010dac:	2ba5      	cmp	r3, #165	; 0xa5
 8010dae:	d110      	bne.n	8010dd2 <B_tcpSend+0x1c2>
    		buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8010db0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010db2:	69fa      	ldr	r2, [r7, #28]
 8010db4:	4413      	add	r3, r2
 8010db6:	225a      	movs	r2, #90	; 0x5a
 8010db8:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    		buf[buf_pos] = crc;
 8010dc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dc2:	69fa      	ldr	r2, [r7, #28]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	7dfa      	ldrb	r2, [r7, #23]
 8010dc8:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dcc:	3301      	adds	r3, #1
 8010dce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010dd0:	e007      	b.n	8010de2 <B_tcpSend+0x1d2>
    	} else{
    		buf[buf_pos] = crc;
 8010dd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dd4:	69fa      	ldr	r2, [r7, #28]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	7dfa      	ldrb	r2, [r7, #23]
 8010dda:	701a      	strb	r2, [r3, #0]
    		buf_pos++;
 8010ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dde:	3301      	adds	r3, #1
 8010de0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(int i=0; i<4; i++){
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	3301      	adds	r3, #1
 8010de6:	627b      	str	r3, [r7, #36]	; 0x24
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	2b03      	cmp	r3, #3
 8010dec:	ddd2      	ble.n	8010d94 <B_tcpSend+0x184>
    	   buf_pos++;
    	}
   }
#endif
	// Send the message to the Queue corresponding to each of the UART ports in the transmitBuarts array 
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8010dee:	2300      	movs	r3, #0
 8010df0:	623b      	str	r3, [r7, #32]
 8010df2:	e00d      	b.n	8010e10 <B_tcpSend+0x200>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	685a      	ldr	r2, [r3, #4]
 8010df8:	6a3b      	ldr	r3, [r7, #32]
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	4413      	add	r3, r2
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e02:	69f9      	ldr	r1, [r7, #28]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f000 fa19 	bl	801123c <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	623b      	str	r3, [r7, #32]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	7a1b      	ldrb	r3, [r3, #8]
 8010e14:	461a      	mov	r2, r3
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	dbeb      	blt.n	8010df4 <B_tcpSend+0x1e4>
    }
    vPortFree(buf);
 8010e1c:	69f8      	ldr	r0, [r7, #28]
 8010e1e:	f7ff fd7f 	bl	8010920 <vPortFree>
}
 8010e22:	bf00      	nop
 8010e24:	3730      	adds	r7, #48	; 0x30
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	1d3b      	adds	r3, r7, #4
 8010e34:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 8010e36:	1d3b      	adds	r3, r7, #4
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 8010e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e66:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 8010e70:	2300      	movs	r3, #0
 8010e72:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8010e76:	2300      	movs	r3, #0
 8010e78:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8010e7c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f000 f9fb 	bl	801127e <B_uartRead>
 8010e88:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
        for(int i = 0; i < e->len; i++){
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8010e92:	e14f      	b.n	8011134 <tcpRxTask+0x30a>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8010e94:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010e9e:	441a      	add	r2, r3
 8010ea0:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8010ea4:	7811      	ldrb	r1, [r2, #0]
 8010ea6:	f107 0218 	add.w	r2, r7, #24
 8010eaa:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8010eac:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a

			// First, check if there is an escape character and act accordingly
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){ 
 8010eb6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010ec0:	4413      	add	r3, r2
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	2b5a      	cmp	r3, #90	; 0x5a
 8010ec6:	d107      	bne.n	8010ed8 <tcpRxTask+0xae>
 8010ec8:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d103      	bne.n	8010ed8 <tcpRxTask+0xae>
                escaped = 1;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
				continue; //Go to the next loop iteration
 8010ed6:	e128      	b.n	801112a <tcpRxTask+0x300>
            } else if (escaped) {
 8010ed8:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <tcpRxTask+0xbc>
				escaped = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			}

			if(!started){	
 8010ee6:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d11e      	bne.n	8010f2c <tcpRxTask+0x102>
                if(e->buf[i] == BSSR_SERIAL_START){
 8010eee:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010ef8:	4413      	add	r3, r2
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2ba5      	cmp	r3, #165	; 0xa5
 8010efe:	f040 8114 	bne.w	801112a <tcpRxTask+0x300>
                    started = 1;
 8010f02:	2301      	movs	r3, #1
 8010f04:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 8010f08:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010f12:	441a      	add	r2, r3
 8010f14:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010f18:	7811      	ldrb	r1, [r2, #0]
 8010f1a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010f1e:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 8010f20:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010f24:	3301      	adds	r3, #1
 8010f26:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8010f2a:	e0fe      	b.n	801112a <tcpRxTask+0x300>
                }
            } else if(!expected_length){
 8010f2c:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d11a      	bne.n	8010f6a <tcpRxTask+0x140>
                expected_length = e->buf[i];
 8010f34:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010f3e:	4413      	add	r3, r2
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 8010f46:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010f50:	441a      	add	r2, r3
 8010f52:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010f56:	7811      	ldrb	r1, [r2, #0]
 8010f58:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010f5c:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8010f5e:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010f62:	3301      	adds	r3, #1
 8010f64:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8010f68:	e0df      	b.n	801112a <tcpRxTask+0x300>
            } else if(!sender){
 8010f6a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d11a      	bne.n	8010fa8 <tcpRxTask+0x17e>
                sender = e->buf[i];
 8010f72:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010f7c:	4413      	add	r3, r2
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8010f84:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010f8e:	441a      	add	r2, r3
 8010f90:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010f94:	7811      	ldrb	r1, [r2, #0]
 8010f96:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010f9a:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8010f9c:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8010fa6:	e0c0      	b.n	801112a <tcpRxTask+0x300>
            } else if(seqNum == 0xffff){
 8010fa8:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8010fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d11a      	bne.n	8010fea <tcpRxTask+0x1c0>
				seqNum = e->buf[i];
 8010fb4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010fbe:	4413      	add	r3, r2
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
				input_buffer[buf_pos] = e->buf[i];
 8010fc6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8010fd0:	441a      	add	r2, r3
 8010fd2:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010fd6:	7811      	ldrb	r1, [r2, #0]
 8010fd8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010fdc:	54d1      	strb	r1, [r2, r3]
				buf_pos++;
 8010fde:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8010fe8:	e09f      	b.n	801112a <tcpRxTask+0x300>
            } else if(buf_pos < expected_length+4){
 8010fea:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8010fee:	1cda      	adds	r2, r3, #3
 8010ff0:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	db11      	blt.n	801101c <tcpRxTask+0x1f2>
                input_buffer[buf_pos] = e->buf[i];
 8010ff8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8011002:	441a      	add	r2, r3
 8011004:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011008:	7811      	ldrb	r1, [r2, #0]
 801100a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801100e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8011010:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8011014:	3301      	adds	r3, #1
 8011016:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 801101a:	e086      	b.n	801112a <tcpRxTask+0x300>
            } else if(buf_pos + crcAcc < expected_length+8){
 801101c:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8011020:	1dda      	adds	r2, r3, #7
 8011022:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8011026:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801102a:	440b      	add	r3, r1
 801102c:	429a      	cmp	r2, r3
 801102e:	db7c      	blt.n	801112a <tcpRxTask+0x300>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8011030:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801103a:	4413      	add	r3, r2
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	461a      	mov	r2, r3
 8011040:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011044:	f1c3 0303 	rsb	r3, r3, #3
 8011048:	00db      	lsls	r3, r3, #3
 801104a:	fa02 f303 	lsl.w	r3, r2, r3
 801104e:	461a      	mov	r2, r3
 8011050:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011054:	4313      	orrs	r3, r2
 8011056:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 801105a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801105e:	3301      	adds	r3, #1
 8011060:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8011064:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8011068:	2b04      	cmp	r3, #4
 801106a:	d15e      	bne.n	801112a <tcpRxTask+0x300>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 801106c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8011070:	69db      	ldr	r3, [r3, #28]
 8011072:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8011076:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801107a:	4618      	mov	r0, r3
 801107c:	f7f2 fd84 	bl	8003b88 <HAL_CRC_Calculate>
 8011080:	4603      	mov	r3, r0
 8011082:	43db      	mvns	r3, r3
 8011084:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

					if(crcExpected == crc && sender != TCP_ID){ // If CRC correct and the sender is not this motherboard
 8011088:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 801108c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011090:	429a      	cmp	r2, r3
 8011092:	d12e      	bne.n	80110f2 <tcpRxTask+0x2c8>
 8011094:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011098:	2b04      	cmp	r3, #4
 801109a:	d02a      	beq.n	80110f2 <tcpRxTask+0x2c8>
						/*for(int i = 0; i < btcp->numTransmitBuarts; i++){
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
						}*/  //Commented out since this is for Daisy Chain, and we are not doing Daisy Chain this cycle
						pkt.length = expected_length;
 801109c:	f107 0308 	add.w	r3, r7, #8
 80110a0:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 80110a4:	709a      	strb	r2, [r3, #2]
						pkt.sender = sender;
 80110a6:	f107 0308 	add.w	r3, r7, #8
 80110aa:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 80110ae:	701a      	strb	r2, [r3, #0]
						pkt.senderID = sender;
 80110b0:	f107 0308 	add.w	r3, r7, #8
 80110b4:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 80110b8:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 80110ba:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	f107 0308 	add.w	r3, r7, #8
 80110c4:	70da      	strb	r2, [r3, #3]
						pkt.payload = input_buffer;
 80110c6:	f107 0308 	add.w	r3, r7, #8
 80110ca:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80110ce:	605a      	str	r2, [r3, #4]
						pkt.data = pkt.payload + 4; //points to element containing DataID
 80110d0:	f107 0308 	add.w	r3, r7, #8
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	1d1a      	adds	r2, r3, #4
 80110d8:	f107 0308 	add.w	r3, r7, #8
 80110dc:	609a      	str	r2, [r3, #8]
						pkt.crc = crc;
 80110de:	f107 0308 	add.w	r3, r7, #8
 80110e2:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80110e6:	60da      	str	r2, [r3, #12]
						serialParse(&pkt);
 80110e8:	f107 0308 	add.w	r3, r7, #8
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7ef fbc7 	bl	8000880 <serialParse>
					}
					raw_buf_pos = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 80110f8:	2300      	movs	r3, #0
 80110fa:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 80110fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011102:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					sender = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 801112a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801112e:	3301      	adds	r3, #1
 8011130:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8011134:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8011138:	685a      	ldr	r2, [r3, #4]
 801113a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801113e:	429a      	cmp	r2, r3
 8011140:	f63f aea8 	bhi.w	8010e94 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8011144:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8011148:	f000 f8ae 	bl	80112a8 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 801114c:	e696      	b.n	8010e7c <tcpRxTask+0x52>
	...

08011150 <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8011150:	b580      	push	{r7, lr}
 8011152:	b086      	sub	sp, #24
 8011154:	af02      	add	r7, sp, #8
 8011156:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8011158:	2300      	movs	r3, #0
 801115a:	60bb      	str	r3, [r7, #8]
 801115c:	e01e      	b.n	801119c <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 801115e:	4a32      	ldr	r2, [pc, #200]	; (8011228 <B_uartStart+0xd8>)
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d115      	bne.n	8011196 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 801116a:	2028      	movs	r0, #40	; 0x28
 801116c:	f7ff fb0c 	bl	8010788 <pvPortMalloc>
 8011170:	4602      	mov	r2, r0
 8011172:	492d      	ldr	r1, [pc, #180]	; (8011228 <B_uartStart+0xd8>)
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 801117a:	4a2b      	ldr	r2, [pc, #172]	; (8011228 <B_uartStart+0xd8>)
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011182:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8011184:	4929      	ldr	r1, [pc, #164]	; (801122c <B_uartStart+0xdc>)
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
            break;
 8011194:	e005      	b.n	80111a2 <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	3301      	adds	r3, #1
 801119a:	60bb      	str	r3, [r7, #8]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	2b02      	cmp	r3, #2
 80111a0:	dddd      	ble.n	801115e <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 80111a2:	2203      	movs	r2, #3
 80111a4:	2100      	movs	r1, #0
 80111a6:	2001      	movs	r0, #1
 80111a8:	f7fc ff84 	bl	800e0b4 <xQueueGenericCreate>
 80111ac:	4602      	mov	r2, r0
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 80111b2:	2200      	movs	r2, #0
 80111b4:	2108      	movs	r1, #8
 80111b6:	2040      	movs	r0, #64	; 0x40
 80111b8:	f7fc ff7c 	bl	800e0b4 <xQueueGenericCreate>
 80111bc:	4602      	mov	r2, r0
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 80111c2:	2200      	movs	r2, #0
 80111c4:	2108      	movs	r1, #8
 80111c6:	2040      	movs	r0, #64	; 0x40
 80111c8:	f7fc ff74 	bl	800e0b4 <xQueueGenericCreate>
 80111cc:	4602      	mov	r2, r0
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3314      	adds	r3, #20
 80111d6:	9301      	str	r3, [sp, #4]
 80111d8:	2305      	movs	r3, #5
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111e2:	4913      	ldr	r1, [pc, #76]	; (8011230 <B_uartStart+0xe0>)
 80111e4:	4813      	ldr	r0, [pc, #76]	; (8011234 <B_uartStart+0xe4>)
 80111e6:	f7fd fd53 	bl	800ec90 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	3318      	adds	r3, #24
 80111ee:	9301      	str	r3, [sp, #4]
 80111f0:	2306      	movs	r3, #6
 80111f2:	9300      	str	r3, [sp, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111fa:	490d      	ldr	r1, [pc, #52]	; (8011230 <B_uartStart+0xe0>)
 80111fc:	480e      	ldr	r0, [pc, #56]	; (8011238 <B_uartStart+0xe8>)
 80111fe:	f7fd fd47 	bl	800ec90 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2200      	movs	r2, #0
 8011206:	621a      	str	r2, [r3, #32]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6a1a      	ldr	r2, [r3, #32]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	61da      	str	r2, [r3, #28]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	69db      	ldr	r3, [r3, #28]
 8011214:	b2da      	uxtb	r2, r3
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return buart;
 801121c:	68fb      	ldr	r3, [r7, #12]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	24027340 	.word	0x24027340
 801122c:	24027350 	.word	0x24027350
 8011230:	080121e8 	.word	0x080121e8
 8011234:	080112c9 	.word	0x080112c9
 8011238:	08011311 	.word	0x08011311

0801123c <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 801123c:	b580      	push	{r7, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff fa9d 	bl	8010788 <pvPortMalloc>
 801124e:	4603      	mov	r3, r0
 8011250:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	68b9      	ldr	r1, [r7, #8]
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fa19 	bl	8011690 <memcpy>
	e.len = len;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6898      	ldr	r0, [r3, #8]
 8011266:	f107 0114 	add.w	r1, r7, #20
 801126a:	2300      	movs	r3, #0
 801126c:	2200      	movs	r2, #0
 801126e:	f7fc ff77 	bl	800e160 <xQueueGenericSend>
 8011272:	61f8      	str	r0, [r7, #28]
	return sent;
 8011274:	69fb      	ldr	r3, [r7, #28]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3720      	adds	r7, #32
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 801127e:	b580      	push	{r7, lr}
 8011280:	b084      	sub	sp, #16
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8011286:	2008      	movs	r0, #8
 8011288:	f7ff fa7e 	bl	8010788 <pvPortMalloc>
 801128c:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	691b      	ldr	r3, [r3, #16]
 8011292:	f04f 32ff 	mov.w	r2, #4294967295
 8011296:	68f9      	ldr	r1, [r7, #12]
 8011298:	4618      	mov	r0, r3
 801129a:	f7fd f987 	bl	800e5ac <xQueueReceive>
	return e;
 801129e:	68fb      	ldr	r3, [r7, #12]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fb33 	bl	8010920 <vPortFree>
	vPortFree(e);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f7ff fb30 	bl	8010920 <vPortFree>
}
 80112c0:	bf00      	nop
 80112c2:	3708      	adds	r7, #8
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	f107 010c 	add.w	r1, r7, #12
 80112dc:	f04f 32ff 	mov.w	r2, #4294967295
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fd f963 	bl	800e5ac <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	68f9      	ldr	r1, [r7, #12]
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	b292      	uxth	r2, r2
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fb f857 	bl	800c3a4 <HAL_UART_Transmit_DMA>
		
		//Waits until transmit is complete (happens when HAL_UART_TxCpltCallback is triggered)
		xSemaphoreTake(buart->txSem, portMAX_DELAY); 
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	f04f 31ff 	mov.w	r1, #4294967295
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fd fa34 	bl	800e76c <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff fb0a 	bl	8010920 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 801130c:	e7e2      	b.n	80112d4 <txTask+0xc>
	...

08011310 <rxTask>:
	}
}

static void rxTask(void* pv){
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 801131c:	e002      	b.n	8011324 <rxTask+0x14>
 801131e:	2001      	movs	r0, #1
 8011320:	f7fd fe00 	bl	800ef24 <vTaskDelay>
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801132c:	2b20      	cmp	r3, #32
 801132e:	d1f6      	bne.n	801131e <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8011330:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011334:	f7ff fa28 	bl	8010788 <pvPortMalloc>
 8011338:	4602      	mov	r2, r0
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 801133e:	e009      	b.n	8011354 <rxTask+0x44>
		vTaskDelay(1);
 8011340:	2001      	movs	r0, #1
 8011342:	f7fd fdef 	bl	800ef24 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8011346:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801134a:	f7ff fa1d 	bl	8010788 <pvPortMalloc>
 801134e:	4602      	mov	r2, r0
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d0f1      	beq.n	8011340 <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011368:	4619      	mov	r1, r3
 801136a:	f7fb f89b 	bl	800c4a4 <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 801136e:	2300      	movs	r3, #0
 8011370:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8011372:	f7ff f8e7 	bl	8010544 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a6c      	ldr	r2, [pc, #432]	; (8011530 <rxTask+0x220>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d068      	beq.n	8011456 <rxTask+0x146>
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a69      	ldr	r2, [pc, #420]	; (8011534 <rxTask+0x224>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d061      	beq.n	8011456 <rxTask+0x146>
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a67      	ldr	r2, [pc, #412]	; (8011538 <rxTask+0x228>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d05a      	beq.n	8011456 <rxTask+0x146>
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4a64      	ldr	r2, [pc, #400]	; (801153c <rxTask+0x22c>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d053      	beq.n	8011456 <rxTask+0x146>
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4a62      	ldr	r2, [pc, #392]	; (8011540 <rxTask+0x230>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d04c      	beq.n	8011456 <rxTask+0x146>
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4a5f      	ldr	r2, [pc, #380]	; (8011544 <rxTask+0x234>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d045      	beq.n	8011456 <rxTask+0x146>
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a5d      	ldr	r2, [pc, #372]	; (8011548 <rxTask+0x238>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d03e      	beq.n	8011456 <rxTask+0x146>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a5a      	ldr	r2, [pc, #360]	; (801154c <rxTask+0x23c>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d037      	beq.n	8011456 <rxTask+0x146>
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a58      	ldr	r2, [pc, #352]	; (8011550 <rxTask+0x240>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d030      	beq.n	8011456 <rxTask+0x146>
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a55      	ldr	r2, [pc, #340]	; (8011554 <rxTask+0x244>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d029      	beq.n	8011456 <rxTask+0x146>
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4a53      	ldr	r2, [pc, #332]	; (8011558 <rxTask+0x248>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d022      	beq.n	8011456 <rxTask+0x146>
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4a50      	ldr	r2, [pc, #320]	; (801155c <rxTask+0x24c>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d01b      	beq.n	8011456 <rxTask+0x146>
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4a4e      	ldr	r2, [pc, #312]	; (8011560 <rxTask+0x250>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d014      	beq.n	8011456 <rxTask+0x146>
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a4b      	ldr	r2, [pc, #300]	; (8011564 <rxTask+0x254>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d00d      	beq.n	8011456 <rxTask+0x146>
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4a49      	ldr	r2, [pc, #292]	; (8011568 <rxTask+0x258>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d006      	beq.n	8011456 <rxTask+0x146>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a46      	ldr	r2, [pc, #280]	; (801156c <rxTask+0x25c>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d107      	bne.n	8011466 <rxTask+0x156>
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8011464:	e006      	b.n	8011474 <rxTask+0x164>
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8011474:	697a      	ldr	r2, [r7, #20]
 8011476:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801147e:	2b00      	cmp	r3, #0
 8011480:	d013      	beq.n	80114aa <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	69da      	ldr	r2, [r3, #28]
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	429a      	cmp	r2, r3
 801148c:	d903      	bls.n	8011496 <rxTask+0x186>
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	69da      	ldr	r2, [r3, #28]
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 801149e:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	2200      	movs	r2, #0
 80114a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80114a8:	e00b      	b.n	80114c2 <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	69da      	ldr	r2, [r3, #28]
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d905      	bls.n	80114c2 <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	69da      	ldr	r2, [r3, #28]
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	6a1b      	ldr	r3, [r3, #32]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 80114c2:	f7ff f86f 	bl	80105a4 <vPortExitCritical>
		if(e.len){
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d02c      	beq.n	8011526 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7ff f95a 	bl	8010788 <pvPortMalloc>
 80114d4:	4603      	mov	r3, r0
 80114d6:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 80114d8:	68b8      	ldr	r0, [r7, #8]
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	68da      	ldr	r2, [r3, #12]
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	6a1b      	ldr	r3, [r3, #32]
 80114e2:	4413      	add	r3, r2
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	4619      	mov	r1, r3
 80114e8:	f000 f8d2 	bl	8011690 <memcpy>
			buart->tail += e.len;
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	6a1a      	ldr	r2, [r3, #32]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	441a      	add	r2, r3
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	6a1b      	ldr	r3, [r3, #32]
 80114fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	6918      	ldr	r0, [r3, #16]
 8011508:	f107 0108 	add.w	r1, r7, #8
 801150c:	2300      	movs	r3, #0
 801150e:	2200      	movs	r2, #0
 8011510:	f7fc fe26 	bl	800e160 <xQueueGenericSend>
 8011514:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d004      	beq.n	8011526 <rxTask+0x216>
 801151c:	f107 0308 	add.w	r3, r7, #8
 8011520:	4618      	mov	r0, r3
 8011522:	f000 f825 	bl	8011570 <processCriticalFrame>
		}
		vTaskDelay(1);
 8011526:	2001      	movs	r0, #1
 8011528:	f7fd fcfc 	bl	800ef24 <vTaskDelay>
		e.len = 0;
 801152c:	e71f      	b.n	801136e <rxTask+0x5e>
 801152e:	bf00      	nop
 8011530:	40020010 	.word	0x40020010
 8011534:	40020028 	.word	0x40020028
 8011538:	40020040 	.word	0x40020040
 801153c:	40020058 	.word	0x40020058
 8011540:	40020070 	.word	0x40020070
 8011544:	40020088 	.word	0x40020088
 8011548:	400200a0 	.word	0x400200a0
 801154c:	400200b8 	.word	0x400200b8
 8011550:	40020410 	.word	0x40020410
 8011554:	40020428 	.word	0x40020428
 8011558:	40020440 	.word	0x40020440
 801155c:	40020458 	.word	0x40020458
 8011560:	40020470 	.word	0x40020470
 8011564:	40020488 	.word	0x40020488
 8011568:	400204a0 	.word	0x400204a0
 801156c:	400204b8 	.word	0x400204b8

08011570 <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]

}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 801158c:	2300      	movs	r3, #0
 801158e:	60fb      	str	r3, [r7, #12]
 8011590:	e013      	b.n	80115ba <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 8011592:	4a0d      	ldr	r2, [pc, #52]	; (80115c8 <HAL_UART_TxCpltCallback+0x44>)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	429a      	cmp	r2, r3
 801159e:	d109      	bne.n	80115b4 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 80115a0:	4a0a      	ldr	r2, [pc, #40]	; (80115cc <HAL_UART_TxCpltCallback+0x48>)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	2100      	movs	r1, #0
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fc ff70 	bl	800e492 <xQueueGiveFromISR>
			return;
 80115b2:	e005      	b.n	80115c0 <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	3301      	adds	r3, #1
 80115b8:	60fb      	str	r3, [r7, #12]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2b03      	cmp	r3, #3
 80115be:	d9e8      	bls.n	8011592 <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	24027350 	.word	0x24027350
 80115cc:	24027340 	.word	0x24027340

080115d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80115d0:	b480      	push	{r7}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80115d8:	2300      	movs	r3, #0
 80115da:	60fb      	str	r3, [r7, #12]
 80115dc:	e011      	b.n	8011602 <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 80115de:	4a12      	ldr	r2, [pc, #72]	; (8011628 <HAL_UART_RxCpltCallback+0x58>)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d107      	bne.n	80115fc <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 80115ec:	4a0f      	ldr	r2, [pc, #60]	; (801162c <HAL_UART_RxCpltCallback+0x5c>)
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 80115fa:	e010      	b.n	801161e <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3301      	adds	r3, #1
 8011600:	60fb      	str	r3, [r7, #12]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2b03      	cmp	r3, #3
 8011606:	d9ea      	bls.n	80115de <HAL_UART_RxCpltCallback+0xe>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	60bb      	str	r3, [r7, #8]
}
 801161a:	bf00      	nop
		}
	}
	configASSERT(NULL);
 801161c:	e7fe      	b.n	801161c <HAL_UART_RxCpltCallback+0x4c>
}
 801161e:	3714      	adds	r7, #20
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	24027350 	.word	0x24027350
 801162c:	24027340 	.word	0x24027340

08011630 <atoi>:
 8011630:	220a      	movs	r2, #10
 8011632:	2100      	movs	r1, #0
 8011634:	f000 b9cc 	b.w	80119d0 <strtol>

08011638 <__errno>:
 8011638:	4b01      	ldr	r3, [pc, #4]	; (8011640 <__errno+0x8>)
 801163a:	6818      	ldr	r0, [r3, #0]
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	24000018 	.word	0x24000018

08011644 <__libc_init_array>:
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	4d0d      	ldr	r5, [pc, #52]	; (801167c <__libc_init_array+0x38>)
 8011648:	4c0d      	ldr	r4, [pc, #52]	; (8011680 <__libc_init_array+0x3c>)
 801164a:	1b64      	subs	r4, r4, r5
 801164c:	10a4      	asrs	r4, r4, #2
 801164e:	2600      	movs	r6, #0
 8011650:	42a6      	cmp	r6, r4
 8011652:	d109      	bne.n	8011668 <__libc_init_array+0x24>
 8011654:	4d0b      	ldr	r5, [pc, #44]	; (8011684 <__libc_init_array+0x40>)
 8011656:	4c0c      	ldr	r4, [pc, #48]	; (8011688 <__libc_init_array+0x44>)
 8011658:	f000 fd58 	bl	801210c <_init>
 801165c:	1b64      	subs	r4, r4, r5
 801165e:	10a4      	asrs	r4, r4, #2
 8011660:	2600      	movs	r6, #0
 8011662:	42a6      	cmp	r6, r4
 8011664:	d105      	bne.n	8011672 <__libc_init_array+0x2e>
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	f855 3b04 	ldr.w	r3, [r5], #4
 801166c:	4798      	blx	r3
 801166e:	3601      	adds	r6, #1
 8011670:	e7ee      	b.n	8011650 <__libc_init_array+0xc>
 8011672:	f855 3b04 	ldr.w	r3, [r5], #4
 8011676:	4798      	blx	r3
 8011678:	3601      	adds	r6, #1
 801167a:	e7f2      	b.n	8011662 <__libc_init_array+0x1e>
 801167c:	080123d0 	.word	0x080123d0
 8011680:	080123d0 	.word	0x080123d0
 8011684:	080123d0 	.word	0x080123d0
 8011688:	080123d4 	.word	0x080123d4

0801168c <__retarget_lock_acquire_recursive>:
 801168c:	4770      	bx	lr

0801168e <__retarget_lock_release_recursive>:
 801168e:	4770      	bx	lr

08011690 <memcpy>:
 8011690:	440a      	add	r2, r1
 8011692:	4291      	cmp	r1, r2
 8011694:	f100 33ff 	add.w	r3, r0, #4294967295
 8011698:	d100      	bne.n	801169c <memcpy+0xc>
 801169a:	4770      	bx	lr
 801169c:	b510      	push	{r4, lr}
 801169e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116a6:	4291      	cmp	r1, r2
 80116a8:	d1f9      	bne.n	801169e <memcpy+0xe>
 80116aa:	bd10      	pop	{r4, pc}

080116ac <memset>:
 80116ac:	4402      	add	r2, r0
 80116ae:	4603      	mov	r3, r0
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d100      	bne.n	80116b6 <memset+0xa>
 80116b4:	4770      	bx	lr
 80116b6:	f803 1b01 	strb.w	r1, [r3], #1
 80116ba:	e7f9      	b.n	80116b0 <memset+0x4>

080116bc <_malloc_r>:
 80116bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116be:	1ccd      	adds	r5, r1, #3
 80116c0:	f025 0503 	bic.w	r5, r5, #3
 80116c4:	3508      	adds	r5, #8
 80116c6:	2d0c      	cmp	r5, #12
 80116c8:	bf38      	it	cc
 80116ca:	250c      	movcc	r5, #12
 80116cc:	2d00      	cmp	r5, #0
 80116ce:	4606      	mov	r6, r0
 80116d0:	db01      	blt.n	80116d6 <_malloc_r+0x1a>
 80116d2:	42a9      	cmp	r1, r5
 80116d4:	d903      	bls.n	80116de <_malloc_r+0x22>
 80116d6:	230c      	movs	r3, #12
 80116d8:	6033      	str	r3, [r6, #0]
 80116da:	2000      	movs	r0, #0
 80116dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116de:	f000 f981 	bl	80119e4 <__malloc_lock>
 80116e2:	4921      	ldr	r1, [pc, #132]	; (8011768 <_malloc_r+0xac>)
 80116e4:	680a      	ldr	r2, [r1, #0]
 80116e6:	4614      	mov	r4, r2
 80116e8:	b99c      	cbnz	r4, 8011712 <_malloc_r+0x56>
 80116ea:	4f20      	ldr	r7, [pc, #128]	; (801176c <_malloc_r+0xb0>)
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	b923      	cbnz	r3, 80116fa <_malloc_r+0x3e>
 80116f0:	4621      	mov	r1, r4
 80116f2:	4630      	mov	r0, r6
 80116f4:	f000 f8a6 	bl	8011844 <_sbrk_r>
 80116f8:	6038      	str	r0, [r7, #0]
 80116fa:	4629      	mov	r1, r5
 80116fc:	4630      	mov	r0, r6
 80116fe:	f000 f8a1 	bl	8011844 <_sbrk_r>
 8011702:	1c43      	adds	r3, r0, #1
 8011704:	d123      	bne.n	801174e <_malloc_r+0x92>
 8011706:	230c      	movs	r3, #12
 8011708:	6033      	str	r3, [r6, #0]
 801170a:	4630      	mov	r0, r6
 801170c:	f000 f970 	bl	80119f0 <__malloc_unlock>
 8011710:	e7e3      	b.n	80116da <_malloc_r+0x1e>
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	1b5b      	subs	r3, r3, r5
 8011716:	d417      	bmi.n	8011748 <_malloc_r+0x8c>
 8011718:	2b0b      	cmp	r3, #11
 801171a:	d903      	bls.n	8011724 <_malloc_r+0x68>
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	441c      	add	r4, r3
 8011720:	6025      	str	r5, [r4, #0]
 8011722:	e004      	b.n	801172e <_malloc_r+0x72>
 8011724:	6863      	ldr	r3, [r4, #4]
 8011726:	42a2      	cmp	r2, r4
 8011728:	bf0c      	ite	eq
 801172a:	600b      	streq	r3, [r1, #0]
 801172c:	6053      	strne	r3, [r2, #4]
 801172e:	4630      	mov	r0, r6
 8011730:	f000 f95e 	bl	80119f0 <__malloc_unlock>
 8011734:	f104 000b 	add.w	r0, r4, #11
 8011738:	1d23      	adds	r3, r4, #4
 801173a:	f020 0007 	bic.w	r0, r0, #7
 801173e:	1ac2      	subs	r2, r0, r3
 8011740:	d0cc      	beq.n	80116dc <_malloc_r+0x20>
 8011742:	1a1b      	subs	r3, r3, r0
 8011744:	50a3      	str	r3, [r4, r2]
 8011746:	e7c9      	b.n	80116dc <_malloc_r+0x20>
 8011748:	4622      	mov	r2, r4
 801174a:	6864      	ldr	r4, [r4, #4]
 801174c:	e7cc      	b.n	80116e8 <_malloc_r+0x2c>
 801174e:	1cc4      	adds	r4, r0, #3
 8011750:	f024 0403 	bic.w	r4, r4, #3
 8011754:	42a0      	cmp	r0, r4
 8011756:	d0e3      	beq.n	8011720 <_malloc_r+0x64>
 8011758:	1a21      	subs	r1, r4, r0
 801175a:	4630      	mov	r0, r6
 801175c:	f000 f872 	bl	8011844 <_sbrk_r>
 8011760:	3001      	adds	r0, #1
 8011762:	d1dd      	bne.n	8011720 <_malloc_r+0x64>
 8011764:	e7cf      	b.n	8011706 <_malloc_r+0x4a>
 8011766:	bf00      	nop
 8011768:	24027360 	.word	0x24027360
 801176c:	24027364 	.word	0x24027364

08011770 <cleanup_glue>:
 8011770:	b538      	push	{r3, r4, r5, lr}
 8011772:	460c      	mov	r4, r1
 8011774:	6809      	ldr	r1, [r1, #0]
 8011776:	4605      	mov	r5, r0
 8011778:	b109      	cbz	r1, 801177e <cleanup_glue+0xe>
 801177a:	f7ff fff9 	bl	8011770 <cleanup_glue>
 801177e:	4621      	mov	r1, r4
 8011780:	4628      	mov	r0, r5
 8011782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011786:	f000 b939 	b.w	80119fc <_free_r>
	...

0801178c <_reclaim_reent>:
 801178c:	4b2c      	ldr	r3, [pc, #176]	; (8011840 <_reclaim_reent+0xb4>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4283      	cmp	r3, r0
 8011792:	b570      	push	{r4, r5, r6, lr}
 8011794:	4604      	mov	r4, r0
 8011796:	d051      	beq.n	801183c <_reclaim_reent+0xb0>
 8011798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801179a:	b143      	cbz	r3, 80117ae <_reclaim_reent+0x22>
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d14a      	bne.n	8011838 <_reclaim_reent+0xac>
 80117a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117a4:	6819      	ldr	r1, [r3, #0]
 80117a6:	b111      	cbz	r1, 80117ae <_reclaim_reent+0x22>
 80117a8:	4620      	mov	r0, r4
 80117aa:	f000 f927 	bl	80119fc <_free_r>
 80117ae:	6961      	ldr	r1, [r4, #20]
 80117b0:	b111      	cbz	r1, 80117b8 <_reclaim_reent+0x2c>
 80117b2:	4620      	mov	r0, r4
 80117b4:	f000 f922 	bl	80119fc <_free_r>
 80117b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80117ba:	b111      	cbz	r1, 80117c2 <_reclaim_reent+0x36>
 80117bc:	4620      	mov	r0, r4
 80117be:	f000 f91d 	bl	80119fc <_free_r>
 80117c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117c4:	b111      	cbz	r1, 80117cc <_reclaim_reent+0x40>
 80117c6:	4620      	mov	r0, r4
 80117c8:	f000 f918 	bl	80119fc <_free_r>
 80117cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80117ce:	b111      	cbz	r1, 80117d6 <_reclaim_reent+0x4a>
 80117d0:	4620      	mov	r0, r4
 80117d2:	f000 f913 	bl	80119fc <_free_r>
 80117d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80117d8:	b111      	cbz	r1, 80117e0 <_reclaim_reent+0x54>
 80117da:	4620      	mov	r0, r4
 80117dc:	f000 f90e 	bl	80119fc <_free_r>
 80117e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80117e2:	b111      	cbz	r1, 80117ea <_reclaim_reent+0x5e>
 80117e4:	4620      	mov	r0, r4
 80117e6:	f000 f909 	bl	80119fc <_free_r>
 80117ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80117ec:	b111      	cbz	r1, 80117f4 <_reclaim_reent+0x68>
 80117ee:	4620      	mov	r0, r4
 80117f0:	f000 f904 	bl	80119fc <_free_r>
 80117f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117f6:	b111      	cbz	r1, 80117fe <_reclaim_reent+0x72>
 80117f8:	4620      	mov	r0, r4
 80117fa:	f000 f8ff 	bl	80119fc <_free_r>
 80117fe:	69a3      	ldr	r3, [r4, #24]
 8011800:	b1e3      	cbz	r3, 801183c <_reclaim_reent+0xb0>
 8011802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011804:	4620      	mov	r0, r4
 8011806:	4798      	blx	r3
 8011808:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801180a:	b1b9      	cbz	r1, 801183c <_reclaim_reent+0xb0>
 801180c:	4620      	mov	r0, r4
 801180e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011812:	f7ff bfad 	b.w	8011770 <cleanup_glue>
 8011816:	5949      	ldr	r1, [r1, r5]
 8011818:	b941      	cbnz	r1, 801182c <_reclaim_reent+0xa0>
 801181a:	3504      	adds	r5, #4
 801181c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801181e:	2d80      	cmp	r5, #128	; 0x80
 8011820:	68d9      	ldr	r1, [r3, #12]
 8011822:	d1f8      	bne.n	8011816 <_reclaim_reent+0x8a>
 8011824:	4620      	mov	r0, r4
 8011826:	f000 f8e9 	bl	80119fc <_free_r>
 801182a:	e7ba      	b.n	80117a2 <_reclaim_reent+0x16>
 801182c:	680e      	ldr	r6, [r1, #0]
 801182e:	4620      	mov	r0, r4
 8011830:	f000 f8e4 	bl	80119fc <_free_r>
 8011834:	4631      	mov	r1, r6
 8011836:	e7ef      	b.n	8011818 <_reclaim_reent+0x8c>
 8011838:	2500      	movs	r5, #0
 801183a:	e7ef      	b.n	801181c <_reclaim_reent+0x90>
 801183c:	bd70      	pop	{r4, r5, r6, pc}
 801183e:	bf00      	nop
 8011840:	24000018 	.word	0x24000018

08011844 <_sbrk_r>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	4d06      	ldr	r5, [pc, #24]	; (8011860 <_sbrk_r+0x1c>)
 8011848:	2300      	movs	r3, #0
 801184a:	4604      	mov	r4, r0
 801184c:	4608      	mov	r0, r1
 801184e:	602b      	str	r3, [r5, #0]
 8011850:	f7f0 fe78 	bl	8002544 <_sbrk>
 8011854:	1c43      	adds	r3, r0, #1
 8011856:	d102      	bne.n	801185e <_sbrk_r+0x1a>
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	b103      	cbz	r3, 801185e <_sbrk_r+0x1a>
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	24027c94 	.word	0x24027c94

08011864 <siprintf>:
 8011864:	b40e      	push	{r1, r2, r3}
 8011866:	b500      	push	{lr}
 8011868:	b09c      	sub	sp, #112	; 0x70
 801186a:	ab1d      	add	r3, sp, #116	; 0x74
 801186c:	9002      	str	r0, [sp, #8]
 801186e:	9006      	str	r0, [sp, #24]
 8011870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011874:	4809      	ldr	r0, [pc, #36]	; (801189c <siprintf+0x38>)
 8011876:	9107      	str	r1, [sp, #28]
 8011878:	9104      	str	r1, [sp, #16]
 801187a:	4909      	ldr	r1, [pc, #36]	; (80118a0 <siprintf+0x3c>)
 801187c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011880:	9105      	str	r1, [sp, #20]
 8011882:	6800      	ldr	r0, [r0, #0]
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	a902      	add	r1, sp, #8
 8011888:	f000 f964 	bl	8011b54 <_svfiprintf_r>
 801188c:	9b02      	ldr	r3, [sp, #8]
 801188e:	2200      	movs	r2, #0
 8011890:	701a      	strb	r2, [r3, #0]
 8011892:	b01c      	add	sp, #112	; 0x70
 8011894:	f85d eb04 	ldr.w	lr, [sp], #4
 8011898:	b003      	add	sp, #12
 801189a:	4770      	bx	lr
 801189c:	24000018 	.word	0x24000018
 80118a0:	ffff0208 	.word	0xffff0208

080118a4 <strncmp>:
 80118a4:	b510      	push	{r4, lr}
 80118a6:	b16a      	cbz	r2, 80118c4 <strncmp+0x20>
 80118a8:	3901      	subs	r1, #1
 80118aa:	1884      	adds	r4, r0, r2
 80118ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80118b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d103      	bne.n	80118c0 <strncmp+0x1c>
 80118b8:	42a0      	cmp	r0, r4
 80118ba:	d001      	beq.n	80118c0 <strncmp+0x1c>
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1f5      	bne.n	80118ac <strncmp+0x8>
 80118c0:	1a98      	subs	r0, r3, r2
 80118c2:	bd10      	pop	{r4, pc}
 80118c4:	4610      	mov	r0, r2
 80118c6:	e7fc      	b.n	80118c2 <strncmp+0x1e>

080118c8 <_strtol_l.isra.0>:
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ce:	d001      	beq.n	80118d4 <_strtol_l.isra.0+0xc>
 80118d0:	2b24      	cmp	r3, #36	; 0x24
 80118d2:	d906      	bls.n	80118e2 <_strtol_l.isra.0+0x1a>
 80118d4:	f7ff feb0 	bl	8011638 <__errno>
 80118d8:	2316      	movs	r3, #22
 80118da:	6003      	str	r3, [r0, #0]
 80118dc:	2000      	movs	r0, #0
 80118de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e2:	4f3a      	ldr	r7, [pc, #232]	; (80119cc <_strtol_l.isra.0+0x104>)
 80118e4:	468e      	mov	lr, r1
 80118e6:	4676      	mov	r6, lr
 80118e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80118ec:	5de5      	ldrb	r5, [r4, r7]
 80118ee:	f015 0508 	ands.w	r5, r5, #8
 80118f2:	d1f8      	bne.n	80118e6 <_strtol_l.isra.0+0x1e>
 80118f4:	2c2d      	cmp	r4, #45	; 0x2d
 80118f6:	d134      	bne.n	8011962 <_strtol_l.isra.0+0x9a>
 80118f8:	f89e 4000 	ldrb.w	r4, [lr]
 80118fc:	f04f 0801 	mov.w	r8, #1
 8011900:	f106 0e02 	add.w	lr, r6, #2
 8011904:	2b00      	cmp	r3, #0
 8011906:	d05c      	beq.n	80119c2 <_strtol_l.isra.0+0xfa>
 8011908:	2b10      	cmp	r3, #16
 801190a:	d10c      	bne.n	8011926 <_strtol_l.isra.0+0x5e>
 801190c:	2c30      	cmp	r4, #48	; 0x30
 801190e:	d10a      	bne.n	8011926 <_strtol_l.isra.0+0x5e>
 8011910:	f89e 4000 	ldrb.w	r4, [lr]
 8011914:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011918:	2c58      	cmp	r4, #88	; 0x58
 801191a:	d14d      	bne.n	80119b8 <_strtol_l.isra.0+0xf0>
 801191c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011920:	2310      	movs	r3, #16
 8011922:	f10e 0e02 	add.w	lr, lr, #2
 8011926:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801192a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801192e:	2600      	movs	r6, #0
 8011930:	fbbc f9f3 	udiv	r9, ip, r3
 8011934:	4635      	mov	r5, r6
 8011936:	fb03 ca19 	mls	sl, r3, r9, ip
 801193a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801193e:	2f09      	cmp	r7, #9
 8011940:	d818      	bhi.n	8011974 <_strtol_l.isra.0+0xac>
 8011942:	463c      	mov	r4, r7
 8011944:	42a3      	cmp	r3, r4
 8011946:	dd24      	ble.n	8011992 <_strtol_l.isra.0+0xca>
 8011948:	2e00      	cmp	r6, #0
 801194a:	db1f      	blt.n	801198c <_strtol_l.isra.0+0xc4>
 801194c:	45a9      	cmp	r9, r5
 801194e:	d31d      	bcc.n	801198c <_strtol_l.isra.0+0xc4>
 8011950:	d101      	bne.n	8011956 <_strtol_l.isra.0+0x8e>
 8011952:	45a2      	cmp	sl, r4
 8011954:	db1a      	blt.n	801198c <_strtol_l.isra.0+0xc4>
 8011956:	fb05 4503 	mla	r5, r5, r3, r4
 801195a:	2601      	movs	r6, #1
 801195c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011960:	e7eb      	b.n	801193a <_strtol_l.isra.0+0x72>
 8011962:	2c2b      	cmp	r4, #43	; 0x2b
 8011964:	bf08      	it	eq
 8011966:	f89e 4000 	ldrbeq.w	r4, [lr]
 801196a:	46a8      	mov	r8, r5
 801196c:	bf08      	it	eq
 801196e:	f106 0e02 	addeq.w	lr, r6, #2
 8011972:	e7c7      	b.n	8011904 <_strtol_l.isra.0+0x3c>
 8011974:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011978:	2f19      	cmp	r7, #25
 801197a:	d801      	bhi.n	8011980 <_strtol_l.isra.0+0xb8>
 801197c:	3c37      	subs	r4, #55	; 0x37
 801197e:	e7e1      	b.n	8011944 <_strtol_l.isra.0+0x7c>
 8011980:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011984:	2f19      	cmp	r7, #25
 8011986:	d804      	bhi.n	8011992 <_strtol_l.isra.0+0xca>
 8011988:	3c57      	subs	r4, #87	; 0x57
 801198a:	e7db      	b.n	8011944 <_strtol_l.isra.0+0x7c>
 801198c:	f04f 36ff 	mov.w	r6, #4294967295
 8011990:	e7e4      	b.n	801195c <_strtol_l.isra.0+0x94>
 8011992:	2e00      	cmp	r6, #0
 8011994:	da05      	bge.n	80119a2 <_strtol_l.isra.0+0xda>
 8011996:	2322      	movs	r3, #34	; 0x22
 8011998:	6003      	str	r3, [r0, #0]
 801199a:	4665      	mov	r5, ip
 801199c:	b942      	cbnz	r2, 80119b0 <_strtol_l.isra.0+0xe8>
 801199e:	4628      	mov	r0, r5
 80119a0:	e79d      	b.n	80118de <_strtol_l.isra.0+0x16>
 80119a2:	f1b8 0f00 	cmp.w	r8, #0
 80119a6:	d000      	beq.n	80119aa <_strtol_l.isra.0+0xe2>
 80119a8:	426d      	negs	r5, r5
 80119aa:	2a00      	cmp	r2, #0
 80119ac:	d0f7      	beq.n	801199e <_strtol_l.isra.0+0xd6>
 80119ae:	b10e      	cbz	r6, 80119b4 <_strtol_l.isra.0+0xec>
 80119b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80119b4:	6011      	str	r1, [r2, #0]
 80119b6:	e7f2      	b.n	801199e <_strtol_l.isra.0+0xd6>
 80119b8:	2430      	movs	r4, #48	; 0x30
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1b3      	bne.n	8011926 <_strtol_l.isra.0+0x5e>
 80119be:	2308      	movs	r3, #8
 80119c0:	e7b1      	b.n	8011926 <_strtol_l.isra.0+0x5e>
 80119c2:	2c30      	cmp	r4, #48	; 0x30
 80119c4:	d0a4      	beq.n	8011910 <_strtol_l.isra.0+0x48>
 80119c6:	230a      	movs	r3, #10
 80119c8:	e7ad      	b.n	8011926 <_strtol_l.isra.0+0x5e>
 80119ca:	bf00      	nop
 80119cc:	08012295 	.word	0x08012295

080119d0 <strtol>:
 80119d0:	4613      	mov	r3, r2
 80119d2:	460a      	mov	r2, r1
 80119d4:	4601      	mov	r1, r0
 80119d6:	4802      	ldr	r0, [pc, #8]	; (80119e0 <strtol+0x10>)
 80119d8:	6800      	ldr	r0, [r0, #0]
 80119da:	f7ff bf75 	b.w	80118c8 <_strtol_l.isra.0>
 80119de:	bf00      	nop
 80119e0:	24000018 	.word	0x24000018

080119e4 <__malloc_lock>:
 80119e4:	4801      	ldr	r0, [pc, #4]	; (80119ec <__malloc_lock+0x8>)
 80119e6:	f7ff be51 	b.w	801168c <__retarget_lock_acquire_recursive>
 80119ea:	bf00      	nop
 80119ec:	24027c8c 	.word	0x24027c8c

080119f0 <__malloc_unlock>:
 80119f0:	4801      	ldr	r0, [pc, #4]	; (80119f8 <__malloc_unlock+0x8>)
 80119f2:	f7ff be4c 	b.w	801168e <__retarget_lock_release_recursive>
 80119f6:	bf00      	nop
 80119f8:	24027c8c 	.word	0x24027c8c

080119fc <_free_r>:
 80119fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119fe:	2900      	cmp	r1, #0
 8011a00:	d048      	beq.n	8011a94 <_free_r+0x98>
 8011a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a06:	9001      	str	r0, [sp, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8011a0e:	bfb8      	it	lt
 8011a10:	18e4      	addlt	r4, r4, r3
 8011a12:	f7ff ffe7 	bl	80119e4 <__malloc_lock>
 8011a16:	4a20      	ldr	r2, [pc, #128]	; (8011a98 <_free_r+0x9c>)
 8011a18:	9801      	ldr	r0, [sp, #4]
 8011a1a:	6813      	ldr	r3, [r2, #0]
 8011a1c:	4615      	mov	r5, r2
 8011a1e:	b933      	cbnz	r3, 8011a2e <_free_r+0x32>
 8011a20:	6063      	str	r3, [r4, #4]
 8011a22:	6014      	str	r4, [r2, #0]
 8011a24:	b003      	add	sp, #12
 8011a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a2a:	f7ff bfe1 	b.w	80119f0 <__malloc_unlock>
 8011a2e:	42a3      	cmp	r3, r4
 8011a30:	d90b      	bls.n	8011a4a <_free_r+0x4e>
 8011a32:	6821      	ldr	r1, [r4, #0]
 8011a34:	1862      	adds	r2, r4, r1
 8011a36:	4293      	cmp	r3, r2
 8011a38:	bf04      	itt	eq
 8011a3a:	681a      	ldreq	r2, [r3, #0]
 8011a3c:	685b      	ldreq	r3, [r3, #4]
 8011a3e:	6063      	str	r3, [r4, #4]
 8011a40:	bf04      	itt	eq
 8011a42:	1852      	addeq	r2, r2, r1
 8011a44:	6022      	streq	r2, [r4, #0]
 8011a46:	602c      	str	r4, [r5, #0]
 8011a48:	e7ec      	b.n	8011a24 <_free_r+0x28>
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	b10b      	cbz	r3, 8011a54 <_free_r+0x58>
 8011a50:	42a3      	cmp	r3, r4
 8011a52:	d9fa      	bls.n	8011a4a <_free_r+0x4e>
 8011a54:	6811      	ldr	r1, [r2, #0]
 8011a56:	1855      	adds	r5, r2, r1
 8011a58:	42a5      	cmp	r5, r4
 8011a5a:	d10b      	bne.n	8011a74 <_free_r+0x78>
 8011a5c:	6824      	ldr	r4, [r4, #0]
 8011a5e:	4421      	add	r1, r4
 8011a60:	1854      	adds	r4, r2, r1
 8011a62:	42a3      	cmp	r3, r4
 8011a64:	6011      	str	r1, [r2, #0]
 8011a66:	d1dd      	bne.n	8011a24 <_free_r+0x28>
 8011a68:	681c      	ldr	r4, [r3, #0]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	6053      	str	r3, [r2, #4]
 8011a6e:	4421      	add	r1, r4
 8011a70:	6011      	str	r1, [r2, #0]
 8011a72:	e7d7      	b.n	8011a24 <_free_r+0x28>
 8011a74:	d902      	bls.n	8011a7c <_free_r+0x80>
 8011a76:	230c      	movs	r3, #12
 8011a78:	6003      	str	r3, [r0, #0]
 8011a7a:	e7d3      	b.n	8011a24 <_free_r+0x28>
 8011a7c:	6825      	ldr	r5, [r4, #0]
 8011a7e:	1961      	adds	r1, r4, r5
 8011a80:	428b      	cmp	r3, r1
 8011a82:	bf04      	itt	eq
 8011a84:	6819      	ldreq	r1, [r3, #0]
 8011a86:	685b      	ldreq	r3, [r3, #4]
 8011a88:	6063      	str	r3, [r4, #4]
 8011a8a:	bf04      	itt	eq
 8011a8c:	1949      	addeq	r1, r1, r5
 8011a8e:	6021      	streq	r1, [r4, #0]
 8011a90:	6054      	str	r4, [r2, #4]
 8011a92:	e7c7      	b.n	8011a24 <_free_r+0x28>
 8011a94:	b003      	add	sp, #12
 8011a96:	bd30      	pop	{r4, r5, pc}
 8011a98:	24027360 	.word	0x24027360

08011a9c <__ssputs_r>:
 8011a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa0:	688e      	ldr	r6, [r1, #8]
 8011aa2:	429e      	cmp	r6, r3
 8011aa4:	4682      	mov	sl, r0
 8011aa6:	460c      	mov	r4, r1
 8011aa8:	4690      	mov	r8, r2
 8011aaa:	461f      	mov	r7, r3
 8011aac:	d838      	bhi.n	8011b20 <__ssputs_r+0x84>
 8011aae:	898a      	ldrh	r2, [r1, #12]
 8011ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ab4:	d032      	beq.n	8011b1c <__ssputs_r+0x80>
 8011ab6:	6825      	ldr	r5, [r4, #0]
 8011ab8:	6909      	ldr	r1, [r1, #16]
 8011aba:	eba5 0901 	sub.w	r9, r5, r1
 8011abe:	6965      	ldr	r5, [r4, #20]
 8011ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ac8:	3301      	adds	r3, #1
 8011aca:	444b      	add	r3, r9
 8011acc:	106d      	asrs	r5, r5, #1
 8011ace:	429d      	cmp	r5, r3
 8011ad0:	bf38      	it	cc
 8011ad2:	461d      	movcc	r5, r3
 8011ad4:	0553      	lsls	r3, r2, #21
 8011ad6:	d531      	bpl.n	8011b3c <__ssputs_r+0xa0>
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f7ff fdef 	bl	80116bc <_malloc_r>
 8011ade:	4606      	mov	r6, r0
 8011ae0:	b950      	cbnz	r0, 8011af8 <__ssputs_r+0x5c>
 8011ae2:	230c      	movs	r3, #12
 8011ae4:	f8ca 3000 	str.w	r3, [sl]
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	f04f 30ff 	mov.w	r0, #4294967295
 8011af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011af8:	6921      	ldr	r1, [r4, #16]
 8011afa:	464a      	mov	r2, r9
 8011afc:	f7ff fdc8 	bl	8011690 <memcpy>
 8011b00:	89a3      	ldrh	r3, [r4, #12]
 8011b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	6126      	str	r6, [r4, #16]
 8011b0e:	6165      	str	r5, [r4, #20]
 8011b10:	444e      	add	r6, r9
 8011b12:	eba5 0509 	sub.w	r5, r5, r9
 8011b16:	6026      	str	r6, [r4, #0]
 8011b18:	60a5      	str	r5, [r4, #8]
 8011b1a:	463e      	mov	r6, r7
 8011b1c:	42be      	cmp	r6, r7
 8011b1e:	d900      	bls.n	8011b22 <__ssputs_r+0x86>
 8011b20:	463e      	mov	r6, r7
 8011b22:	4632      	mov	r2, r6
 8011b24:	6820      	ldr	r0, [r4, #0]
 8011b26:	4641      	mov	r1, r8
 8011b28:	f000 faa8 	bl	801207c <memmove>
 8011b2c:	68a3      	ldr	r3, [r4, #8]
 8011b2e:	6822      	ldr	r2, [r4, #0]
 8011b30:	1b9b      	subs	r3, r3, r6
 8011b32:	4432      	add	r2, r6
 8011b34:	60a3      	str	r3, [r4, #8]
 8011b36:	6022      	str	r2, [r4, #0]
 8011b38:	2000      	movs	r0, #0
 8011b3a:	e7db      	b.n	8011af4 <__ssputs_r+0x58>
 8011b3c:	462a      	mov	r2, r5
 8011b3e:	f000 fab7 	bl	80120b0 <_realloc_r>
 8011b42:	4606      	mov	r6, r0
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d1e1      	bne.n	8011b0c <__ssputs_r+0x70>
 8011b48:	6921      	ldr	r1, [r4, #16]
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	f7ff ff56 	bl	80119fc <_free_r>
 8011b50:	e7c7      	b.n	8011ae2 <__ssputs_r+0x46>
	...

08011b54 <_svfiprintf_r>:
 8011b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b58:	4698      	mov	r8, r3
 8011b5a:	898b      	ldrh	r3, [r1, #12]
 8011b5c:	061b      	lsls	r3, r3, #24
 8011b5e:	b09d      	sub	sp, #116	; 0x74
 8011b60:	4607      	mov	r7, r0
 8011b62:	460d      	mov	r5, r1
 8011b64:	4614      	mov	r4, r2
 8011b66:	d50e      	bpl.n	8011b86 <_svfiprintf_r+0x32>
 8011b68:	690b      	ldr	r3, [r1, #16]
 8011b6a:	b963      	cbnz	r3, 8011b86 <_svfiprintf_r+0x32>
 8011b6c:	2140      	movs	r1, #64	; 0x40
 8011b6e:	f7ff fda5 	bl	80116bc <_malloc_r>
 8011b72:	6028      	str	r0, [r5, #0]
 8011b74:	6128      	str	r0, [r5, #16]
 8011b76:	b920      	cbnz	r0, 8011b82 <_svfiprintf_r+0x2e>
 8011b78:	230c      	movs	r3, #12
 8011b7a:	603b      	str	r3, [r7, #0]
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	e0d1      	b.n	8011d26 <_svfiprintf_r+0x1d2>
 8011b82:	2340      	movs	r3, #64	; 0x40
 8011b84:	616b      	str	r3, [r5, #20]
 8011b86:	2300      	movs	r3, #0
 8011b88:	9309      	str	r3, [sp, #36]	; 0x24
 8011b8a:	2320      	movs	r3, #32
 8011b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b94:	2330      	movs	r3, #48	; 0x30
 8011b96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d40 <_svfiprintf_r+0x1ec>
 8011b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b9e:	f04f 0901 	mov.w	r9, #1
 8011ba2:	4623      	mov	r3, r4
 8011ba4:	469a      	mov	sl, r3
 8011ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011baa:	b10a      	cbz	r2, 8011bb0 <_svfiprintf_r+0x5c>
 8011bac:	2a25      	cmp	r2, #37	; 0x25
 8011bae:	d1f9      	bne.n	8011ba4 <_svfiprintf_r+0x50>
 8011bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bb4:	d00b      	beq.n	8011bce <_svfiprintf_r+0x7a>
 8011bb6:	465b      	mov	r3, fp
 8011bb8:	4622      	mov	r2, r4
 8011bba:	4629      	mov	r1, r5
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	f7ff ff6d 	bl	8011a9c <__ssputs_r>
 8011bc2:	3001      	adds	r0, #1
 8011bc4:	f000 80aa 	beq.w	8011d1c <_svfiprintf_r+0x1c8>
 8011bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bca:	445a      	add	r2, fp
 8011bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8011bce:	f89a 3000 	ldrb.w	r3, [sl]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f000 80a2 	beq.w	8011d1c <_svfiprintf_r+0x1c8>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	f04f 32ff 	mov.w	r2, #4294967295
 8011bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011be2:	f10a 0a01 	add.w	sl, sl, #1
 8011be6:	9304      	str	r3, [sp, #16]
 8011be8:	9307      	str	r3, [sp, #28]
 8011bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bee:	931a      	str	r3, [sp, #104]	; 0x68
 8011bf0:	4654      	mov	r4, sl
 8011bf2:	2205      	movs	r2, #5
 8011bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf8:	4851      	ldr	r0, [pc, #324]	; (8011d40 <_svfiprintf_r+0x1ec>)
 8011bfa:	f7ee fb79 	bl	80002f0 <memchr>
 8011bfe:	9a04      	ldr	r2, [sp, #16]
 8011c00:	b9d8      	cbnz	r0, 8011c3a <_svfiprintf_r+0xe6>
 8011c02:	06d0      	lsls	r0, r2, #27
 8011c04:	bf44      	itt	mi
 8011c06:	2320      	movmi	r3, #32
 8011c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c0c:	0711      	lsls	r1, r2, #28
 8011c0e:	bf44      	itt	mi
 8011c10:	232b      	movmi	r3, #43	; 0x2b
 8011c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c16:	f89a 3000 	ldrb.w	r3, [sl]
 8011c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c1c:	d015      	beq.n	8011c4a <_svfiprintf_r+0xf6>
 8011c1e:	9a07      	ldr	r2, [sp, #28]
 8011c20:	4654      	mov	r4, sl
 8011c22:	2000      	movs	r0, #0
 8011c24:	f04f 0c0a 	mov.w	ip, #10
 8011c28:	4621      	mov	r1, r4
 8011c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c2e:	3b30      	subs	r3, #48	; 0x30
 8011c30:	2b09      	cmp	r3, #9
 8011c32:	d94e      	bls.n	8011cd2 <_svfiprintf_r+0x17e>
 8011c34:	b1b0      	cbz	r0, 8011c64 <_svfiprintf_r+0x110>
 8011c36:	9207      	str	r2, [sp, #28]
 8011c38:	e014      	b.n	8011c64 <_svfiprintf_r+0x110>
 8011c3a:	eba0 0308 	sub.w	r3, r0, r8
 8011c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c42:	4313      	orrs	r3, r2
 8011c44:	9304      	str	r3, [sp, #16]
 8011c46:	46a2      	mov	sl, r4
 8011c48:	e7d2      	b.n	8011bf0 <_svfiprintf_r+0x9c>
 8011c4a:	9b03      	ldr	r3, [sp, #12]
 8011c4c:	1d19      	adds	r1, r3, #4
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	9103      	str	r1, [sp, #12]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	bfbb      	ittet	lt
 8011c56:	425b      	neglt	r3, r3
 8011c58:	f042 0202 	orrlt.w	r2, r2, #2
 8011c5c:	9307      	strge	r3, [sp, #28]
 8011c5e:	9307      	strlt	r3, [sp, #28]
 8011c60:	bfb8      	it	lt
 8011c62:	9204      	strlt	r2, [sp, #16]
 8011c64:	7823      	ldrb	r3, [r4, #0]
 8011c66:	2b2e      	cmp	r3, #46	; 0x2e
 8011c68:	d10c      	bne.n	8011c84 <_svfiprintf_r+0x130>
 8011c6a:	7863      	ldrb	r3, [r4, #1]
 8011c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c6e:	d135      	bne.n	8011cdc <_svfiprintf_r+0x188>
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	1d1a      	adds	r2, r3, #4
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	9203      	str	r2, [sp, #12]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	bfb8      	it	lt
 8011c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c80:	3402      	adds	r4, #2
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d50 <_svfiprintf_r+0x1fc>
 8011c88:	7821      	ldrb	r1, [r4, #0]
 8011c8a:	2203      	movs	r2, #3
 8011c8c:	4650      	mov	r0, sl
 8011c8e:	f7ee fb2f 	bl	80002f0 <memchr>
 8011c92:	b140      	cbz	r0, 8011ca6 <_svfiprintf_r+0x152>
 8011c94:	2340      	movs	r3, #64	; 0x40
 8011c96:	eba0 000a 	sub.w	r0, r0, sl
 8011c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	4303      	orrs	r3, r0
 8011ca2:	3401      	adds	r4, #1
 8011ca4:	9304      	str	r3, [sp, #16]
 8011ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011caa:	4826      	ldr	r0, [pc, #152]	; (8011d44 <_svfiprintf_r+0x1f0>)
 8011cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cb0:	2206      	movs	r2, #6
 8011cb2:	f7ee fb1d 	bl	80002f0 <memchr>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d038      	beq.n	8011d2c <_svfiprintf_r+0x1d8>
 8011cba:	4b23      	ldr	r3, [pc, #140]	; (8011d48 <_svfiprintf_r+0x1f4>)
 8011cbc:	bb1b      	cbnz	r3, 8011d06 <_svfiprintf_r+0x1b2>
 8011cbe:	9b03      	ldr	r3, [sp, #12]
 8011cc0:	3307      	adds	r3, #7
 8011cc2:	f023 0307 	bic.w	r3, r3, #7
 8011cc6:	3308      	adds	r3, #8
 8011cc8:	9303      	str	r3, [sp, #12]
 8011cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ccc:	4433      	add	r3, r6
 8011cce:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd0:	e767      	b.n	8011ba2 <_svfiprintf_r+0x4e>
 8011cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cd6:	460c      	mov	r4, r1
 8011cd8:	2001      	movs	r0, #1
 8011cda:	e7a5      	b.n	8011c28 <_svfiprintf_r+0xd4>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	3401      	adds	r4, #1
 8011ce0:	9305      	str	r3, [sp, #20]
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	f04f 0c0a 	mov.w	ip, #10
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cee:	3a30      	subs	r2, #48	; 0x30
 8011cf0:	2a09      	cmp	r2, #9
 8011cf2:	d903      	bls.n	8011cfc <_svfiprintf_r+0x1a8>
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d0c5      	beq.n	8011c84 <_svfiprintf_r+0x130>
 8011cf8:	9105      	str	r1, [sp, #20]
 8011cfa:	e7c3      	b.n	8011c84 <_svfiprintf_r+0x130>
 8011cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d00:	4604      	mov	r4, r0
 8011d02:	2301      	movs	r3, #1
 8011d04:	e7f0      	b.n	8011ce8 <_svfiprintf_r+0x194>
 8011d06:	ab03      	add	r3, sp, #12
 8011d08:	9300      	str	r3, [sp, #0]
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	4b0f      	ldr	r3, [pc, #60]	; (8011d4c <_svfiprintf_r+0x1f8>)
 8011d0e:	a904      	add	r1, sp, #16
 8011d10:	4638      	mov	r0, r7
 8011d12:	f3af 8000 	nop.w
 8011d16:	1c42      	adds	r2, r0, #1
 8011d18:	4606      	mov	r6, r0
 8011d1a:	d1d6      	bne.n	8011cca <_svfiprintf_r+0x176>
 8011d1c:	89ab      	ldrh	r3, [r5, #12]
 8011d1e:	065b      	lsls	r3, r3, #25
 8011d20:	f53f af2c 	bmi.w	8011b7c <_svfiprintf_r+0x28>
 8011d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d26:	b01d      	add	sp, #116	; 0x74
 8011d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2c:	ab03      	add	r3, sp, #12
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	462a      	mov	r2, r5
 8011d32:	4b06      	ldr	r3, [pc, #24]	; (8011d4c <_svfiprintf_r+0x1f8>)
 8011d34:	a904      	add	r1, sp, #16
 8011d36:	4638      	mov	r0, r7
 8011d38:	f000 f87a 	bl	8011e30 <_printf_i>
 8011d3c:	e7eb      	b.n	8011d16 <_svfiprintf_r+0x1c2>
 8011d3e:	bf00      	nop
 8011d40:	08012395 	.word	0x08012395
 8011d44:	0801239f 	.word	0x0801239f
 8011d48:	00000000 	.word	0x00000000
 8011d4c:	08011a9d 	.word	0x08011a9d
 8011d50:	0801239b 	.word	0x0801239b

08011d54 <_printf_common>:
 8011d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d58:	4616      	mov	r6, r2
 8011d5a:	4699      	mov	r9, r3
 8011d5c:	688a      	ldr	r2, [r1, #8]
 8011d5e:	690b      	ldr	r3, [r1, #16]
 8011d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d64:	4293      	cmp	r3, r2
 8011d66:	bfb8      	it	lt
 8011d68:	4613      	movlt	r3, r2
 8011d6a:	6033      	str	r3, [r6, #0]
 8011d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d70:	4607      	mov	r7, r0
 8011d72:	460c      	mov	r4, r1
 8011d74:	b10a      	cbz	r2, 8011d7a <_printf_common+0x26>
 8011d76:	3301      	adds	r3, #1
 8011d78:	6033      	str	r3, [r6, #0]
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	0699      	lsls	r1, r3, #26
 8011d7e:	bf42      	ittt	mi
 8011d80:	6833      	ldrmi	r3, [r6, #0]
 8011d82:	3302      	addmi	r3, #2
 8011d84:	6033      	strmi	r3, [r6, #0]
 8011d86:	6825      	ldr	r5, [r4, #0]
 8011d88:	f015 0506 	ands.w	r5, r5, #6
 8011d8c:	d106      	bne.n	8011d9c <_printf_common+0x48>
 8011d8e:	f104 0a19 	add.w	sl, r4, #25
 8011d92:	68e3      	ldr	r3, [r4, #12]
 8011d94:	6832      	ldr	r2, [r6, #0]
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	42ab      	cmp	r3, r5
 8011d9a:	dc26      	bgt.n	8011dea <_printf_common+0x96>
 8011d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011da0:	1e13      	subs	r3, r2, #0
 8011da2:	6822      	ldr	r2, [r4, #0]
 8011da4:	bf18      	it	ne
 8011da6:	2301      	movne	r3, #1
 8011da8:	0692      	lsls	r2, r2, #26
 8011daa:	d42b      	bmi.n	8011e04 <_printf_common+0xb0>
 8011dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011db0:	4649      	mov	r1, r9
 8011db2:	4638      	mov	r0, r7
 8011db4:	47c0      	blx	r8
 8011db6:	3001      	adds	r0, #1
 8011db8:	d01e      	beq.n	8011df8 <_printf_common+0xa4>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	68e5      	ldr	r5, [r4, #12]
 8011dbe:	6832      	ldr	r2, [r6, #0]
 8011dc0:	f003 0306 	and.w	r3, r3, #6
 8011dc4:	2b04      	cmp	r3, #4
 8011dc6:	bf08      	it	eq
 8011dc8:	1aad      	subeq	r5, r5, r2
 8011dca:	68a3      	ldr	r3, [r4, #8]
 8011dcc:	6922      	ldr	r2, [r4, #16]
 8011dce:	bf0c      	ite	eq
 8011dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dd4:	2500      	movne	r5, #0
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	bfc4      	itt	gt
 8011dda:	1a9b      	subgt	r3, r3, r2
 8011ddc:	18ed      	addgt	r5, r5, r3
 8011dde:	2600      	movs	r6, #0
 8011de0:	341a      	adds	r4, #26
 8011de2:	42b5      	cmp	r5, r6
 8011de4:	d11a      	bne.n	8011e1c <_printf_common+0xc8>
 8011de6:	2000      	movs	r0, #0
 8011de8:	e008      	b.n	8011dfc <_printf_common+0xa8>
 8011dea:	2301      	movs	r3, #1
 8011dec:	4652      	mov	r2, sl
 8011dee:	4649      	mov	r1, r9
 8011df0:	4638      	mov	r0, r7
 8011df2:	47c0      	blx	r8
 8011df4:	3001      	adds	r0, #1
 8011df6:	d103      	bne.n	8011e00 <_printf_common+0xac>
 8011df8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	3501      	adds	r5, #1
 8011e02:	e7c6      	b.n	8011d92 <_printf_common+0x3e>
 8011e04:	18e1      	adds	r1, r4, r3
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	2030      	movs	r0, #48	; 0x30
 8011e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e0e:	4422      	add	r2, r4
 8011e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e18:	3302      	adds	r3, #2
 8011e1a:	e7c7      	b.n	8011dac <_printf_common+0x58>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	4622      	mov	r2, r4
 8011e20:	4649      	mov	r1, r9
 8011e22:	4638      	mov	r0, r7
 8011e24:	47c0      	blx	r8
 8011e26:	3001      	adds	r0, #1
 8011e28:	d0e6      	beq.n	8011df8 <_printf_common+0xa4>
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	e7d9      	b.n	8011de2 <_printf_common+0x8e>
	...

08011e30 <_printf_i>:
 8011e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	460c      	mov	r4, r1
 8011e36:	4691      	mov	r9, r2
 8011e38:	7e27      	ldrb	r7, [r4, #24]
 8011e3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e3c:	2f78      	cmp	r7, #120	; 0x78
 8011e3e:	4680      	mov	r8, r0
 8011e40:	469a      	mov	sl, r3
 8011e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e46:	d807      	bhi.n	8011e58 <_printf_i+0x28>
 8011e48:	2f62      	cmp	r7, #98	; 0x62
 8011e4a:	d80a      	bhi.n	8011e62 <_printf_i+0x32>
 8011e4c:	2f00      	cmp	r7, #0
 8011e4e:	f000 80d8 	beq.w	8012002 <_printf_i+0x1d2>
 8011e52:	2f58      	cmp	r7, #88	; 0x58
 8011e54:	f000 80a3 	beq.w	8011f9e <_printf_i+0x16e>
 8011e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011e60:	e03a      	b.n	8011ed8 <_printf_i+0xa8>
 8011e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011e66:	2b15      	cmp	r3, #21
 8011e68:	d8f6      	bhi.n	8011e58 <_printf_i+0x28>
 8011e6a:	a001      	add	r0, pc, #4	; (adr r0, 8011e70 <_printf_i+0x40>)
 8011e6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011e70:	08011ec9 	.word	0x08011ec9
 8011e74:	08011edd 	.word	0x08011edd
 8011e78:	08011e59 	.word	0x08011e59
 8011e7c:	08011e59 	.word	0x08011e59
 8011e80:	08011e59 	.word	0x08011e59
 8011e84:	08011e59 	.word	0x08011e59
 8011e88:	08011edd 	.word	0x08011edd
 8011e8c:	08011e59 	.word	0x08011e59
 8011e90:	08011e59 	.word	0x08011e59
 8011e94:	08011e59 	.word	0x08011e59
 8011e98:	08011e59 	.word	0x08011e59
 8011e9c:	08011fe9 	.word	0x08011fe9
 8011ea0:	08011f0d 	.word	0x08011f0d
 8011ea4:	08011fcb 	.word	0x08011fcb
 8011ea8:	08011e59 	.word	0x08011e59
 8011eac:	08011e59 	.word	0x08011e59
 8011eb0:	0801200b 	.word	0x0801200b
 8011eb4:	08011e59 	.word	0x08011e59
 8011eb8:	08011f0d 	.word	0x08011f0d
 8011ebc:	08011e59 	.word	0x08011e59
 8011ec0:	08011e59 	.word	0x08011e59
 8011ec4:	08011fd3 	.word	0x08011fd3
 8011ec8:	680b      	ldr	r3, [r1, #0]
 8011eca:	1d1a      	adds	r2, r3, #4
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	600a      	str	r2, [r1, #0]
 8011ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e0a3      	b.n	8012024 <_printf_i+0x1f4>
 8011edc:	6825      	ldr	r5, [r4, #0]
 8011ede:	6808      	ldr	r0, [r1, #0]
 8011ee0:	062e      	lsls	r6, r5, #24
 8011ee2:	f100 0304 	add.w	r3, r0, #4
 8011ee6:	d50a      	bpl.n	8011efe <_printf_i+0xce>
 8011ee8:	6805      	ldr	r5, [r0, #0]
 8011eea:	600b      	str	r3, [r1, #0]
 8011eec:	2d00      	cmp	r5, #0
 8011eee:	da03      	bge.n	8011ef8 <_printf_i+0xc8>
 8011ef0:	232d      	movs	r3, #45	; 0x2d
 8011ef2:	426d      	negs	r5, r5
 8011ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ef8:	485e      	ldr	r0, [pc, #376]	; (8012074 <_printf_i+0x244>)
 8011efa:	230a      	movs	r3, #10
 8011efc:	e019      	b.n	8011f32 <_printf_i+0x102>
 8011efe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011f02:	6805      	ldr	r5, [r0, #0]
 8011f04:	600b      	str	r3, [r1, #0]
 8011f06:	bf18      	it	ne
 8011f08:	b22d      	sxthne	r5, r5
 8011f0a:	e7ef      	b.n	8011eec <_printf_i+0xbc>
 8011f0c:	680b      	ldr	r3, [r1, #0]
 8011f0e:	6825      	ldr	r5, [r4, #0]
 8011f10:	1d18      	adds	r0, r3, #4
 8011f12:	6008      	str	r0, [r1, #0]
 8011f14:	0628      	lsls	r0, r5, #24
 8011f16:	d501      	bpl.n	8011f1c <_printf_i+0xec>
 8011f18:	681d      	ldr	r5, [r3, #0]
 8011f1a:	e002      	b.n	8011f22 <_printf_i+0xf2>
 8011f1c:	0669      	lsls	r1, r5, #25
 8011f1e:	d5fb      	bpl.n	8011f18 <_printf_i+0xe8>
 8011f20:	881d      	ldrh	r5, [r3, #0]
 8011f22:	4854      	ldr	r0, [pc, #336]	; (8012074 <_printf_i+0x244>)
 8011f24:	2f6f      	cmp	r7, #111	; 0x6f
 8011f26:	bf0c      	ite	eq
 8011f28:	2308      	moveq	r3, #8
 8011f2a:	230a      	movne	r3, #10
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f32:	6866      	ldr	r6, [r4, #4]
 8011f34:	60a6      	str	r6, [r4, #8]
 8011f36:	2e00      	cmp	r6, #0
 8011f38:	bfa2      	ittt	ge
 8011f3a:	6821      	ldrge	r1, [r4, #0]
 8011f3c:	f021 0104 	bicge.w	r1, r1, #4
 8011f40:	6021      	strge	r1, [r4, #0]
 8011f42:	b90d      	cbnz	r5, 8011f48 <_printf_i+0x118>
 8011f44:	2e00      	cmp	r6, #0
 8011f46:	d04d      	beq.n	8011fe4 <_printf_i+0x1b4>
 8011f48:	4616      	mov	r6, r2
 8011f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8011f52:	5dc7      	ldrb	r7, [r0, r7]
 8011f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f58:	462f      	mov	r7, r5
 8011f5a:	42bb      	cmp	r3, r7
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	d9f4      	bls.n	8011f4a <_printf_i+0x11a>
 8011f60:	2b08      	cmp	r3, #8
 8011f62:	d10b      	bne.n	8011f7c <_printf_i+0x14c>
 8011f64:	6823      	ldr	r3, [r4, #0]
 8011f66:	07df      	lsls	r7, r3, #31
 8011f68:	d508      	bpl.n	8011f7c <_printf_i+0x14c>
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	6861      	ldr	r1, [r4, #4]
 8011f6e:	4299      	cmp	r1, r3
 8011f70:	bfde      	ittt	le
 8011f72:	2330      	movle	r3, #48	; 0x30
 8011f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f7c:	1b92      	subs	r2, r2, r6
 8011f7e:	6122      	str	r2, [r4, #16]
 8011f80:	f8cd a000 	str.w	sl, [sp]
 8011f84:	464b      	mov	r3, r9
 8011f86:	aa03      	add	r2, sp, #12
 8011f88:	4621      	mov	r1, r4
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	f7ff fee2 	bl	8011d54 <_printf_common>
 8011f90:	3001      	adds	r0, #1
 8011f92:	d14c      	bne.n	801202e <_printf_i+0x1fe>
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295
 8011f98:	b004      	add	sp, #16
 8011f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f9e:	4835      	ldr	r0, [pc, #212]	; (8012074 <_printf_i+0x244>)
 8011fa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011fa4:	6823      	ldr	r3, [r4, #0]
 8011fa6:	680e      	ldr	r6, [r1, #0]
 8011fa8:	061f      	lsls	r7, r3, #24
 8011faa:	f856 5b04 	ldr.w	r5, [r6], #4
 8011fae:	600e      	str	r6, [r1, #0]
 8011fb0:	d514      	bpl.n	8011fdc <_printf_i+0x1ac>
 8011fb2:	07d9      	lsls	r1, r3, #31
 8011fb4:	bf44      	itt	mi
 8011fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8011fba:	6023      	strmi	r3, [r4, #0]
 8011fbc:	b91d      	cbnz	r5, 8011fc6 <_printf_i+0x196>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	f023 0320 	bic.w	r3, r3, #32
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	2310      	movs	r3, #16
 8011fc8:	e7b0      	b.n	8011f2c <_printf_i+0xfc>
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	f043 0320 	orr.w	r3, r3, #32
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	2378      	movs	r3, #120	; 0x78
 8011fd4:	4828      	ldr	r0, [pc, #160]	; (8012078 <_printf_i+0x248>)
 8011fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fda:	e7e3      	b.n	8011fa4 <_printf_i+0x174>
 8011fdc:	065e      	lsls	r6, r3, #25
 8011fde:	bf48      	it	mi
 8011fe0:	b2ad      	uxthmi	r5, r5
 8011fe2:	e7e6      	b.n	8011fb2 <_printf_i+0x182>
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	e7bb      	b.n	8011f60 <_printf_i+0x130>
 8011fe8:	680b      	ldr	r3, [r1, #0]
 8011fea:	6826      	ldr	r6, [r4, #0]
 8011fec:	6960      	ldr	r0, [r4, #20]
 8011fee:	1d1d      	adds	r5, r3, #4
 8011ff0:	600d      	str	r5, [r1, #0]
 8011ff2:	0635      	lsls	r5, r6, #24
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	d501      	bpl.n	8011ffc <_printf_i+0x1cc>
 8011ff8:	6018      	str	r0, [r3, #0]
 8011ffa:	e002      	b.n	8012002 <_printf_i+0x1d2>
 8011ffc:	0671      	lsls	r1, r6, #25
 8011ffe:	d5fb      	bpl.n	8011ff8 <_printf_i+0x1c8>
 8012000:	8018      	strh	r0, [r3, #0]
 8012002:	2300      	movs	r3, #0
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	4616      	mov	r6, r2
 8012008:	e7ba      	b.n	8011f80 <_printf_i+0x150>
 801200a:	680b      	ldr	r3, [r1, #0]
 801200c:	1d1a      	adds	r2, r3, #4
 801200e:	600a      	str	r2, [r1, #0]
 8012010:	681e      	ldr	r6, [r3, #0]
 8012012:	6862      	ldr	r2, [r4, #4]
 8012014:	2100      	movs	r1, #0
 8012016:	4630      	mov	r0, r6
 8012018:	f7ee f96a 	bl	80002f0 <memchr>
 801201c:	b108      	cbz	r0, 8012022 <_printf_i+0x1f2>
 801201e:	1b80      	subs	r0, r0, r6
 8012020:	6060      	str	r0, [r4, #4]
 8012022:	6863      	ldr	r3, [r4, #4]
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	2300      	movs	r3, #0
 8012028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801202c:	e7a8      	b.n	8011f80 <_printf_i+0x150>
 801202e:	6923      	ldr	r3, [r4, #16]
 8012030:	4632      	mov	r2, r6
 8012032:	4649      	mov	r1, r9
 8012034:	4640      	mov	r0, r8
 8012036:	47d0      	blx	sl
 8012038:	3001      	adds	r0, #1
 801203a:	d0ab      	beq.n	8011f94 <_printf_i+0x164>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	079b      	lsls	r3, r3, #30
 8012040:	d413      	bmi.n	801206a <_printf_i+0x23a>
 8012042:	68e0      	ldr	r0, [r4, #12]
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	4298      	cmp	r0, r3
 8012048:	bfb8      	it	lt
 801204a:	4618      	movlt	r0, r3
 801204c:	e7a4      	b.n	8011f98 <_printf_i+0x168>
 801204e:	2301      	movs	r3, #1
 8012050:	4632      	mov	r2, r6
 8012052:	4649      	mov	r1, r9
 8012054:	4640      	mov	r0, r8
 8012056:	47d0      	blx	sl
 8012058:	3001      	adds	r0, #1
 801205a:	d09b      	beq.n	8011f94 <_printf_i+0x164>
 801205c:	3501      	adds	r5, #1
 801205e:	68e3      	ldr	r3, [r4, #12]
 8012060:	9903      	ldr	r1, [sp, #12]
 8012062:	1a5b      	subs	r3, r3, r1
 8012064:	42ab      	cmp	r3, r5
 8012066:	dcf2      	bgt.n	801204e <_printf_i+0x21e>
 8012068:	e7eb      	b.n	8012042 <_printf_i+0x212>
 801206a:	2500      	movs	r5, #0
 801206c:	f104 0619 	add.w	r6, r4, #25
 8012070:	e7f5      	b.n	801205e <_printf_i+0x22e>
 8012072:	bf00      	nop
 8012074:	080123a6 	.word	0x080123a6
 8012078:	080123b7 	.word	0x080123b7

0801207c <memmove>:
 801207c:	4288      	cmp	r0, r1
 801207e:	b510      	push	{r4, lr}
 8012080:	eb01 0402 	add.w	r4, r1, r2
 8012084:	d902      	bls.n	801208c <memmove+0x10>
 8012086:	4284      	cmp	r4, r0
 8012088:	4623      	mov	r3, r4
 801208a:	d807      	bhi.n	801209c <memmove+0x20>
 801208c:	1e43      	subs	r3, r0, #1
 801208e:	42a1      	cmp	r1, r4
 8012090:	d008      	beq.n	80120a4 <memmove+0x28>
 8012092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012096:	f803 2f01 	strb.w	r2, [r3, #1]!
 801209a:	e7f8      	b.n	801208e <memmove+0x12>
 801209c:	4402      	add	r2, r0
 801209e:	4601      	mov	r1, r0
 80120a0:	428a      	cmp	r2, r1
 80120a2:	d100      	bne.n	80120a6 <memmove+0x2a>
 80120a4:	bd10      	pop	{r4, pc}
 80120a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120ae:	e7f7      	b.n	80120a0 <memmove+0x24>

080120b0 <_realloc_r>:
 80120b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b2:	4607      	mov	r7, r0
 80120b4:	4614      	mov	r4, r2
 80120b6:	460e      	mov	r6, r1
 80120b8:	b921      	cbnz	r1, 80120c4 <_realloc_r+0x14>
 80120ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120be:	4611      	mov	r1, r2
 80120c0:	f7ff bafc 	b.w	80116bc <_malloc_r>
 80120c4:	b922      	cbnz	r2, 80120d0 <_realloc_r+0x20>
 80120c6:	f7ff fc99 	bl	80119fc <_free_r>
 80120ca:	4625      	mov	r5, r4
 80120cc:	4628      	mov	r0, r5
 80120ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d0:	f000 f814 	bl	80120fc <_malloc_usable_size_r>
 80120d4:	42a0      	cmp	r0, r4
 80120d6:	d20f      	bcs.n	80120f8 <_realloc_r+0x48>
 80120d8:	4621      	mov	r1, r4
 80120da:	4638      	mov	r0, r7
 80120dc:	f7ff faee 	bl	80116bc <_malloc_r>
 80120e0:	4605      	mov	r5, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d0f2      	beq.n	80120cc <_realloc_r+0x1c>
 80120e6:	4631      	mov	r1, r6
 80120e8:	4622      	mov	r2, r4
 80120ea:	f7ff fad1 	bl	8011690 <memcpy>
 80120ee:	4631      	mov	r1, r6
 80120f0:	4638      	mov	r0, r7
 80120f2:	f7ff fc83 	bl	80119fc <_free_r>
 80120f6:	e7e9      	b.n	80120cc <_realloc_r+0x1c>
 80120f8:	4635      	mov	r5, r6
 80120fa:	e7e7      	b.n	80120cc <_realloc_r+0x1c>

080120fc <_malloc_usable_size_r>:
 80120fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012100:	1f18      	subs	r0, r3, #4
 8012102:	2b00      	cmp	r3, #0
 8012104:	bfbc      	itt	lt
 8012106:	580b      	ldrlt	r3, [r1, r0]
 8012108:	18c0      	addlt	r0, r0, r3
 801210a:	4770      	bx	lr

0801210c <_init>:
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	bf00      	nop
 8012110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012112:	bc08      	pop	{r3}
 8012114:	469e      	mov	lr, r3
 8012116:	4770      	bx	lr

08012118 <_fini>:
 8012118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801211a:	bf00      	nop
 801211c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801211e:	bc08      	pop	{r3}
 8012120:	469e      	mov	lr, r3
 8012122:	4770      	bx	lr


DCMB_emulator_using_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f44  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080121e4  080121e4  000221e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012488  08012488  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08012488  08012488  00022488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012490  08012490  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012490  08012490  00022490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08012498  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027d0c  2400007c  08012514  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24027d88  08012514  00037d88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b6a8  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c41  00000000  00000000  0006b752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  00071398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  00073220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000417b3  00000000  00000000  00074ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002911a  00000000  00000000  000b6683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ac3d9  00000000  00000000  000df79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0028bb76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000871c  00000000  00000000  0028bbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080121cc 	.word	0x080121cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	080121cc 	.word	0x080121cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <B_tcpStart>:


B_tcpHandle_t* B_tcpStart(B_uartHandle_t** transmitBuarts, 
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	71fb      	strb	r3, [r7, #7]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 8000698:	201c      	movs	r0, #28
 800069a:	f010 fe3d 	bl	8011318 <pvPortMalloc>
 800069e:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	711a      	strb	r2, [r3, #4]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f010 fe34 	bl	8011318 <pvPortMalloc>
 80006b0:	4602      	mov	r2, r0
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e00d      	b.n	80006d8 <B_tcpStart+0x50>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	441a      	add	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	440b      	add	r3, r1
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbed      	blt.n	80006bc <B_tcpStart+0x34>
    }
    btcp->rxBuart = rxBuart;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	609a      	str	r2, [r3, #8]
    btcp->tcpSeqNum = 0;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2200      	movs	r2, #0
 80006ea:	731a      	strb	r2, [r3, #12]
    btcp->crc = crc;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	619a      	str	r2, [r3, #24]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 80006f2:	2200      	movs	r2, #0
 80006f4:	210c      	movs	r1, #12
 80006f6:	2040      	movs	r0, #64	; 0x40
 80006f8:	f00e faa8 	bl	800ec4c <xQueueGenericCreate>
 80006fc:	4602      	mov	r2, r0
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	611a      	str	r2, [r3, #16]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	3314      	adds	r3, #20
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2304      	movs	r3, #4
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000712:	4904      	ldr	r1, [pc, #16]	; (8000724 <B_tcpStart+0x9c>)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <B_tcpStart+0xa0>)
 8000716:	f00f f887 	bl	800f828 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 800071a:	693b      	ldr	r3, [r7, #16]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	080121e4 	.word	0x080121e4
 8000728:	080008e7 	.word	0x080008e7

0800072c <B_tcpSend>:

void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	71fb      	strb	r3, [r7, #7]
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8));
 800073a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800073e:	f010 fdeb 	bl	8011318 <pvPortMalloc>
 8000742:	6178      	str	r0, [r7, #20]
    buf[0] = BSSR_SERIAL_START;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	22a5      	movs	r2, #165	; 0xa5
 8000748:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	701a      	strb	r2, [r3, #0]
    buf[2] = TCP_ID;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3302      	adds	r3, #2
 8000756:	2204      	movs	r2, #4
 8000758:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3303      	adds	r3, #3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	7b12      	ldrb	r2, [r2, #12]
 8000762:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3304      	adds	r3, #4
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	4618      	mov	r0, r3
 800076e:	f010 ffef 	bl	8011750 <memcpy>
    //uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, buf, length+4);
    //GEN11 change:
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6998      	ldr	r0, [r3, #24]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3304      	adds	r3, #4
 800077a:	461a      	mov	r2, r3
 800077c:	6979      	ldr	r1, [r7, #20]
 800077e:	f003 ffd7 	bl	8004730 <HAL_CRC_Calculate>
 8000782:	4603      	mov	r3, r0
 8000784:	43db      	mvns	r3, r3
 8000786:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	84fb      	strh	r3, [r7, #38]	; 0x26
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2ba1      	cmp	r3, #161	; 0xa1
 8000790:	d002      	beq.n	8000798 <B_tcpSend+0x6c>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b56      	cmp	r3, #86	; 0x56
 8000796:	d10c      	bne.n	80007b2 <B_tcpSend+0x86>
        buf_pos++;
 8000798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800079a:	3301      	adds	r3, #1
 800079c:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3303      	adds	r3, #3
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	3204      	adds	r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3302      	adds	r3, #2
 80007ae:	225a      	movs	r2, #90	; 0x5a
 80007b0:	701a      	strb	r2, [r3, #0]
    }
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	7b1b      	ldrb	r3, [r3, #12]
 80007b6:	2ba5      	cmp	r3, #165	; 0xa5
 80007b8:	d003      	beq.n	80007c2 <B_tcpSend+0x96>
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	7b1b      	ldrb	r3, [r3, #12]
 80007be:	2b5a      	cmp	r3, #90	; 0x5a
 80007c0:	d108      	bne.n	80007d4 <B_tcpSend+0xa8>
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;
 80007c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c4:	3b01      	subs	r3, #1
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	225a      	movs	r2, #90	; 0x5a
 80007cc:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d0:	3301      	adds	r3, #1
 80007d2:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum;
 80007d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d6:	3b01      	subs	r3, #1
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4413      	add	r3, r2
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	7b12      	ldrb	r2, [r2, #12]
 80007e0:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	731a      	strb	r2, [r3, #12]
    for(int i = 0; i < length; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
 80007f2:	e021      	b.n	8000838 <B_tcpSend+0x10c>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b5a      	cmp	r3, #90	; 0x5a
 80007fe:	d005      	beq.n	800080c <B_tcpSend+0xe0>
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2ba5      	cmp	r3, #165	; 0xa5
 800080a:	d107      	bne.n	800081c <B_tcpSend+0xf0>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	225a      	movs	r2, #90	; 0x5a
 8000814:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000818:	3301      	adds	r3, #1
 800081a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	441a      	add	r2, r3
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	6979      	ldr	r1, [r7, #20]
 8000826:	440b      	add	r3, r1
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 800082c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800082e:	3301      	adds	r3, #1
 8000830:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	3301      	adds	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	6a3a      	ldr	r2, [r7, #32]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbd9      	blt.n	80007f4 <B_tcpSend+0xc8>
    }
    for(int i = 0; i < 4; i++){
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	e02e      	b.n	80008a4 <B_tcpSend+0x178>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	f1c3 0303 	rsb	r3, r3, #3
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	fa22 f103 	lsr.w	r1, r2, r3
 8000854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
        if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b5a      	cmp	r3, #90	; 0x5a
 8000868:	d005      	beq.n	8000876 <B_tcpSend+0x14a>
 800086a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2ba5      	cmp	r3, #165	; 0xa5
 8000874:	d110      	bne.n	8000898 <B_tcpSend+0x16c>
            buf[buf_pos+1] = buf[buf_pos];
 8000876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	441a      	add	r2, r3
 800087c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800087e:	3301      	adds	r3, #1
 8000880:	6979      	ldr	r1, [r7, #20]
 8000882:	440b      	add	r3, r1
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	225a      	movs	r2, #90	; 0x5a
 8000890:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 8000892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000894:	3301      	adds	r3, #1
 8000896:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 8000898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089a:	3301      	adds	r3, #1
 800089c:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3301      	adds	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	ddcd      	ble.n	8000846 <B_tcpSend+0x11a>
    }
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e00d      	b.n	80008cc <B_tcpSend+0x1a0>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008be:	6979      	ldr	r1, [r7, #20]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa29 	bl	8000d18 <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4293      	cmp	r3, r2
 80008d6:	dbeb      	blt.n	80008b0 <B_tcpSend+0x184>
    }
    vPortFree(buf);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f010 fde9 	bl	80114b0 <vPortFree>
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8000938:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fa0b 	bl	8000d5a <B_uartRead>
 8000944:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
        for(int i = 0; i < e->len; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800094e:	e160      	b.n	8000c12 <tcpRxTask+0x32c>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 8000950:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800095a:	441a      	add	r2, r3
 800095c:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 8000960:	7811      	ldrb	r1, [r2, #0]
 8000962:	f107 0214 	add.w	r2, r7, #20
 8000966:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 8000968:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 800096c:	3301      	adds	r3, #1
 800096e:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){
 8000972:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b5a      	cmp	r3, #90	; 0x5a
 8000982:	d107      	bne.n	8000994 <tcpRxTask+0xae>
 8000984:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <tcpRxTask+0xae>
                escaped = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
 8000992:	e002      	b.n	800099a <tcpRxTask+0xb4>
            } else {
                escaped = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
            }
            if(!started){
 800099a:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11e      	bne.n	80009e0 <tcpRxTask+0xfa>
                if(e->buf[i] == BSSR_SERIAL_START){
 80009a2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2ba5      	cmp	r3, #165	; 0xa5
 80009b2:	f040 8129 	bne.w	8000c08 <tcpRxTask+0x322>
                    started = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 80009bc:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009c6:	441a      	add	r2, r3
 80009c8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009cc:	7811      	ldrb	r1, [r2, #0]
 80009ce:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80009d2:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 80009d4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009d8:	3301      	adds	r3, #1
 80009da:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80009de:	e113      	b.n	8000c08 <tcpRxTask+0x322>
                }
            } else if(!expected_length){
 80009e0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11a      	bne.n	8000a1e <tcpRxTask+0x138>
                expected_length = e->buf[i];
 80009e8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 80009fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a04:	441a      	add	r2, r3
 8000a06:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a0a:	7811      	ldrb	r1, [r2, #0]
 8000a0c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a10:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a12:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a1c:	e0f4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(!sender){
 8000a1e:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11a      	bne.n	8000a5c <tcpRxTask+0x176>
                sender = e->buf[i];
 8000a26:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8000a38:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a42:	441a      	add	r2, r3
 8000a44:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a48:	7811      	ldrb	r1, [r2, #0]
 8000a4a:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a4e:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a50:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a54:	3301      	adds	r3, #1
 8000a56:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a5a:	e0d5      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(seqNum == 0xffff){
 8000a5c:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d11a      	bne.n	8000a9e <tcpRxTask+0x1b8>
                seqNum = e->buf[i];
 8000a68:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
                input_buffer[buf_pos] = e->buf[i];
 8000a7a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a84:	441a      	add	r2, r3
 8000a86:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a8a:	7811      	ldrb	r1, [r2, #0]
 8000a8c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a90:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a92:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a96:	3301      	adds	r3, #1
 8000a98:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a9c:	e0b4      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos < expected_length+4){
 8000a9e:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000aa2:	1cda      	adds	r2, r3, #3
 8000aa4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db11      	blt.n	8000ad0 <tcpRxTask+0x1ea>
                input_buffer[buf_pos] = e->buf[i];
 8000aac:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000abc:	7811      	ldrb	r1, [r2, #0]
 8000abe:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000ac2:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000ac4:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000ace:	e09b      	b.n	8000c08 <tcpRxTask+0x322>
            } else if(buf_pos + crcAcc < expected_length+8){
 8000ad0:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000ad4:	1dda      	adds	r2, r3, #7
 8000ad6:	f8b7 134c 	ldrh.w	r1, [r7, #844]	; 0x34c
 8000ada:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000ade:	440b      	add	r3, r1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f2c0 8091 	blt.w	8000c08 <tcpRxTask+0x322>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8000ae6:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000afa:	f1c3 0303 	rsb	r3, r3, #3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 8000b10:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b14:	3301      	adds	r3, #1
 8000b16:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8000b1a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d172      	bne.n	8000c08 <tcpRxTask+0x322>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 8000b22:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8000b2c:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fdfd 	bl	8004730 <HAL_CRC_Calculate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

					if(crcExpected == crc && sender != TCP_ID){
 8000b3e:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8000b42:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d142      	bne.n	8000bd0 <tcpRxTask+0x2ea>
 8000b4a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d03e      	beq.n	8000bd0 <tcpRxTask+0x2ea>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b58:	e013      	b.n	8000b82 <tcpRxTask+0x29c>
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
 8000b5a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 8000b6e:	f107 0114 	add.w	r1, r7, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f8d0 	bl	8000d18 <B_uartSend>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000b78:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000b82:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	dbe3      	blt.n	8000b5a <tcpRxTask+0x274>
						}
						pkt.length = expected_length;
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 8000b9a:	701a      	strb	r2, [r3, #0]
						pkt.sender = sender;
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8000ba4:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8000ba6:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	709a      	strb	r2, [r3, #2]
						pkt.payload = input_buffer;
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000bba:	605a      	str	r2, [r3, #4]
						pkt.crc = crc;
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000bc4:	609a      	str	r2, [r3, #8]
						serialParse(&pkt);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fb98 	bl	8001300 <serialParse>
					}
					raw_buf_pos = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					sender = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8000c08:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000c12:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f63f ae97 	bhi.w	8000950 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8000c22:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 8000c26:	f000 f8ad 	bl	8000d84 <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 8000c2a:	e685      	b.n	8000938 <tcpRxTask+0x52>

08000c2c <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	e01e      	b.n	8000c78 <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 8000c3a:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <B_uartStart+0xd8>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d115      	bne.n	8000c72 <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f010 fb66 	bl	8011318 <pvPortMalloc>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	492d      	ldr	r1, [pc, #180]	; (8000d04 <B_uartStart+0xd8>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart = buarts[i];
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <B_uartStart+0xd8>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8000c60:	4929      	ldr	r1, [pc, #164]	; (8000d08 <B_uartStart+0xdc>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
            break;
 8000c70:	e005      	b.n	8000c7e <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	dddd      	ble.n	8000c3a <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 8000c7e:	2203      	movs	r2, #3
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f00d ffe2 	bl	800ec4c <xQueueGenericCreate>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	2040      	movs	r0, #64	; 0x40
 8000c94:	f00d ffda 	bl	800ec4c <xQueueGenericCreate>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	2040      	movs	r0, #64	; 0x40
 8000ca4:	f00d ffd2 	bl	800ec4c <xQueueGenericCreate>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3314      	adds	r3, #20
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	4913      	ldr	r1, [pc, #76]	; (8000d0c <B_uartStart+0xe0>)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <B_uartStart+0xe4>)
 8000cc2:	f00e fdb1 	bl	800f828 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	2306      	movs	r3, #6
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <B_uartStart+0xe0>)
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <B_uartStart+0xe8>)
 8000cda:	f00e fda5 	bl	800f828 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000cf8:	bf00      	nop
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000098 	.word	0x24000098
 8000d08:	240000a8 	.word	0x240000a8
 8000d0c:	080121f0 	.word	0x080121f0
 8000d10:	08000da5 	.word	0x08000da5
 8000d14:	08000ded 	.word	0x08000ded

08000d18 <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f010 faf7 	bl	8011318 <pvPortMalloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f010 fd0b 	bl	8011750 <memcpy>
	e.len = len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6898      	ldr	r0, [r3, #8]
 8000d42:	f107 0114 	add.w	r1, r7, #20
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f00d ffd5 	bl	800ecf8 <xQueueGenericSend>
 8000d4e:	61f8      	str	r0, [r7, #28]
	return sent;
 8000d50:	69fb      	ldr	r3, [r7, #28]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8000d62:	2008      	movs	r0, #8
 8000d64:	f010 fad8 	bl	8011318 <pvPortMalloc>
 8000d68:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d72:	68f9      	ldr	r1, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00e f9e5 	bl	800f144 <xQueueReceive>
	return e;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f010 fb8d 	bl	80114b0 <vPortFree>
	vPortFree(e);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f010 fb8a 	bl	80114b0 <vPortFree>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f107 010c 	add.w	r1, r7, #12
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00e f9c1 	bl	800f144 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68f9      	ldr	r1, [r7, #12]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00c f8bd 	bl	800cf4c <HAL_UART_Transmit_DMA>
		xSemaphoreTake(buart->txSem, portMAX_DELAY);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00e fa92 	bl	800f304 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f010 fb64 	bl	80114b0 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000de8:	e7e2      	b.n	8000db0 <txTask+0xc>
	...

08000dec <rxTask>:
	}
}

static void rxTask(void* pv){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8000df8:	e002      	b.n	8000e00 <rxTask+0x14>
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f00e fe5e 	bl	800fabc <vTaskDelay>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e08:	2b20      	cmp	r3, #32
 8000e0a:	d1f6      	bne.n	8000dfa <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e10:	f010 fa82 	bl	8011318 <pvPortMalloc>
 8000e14:	4602      	mov	r2, r0
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e1a:	e009      	b.n	8000e30 <rxTask+0x44>
		vTaskDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f00e fe4d 	bl	800fabc <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000e22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e26:	f010 fa77 	bl	8011318 <pvPortMalloc>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f1      	beq.n	8000e1c <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e44:	4619      	mov	r1, r3
 8000e46:	f00c f901 	bl	800d04c <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8000e4e:	f010 f941 	bl	80110d4 <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6c      	ldr	r2, [pc, #432]	; (800100c <rxTask+0x220>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d068      	beq.n	8000f32 <rxTask+0x146>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a69      	ldr	r2, [pc, #420]	; (8001010 <rxTask+0x224>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d061      	beq.n	8000f32 <rxTask+0x146>
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a67      	ldr	r2, [pc, #412]	; (8001014 <rxTask+0x228>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d05a      	beq.n	8000f32 <rxTask+0x146>
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a64      	ldr	r2, [pc, #400]	; (8001018 <rxTask+0x22c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d053      	beq.n	8000f32 <rxTask+0x146>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a62      	ldr	r2, [pc, #392]	; (800101c <rxTask+0x230>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <rxTask+0x146>
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a5f      	ldr	r2, [pc, #380]	; (8001020 <rxTask+0x234>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d045      	beq.n	8000f32 <rxTask+0x146>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a5d      	ldr	r2, [pc, #372]	; (8001024 <rxTask+0x238>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d03e      	beq.n	8000f32 <rxTask+0x146>
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <rxTask+0x23c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d037      	beq.n	8000f32 <rxTask+0x146>
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a58      	ldr	r2, [pc, #352]	; (800102c <rxTask+0x240>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d030      	beq.n	8000f32 <rxTask+0x146>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a55      	ldr	r2, [pc, #340]	; (8001030 <rxTask+0x244>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d029      	beq.n	8000f32 <rxTask+0x146>
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <rxTask+0x248>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d022      	beq.n	8000f32 <rxTask+0x146>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <rxTask+0x24c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01b      	beq.n	8000f32 <rxTask+0x146>
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a4e      	ldr	r2, [pc, #312]	; (800103c <rxTask+0x250>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d014      	beq.n	8000f32 <rxTask+0x146>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <rxTask+0x254>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <rxTask+0x146>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a49      	ldr	r2, [pc, #292]	; (8001044 <rxTask+0x258>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d006      	beq.n	8000f32 <rxTask+0x146>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <rxTask+0x25c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d107      	bne.n	8000f42 <rxTask+0x156>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f40:	e006      	b.n	8000f50 <rxTask+0x164>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d013      	beq.n	8000f86 <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d903      	bls.n	8000f72 <rxTask+0x186>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f7a:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f84:	e00b      	b.n	8000f9e <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d905      	bls.n	8000f9e <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8000f9e:	f010 f8c9 	bl	8011134 <vPortExitCritical>
		if(e.len){
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02c      	beq.n	8001002 <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f010 f9b4 	bl	8011318 <pvPortMalloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8000fb4:	68b8      	ldr	r0, [r7, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f010 fbc4 	bl	8011750 <memcpy>
			buart->tail += e.len;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	441a      	add	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	6918      	ldr	r0, [r3, #16]
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	f00d fe84 	bl	800ecf8 <xQueueGenericSend>
 8000ff0:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d004      	beq.n	8001002 <rxTask+0x216>
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f825 	bl	800104c <processCriticalFrame>
		}
		vTaskDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f00e fd5a 	bl	800fabc <vTaskDelay>
		e.len = 0;
 8001008:	e71f      	b.n	8000e4a <rxTask+0x5e>
 800100a:	bf00      	nop
 800100c:	40020010 	.word	0x40020010
 8001010:	40020028 	.word	0x40020028
 8001014:	40020040 	.word	0x40020040
 8001018:	40020058 	.word	0x40020058
 800101c:	40020070 	.word	0x40020070
 8001020:	40020088 	.word	0x40020088
 8001024:	400200a0 	.word	0x400200a0
 8001028:	400200b8 	.word	0x400200b8
 800102c:	40020410 	.word	0x40020410
 8001030:	40020428 	.word	0x40020428
 8001034:	40020440 	.word	0x40020440
 8001038:	40020458 	.word	0x40020458
 800103c:	40020470 	.word	0x40020470
 8001040:	40020488 	.word	0x40020488
 8001044:	400204a0 	.word	0x400204a0
 8001048:	400204b8 	.word	0x400204b8

0800104c <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e013      	b.n	8001096 <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_UART_TxCpltCallback+0x44>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d109      	bne.n	8001090 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_UART_TxCpltCallback+0x48>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00d ffce 	bl	800f02a <xQueueGiveFromISR>
			return;
 800108e:	e005      	b.n	800109c <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d9e8      	bls.n	800106e <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000a8 	.word	0x240000a8
 80010a8:	24000098 	.word	0x24000098

080010ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e011      	b.n	80010de <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_UART_RxCpltCallback+0x58>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d107      	bne.n	80010d8 <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_UART_RxCpltCallback+0x5c>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 80010d6:	e010      	b.n	80010fa <HAL_UART_RxCpltCallback+0x4e>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d9ea      	bls.n	80010ba <HAL_UART_RxCpltCallback+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010f6:	bf00      	nop
		}
	}
	configASSERT(NULL);
 80010f8:	e7fe      	b.n	80010f8 <HAL_UART_RxCpltCallback+0x4c>
}
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	240000a8 	.word	0x240000a8
 8001108:	24000098 	.word	0x24000098

0800110c <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <arm_boot+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <arm_boot+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <arm_boot+0x48>)
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <arm_boot+0x50>)
 800111a:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <arm_boot+0x54>)
 800111e:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 8001122:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <arm_boot+0x58>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <arm_boot+0x58>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 8001130:	bf00      	nop
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <arm_boot+0x58>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <arm_boot+0x58>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <arm_boot+0x58>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	52002008 	.word	0x52002008
 8001158:	08192a3b 	.word	0x08192a3b
 800115c:	4c5d6e7f 	.word	0x4c5d6e7f
 8001160:	52002044 	.word	0x52002044
 8001164:	52002018 	.word	0x52002018

08001168 <mc2StateTmr>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */


static void mc2StateTmr(TimerHandle_t xTimer) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	//first index set to 0x00 since the data ID for MC2 state is 0x00

	//motorState = 0;
	//fwdRevState = 1;
	//follwing if else are for testing
	if (fwdRevState == 1) //reverse
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <mc2StateTmr+0x168>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <mc2StateTmr+0x1c>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); //fwdREv
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	4855      	ldr	r0, [pc, #340]	; (80012d4 <mc2StateTmr+0x16c>)
 800117e:	f006 fc73 	bl	8007a68 <HAL_GPIO_WritePin>
 8001182:	e008      	b.n	8001196 <mc2StateTmr+0x2e>
	else if (fwdRevState == 0) //forward
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <mc2StateTmr+0x168>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <mc2StateTmr+0x2e>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	2102      	movs	r1, #2
 8001190:	4850      	ldr	r0, [pc, #320]	; (80012d4 <mc2StateTmr+0x16c>)
 8001192:	f006 fc69 	bl	8007a68 <HAL_GPIO_WritePin>
	if (regenValue ==255) {
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <mc2StateTmr+0x170>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d105      	bne.n	80011aa <mc2StateTmr+0x42>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1); // CS1
 800119e:	2201      	movs	r2, #1
 80011a0:	2104      	movs	r1, #4
 80011a2:	484c      	ldr	r0, [pc, #304]	; (80012d4 <mc2StateTmr+0x16c>)
 80011a4:	f006 fc60 	bl	8007a68 <HAL_GPIO_WritePin>
 80011a8:	e008      	b.n	80011bc <mc2StateTmr+0x54>
	}
	else if (regenValue < 20) {
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <mc2StateTmr+0x170>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b13      	cmp	r3, #19
 80011b0:	d804      	bhi.n	80011bc <mc2StateTmr+0x54>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 0); // CS1
 80011b2:	2200      	movs	r2, #0
 80011b4:	2104      	movs	r1, #4
 80011b6:	4847      	ldr	r0, [pc, #284]	; (80012d4 <mc2StateTmr+0x16c>)
 80011b8:	f006 fc56 	bl	8007a68 <HAL_GPIO_WritePin>
	}
	if (locVfmVal == 4) {
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <mc2StateTmr+0x174>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d105      	bne.n	80011d0 <mc2StateTmr+0x68>
		HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 1); // CS0
 80011c4:	2201      	movs	r2, #1
 80011c6:	2104      	movs	r1, #4
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <mc2StateTmr+0x178>)
 80011ca:	f006 fc4d 	bl	8007a68 <HAL_GPIO_WritePin>
 80011ce:	e008      	b.n	80011e2 <mc2StateTmr+0x7a>
	}
	else if(locVfmVal == 1) {
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <mc2StateTmr+0x174>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d104      	bne.n	80011e2 <mc2StateTmr+0x7a>
		 HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, 0); // CS0
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <mc2StateTmr+0x178>)
 80011de:	f006 fc43 	bl	8007a68 <HAL_GPIO_WritePin>
	}
	//testing end

	// Likely not for DCMB
	if (locVfmVal != vfmVal){
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <mc2StateTmr+0x174>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <mc2StateTmr+0x17c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d016      	beq.n	800121c <mc2StateTmr+0xb4>
		if (vfmVal > locVfmVal) {
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <mc2StateTmr+0x17c>)
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <mc2StateTmr+0x174>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d903      	bls.n	8001202 <mc2StateTmr+0x9a>
			vfmUpState = 1;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <mc2StateTmr+0x180>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e008      	b.n	8001214 <mc2StateTmr+0xac>
		}
		else if (vfmVal < locVfmVal) {
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <mc2StateTmr+0x17c>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <mc2StateTmr+0x174>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d202      	bcs.n	8001214 <mc2StateTmr+0xac>
			vfmDownState = 1;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <mc2StateTmr+0x184>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
		}
		locVfmVal = vfmVal;
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <mc2StateTmr+0x17c>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <mc2StateTmr+0x174>)
 800121a:	701a      	strb	r2, [r3, #0]
	}
	buf[1] = (motorState & 0b01)  << 4;
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <mc2StateTmr+0x188>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <mc2StateTmr+0x18c>)
 800122c:	705a      	strb	r2, [r3, #1]
	buf[1] |= (fwdRevState & 0b01) << 3;
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <mc2StateTmr+0x18c>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	b25a      	sxtb	r2, r3
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <mc2StateTmr+0x168>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	b25b      	sxtb	r3, r3
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25b      	sxtb	r3, r3
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <mc2StateTmr+0x18c>)
 800124a:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmUpState & 0b01) << 2;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <mc2StateTmr+0x18c>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	b25a      	sxtb	r2, r3
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <mc2StateTmr+0x180>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	b25b      	sxtb	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <mc2StateTmr+0x18c>)
 8001268:	705a      	strb	r2, [r3, #1]
	buf[1] |= (vfmDownState & 0b01) << 1;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <mc2StateTmr+0x18c>)
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	b25a      	sxtb	r2, r3
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <mc2StateTmr+0x184>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b25b      	sxtb	r3, r3
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25b      	sxtb	r3, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <mc2StateTmr+0x18c>)
 8001286:	705a      	strb	r2, [r3, #1]
	buf[2] = accValue;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <mc2StateTmr+0x190>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <mc2StateTmr+0x18c>)
 8001290:	709a      	strb	r2, [r3, #2]
	buf[3] = regenValue; // New for GEN11
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <mc2StateTmr+0x170>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <mc2StateTmr+0x18c>)
 800129a:	70da      	strb	r2, [r3, #3]


	if(vfmUpState == 1){
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <mc2StateTmr+0x180>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <mc2StateTmr+0x142>
		vfmUpState = 0;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <mc2StateTmr+0x180>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
	}
	if(vfmDownState == 1){
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <mc2StateTmr+0x184>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <mc2StateTmr+0x150>
		vfmDownState = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <mc2StateTmr+0x184>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	}

	B_tcpSend(btcp, buf, 8);
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <mc2StateTmr+0x194>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2208      	movs	r2, #8
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <mc2StateTmr+0x18c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fa33 	bl	800072c <B_tcpSend>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240000c0 	.word	0x240000c0
 80012d4:	58021800 	.word	0x58021800
 80012d8:	240000bc 	.word	0x240000bc
 80012dc:	24000001 	.word	0x24000001
 80012e0:	58022800 	.word	0x58022800
 80012e4:	24000000 	.word	0x24000000
 80012e8:	240000bf 	.word	0x240000bf
 80012ec:	240000c1 	.word	0x240000c1
 80012f0:	240000be 	.word	0x240000be
 80012f4:	240000c4 	.word	0x240000c4
 80012f8:	240000ba 	.word	0x240000ba
 80012fc:	240277ac 	.word	0x240277ac

08001300 <serialParse>:

// call back function used to receive from MCMB
// called by btcp functions
void serialParse(B_tcpPacket_t *pkt) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d115      	bne.n	800133c <serialParse+0x3c>
		case 0x03:  //MCMB sender ID
			//Check if data ID is motor speed (0x03)
			if(pkt->payload[4] == 0x03){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d104      	bne.n	8001326 <serialParse+0x26>
				motorPWMFrequency = pkt->payload[5];
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	795a      	ldrb	r2, [r3, #5]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <serialParse+0x48>)
 8001324:	701a      	strb	r2, [r3, #0]
			}
			// If data ID is motor temperature (0x05) //New addition
			if (pkt->payload[4] == 0x05) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b05      	cmp	r3, #5
 8001330:	d104      	bne.n	800133c <serialParse+0x3c>
				motorTemperature = pkt->payload[5];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	795a      	ldrb	r2, [r3, #5]
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <serialParse+0x4c>)
 800133a:	701a      	strb	r2, [r3, #0]
			}

	}
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	240000b9 	.word	0x240000b9
 800134c:	240000b8 	.word	0x240000b8

08001350 <task1_handler>:
// This task is used to send motor temperature and speed to the PC
void task1_handler(void* parameters) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	//char *test = "Test1\n";
	//char *test2 = "Test2\n";
	char temperatureBuf[30];
	char speedBuf[30];
	int timeOut = 1000;
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  /* Infinite loop */
	while(1)
	{
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <task1_handler+0x70>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001368:	4916      	ldr	r1, [pc, #88]	; (80013c4 <task1_handler+0x74>)
 800136a:	4618      	mov	r0, r3
 800136c:	f010 fada 	bl	8011924 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temperatureBuf, strlen(temperatureBuf), timeOut);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ffb3 	bl	80002e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001380:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <task1_handler+0x78>)
 8001386:	f00b fc77 	bl	800cc78 <HAL_UART_Transmit>
		//vTaskDelay(pdMS_TO_TICKS(500));
		//Note: delay must be equal or greater than python program's receive delay

		sprintf(speedBuf, "Motor PWM Frequency: %d Hz\n", (int)motorPWMFrequency);
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <task1_handler+0x7c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <task1_handler+0x80>)
 8001396:	4618      	mov	r0, r3
 8001398:	f010 fac4 	bl	8011924 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)speedBuf, strlen(speedBuf), timeOut);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff9d 	bl	80002e0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <task1_handler+0x78>)
 80013b2:	f00b fc61 	bl	800cc78 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f00e fb7f 	bl	800fabc <vTaskDelay>
		sprintf(temperatureBuf, "Motor Temperature: %d Degrees\n", (int)motorTemperature);
 80013be:	e7ce      	b.n	800135e <task1_handler+0xe>
 80013c0:	240000b8 	.word	0x240000b8
 80013c4:	080121fc 	.word	0x080121fc
 80013c8:	24027a50 	.word	0x24027a50
 80013cc:	240000b9 	.word	0x240000b9
 80013d0:	0801221c 	.word	0x0801221c

080013d4 <task2_handler>:

	}
}

// This task is used to receive motor control signals from PC
void task2_handler(void* parameters) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b099      	sub	sp, #100	; 0x64
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int rxBufSize = 5;
 80013dc:	2305      	movs	r3, #5
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
	int timeout = 700;
 80013e0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	char rxBuf[rxBufSize];
 80013e6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80013e8:	1e63      	subs	r3, r4, #1
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80013ec:	4623      	mov	r3, r4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	00cb      	lsls	r3, r1, #3
 80013fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001402:	00c2      	lsls	r2, r0, #3
 8001404:	4623      	mov	r3, r4
 8001406:	4618      	mov	r0, r3
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	00cb      	lsls	r3, r1, #3
 8001416:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800141a:	00c2      	lsls	r2, r0, #3
 800141c:	4623      	mov	r3, r4
 800141e:	3307      	adds	r3, #7
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	ebad 0d03 	sub.w	sp, sp, r3
 8001428:	466b      	mov	r3, sp
 800142a:	3300      	adds	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t locMotorState;
	uint8_t locFwdRevState;
	uint16_t locAcc;
	uint16_t locReg;
	uint8_t locVfmVal = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		/*for (int i=0; i < rxBufSize; i++) {
			rxBuf[i] = '\0';
		}*/
		//char rxBuf[rxBufSize];

		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 8001434:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001438:	b29a      	uxth	r2, r3
 800143a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800143c:	4886      	ldr	r0, [pc, #536]	; (8001658 <task2_handler+0x284>)
 800143e:	f00b fcb1 	bl	800cda4 <HAL_UART_Receive>
		rxBuf[4] = '\0';
 8001442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
		if (strncmp(rxBuf, "M On", strlen("M On")) == 0) {
 8001448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144a:	2204      	movs	r2, #4
 800144c:	4983      	ldr	r1, [pc, #524]	; (800165c <task2_handler+0x288>)
 800144e:	4618      	mov	r0, r3
 8001450:	f010 fa88 	bl	8011964 <strncmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <task2_handler+0xa2>
			locMotorState = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 8001460:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <task2_handler+0x28c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001468:	429a      	cmp	r2, r3
 800146a:	d0e3      	beq.n	8001434 <task2_handler+0x60>
				motorState = locMotorState;
 800146c:	4a7c      	ldr	r2, [pc, #496]	; (8001660 <task2_handler+0x28c>)
 800146e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001472:	7013      	strb	r3, [r2, #0]
 8001474:	e7de      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "MOff", strlen("MOff")) == 0) {
 8001476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001478:	2204      	movs	r2, #4
 800147a:	497a      	ldr	r1, [pc, #488]	; (8001664 <task2_handler+0x290>)
 800147c:	4618      	mov	r0, r3
 800147e:	f010 fa71 	bl	8011964 <strncmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10d      	bne.n	80014a4 <task2_handler+0xd0>
			locMotorState = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			if (locMotorState != motorState)
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <task2_handler+0x28c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001496:	429a      	cmp	r2, r3
 8001498:	d0cc      	beq.n	8001434 <task2_handler+0x60>
				motorState = locMotorState;
 800149a:	4a71      	ldr	r2, [pc, #452]	; (8001660 <task2_handler+0x28c>)
 800149c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80014a0:	7013      	strb	r3, [r2, #0]
 80014a2:	e7c7      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "F wd", strlen("F wd")) == 0) {
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	2204      	movs	r2, #4
 80014a8:	496f      	ldr	r1, [pc, #444]	; (8001668 <task2_handler+0x294>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f010 fa5a 	bl	8011964 <strncmp>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <task2_handler+0xfe>
			locFwdRevState = 0; //Note 0 is forward
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <task2_handler+0x298>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d0b5      	beq.n	8001434 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <task2_handler+0x298>)
 80014ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014ce:	7013      	strb	r3, [r2, #0]
 80014d0:	e7b0      	b.n	8001434 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev

		}
		else if (strncmp(rxBuf, "R ev", strlen("R ev")) == 0) {
 80014d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d4:	2204      	movs	r2, #4
 80014d6:	4966      	ldr	r1, [pc, #408]	; (8001670 <task2_handler+0x29c>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f010 fa43 	bl	8011964 <strncmp>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10d      	bne.n	8001500 <task2_handler+0x12c>
			locFwdRevState = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (locFwdRevState != fwdRevState)
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <task2_handler+0x298>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d09e      	beq.n	8001434 <task2_handler+0x60>
				fwdRevState = locFwdRevState;
 80014f6:	4a5d      	ldr	r2, [pc, #372]	; (800166c <task2_handler+0x298>)
 80014f8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014fc:	7013      	strb	r3, [r2, #0]
 80014fe:	e799      	b.n	8001434 <task2_handler+0x60>
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
		}
		else if (strncmp(rxBuf, "A", 1) == 0) {
 8001500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <task2_handler+0x2a0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d12f      	bne.n	800156e <task2_handler+0x19a>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1); // FwdRev
			//strncpy(val, &rxBuf[strlen("Accel: ")], strlen(rxBuf)-strlen("Accel: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 800150e:	2301      	movs	r3, #1
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
 8001512:	e00d      	b.n	8001530 <task2_handler+0x15c>
				val[i-1] = rxBuf[i];
 8001514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001516:	3b01      	subs	r3, #1
 8001518:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800151a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800151c:	440a      	add	r2, r1
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001524:	440b      	add	r3, r1
 8001526:	f803 2c34 	strb.w	r2, [r3, #-52]
			for (i = 1; i < strlen(rxBuf); i++) {
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	3301      	adds	r3, #1
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
 8001530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fed4 	bl	80002e0 <strlen>
 8001538:	4602      	mov	r2, r0
 800153a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153c:	429a      	cmp	r2, r3
 800153e:	d8e9      	bhi.n	8001514 <task2_handler+0x140>
			} val[i] = '\0';
 8001540:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	4413      	add	r3, r2
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			//char *end;
			locAcc = (uint16_t)atoi(val);
 800154c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001550:	4618      	mov	r0, r3
 8001552:	f010 f8cd 	bl	80116f0 <atoi>
 8001556:	4603      	mov	r3, r0
 8001558:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if (locAcc != accValue)
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <task2_handler+0x2a4>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001560:	429a      	cmp	r2, r3
 8001562:	f43f af67 	beq.w	8001434 <task2_handler+0x60>
				accValue = locAcc;
 8001566:	4a44      	ldr	r2, [pc, #272]	; (8001678 <task2_handler+0x2a4>)
 8001568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800156a:	8013      	strh	r3, [r2, #0]
 800156c:	e762      	b.n	8001434 <task2_handler+0x60>

		}
		else if (strncmp(rxBuf, "R", 1) == 0) {
 800156e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <task2_handler+0x2a8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d132      	bne.n	80015e2 <task2_handler+0x20e>
			char val[16];
			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0); // FwdRev
			//strncpy(val, &rxBuf[strlen("Regen: ")], strlen(rxBuf)-strlen("Regen: "));
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 800157c:	2301      	movs	r3, #1
 800157e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001580:	e00d      	b.n	800159e <task2_handler+0x1ca>
				val[i-1] = rxBuf[i];
 8001582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001584:	3b01      	subs	r3, #1
 8001586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800158a:	440a      	add	r2, r1
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001592:	440b      	add	r3, r1
 8001594:	f803 2c44 	strb.w	r2, [r3, #-68]
			for (i = 1; i < strlen(rxBuf); i++) {
 8001598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800159a:	3301      	adds	r3, #1
 800159c:	65bb      	str	r3, [r7, #88]	; 0x58
 800159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe9d 	bl	80002e0 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d8e9      	bhi.n	8001582 <task2_handler+0x1ae>
			} val[i] = '\0';
 80015ae:	f107 021c 	add.w	r2, r7, #28
 80015b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b4:	4413      	add	r3, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			locReg = (uint16_t)atoi(val);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4618      	mov	r0, r3
 80015c0:	f010 f896 	bl	80116f0 <atoi>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			if (locReg != regenValue)
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <task2_handler+0x2ac>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80015d2:	429a      	cmp	r2, r3
 80015d4:	f43f af2e 	beq.w	8001434 <task2_handler+0x60>
				regenValue = locReg;
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <task2_handler+0x2ac>)
 80015da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015de:	8013      	strh	r3, [r2, #0]
 80015e0:	e728      	b.n	8001434 <task2_handler+0x60>
		}
		else if (strncmp(rxBuf, "V", 1) == 0) {
 80015e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <task2_handler+0x2b0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af21 	bne.w	8001434 <task2_handler+0x60>
			char val[16];
			int i;
			for (i = 1; i < strlen(rxBuf); i++) {
 80015f2:	2301      	movs	r3, #1
 80015f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015f6:	e00d      	b.n	8001614 <task2_handler+0x240>
				val[i-1] = rxBuf[i];
 80015f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001600:	440a      	add	r2, r1
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001608:	440b      	add	r3, r1
 800160a:	f803 2c54 	strb.w	r2, [r3, #-84]
			for (i = 1; i < strlen(rxBuf); i++) {
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	3301      	adds	r3, #1
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe62 	bl	80002e0 <strlen>
 800161c:	4602      	mov	r2, r0
 800161e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001620:	429a      	cmp	r2, r3
 8001622:	d8e9      	bhi.n	80015f8 <task2_handler+0x224>
			} val[i] = '\0';
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
			locVfmVal = (uint8_t)atoi(val);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f010 f85b 	bl	80116f0 <atoi>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (locVfmVal != vfmVal)
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <task2_handler+0x2b4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001648:	429a      	cmp	r2, r3
 800164a:	f43f aef3 	beq.w	8001434 <task2_handler+0x60>
				vfmVal = locVfmVal;
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <task2_handler+0x2b4>)
 8001650:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001654:	7013      	strb	r3, [r2, #0]
		HAL_UART_Receive(&huart2, (uint8_t*)rxBuf, rxBufSize, timeout);
 8001656:	e6ed      	b.n	8001434 <task2_handler+0x60>
 8001658:	24027a50 	.word	0x24027a50
 800165c:	08012238 	.word	0x08012238
 8001660:	240000be 	.word	0x240000be
 8001664:	08012240 	.word	0x08012240
 8001668:	08012248 	.word	0x08012248
 800166c:	240000c0 	.word	0x240000c0
 8001670:	08012250 	.word	0x08012250
 8001674:	08012258 	.word	0x08012258
 8001678:	240000ba 	.word	0x240000ba
 800167c:	0801225c 	.word	0x0801225c
 8001680:	240000bc 	.word	0x240000bc
 8001684:	08012260 	.word	0x08012260
 8001688:	24000000 	.word	0x24000000

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f001 fe17 	bl	80032c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 8001696:	f7ff fd39 	bl	800110c <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169a:	f000 f8e3 	bl	8001864 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800169e:	f000 f96f 	bl	8001980 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f000 fcfd 	bl	80020a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a6:	f000 fcb3 	bl	8002010 <MX_DMA_Init>
  MX_UART4_Init();
 80016aa:	f000 fbcb 	bl	8001e44 <MX_UART4_Init>
  MX_RTC_Init();
 80016ae:	f000 fa33 	bl	8001b18 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fc61 	bl	8001f78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016b6:	f000 fb03 	bl	8001cc0 <MX_TIM2_Init>
  MX_TIM12_Init();
 80016ba:	f000 fb55 	bl	8001d68 <MX_TIM12_Init>
  MX_TIM1_Init();
 80016be:	f000 faab 	bl	8001c18 <MX_TIM1_Init>
  MX_CRC_Init();
 80016c2:	f000 fa07 	bl	8001ad4 <MX_CRC_Init>
  MX_SPI3_Init();
 80016c6:	f000 fa4f 	bl	8001b68 <MX_SPI3_Init>
  MX_UART8_Init();
 80016ca:	f000 fc09 	bl	8001ee0 <MX_UART8_Init>
  MX_ADC1_Init();
 80016ce:	f000 f989 	bl	80019e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t SPI_START_VAL = 0b00010001;
 80016d2:	2311      	movs	r3, #17
 80016d4:	75fb      	strb	r3, [r7, #23]
  buart = B_uartStart(&huart4); //Note huart4 is for rs485
 80016d6:	4850      	ldr	r0, [pc, #320]	; (8001818 <main+0x18c>)
 80016d8:	f7ff faa8 	bl	8000c2c <B_uartStart>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a4f      	ldr	r2, [pc, #316]	; (800181c <main+0x190>)
 80016e0:	6013      	str	r3, [r2, #0]
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};
  btcp = B_tcpStart(&buart, buart, 1, &hcrc);
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <main+0x190>)
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <main+0x194>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	484c      	ldr	r0, [pc, #304]	; (800181c <main+0x190>)
 80016ec:	f7fe ffcc 	bl	8000688 <B_tcpStart>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <main+0x198>)
 80016f4:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 80016f6:	2201      	movs	r2, #1
 80016f8:	2120      	movs	r1, #32
 80016fa:	484b      	ldr	r0, [pc, #300]	; (8001828 <main+0x19c>)
 80016fc:	f006 f9b4 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	4849      	ldr	r0, [pc, #292]	; (800182c <main+0x1a0>)
 8001706:	f006 f997 	bl	8007a38 <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET); // FwdRev
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	4848      	ldr	r0, [pc, #288]	; (8001830 <main+0x1a4>)
 8001710:	f006 f9aa 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171a:	4846      	ldr	r0, [pc, #280]	; (8001834 <main+0x1a8>)
 800171c:	f006 f9a4 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	4843      	ldr	r0, [pc, #268]	; (8001834 <main+0x1a8>)
 8001728:	f006 f99e 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 800172c:	2201      	movs	r2, #1
 800172e:	2101      	movs	r1, #1
 8001730:	483f      	ldr	r0, [pc, #252]	; (8001830 <main+0x1a4>)
 8001732:	f006 f999 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 8001736:	2201      	movs	r2, #1
 8001738:	2104      	movs	r1, #4
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <main+0x1ac>)
 800173c:	f006 f994 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 8001740:	2201      	movs	r2, #1
 8001742:	2104      	movs	r1, #4
 8001744:	483a      	ldr	r0, [pc, #232]	; (8001830 <main+0x1a4>)
 8001746:	f006 f98f 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	4838      	ldr	r0, [pc, #224]	; (8001834 <main+0x1a8>)
 8001752:	f006 f989 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175c:	4835      	ldr	r0, [pc, #212]	; (8001834 <main+0x1a8>)
 800175e:	f006 f983 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 8001762:	2201      	movs	r2, #1
 8001764:	2104      	movs	r1, #4
 8001766:	4835      	ldr	r0, [pc, #212]	; (800183c <main+0x1b0>)
 8001768:	f006 f97e 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <main+0x1a8>)
 8001774:	f006 f978 	bl	8007a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 8001778:	2201      	movs	r2, #1
 800177a:	2108      	movs	r1, #8
 800177c:	4830      	ldr	r0, [pc, #192]	; (8001840 <main+0x1b4>)
 800177e:	f006 f973 	bl	8007a68 <HAL_GPIO_WritePin>


  xTimerStart(xTimerCreate("mc2StateTmr", 10, pdTRUE, NULL, mc2StateTmr), 0);
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <main+0x1b8>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	2201      	movs	r2, #1
 800178a:	210a      	movs	r1, #10
 800178c:	482e      	ldr	r0, [pc, #184]	; (8001848 <main+0x1bc>)
 800178e:	f00f f83b 	bl	8010808 <xTimerCreate>
 8001792:	4604      	mov	r4, r0
 8001794:	f00e fac8 	bl	800fd28 <xTaskGetTickCount>
 8001798:	4602      	mov	r2, r0
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	4620      	mov	r0, r4
 80017a4:	f00f f88c 	bl	80108c0 <xTimerGenericCommand>

  HAL_TIM_Base_Start(&htim2);
 80017a8:	4828      	ldr	r0, [pc, #160]	; (800184c <main+0x1c0>)
 80017aa:	f00a f8e5 	bl	800b978 <HAL_TIM_Base_Start>
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
	BaseType_t status;

	status = xTaskCreate(task1_handler,  /* Function that implements the task. */
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2304      	movs	r3, #4
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <main+0x1c4>)
 80017b8:	22c8      	movs	r2, #200	; 0xc8
 80017ba:	4926      	ldr	r1, [pc, #152]	; (8001854 <main+0x1c8>)
 80017bc:	4826      	ldr	r0, [pc, #152]	; (8001858 <main+0x1cc>)
 80017be:	f00e f833 	bl	800f828 <xTaskCreate>
 80017c2:	6138      	str	r0, [r7, #16]
                200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
                "dont need this this time", /* Parameter passed into the task. */
                4, /* Priority at which the task is created. */ //Note must be 4 since btcp is 4
                &task1_handle /* Used to pass out the created task's handle. */
                              );
	configASSERT(status == pdPASS); // Error checking
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d00a      	beq.n	80017e0 <main+0x154>
	__asm volatile
 80017ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	60fb      	str	r3, [r7, #12]
}
 80017dc:	bf00      	nop
 80017de:	e7fe      	b.n	80017de <main+0x152>

	status = xTaskCreate(task2_handler,  /* Function that implements the task. */
 80017e0:	463b      	mov	r3, r7
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2304      	movs	r3, #4
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <main+0x1c4>)
 80017ea:	22c8      	movs	r2, #200	; 0xc8
 80017ec:	491b      	ldr	r1, [pc, #108]	; (800185c <main+0x1d0>)
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <main+0x1d4>)
 80017f0:	f00e f81a 	bl	800f828 <xTaskCreate>
 80017f4:	6138      	str	r0, [r7, #16]
	              200, 		/* 200 words *4(bytes/word) = 800 bytes allocated for task's stack*/
				  "dont need this this time", /* Parameter passed into the task. */
	              4, /* Priority at which the task is created. */
				  &task2_handle /* Used to pass out the created task's handle. */
	                            );
	configASSERT(status == pdPASS); // Error checking
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d00a      	beq.n	8001812 <main+0x186>
	__asm volatile
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	60bb      	str	r3, [r7, #8]
}
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <main+0x184>


  /* Start scheduler */
  vTaskStartScheduler();
 8001812:	f00e f987 	bl	800fb24 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001816:	e7fe      	b.n	8001816 <main+0x18a>
 8001818:	24027928 	.word	0x24027928
 800181c:	24027ae0 	.word	0x24027ae0
 8001820:	2402745c 	.word	0x2402745c
 8001824:	240277ac 	.word	0x240277ac
 8001828:	58022400 	.word	0x58022400
 800182c:	58020400 	.word	0x58020400
 8001830:	58021800 	.word	0x58021800
 8001834:	58022000 	.word	0x58022000
 8001838:	58022800 	.word	0x58022800
 800183c:	58021400 	.word	0x58021400
 8001840:	58021000 	.word	0x58021000
 8001844:	08001169 	.word	0x08001169
 8001848:	08012264 	.word	0x08012264
 800184c:	240279b8 	.word	0x240279b8
 8001850:	08012270 	.word	0x08012270
 8001854:	0801228c 	.word	0x0801228c
 8001858:	08001351 	.word	0x08001351
 800185c:	08012294 	.word	0x08012294
 8001860:	080013d5 	.word	0x080013d5

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09c      	sub	sp, #112	; 0x70
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	224c      	movs	r2, #76	; 0x4c
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f00f ff7a 	bl	801176c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f00f ff74 	bl	801176c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001884:	2002      	movs	r0, #2
 8001886:	f006 f92d 	bl	8007ae4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <SystemClock_Config+0x110>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <SystemClock_Config+0x110>)
 8001894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <SystemClock_Config+0x110>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <SystemClock_Config+0x114>)
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <SystemClock_Config+0x114>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <SystemClock_Config+0x114>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018bc:	bf00      	nop
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <SystemClock_Config+0x110>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d1f8      	bne.n	80018be <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <SystemClock_Config+0x118>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	4a2a      	ldr	r2, [pc, #168]	; (800197c <SystemClock_Config+0x118>)
 80018d2:	f023 0303 	bic.w	r3, r3, #3
 80018d6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018d8:	232a      	movs	r3, #42	; 0x2a
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018dc:	2301      	movs	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018e8:	2301      	movs	r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80018f8:	2314      	movs	r3, #20
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001908:	230c      	movs	r3, #12
 800190a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800190c:	2300      	movs	r3, #0
 800190e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	4618      	mov	r0, r3
 800191a:	f006 f91d 	bl	8007b58 <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001924:	f000 fe80 	bl	8002628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001928:	233f      	movs	r3, #63	; 0x3f
 800192a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	2303      	movs	r3, #3
 800192e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001934:	2308      	movs	r3, #8
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001944:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f006 fd12 	bl	8008378 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800195a:	f000 fe65 	bl	8002628 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 800195e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001962:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8001966:	2000      	movs	r0, #0
 8001968:	f006 febc 	bl	80086e4 <HAL_RCC_MCOConfig>
}
 800196c:	bf00      	nop
 800196e:	3770      	adds	r7, #112	; 0x70
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024800 	.word	0x58024800
 8001978:	58000400 	.word	0x58000400
 800197c:	58024400 	.word	0x58024400

08001980 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b0      	sub	sp, #192	; 0xc0
 8001984:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	22bc      	movs	r2, #188	; 0xbc
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00f feed 	bl	801176c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_ADC
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <PeriphCommonClock_Config+0x60>)
 8001994:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8001996:	2308      	movs	r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800199a:	2320      	movs	r3, #32
 800199c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019aa:	23c0      	movs	r3, #192	; 0xc0
 80019ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80019b6:	2320      	movs	r3, #32
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80019ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019be:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 f90d 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80019d4:	f000 fe28 	bl	8002628 <Error_Handler>
  }
}
 80019d8:	bf00      	nop
 80019da:	37c0      	adds	r7, #192	; 0xc0
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	02090000 	.word	0x02090000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a0a:	4a30      	ldr	r2, [pc, #192]	; (8001acc <MX_ADC1_Init+0xe8>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a64:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a66:	f001 fe21 	bl	80036ac <HAL_ADC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fdda 	bl	8002628 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001a80:	f002 fc34 	bl	80042ec <HAL_ADCEx_MultiModeConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a8a:	f000 fdcd 	bl	8002628 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_ADC1_Init+0xec>)
 8001a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a92:	2306      	movs	r3, #6
 8001a94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_ADC1_Init+0xe4>)
 8001ab2:	f001 ff9b 	bl	80039ec <HAL_ADC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001abc:	f000 fdb4 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24027620 	.word	0x24027620
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	10c00010 	.word	0x10c00010

08001ad4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <MX_CRC_Init+0x40>)
 8001adc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001aec:	2220      	movs	r2, #32
 8001aee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_CRC_Init+0x3c>)
 8001afe:	f002 fdb3 	bl	8004668 <HAL_CRC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b08:	f000 fd8e 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2402745c 	.word	0x2402745c
 8001b14:	58024c00 	.word	0x58024c00

08001b18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <MX_RTC_Init+0x4c>)
 8001b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b2a:	227f      	movs	r2, #127	; 0x7f
 8001b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b30:	22ff      	movs	r2, #255	; 0xff
 8001b32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b4e:	f009 f9d1 	bl	800aef4 <HAL_RTC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001b58:	f000 fd66 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24027828 	.word	0x24027828
 8001b64:	58004000 	.word	0x58004000

08001b68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <MX_SPI3_Init+0xac>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b80:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001b9e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ba2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_SPI3_Init+0xa8>)
 8001bfc:	f009 fa86 	bl	800b10c <HAL_SPI_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001c06:	f000 fd0f 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	24027594 	.word	0x24027594
 8001c14:	40003c00 	.word	0x40003c00

08001c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <MX_TIM1_Init+0xa4>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c62:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c64:	f009 fe31 	bl	800b8ca <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f000 fcdb 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001c80:	f00a f9e2 	bl	800c048 <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c8a:	f000 fccd 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM1_Init+0xa0>)
 8001ca0:	f00a fef4 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001caa:	f000 fcbd 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2402784c 	.word	0x2402784c
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d08:	f009 fddf 	bl	800b8ca <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d12:	f000 fc89 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d30:	f00a f98a 	bl	800c048 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d3a:	f000 fc75 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_TIM2_Init+0xa4>)
 8001d4c:	f00a fe9e 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d56:	f000 fc67 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	240279b8 	.word	0x240279b8

08001d68 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <MX_TIM12_Init+0xd8>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001da0:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001db4:	4821      	ldr	r0, [pc, #132]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001db6:	f009 fd88 	bl	800b8ca <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001dc0:	f000 fc32 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001dd2:	f00a f939 	bl	800c048 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ddc:	f000 fc24 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001de2:	f009 fea1 	bl	800bb28 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dec:	f000 fc1c 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e08:	f00a f80e 	bl	800be28 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001e12:	f000 fc09 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2204      	movs	r2, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e1e:	f00a f803 	bl	800be28 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001e28:	f000 fbfe 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM12_Init+0xd4>)
 8001e2e:	f000 fdc1 	bl	80029b4 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24027bd4 	.word	0x24027bd4
 8001e40:	40001800 	.word	0x40001800

08001e44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <MX_UART4_Init+0x94>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <MX_UART4_Init+0x98>)
 8001e52:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e68:	220c      	movs	r2, #12
 8001e6a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e8c:	f00a fea4 	bl	800cbd8 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001e96:	f000 fbc7 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001e9e:	f00c fcef 	bl	800e880 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001ea8:	f000 fbbe 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001eb0:	f00c fd24 	bl	800e8fc <HAL_UARTEx_SetRxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001eba:	f000 fbb5 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_UART4_Init+0x90>)
 8001ec0:	f00c fca5 	bl	800e80e <HAL_UARTEx_DisableFifoMode>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001eca:	f000 fbad 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	24027928 	.word	0x24027928
 8001ed8:	40004c00 	.word	0x40004c00
 8001edc:	001e8480 	.word	0x001e8480

08001ee0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <MX_UART8_Init+0x90>)
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <MX_UART8_Init+0x94>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <MX_UART8_Init+0x90>)
 8001eec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001ef0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <MX_UART8_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <MX_UART8_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f28:	4811      	ldr	r0, [pc, #68]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f2a:	f00a fe55 	bl	800cbd8 <HAL_UART_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 fb78 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480d      	ldr	r0, [pc, #52]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f3c:	f00c fca0 	bl	800e880 <HAL_UARTEx_SetTxFifoThreshold>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f000 fb6f 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4808      	ldr	r0, [pc, #32]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f4e:	f00c fcd5 	bl	800e8fc <HAL_UARTEx_SetRxFifoThreshold>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f000 fb66 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_UART8_Init+0x90>)
 8001f5e:	f00c fc56 	bl	800e80e <HAL_UARTEx_DisableFifoMode>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f000 fb5e 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	24027898 	.word	0x24027898
 8001f74:	40007c00 	.word	0x40007c00

08001f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <MX_USART2_UART_Init+0x94>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fc2:	f00a fe09 	bl	800cbd8 <HAL_UART_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fcc:	f000 fb2c 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fd4:	f00c fc54 	bl	800e880 <HAL_UARTEx_SetTxFifoThreshold>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fde:	f000 fb23 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4808      	ldr	r0, [pc, #32]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001fe6:	f00c fc89 	bl	800e8fc <HAL_UARTEx_SetRxFifoThreshold>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f000 fb1a 	bl	8002628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_USART2_UART_Init+0x90>)
 8001ff6:	f00c fc0a 	bl	800e80e <HAL_UARTEx_DisableFifoMode>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002000:	f000 fb12 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	24027a50 	.word	0x24027a50
 800200c:	40004400 	.word	0x40004400

08002010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_DMA_Init+0x8c>)
 8002018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <MX_DMA_Init+0x8c>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <MX_DMA_Init+0x8c>)
 8002028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2105      	movs	r1, #5
 8002038:	200b      	movs	r0, #11
 800203a:	f002 faed 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800203e:	200b      	movs	r0, #11
 8002040:	f002 fb04 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2105      	movs	r1, #5
 8002048:	200c      	movs	r0, #12
 800204a:	f002 fae5 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800204e:	200c      	movs	r0, #12
 8002050:	f002 fafc 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2105      	movs	r1, #5
 8002058:	200d      	movs	r0, #13
 800205a:	f002 fadd 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800205e:	200d      	movs	r0, #13
 8002060:	f002 faf4 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2105      	movs	r1, #5
 8002068:	200e      	movs	r0, #14
 800206a:	f002 fad5 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800206e:	200e      	movs	r0, #14
 8002070:	f002 faec 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2105      	movs	r1, #5
 8002078:	200f      	movs	r0, #15
 800207a:	f002 facd 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800207e:	200f      	movs	r0, #15
 8002080:	f002 fae4 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2010      	movs	r0, #16
 800208a:	f002 fac5 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800208e:	2010      	movs	r0, #16
 8002090:	f002 fadc 	bl	800464c <HAL_NVIC_EnableIRQ>

}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	58024400 	.word	0x58024400

080020a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b090      	sub	sp, #64	; 0x40
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	4bc0      	ldr	r3, [pc, #768]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	4abe      	ldr	r2, [pc, #760]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c6:	4bbc      	ldr	r3, [pc, #752]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020d4:	4bb8      	ldr	r3, [pc, #736]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	4ab7      	ldr	r2, [pc, #732]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e4:	4bb4      	ldr	r3, [pc, #720]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f2:	4bb1      	ldr	r3, [pc, #708]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	4aaf      	ldr	r2, [pc, #700]	; (80023b8 <MX_GPIO_Init+0x318>)
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002102:	4bad      	ldr	r3, [pc, #692]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002110:	4ba9      	ldr	r3, [pc, #676]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	4aa8      	ldr	r2, [pc, #672]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002120:	4ba5      	ldr	r3, [pc, #660]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4ba2      	ldr	r3, [pc, #648]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	4aa0      	ldr	r2, [pc, #640]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <MX_GPIO_Init+0x318>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	4a99      	ldr	r2, [pc, #612]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <MX_GPIO_Init+0x318>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800216a:	4b93      	ldr	r3, [pc, #588]	; (80023b8 <MX_GPIO_Init+0x318>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a91      	ldr	r2, [pc, #580]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <MX_GPIO_Init+0x318>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002188:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <MX_GPIO_Init+0x318>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	4a8a      	ldr	r2, [pc, #552]	; (80023b8 <MX_GPIO_Init+0x318>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002198:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <MX_GPIO_Init+0x318>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	4a82      	ldr	r2, [pc, #520]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b6:	4b80      	ldr	r3, [pc, #512]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c4:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	4a7b      	ldr	r2, [pc, #492]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d4:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021e2:	4b75      	ldr	r3, [pc, #468]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e8:	4a73      	ldr	r2, [pc, #460]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f2:	4b71      	ldr	r3, [pc, #452]	; (80023b8 <MX_GPIO_Init+0x318>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2109      	movs	r1, #9
 8002204:	486d      	ldr	r0, [pc, #436]	; (80023bc <MX_GPIO_Init+0x31c>)
 8002206:	f005 fc2f 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800220a:	2200      	movs	r2, #0
 800220c:	f24f 2191 	movw	r1, #62097	; 0xf291
 8002210:	486b      	ldr	r0, [pc, #428]	; (80023c0 <MX_GPIO_Init+0x320>)
 8002212:	f005 fc29 	bl	8007a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2104      	movs	r1, #4
 800221a:	486a      	ldr	r0, [pc, #424]	; (80023c4 <MX_GPIO_Init+0x324>)
 800221c:	f005 fc24 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002220:	2200      	movs	r2, #0
 8002222:	f248 013f 	movw	r1, #32831	; 0x803f
 8002226:	4868      	ldr	r0, [pc, #416]	; (80023c8 <MX_GPIO_Init+0x328>)
 8002228:	f005 fc1e 	bl	8007a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	f24b 0120 	movw	r1, #45088	; 0xb020
 8002232:	4866      	ldr	r0, [pc, #408]	; (80023cc <MX_GPIO_Init+0x32c>)
 8002234:	f005 fc18 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223e:	4864      	ldr	r0, [pc, #400]	; (80023d0 <MX_GPIO_Init+0x330>)
 8002240:	f005 fc12 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002244:	2200      	movs	r2, #0
 8002246:	21fc      	movs	r1, #252	; 0xfc
 8002248:	4862      	ldr	r0, [pc, #392]	; (80023d4 <MX_GPIO_Init+0x334>)
 800224a:	f005 fc0d 	bl	8007a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2108      	movs	r1, #8
 8002252:	4861      	ldr	r0, [pc, #388]	; (80023d8 <MX_GPIO_Init+0x338>)
 8002254:	f005 fc08 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8002258:	2309      	movs	r3, #9
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	4853      	ldr	r0, [pc, #332]	; (80023bc <MX_GPIO_Init+0x31c>)
 8002270:	f005 fa32 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002274:	f24f 2391 	movw	r3, #62097	; 0xf291
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228a:	4619      	mov	r1, r3
 800228c:	484c      	ldr	r0, [pc, #304]	; (80023c0 <MX_GPIO_Init+0x320>)
 800228e:	f005 fa23 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002292:	2304      	movs	r3, #4
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a6:	4619      	mov	r1, r3
 80022a8:	4846      	ldr	r0, [pc, #280]	; (80023c4 <MX_GPIO_Init+0x324>)
 80022aa:	f005 fa15 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b2:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <MX_GPIO_Init+0x33c>)
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b6:	2302      	movs	r3, #2
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022be:	4619      	mov	r1, r3
 80022c0:	4842      	ldr	r0, [pc, #264]	; (80023cc <MX_GPIO_Init+0x32c>)
 80022c2:	f005 fa09 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80022c6:	23de      	movs	r3, #222	; 0xde
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ca:	4b44      	ldr	r3, [pc, #272]	; (80023dc <MX_GPIO_Init+0x33c>)
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	483c      	ldr	r0, [pc, #240]	; (80023cc <MX_GPIO_Init+0x32c>)
 80022da:	f005 f9fd 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022de:	f248 033f 	movw	r3, #32831	; 0x803f
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	4619      	mov	r1, r3
 80022f6:	4834      	ldr	r0, [pc, #208]	; (80023c8 <MX_GPIO_Init+0x328>)
 80022f8:	f005 f9ee 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80022fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <MX_GPIO_Init+0x33c>)
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230e:	4619      	mov	r1, r3
 8002310:	482a      	ldr	r0, [pc, #168]	; (80023bc <MX_GPIO_Init+0x31c>)
 8002312:	f005 f9e1 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002316:	f24b 0320 	movw	r3, #45088	; 0xb020
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	2301      	movs	r3, #1
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232c:	4619      	mov	r1, r3
 800232e:	4827      	ldr	r0, [pc, #156]	; (80023cc <MX_GPIO_Init+0x32c>)
 8002330:	f005 f9d2 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4820      	ldr	r0, [pc, #128]	; (80023d0 <MX_GPIO_Init+0x330>)
 800234e:	f005 f9c3 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002352:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8002364:	230c      	movs	r3, #12
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236c:	4619      	mov	r1, r3
 800236e:	481c      	ldr	r0, [pc, #112]	; (80023e0 <MX_GPIO_Init+0x340>)
 8002370:	f005 f9b2 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002386:	4619      	mov	r1, r3
 8002388:	4815      	ldr	r0, [pc, #84]	; (80023e0 <MX_GPIO_Init+0x340>)
 800238a:	f005 f9a5 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800238e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a0:	2307      	movs	r3, #7
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	480b      	ldr	r0, [pc, #44]	; (80023d8 <MX_GPIO_Init+0x338>)
 80023ac:	f005 f994 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 80023b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b4:	e016      	b.n	80023e4 <MX_GPIO_Init+0x344>
 80023b6:	bf00      	nop
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58021000 	.word	0x58021000
 80023c0:	58022000 	.word	0x58022000
 80023c4:	58021400 	.word	0x58021400
 80023c8:	58021800 	.word	0x58021800
 80023cc:	58022400 	.word	0x58022400
 80023d0:	58021c00 	.word	0x58021c00
 80023d4:	58022800 	.word	0x58022800
 80023d8:	58020c00 	.word	0x58020c00
 80023dc:	11110000 	.word	0x11110000
 80023e0:	58020400 	.word	0x58020400
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e6:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <MX_GPIO_Init+0x540>)
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f2:	4619      	mov	r1, r3
 80023f4:	487b      	ldr	r0, [pc, #492]	; (80025e4 <MX_GPIO_Init+0x544>)
 80023f6:	f005 f96f 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800240c:	2305      	movs	r3, #5
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002414:	4619      	mov	r1, r3
 8002416:	4874      	ldr	r0, [pc, #464]	; (80025e8 <MX_GPIO_Init+0x548>)
 8002418:	f005 f95e 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800241c:	2303      	movs	r3, #3
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800242c:	2305      	movs	r3, #5
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002434:	4619      	mov	r1, r3
 8002436:	486d      	ldr	r0, [pc, #436]	; (80025ec <MX_GPIO_Init+0x54c>)
 8002438:	f005 f94e 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800243c:	23fc      	movs	r3, #252	; 0xfc
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800244c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002450:	4619      	mov	r1, r3
 8002452:	4866      	ldr	r0, [pc, #408]	; (80025ec <MX_GPIO_Init+0x54c>)
 8002454:	f005 f940 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <MX_GPIO_Init+0x540>)
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	4860      	ldr	r0, [pc, #384]	; (80025f0 <MX_GPIO_Init+0x550>)
 800246e:	f005 f933 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002484:	2300      	movs	r3, #0
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4859      	ldr	r0, [pc, #356]	; (80025f4 <MX_GPIO_Init+0x554>)
 8002490:	f005 f922 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a2:	2302      	movs	r3, #2
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80024a6:	2309      	movs	r3, #9
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4851      	ldr	r0, [pc, #324]	; (80025f8 <MX_GPIO_Init+0x558>)
 80024b2:	f005 f911 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI2 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024b6:	230e      	movs	r3, #14
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024c6:	2305      	movs	r3, #5
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	484a      	ldr	r0, [pc, #296]	; (80025fc <MX_GPIO_Init+0x55c>)
 80024d2:	f005 f901 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 80024e8:	2307      	movs	r3, #7
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4840      	ldr	r0, [pc, #256]	; (80025f4 <MX_GPIO_Init+0x554>)
 80024f4:	f005 f8f0 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024f8:	2308      	movs	r3, #8
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	4835      	ldr	r0, [pc, #212]	; (80025e4 <MX_GPIO_Init+0x544>)
 8002510:	f005 f8e2 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002524:	2305      	movs	r3, #5
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	482d      	ldr	r0, [pc, #180]	; (80025e4 <MX_GPIO_Init+0x544>)
 8002530:	f005 f8d2 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002534:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002546:	2305      	movs	r3, #5
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4827      	ldr	r0, [pc, #156]	; (80025f0 <MX_GPIO_Init+0x550>)
 8002552:	f005 f8c1 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002556:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002568:	2305      	movs	r3, #5
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800256c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	481f      	ldr	r0, [pc, #124]	; (80025f0 <MX_GPIO_Init+0x550>)
 8002574:	f005 f8b0 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002588:	2309      	movs	r3, #9
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002590:	4619      	mov	r1, r3
 8002592:	481b      	ldr	r0, [pc, #108]	; (8002600 <MX_GPIO_Init+0x560>)
 8002594:	f005 f8a0 	bl	80076d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a8:	2303      	movs	r3, #3
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b0:	4619      	mov	r1, r3
 80025b2:	4812      	ldr	r0, [pc, #72]	; (80025fc <MX_GPIO_Init+0x55c>)
 80025b4:	f005 f890 	bl	80076d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2105      	movs	r1, #5
 80025bc:	2006      	movs	r0, #6
 80025be:	f002 f82b 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025c2:	2006      	movs	r0, #6
 80025c4:	f002 f842 	bl	800464c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2105      	movs	r1, #5
 80025cc:	2028      	movs	r0, #40	; 0x28
 80025ce:	f002 f823 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025d2:	2028      	movs	r0, #40	; 0x28
 80025d4:	f002 f83a 	bl	800464c <HAL_NVIC_EnableIRQ>

}
 80025d8:	bf00      	nop
 80025da:	3740      	adds	r7, #64	; 0x40
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	11110000 	.word	0x11110000
 80025e4:	58020c00 	.word	0x58020c00
 80025e8:	58022400 	.word	0x58022400
 80025ec:	58022800 	.word	0x58022800
 80025f0:	58021800 	.word	0x58021800
 80025f4:	58020000 	.word	0x58020000
 80025f8:	58021c00 	.word	0x58021c00
 80025fc:	58022000 	.word	0x58022000
 8002600:	58020400 	.word	0x58020400

08002604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002616:	f000 fe91 	bl	800333c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40001000 	.word	0x40001000

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_MspInit+0x38>)
 8002640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_MspInit+0x38>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_MspInit+0x38>)
 8002650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	210f      	movs	r1, #15
 8002660:	f06f 0001 	mvn.w	r0, #1
 8002664:	f001 ffd8 	bl	8004618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400

08002674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_ADC_MspInit+0x80>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d129      	bne.n	80026ea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 8002698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 80026a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_ADC_MspInit+0x84>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026d2:	2310      	movs	r3, #16
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	2303      	movs	r3, #3
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_ADC_MspInit+0x88>)
 80026e6:	f004 fff7 	bl	80076d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40022000 	.word	0x40022000
 80026f8:	58024400 	.word	0x58024400
 80026fc:	58020800 	.word	0x58020800

08002700 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_CRC_MspInit+0x3c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10e      	bne.n	8002730 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_CRC_MspInit+0x40>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002718:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_CRC_MspInit+0x40>)
 800271a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800271e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_CRC_MspInit+0x40>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58024c00 	.word	0x58024c00
 8002740:	58024400 	.word	0x58024400

08002744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0b2      	sub	sp, #200	; 0xc8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	22bc      	movs	r2, #188	; 0xbc
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00f f809 	bl	801176c <memset>
  if(hrtc->Instance==RTC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_RTC_MspInit+0x58>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d116      	bne.n	8002792 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002768:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800276a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4618      	mov	r0, r3
 8002778:	f006 fa36 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002782:	f7ff ff51 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RTC_MspInit+0x5c>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_RTC_MspInit+0x5c>)
 800278c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002792:	bf00      	nop
 8002794:	37c8      	adds	r7, #200	; 0xc8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	58004000 	.word	0x58004000
 80027a0:	58024400 	.word	0x58024400

080027a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0ba      	sub	sp, #232	; 0xe8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	22bc      	movs	r2, #188	; 0xbc
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00e ffd1 	bl	801176c <memset>
  if(hspi->Instance==SPI3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_SPI_MspInit+0x114>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d16d      	bne.n	80028b0 <HAL_SPI_MspInit+0x10c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027da:	2300      	movs	r3, #0
 80027dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027de:	f107 0318 	add.w	r3, r7, #24
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 fa00 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80027ee:	f7ff ff1b 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027f2:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_SPI_MspInit+0x118>)
 80027f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_SPI_MspInit+0x118>)
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002816:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002834:	4a21      	ldr	r2, [pc, #132]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_SPI_MspInit+0x118>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800284c:	2340      	movs	r3, #64	; 0x40
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002864:	2305      	movs	r3, #5
 8002866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800286e:	4619      	mov	r1, r3
 8002870:	4813      	ldr	r0, [pc, #76]	; (80028c0 <HAL_SPI_MspInit+0x11c>)
 8002872:	f004 ff31 	bl	80076d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002876:	2308      	movs	r3, #8
 8002878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800288e:	2306      	movs	r3, #6
 8002890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002894:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002898:	4619      	mov	r1, r3
 800289a:	480a      	ldr	r0, [pc, #40]	; (80028c4 <HAL_SPI_MspInit+0x120>)
 800289c:	f004 ff1c 	bl	80076d8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2105      	movs	r1, #5
 80028a4:	2033      	movs	r0, #51	; 0x33
 80028a6:	f001 feb7 	bl	8004618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80028aa:	2033      	movs	r0, #51	; 0x33
 80028ac:	f001 fece 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	37e8      	adds	r7, #232	; 0xe8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40003c00 	.word	0x40003c00
 80028bc:	58024400 	.word	0x58024400
 80028c0:	58020c00 	.word	0x58020c00
 80028c4:	58020400 	.word	0x58020400

080028c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_TIM_Base_MspInit+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10f      	bne.n	800290a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 80028ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028f0:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 80028fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002908:	e047      	b.n	800299a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d12e      	bne.n	8002972 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002950:	2301      	movs	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002960:	2301      	movs	r3, #1
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	4810      	ldr	r0, [pc, #64]	; (80029ac <HAL_TIM_Base_MspInit+0xe4>)
 800296c:	f004 feb4 	bl	80076d8 <HAL_GPIO_Init>
}
 8002970:	e013      	b.n	800299a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM12)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_TIM_Base_MspInit+0xe8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10e      	bne.n	800299a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 8002984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002988:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_TIM_Base_MspInit+0xe0>)
 800298e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	bf00      	nop
 800299c:	3730      	adds	r7, #48	; 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	58024400 	.word	0x58024400
 80029ac:	58020000 	.word	0x58020000
 80029b0:	40001800 	.word	0x40001800

080029b4 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIM_MspPostInit+0x6c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d11f      	bne.n	8002a16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_MspPostInit+0x70>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <HAL_TIM_MspPostInit+0x70>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_TIM_MspPostInit+0x70>)
 80029e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80029f4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80029f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_TIM_MspPostInit+0x74>)
 8002a12:	f004 fe61 	bl	80076d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40001800 	.word	0x40001800
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58021c00 	.word	0x58021c00

08002a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0bc      	sub	sp, #240	; 0xf0
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	22bc      	movs	r2, #188	; 0xbc
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f00e fe8d 	bl	801176c <memset>
  if(huart->Instance==UART4)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4aae      	ldr	r2, [pc, #696]	; (8002d10 <HAL_UART_MspInit+0x2e4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f040 80a9 	bne.w	8002bb0 <HAL_UART_MspInit+0x184>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f006 f8bb 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002a78:	f7ff fdd6 	bl	8002628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a7c:	4ba5      	ldr	r3, [pc, #660]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a82:	4aa4      	ldr	r2, [pc, #656]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a8c:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa0:	4a9c      	ldr	r2, [pc, #624]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aaa:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ab8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002abc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8002ad2:	2306      	movs	r3, #6
 8002ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002adc:	4619      	mov	r1, r3
 8002ade:	488e      	ldr	r0, [pc, #568]	; (8002d18 <HAL_UART_MspInit+0x2ec>)
 8002ae0:	f004 fdfa 	bl	80076d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 8002ae4:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002ae6:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <HAL_UART_MspInit+0x2f4>)
 8002ae8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002aea:	4b8c      	ldr	r3, [pc, #560]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002afc:	4b87      	ldr	r3, [pc, #540]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b02:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b04:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0a:	4b84      	ldr	r3, [pc, #528]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002b10:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b16:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b1c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002b24:	487d      	ldr	r0, [pc, #500]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b26:	f001 ff9d 	bl	8004a64 <HAL_DMA_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002b30:	f7ff fd7a 	bl	8002628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a79      	ldr	r2, [pc, #484]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78
 8002b3a:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <HAL_UART_MspInit+0x2f0>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b42:	4a79      	ldr	r2, [pc, #484]	; (8002d28 <HAL_UART_MspInit+0x2fc>)
 8002b44:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b52:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b60:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002b6c:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b7c:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002b82:	4868      	ldr	r0, [pc, #416]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b84:	f001 ff6e 	bl	8004a64 <HAL_DMA_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002b8e:	f7ff fd4b 	bl	8002628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a63      	ldr	r2, [pc, #396]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b96:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b98:	4a62      	ldr	r2, [pc, #392]	; (8002d24 <HAL_UART_MspInit+0x2f8>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2105      	movs	r1, #5
 8002ba2:	2034      	movs	r0, #52	; 0x34
 8002ba4:	f001 fd38 	bl	8004618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ba8:	2034      	movs	r0, #52	; 0x34
 8002baa:	f001 fd4f 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bae:	e176      	b.n	8002e9e <HAL_UART_MspInit+0x472>
  else if(huart->Instance==UART8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_UART_MspInit+0x300>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f040 80c4 	bne.w	8002d44 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc6:	f107 0320 	add.w	r3, r7, #32
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f006 f80c 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002bd6:	f7ff fd27 	bl	8002628 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002bda:	4b4e      	ldr	r3, [pc, #312]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bea:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	4a45      	ldr	r2, [pc, #276]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_UART_MspInit+0x2e8>)
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c30:	2308      	movs	r3, #8
 8002c32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	483c      	ldr	r0, [pc, #240]	; (8002d30 <HAL_UART_MspInit+0x304>)
 8002c3e:	f004 fd4b 	bl	80076d8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 8002c42:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_UART_MspInit+0x30c>)
 8002c46:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c4a:	2251      	movs	r2, #81	; 0x51
 8002c4c:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c60:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c74:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c7c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002c84:	482b      	ldr	r0, [pc, #172]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c86:	f001 feed 	bl	8004a64 <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8002c90:	f7ff fcca 	bl	8002628 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c98:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c9a:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <HAL_UART_MspInit+0x308>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8002ca0:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_UART_MspInit+0x314>)
 8002ca4:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002ca6:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002ca8:	2252      	movs	r2, #82	; 0x52
 8002caa:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbe:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002ce0:	4816      	ldr	r0, [pc, #88]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002ce2:	f001 febf 	bl	8004a64 <HAL_DMA_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002cec:	f7ff fc9c 	bl	8002628 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cf4:	679a      	str	r2, [r3, #120]	; 0x78
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_UART_MspInit+0x310>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2105      	movs	r1, #5
 8002d00:	2053      	movs	r0, #83	; 0x53
 8002d02:	f001 fc89 	bl	8004618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002d06:	2053      	movs	r0, #83	; 0x53
 8002d08:	f001 fca0 	bl	800464c <HAL_NVIC_EnableIRQ>
}
 8002d0c:	e0c7      	b.n	8002e9e <HAL_UART_MspInit+0x472>
 8002d0e:	bf00      	nop
 8002d10:	40004c00 	.word	0x40004c00
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58020000 	.word	0x58020000
 8002d1c:	24027c24 	.word	0x24027c24
 8002d20:	40020010 	.word	0x40020010
 8002d24:	24027368 	.word	0x24027368
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40007c00 	.word	0x40007c00
 8002d30:	58022400 	.word	0x58022400
 8002d34:	240276fc 	.word	0x240276fc
 8002d38:	40020040 	.word	0x40020040
 8002d3c:	240277b0 	.word	0x240277b0
 8002d40:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <HAL_UART_MspInit+0x47c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 80a7 	bne.w	8002e9e <HAL_UART_MspInit+0x472>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d5a:	f107 0320 	add.w	r3, r7, #32
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f005 ff42 	bl	8008be8 <HAL_RCCEx_PeriphCLKConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_UART_MspInit+0x342>
      Error_Handler();
 8002d6a:	f7ff fc5d 	bl	8002628 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d74:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	4a46      	ldr	r2, [pc, #280]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_UART_MspInit+0x480>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002daa:	230c      	movs	r3, #12
 8002dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4838      	ldr	r0, [pc, #224]	; (8002eb0 <HAL_UART_MspInit+0x484>)
 8002dd0:	f004 fc82 	bl	80076d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002dd6:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <HAL_UART_MspInit+0x48c>)
 8002dd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002ddc:	222b      	movs	r2, #43	; 0x2b
 8002dde:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de0:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e16:	4827      	ldr	r0, [pc, #156]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e18:	f001 fe24 	bl	8004a64 <HAL_DMA_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x3fa>
      Error_Handler();
 8002e22:	f7ff fc01 	bl	8002628 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e2a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e2c:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_UART_MspInit+0x488>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_UART_MspInit+0x494>)
 8002e36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e3a:	222c      	movs	r2, #44	; 0x2c
 8002e3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e72:	4812      	ldr	r0, [pc, #72]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e74:	f001 fdf6 	bl	8004a64 <HAL_DMA_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_UART_MspInit+0x456>
      Error_Handler();
 8002e7e:	f7ff fbd3 	bl	8002628 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e86:	679a      	str	r2, [r3, #120]	; 0x78
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_UART_MspInit+0x490>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2105      	movs	r1, #5
 8002e92:	2026      	movs	r0, #38	; 0x26
 8002e94:	f001 fbc0 	bl	8004618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e98:	2026      	movs	r0, #38	; 0x26
 8002e9a:	f001 fbd7 	bl	800464c <HAL_NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	37f0      	adds	r7, #240	; 0xf0
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	58020000 	.word	0x58020000
 8002eb4:	240273e4 	.word	0x240273e4
 8002eb8:	40020058 	.word	0x40020058
 8002ebc:	24027684 	.word	0x24027684
 8002ec0:	40020070 	.word	0x40020070

08002ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b090      	sub	sp, #64	; 0x40
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	d827      	bhi.n	8002f22 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	2036      	movs	r0, #54	; 0x36
 8002ed8:	f001 fb9e 	bl	8004618 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002edc:	2036      	movs	r0, #54	; 0x36
 8002ede:	f001 fbb5 	bl	800464c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_InitTick+0xc4>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_InitTick+0xc8>)
 8002eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eee:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <HAL_InitTick+0xc8>)
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_InitTick+0xc8>)
 8002efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f06:	f107 0210 	add.w	r2, r7, #16
 8002f0a:	f107 0314 	add.w	r3, r7, #20
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fe27 	bl	8008b64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_InitTick+0x6a>
 8002f20:	e001      	b.n	8002f26 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02b      	b.n	8002f7e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f26:	f005 fdf1 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 8002f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002f2c:	e004      	b.n	8002f38 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f2e:	f005 fded 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 8002f32:	4603      	mov	r3, r0
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <HAL_InitTick+0xcc>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	0c9b      	lsrs	r3, r3, #18
 8002f42:	3b01      	subs	r3, #1
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <HAL_InitTick+0xd4>)
 8002f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f54:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f66:	480b      	ldr	r0, [pc, #44]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f68:	f008 fcaf 	bl	800b8ca <HAL_TIM_Base_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f72:	4808      	ldr	r0, [pc, #32]	; (8002f94 <HAL_InitTick+0xd0>)
 8002f74:	f008 fd68 	bl	800ba48 <HAL_TIM_Base_Start_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	e000      	b.n	8002f7e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3740      	adds	r7, #64	; 0x40
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2400000c 	.word	0x2400000c
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	24027ce8 	.word	0x24027ce8
 8002f98:	40001000 	.word	0x40001000

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <HardFault_Handler+0x4>

08002fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <MemManage_Handler+0x4>

08002fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f004 fd64 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <DMA1_Stream0_IRQHandler+0x10>)
 8002fde:	f003 f869 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	24027c24 	.word	0x24027c24

08002fec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <DMA1_Stream1_IRQHandler+0x10>)
 8002ff2:	f003 f85f 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	24027368 	.word	0x24027368

08003000 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <DMA1_Stream2_IRQHandler+0x10>)
 8003006:	f003 f855 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	240276fc 	.word	0x240276fc

08003014 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <DMA1_Stream3_IRQHandler+0x10>)
 800301a:	f003 f84b 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	240273e4 	.word	0x240273e4

08003028 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Stream4_IRQHandler+0x10>)
 800302e:	f003 f841 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	24027684 	.word	0x24027684

0800303c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <DMA1_Stream5_IRQHandler+0x10>)
 8003042:	f003 f837 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	240277b0 	.word	0x240277b0

08003050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <USART2_IRQHandler+0x10>)
 8003056:	f00a f83f 	bl	800d0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	24027a50 	.word	0x24027a50

08003064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003068:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800306c:	f004 fd15 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003070:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003074:	f004 fd11 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003078:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800307c:	f004 fd0d 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003080:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003084:	f004 fd09 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003088:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800308c:	f004 fd05 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003090:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003094:	f004 fd01 	bl	8007a9a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <SPI3_IRQHandler+0x10>)
 80030a2:	f008 f935 	bl	800b310 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	24027594 	.word	0x24027594

080030b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <UART4_IRQHandler+0x10>)
 80030b6:	f00a f80f 	bl	800d0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	24027928 	.word	0x24027928

080030c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <TIM6_DAC_IRQHandler+0x10>)
 80030ca:	f008 fd8e 	bl	800bbea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	24027ce8 	.word	0x24027ce8

080030d8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <UART8_IRQHandler+0x10>)
 80030de:	f009 fffb 	bl	800d0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	24027898 	.word	0x24027898

080030ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <_sbrk+0x5c>)
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <_sbrk+0x60>)
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <_sbrk+0x64>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <_sbrk+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800311c:	f00e faec 	bl	80116f8 <__errno>
 8003120:	4603      	mov	r3, r0
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	e009      	b.n	8003140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <_sbrk+0x64>)
 800313c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	24080000 	.word	0x24080000
 800314c:	00000400 	.word	0x00000400
 8003150:	240000cc 	.word	0x240000cc
 8003154:	24027d88 	.word	0x24027d88

08003158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <SystemInit+0xec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	4a38      	ldr	r2, [pc, #224]	; (8003244 <SystemInit+0xec>)
 8003164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800316c:	4b36      	ldr	r3, [pc, #216]	; (8003248 <SystemInit+0xf0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	2b06      	cmp	r3, #6
 8003176:	d807      	bhi.n	8003188 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <SystemInit+0xf0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 030f 	bic.w	r3, r3, #15
 8003180:	4a31      	ldr	r2, [pc, #196]	; (8003248 <SystemInit+0xf0>)
 8003182:	f043 0307 	orr.w	r3, r3, #7
 8003186:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003188:	4b30      	ldr	r3, [pc, #192]	; (800324c <SystemInit+0xf4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2f      	ldr	r2, [pc, #188]	; (800324c <SystemInit+0xf4>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <SystemInit+0xf4>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <SystemInit+0xf4>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	492b      	ldr	r1, [pc, #172]	; (800324c <SystemInit+0xf4>)
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <SystemInit+0xf8>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <SystemInit+0xf0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <SystemInit+0xf0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <SystemInit+0xf0>)
 80031bc:	f043 0307 	orr.w	r3, r3, #7
 80031c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <SystemInit+0xf4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <SystemInit+0xf4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <SystemInit+0xf4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <SystemInit+0xf4>)
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <SystemInit+0xfc>)
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <SystemInit+0xf4>)
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <SystemInit+0x100>)
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <SystemInit+0xf4>)
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <SystemInit+0x104>)
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <SystemInit+0xf4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <SystemInit+0xf4>)
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <SystemInit+0x104>)
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <SystemInit+0xf4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <SystemInit+0xf4>)
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <SystemInit+0x104>)
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <SystemInit+0xf4>)
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <SystemInit+0xf4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a10      	ldr	r2, [pc, #64]	; (800324c <SystemInit+0xf4>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <SystemInit+0xf4>)
 8003212:	2200      	movs	r2, #0
 8003214:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <SystemInit+0x108>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <SystemInit+0x10c>)
 800321c:	4013      	ands	r3, r2
 800321e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003222:	d202      	bcs.n	800322a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <SystemInit+0x110>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <SystemInit+0x114>)
 800322c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003230:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SystemInit+0xec>)
 8003234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003238:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00
 8003248:	52002000 	.word	0x52002000
 800324c:	58024400 	.word	0x58024400
 8003250:	eaf6ed7f 	.word	0xeaf6ed7f
 8003254:	02020200 	.word	0x02020200
 8003258:	01ff0000 	.word	0x01ff0000
 800325c:	01010280 	.word	0x01010280
 8003260:	5c001000 	.word	0x5c001000
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	51008108 	.word	0x51008108
 800326c:	52004000 	.word	0x52004000

08003270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003274:	f7ff ff70 	bl	8003158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800327a:	e003      	b.n	8003284 <LoopCopyDataInit>

0800327c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800327e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003282:	3104      	adds	r1, #4

08003284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800328a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800328c:	d3f6      	bcc.n	800327c <CopyDataInit>
  ldr  r2, =_sbss
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003290:	e002      	b.n	8003298 <LoopFillZerobss>

08003292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003294:	f842 3b04 	str.w	r3, [r2], #4

08003298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800329a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800329c:	d3f9      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329e:	f00e fa31 	bl	8011704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a2:	f7fe f9f3 	bl	800168c <main>
  bx  lr    
 80032a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80032ac:	08012498 	.word	0x08012498
  ldr  r0, =_sdata
 80032b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80032b4:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 80032b8:	2400007c 	.word	0x2400007c
  ldr  r3, = _ebss
 80032bc:	24027d88 	.word	0x24027d88

080032c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC3_IRQHandler>
	...

080032c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ca:	2003      	movs	r0, #3
 80032cc:	f001 f999 	bl	8004602 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032d0:	f005 fa72 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_Init+0x68>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	4913      	ldr	r1, [pc, #76]	; (8003330 <HAL_Init+0x6c>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_Init+0x68>)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_Init+0x6c>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_Init+0x70>)
 8003306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <HAL_Init+0x74>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff fdd8 	bl	8002ec4 <HAL_InitTick>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e002      	b.n	8003324 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800331e:	f7ff f98b 	bl	8002638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	080122b4 	.word	0x080122b4
 8003334:	24000008 	.word	0x24000008
 8003338:	24000004 	.word	0x24000004

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	24000010 	.word	0x24000010
 8003360:	24027d34 	.word	0x24027d34

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	24027d34 	.word	0x24027d34

0800337c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_GetREVID+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0c1b      	lsrs	r3, r3, #16
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	5c001000 	.word	0x5c001000

08003394 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	609a      	str	r2, [r3, #8]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3360      	adds	r3, #96	; 0x60
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	431a      	orrs	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	611a      	str	r2, [r3, #16]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800346e:	b480      	push	{r7}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]
  }
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3330      	adds	r3, #48	; 0x30
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	4413      	add	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	211f      	movs	r1, #31
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	f003 011f 	and.w	r1, r3, #31
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	431a      	orrs	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3314      	adds	r3, #20
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	0e5b      	lsrs	r3, r3, #25
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	0d1b      	lsrs	r3, r3, #20
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2107      	movs	r1, #7
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	401a      	ands	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0d1b      	lsrs	r3, r3, #20
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	431a      	orrs	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0318 	and.w	r3, r3, #24
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003578:	40d9      	lsrs	r1, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	400b      	ands	r3, r1
 800357e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003582:	431a      	orrs	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	000fffff 	.word	0x000fffff

0800359c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6093      	str	r3, [r2, #8]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	5fffffc0 	.word	0x5fffffc0

080035c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d4:	d101      	bne.n	80035da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <LL_ADC_EnableInternalRegulator+0x24>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	6fffffc0 	.word	0x6fffffc0

08003610 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003624:	d101      	bne.n	800362a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <LL_ADC_IsEnabled+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_IsEnabled+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d101      	bne.n	8003676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d101      	bne.n	800369c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e18e      	b.n	80039e4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fe ffcd 	bl	8002674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff67 	bl	80035c0 <LL_ADC_IsDeepPowerDownEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff4d 	bl	800359c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff82 	bl	8003610 <LL_ADC_IsInternalRegulatorEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d114      	bne.n	800373c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff66 	bl	80035e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371c:	4b9a      	ldr	r3, [pc, #616]	; (8003988 <HAL_ADC_Init+0x2dc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	4a9a      	ldr	r2, [pc, #616]	; (800398c <HAL_ADC_Init+0x2e0>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800372e:	e002      	b.n	8003736 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	3b01      	subs	r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f9      	bne.n	8003730 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff65 	bl	8003610 <LL_ADC_IsInternalRegulatorEnabled>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f043 0210 	orr.w	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff76 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003772:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 8128 	bne.w	80039d2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 8124 	bne.w	80039d2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003792:	f043 0202 	orr.w	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff4a 	bl	8003638 <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d136      	bne.n	8003818 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a78      	ldr	r2, [pc, #480]	; (8003990 <HAL_ADC_Init+0x2e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_ADC_Init+0x112>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_ADC_Init+0x2e8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10e      	bne.n	80037dc <HAL_ADC_Init+0x130>
 80037be:	4874      	ldr	r0, [pc, #464]	; (8003990 <HAL_ADC_Init+0x2e4>)
 80037c0:	f7ff ff3a 	bl	8003638 <LL_ADC_IsEnabled>
 80037c4:	4604      	mov	r4, r0
 80037c6:	4873      	ldr	r0, [pc, #460]	; (8003994 <HAL_ADC_Init+0x2e8>)
 80037c8:	f7ff ff36 	bl	8003638 <LL_ADC_IsEnabled>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4323      	orrs	r3, r4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_ADC_Init+0x142>
 80037dc:	486e      	ldr	r0, [pc, #440]	; (8003998 <HAL_ADC_Init+0x2ec>)
 80037de:	f7ff ff2b 	bl	8003638 <LL_ADC_IsEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d012      	beq.n	8003818 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a66      	ldr	r2, [pc, #408]	; (8003990 <HAL_ADC_Init+0x2e4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_ADC_Init+0x15a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <HAL_ADC_Init+0x2e8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_ADC_Init+0x15e>
 8003806:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_ADC_Init+0x2f0>)
 8003808:	e000      	b.n	800380c <HAL_ADC_Init+0x160>
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_ADC_Init+0x2f4>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7ff fdbe 	bl	8003394 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003818:	f7ff fdb0 	bl	800337c <HAL_GetREVID>
 800381c:	4603      	mov	r3, r0
 800381e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003822:	4293      	cmp	r3, r2
 8003824:	d914      	bls.n	8003850 <HAL_ADC_Init+0x1a4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b10      	cmp	r3, #16
 800382c:	d110      	bne.n	8003850 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7d5b      	ldrb	r3, [r3, #21]
 8003832:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003838:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800383e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7f1b      	ldrb	r3, [r3, #28]
 8003844:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003846:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003848:	f043 030c 	orr.w	r3, r3, #12
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e00d      	b.n	800386c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7d5b      	ldrb	r3, [r3, #21]
 8003854:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800385a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003860:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7f1b      	ldrb	r3, [r3, #28]
 8003866:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7f1b      	ldrb	r3, [r3, #28]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	3b01      	subs	r3, #1
 800387a:	045b      	lsls	r3, r3, #17
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_ADC_Init+0x2f8>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	430b      	orrs	r3, r1
 80038b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fed1 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 80038bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fede 	bl	8003684 <LL_ADC_INJ_IsConversionOngoing>
 80038c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d14a      	bne.n	8003966 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d147      	bne.n	8003966 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7d1b      	ldrb	r3, [r3, #20]
 80038da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_ADC_Init+0x2fc>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	69b9      	ldr	r1, [r7, #24]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11b      	bne.n	800393a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <HAL_ADC_Init+0x300>)
 8003910:	4013      	ands	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003916:	3a01      	subs	r2, #1
 8003918:	0411      	lsls	r1, r2, #16
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800392a:	430a      	orrs	r2, r1
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	611a      	str	r2, [r3, #16]
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fb93 	bl	800408c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d120      	bne.n	80039b0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f023 010f 	bic.w	r1, r3, #15
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
 8003986:	e01b      	b.n	80039c0 <HAL_ADC_Init+0x314>
 8003988:	24000004 	.word	0x24000004
 800398c:	053e2d63 	.word	0x053e2d63
 8003990:	40022000 	.word	0x40022000
 8003994:	40022100 	.word	0x40022100
 8003998:	58026000 	.word	0x58026000
 800399c:	40022300 	.word	0x40022300
 80039a0:	58026300 	.word	0x58026300
 80039a4:	fff0c003 	.word	0xfff0c003
 80039a8:	ffffbffc 	.word	0xffffbffc
 80039ac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 020f 	bic.w	r2, r2, #15
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f023 0303 	bic.w	r3, r3, #3
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
 80039d0:	e007      	b.n	80039e2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3724      	adds	r7, #36	; 0x24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b0a1      	sub	sp, #132	; 0x84
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a9d      	ldr	r2, [pc, #628]	; (8003c7c <HAL_ADC_ConfigChannel+0x290>)
 8003a06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x2a>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e321      	b.n	800405a <HAL_ADC_ConfigChannel+0x66e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fe1b 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 8306 	bne.w	800403c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d108      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x62>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0e9b      	lsrs	r3, r3, #26
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	e016      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x90>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e003      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a6c:	fab3 f383 	clz	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	69d1      	ldr	r1, [r2, #28]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7ff fd04 	bl	80034a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fddc 	bl	800365e <LL_ADC_REG_IsConversionOngoing>
 8003aa6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fde9 	bl	8003684 <LL_ADC_INJ_IsConversionOngoing>
 8003ab2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 80b3 	bne.w	8003c22 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 80af 	bne.w	8003c22 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f7ff fd13 	bl	80034fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_ADC_ConfigChannel+0x294>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae2:	d10b      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x110>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	e01d      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x14c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x136>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	e00a      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x14c>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d027      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b50:	f7ff fc54 	bl	80033fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6919      	ldr	r1, [r3, #16]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	7e5b      	ldrb	r3, [r3, #25]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x17e>
 8003b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b68:	e000      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x180>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f7ff fc7e 	bl	800346e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6919      	ldr	r1, [r3, #16]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7e1b      	ldrb	r3, [r3, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x19c>
 8003b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b86:	e000      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x19e>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7ff fc56 	bl	800343c <LL_ADC_SetDataRightShift>
 8003b90:	e047      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	069b      	lsls	r3, r3, #26
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	069b      	lsls	r3, r3, #26
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d107      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bd8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	069b      	lsls	r3, r3, #26
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d107      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bfc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	069b      	lsls	r3, r3, #26
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d107      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c20:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd06 	bl	8003638 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 820d 	bne.w	800404e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff fc87 	bl	8003554 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_ADC_ConfigChannel+0x290>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f040 8133 	bne.w	8003eb8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d110      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x298>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	0e9b      	lsrs	r3, r3, #26
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	bf94      	ite	ls
 8003c72:	2301      	movls	r3, #1
 8003c74:	2300      	movhi	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e01e      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x2cc>
 8003c7a:	bf00      	nop
 8003c7c:	47ff0000 	.word	0x47ff0000
 8003c80:	5c001000 	.word	0x5c001000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003c9c:	2320      	movs	r3, #32
 8003c9e:	e003      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	bf94      	ite	ls
 8003cb2:	2301      	movls	r3, #1
 8003cb4:	2300      	movhi	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d079      	beq.n	8003db0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x2ec>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	3301      	adds	r3, #1
 8003cd0:	069b      	lsls	r3, r3, #26
 8003cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd6:	e015      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x318>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e003      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	069b      	lsls	r3, r3, #26
 8003d00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x338>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	3301      	adds	r3, #1
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	e017      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x368>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e003      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2101      	movs	r1, #1
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	ea42 0103 	orr.w	r1, r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x38e>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	051b      	lsls	r3, r3, #20
 8003d78:	e018      	b.n	8003dac <HAL_ADC_ConfigChannel+0x3c0>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e003      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dac:	430b      	orrs	r3, r1
 8003dae:	e07e      	b.n	8003eae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d107      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x3e0>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	069b      	lsls	r3, r3, #26
 8003dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dca:	e015      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x40c>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	e003      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	069b      	lsls	r3, r3, #26
 8003df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x42c>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0e9b      	lsrs	r3, r3, #26
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	e017      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x45c>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	61bb      	str	r3, [r7, #24]
  return result;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	ea42 0103 	orr.w	r1, r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x488>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	3b1e      	subs	r3, #30
 8003e6c:	051b      	lsls	r3, r3, #20
 8003e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e72:	e01b      	b.n	8003eac <HAL_ADC_ConfigChannel+0x4c0>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	60fb      	str	r3, [r7, #12]
  return result;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e003      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3b1e      	subs	r3, #30
 8003ea6:	051b      	lsls	r3, r3, #20
 8003ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eac:	430b      	orrs	r3, r1
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7ff fb22 	bl	80034fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f280 80c6 	bge.w	800404e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a67      	ldr	r2, [pc, #412]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x4ea>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x4ee>
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_ADC_ConfigChannel+0x680>)
 8003ed8:	e000      	b.n	8003edc <HAL_ADC_ConfigChannel+0x4f0>
 8003eda:	4b65      	ldr	r3, [pc, #404]	; (8004070 <HAL_ADC_ConfigChannel+0x684>)
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fa7f 	bl	80033e0 <LL_ADC_GetCommonPathInternalCh>
 8003ee2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_ADC_ConfigChannel+0x50c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10e      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x52a>
 8003ef8:	485a      	ldr	r0, [pc, #360]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8003efa:	f7ff fb9d 	bl	8003638 <LL_ADC_IsEnabled>
 8003efe:	4604      	mov	r4, r0
 8003f00:	4859      	ldr	r0, [pc, #356]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 8003f02:	f7ff fb99 	bl	8003638 <LL_ADC_IsEnabled>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4323      	orrs	r3, r4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e008      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x53c>
 8003f16:	4857      	ldr	r0, [pc, #348]	; (8004074 <HAL_ADC_ConfigChannel+0x688>)
 8003f18:	f7ff fb8e 	bl	8003638 <LL_ADC_IsEnabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d07d      	beq.n	8004028 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a51      	ldr	r2, [pc, #324]	; (8004078 <HAL_ADC_ConfigChannel+0x68c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d130      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x5ac>
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d12b      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4b      	ldr	r2, [pc, #300]	; (8004074 <HAL_ADC_ConfigChannel+0x688>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f040 8081 	bne.w	800404e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a44      	ldr	r2, [pc, #272]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x574>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a43      	ldr	r2, [pc, #268]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x578>
 8003f60:	4a42      	ldr	r2, [pc, #264]	; (800406c <HAL_ADC_ConfigChannel+0x680>)
 8003f62:	e000      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x57a>
 8003f64:	4a42      	ldr	r2, [pc, #264]	; (8004070 <HAL_ADC_ConfigChannel+0x684>)
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7ff fa23 	bl	80033ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f74:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_ADC_ConfigChannel+0x690>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <HAL_ADC_ConfigChannel+0x694>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f88:	e002      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f9      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f96:	e05a      	b.n	800404e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a39      	ldr	r2, [pc, #228]	; (8004084 <HAL_ADC_ConfigChannel+0x698>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d11e      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x5f4>
 8003fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d119      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_ADC_ConfigChannel+0x688>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d14b      	bne.n	800404e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2a      	ldr	r2, [pc, #168]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_ADC_ConfigChannel+0x5de>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x5e2>
 8003fca:	4a28      	ldr	r2, [pc, #160]	; (800406c <HAL_ADC_ConfigChannel+0x680>)
 8003fcc:	e000      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x5e4>
 8003fce:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_ADC_ConfigChannel+0x684>)
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7ff f9ee 	bl	80033ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fde:	e036      	b.n	800404e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_ADC_ConfigChannel+0x69c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d131      	bne.n	800404e <HAL_ADC_ConfigChannel+0x662>
 8003fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d12c      	bne.n	800404e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_ADC_ConfigChannel+0x688>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d127      	bne.n	800404e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_ADC_ConfigChannel+0x678>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_ADC_ConfigChannel+0x626>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_ADC_ConfigChannel+0x67c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x62a>
 8004012:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_ADC_ConfigChannel+0x680>)
 8004014:	e000      	b.n	8004018 <HAL_ADC_ConfigChannel+0x62c>
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_ADC_ConfigChannel+0x684>)
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7ff f9ca 	bl	80033ba <LL_ADC_SetCommonPathInternalCh>
 8004026:	e012      	b.n	800404e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800403a:	e008      	b.n	800404e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004056:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800405a:	4618      	mov	r0, r3
 800405c:	3784      	adds	r7, #132	; 0x84
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000
 8004068:	40022100 	.word	0x40022100
 800406c:	40022300 	.word	0x40022300
 8004070:	58026300 	.word	0x58026300
 8004074:	58026000 	.word	0x58026000
 8004078:	cb840000 	.word	0xcb840000
 800407c:	24000004 	.word	0x24000004
 8004080:	053e2d63 	.word	0x053e2d63
 8004084:	c7520000 	.word	0xc7520000
 8004088:	cfb80000 	.word	0xcfb80000

0800408c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a79      	ldr	r2, [pc, #484]	; (8004280 <ADC_ConfigureBoostMode+0x1f4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <ADC_ConfigureBoostMode+0x1c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a78      	ldr	r2, [pc, #480]	; (8004284 <ADC_ConfigureBoostMode+0x1f8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <ADC_ConfigureBoostMode+0x30>
 80040a8:	4b77      	ldr	r3, [pc, #476]	; (8004288 <ADC_ConfigureBoostMode+0x1fc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e008      	b.n	80040ce <ADC_ConfigureBoostMode+0x42>
 80040bc:	4b73      	ldr	r3, [pc, #460]	; (800428c <ADC_ConfigureBoostMode+0x200>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01c      	beq.n	800410c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040d2:	f004 fceb 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 80040d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040e0:	d010      	beq.n	8004104 <ADC_ConfigureBoostMode+0x78>
 80040e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040e6:	d871      	bhi.n	80041cc <ADC_ConfigureBoostMode+0x140>
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d002      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x68>
 80040ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f2:	d16b      	bne.n	80041cc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	60fb      	str	r3, [r7, #12]
        break;
 8004102:	e066      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	60fb      	str	r3, [r7, #12]
        break;
 800410a:	e062      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800410c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004110:	f005 fcaa 	bl	8009a68 <HAL_RCCEx_GetPeriphCLKFreq>
 8004114:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800411e:	d051      	beq.n	80041c4 <ADC_ConfigureBoostMode+0x138>
 8004120:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004124:	d854      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 8004126:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800412a:	d047      	beq.n	80041bc <ADC_ConfigureBoostMode+0x130>
 800412c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004130:	d84e      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 8004132:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004136:	d03d      	beq.n	80041b4 <ADC_ConfigureBoostMode+0x128>
 8004138:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800413c:	d848      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 800413e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004142:	d033      	beq.n	80041ac <ADC_ConfigureBoostMode+0x120>
 8004144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004148:	d842      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 800414a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800414e:	d029      	beq.n	80041a4 <ADC_ConfigureBoostMode+0x118>
 8004150:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004154:	d83c      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 8004156:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800415a:	d01a      	beq.n	8004192 <ADC_ConfigureBoostMode+0x106>
 800415c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004160:	d836      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 8004162:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004166:	d014      	beq.n	8004192 <ADC_ConfigureBoostMode+0x106>
 8004168:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800416c:	d830      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 800416e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004172:	d00e      	beq.n	8004192 <ADC_ConfigureBoostMode+0x106>
 8004174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004178:	d82a      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 800417a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800417e:	d008      	beq.n	8004192 <ADC_ConfigureBoostMode+0x106>
 8004180:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004184:	d824      	bhi.n	80041d0 <ADC_ConfigureBoostMode+0x144>
 8004186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418a:	d002      	beq.n	8004192 <ADC_ConfigureBoostMode+0x106>
 800418c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004190:	d11e      	bne.n	80041d0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	60fb      	str	r3, [r7, #12]
        break;
 80041a2:	e016      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	60fb      	str	r3, [r7, #12]
        break;
 80041aa:	e012      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	60fb      	str	r3, [r7, #12]
        break;
 80041b2:	e00e      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	60fb      	str	r3, [r7, #12]
        break;
 80041ba:	e00a      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	09db      	lsrs	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
        break;
 80041c2:	e006      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	60fb      	str	r3, [r7, #12]
        break;
 80041ca:	e002      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
        break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80041d0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80041d2:	f7ff f8d3 	bl	800337c <HAL_GetREVID>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80041dc:	4293      	cmp	r3, r2
 80041de:	d815      	bhi.n	800420c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <ADC_ConfigureBoostMode+0x204>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d908      	bls.n	80041fa <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80041f8:	e03e      	b.n	8004278 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004208:	609a      	str	r2, [r3, #8]
}
 800420a:	e035      	b.n	8004278 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <ADC_ConfigureBoostMode+0x208>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d808      	bhi.n	800422c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	e025      	b.n	8004278 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <ADC_ConfigureBoostMode+0x20c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d80a      	bhi.n	800424a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	e016      	b.n	8004278 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <ADC_ConfigureBoostMode+0x210>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d80a      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	e007      	b.n	8004278 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40022000 	.word	0x40022000
 8004284:	40022100 	.word	0x40022100
 8004288:	40022300 	.word	0x40022300
 800428c:	58026300 	.word	0x58026300
 8004290:	01312d00 	.word	0x01312d00
 8004294:	005f5e10 	.word	0x005f5e10
 8004298:	00bebc20 	.word	0x00bebc20
 800429c:	017d7840 	.word	0x017d7840

080042a0 <LL_ADC_IsEnabled>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_IsEnabled+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_IsEnabled+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d101      	bne.n	80042de <LL_ADC_REG_IsConversionOngoing+0x18>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b09f      	sub	sp, #124	; 0x7c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e0be      	b.n	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004316:	2300      	movs	r3, #0
 8004318:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a5c      	ldr	r2, [pc, #368]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d102      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e001      	b.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e09d      	b.n	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ffb9 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004354:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ffb3 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d17f      	bne.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004368:	2b00      	cmp	r3, #0
 800436a:	d17c      	bne.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a47      	ldr	r2, [pc, #284]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a46      	ldr	r2, [pc, #280]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004382:	e000      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004386:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d039      	beq.n	8004404 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	431a      	orrs	r2, r3
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a38      	ldr	r2, [pc, #224]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10e      	bne.n	80043d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043b6:	4836      	ldr	r0, [pc, #216]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043b8:	f7ff ff72 	bl	80042a0 <LL_ADC_IsEnabled>
 80043bc:	4604      	mov	r4, r0
 80043be:	4835      	ldr	r0, [pc, #212]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043c0:	f7ff ff6e 	bl	80042a0 <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4323      	orrs	r3, r4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e008      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80043d4:	4832      	ldr	r0, [pc, #200]	; (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043d6:	f7ff ff63 	bl	80042a0 <LL_ADC_IsEnabled>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d047      	beq.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	6892      	ldr	r2, [r2, #8]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	431a      	orrs	r2, r3
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004402:	e03a      	b.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10e      	bne.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004424:	481a      	ldr	r0, [pc, #104]	; (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004426:	f7ff ff3b 	bl	80042a0 <LL_ADC_IsEnabled>
 800442a:	4604      	mov	r4, r0
 800442c:	4819      	ldr	r0, [pc, #100]	; (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800442e:	f7ff ff37 	bl	80042a0 <LL_ADC_IsEnabled>
 8004432:	4603      	mov	r3, r0
 8004434:	4323      	orrs	r3, r4
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e008      	b.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004442:	4817      	ldr	r0, [pc, #92]	; (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004444:	f7ff ff2c 	bl	80042a0 <LL_ADC_IsEnabled>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d010      	beq.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800445e:	4013      	ands	r3, r2
 8004460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004462:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004464:	e009      	b.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004478:	e000      	b.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004484:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004488:	4618      	mov	r0, r3
 800448a:	377c      	adds	r7, #124	; 0x7c
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}
 8004490:	40022000 	.word	0x40022000
 8004494:	40022100 	.word	0x40022100
 8004498:	40022300 	.word	0x40022300
 800449c:	58026300 	.word	0x58026300
 80044a0:	58026000 	.word	0x58026000
 80044a4:	fffff0e0 	.word	0xfffff0e0

080044a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <__NVIC_SetPriorityGrouping+0x40>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <__NVIC_SetPriorityGrouping+0x40>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	60d3      	str	r3, [r2, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00
 80044ec:	05fa0000 	.word	0x05fa0000

080044f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <__NVIC_GetPriorityGrouping+0x18>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db0b      	blt.n	8004536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4907      	ldr	r1, [pc, #28]	; (8004544 <__NVIC_EnableIRQ+0x38>)
 8004526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100

08004548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	; (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	; (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf28      	it	cs
 80045ba:	2304      	movcs	r3, #4
 80045bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d902      	bls.n	80045cc <NVIC_EncodePriority+0x30>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3b03      	subs	r3, #3
 80045ca:	e000      	b.n	80045ce <NVIC_EncodePriority+0x32>
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	401a      	ands	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	4313      	orrs	r3, r2
         );
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff4c 	bl	80044a8 <__NVIC_SetPriorityGrouping>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004626:	f7ff ff63 	bl	80044f0 <__NVIC_GetPriorityGrouping>
 800462a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7ff ffb3 	bl	800459c <NVIC_EncodePriority>
 8004636:	4602      	mov	r2, r0
 8004638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff82 	bl	8004548 <__NVIC_SetPriority>
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff56 	bl	800450c <__NVIC_EnableIRQ>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e054      	b.n	8004724 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7f5b      	ldrb	r3, [r3, #29]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe f838 	bl	8002700 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a22      	ldr	r2, [pc, #136]	; (800472c <HAL_CRC_Init+0xc4>)
 80046a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0218 	bic.w	r2, r2, #24
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	e00c      	b.n	80046d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f948 	bl	8004958 <HAL_CRCEx_Polynomial_Set>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e028      	b.n	8004724 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	795b      	ldrb	r3, [r3, #5]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	611a      	str	r2, [r3, #16]
 80046e4:	e004      	b.n	80046f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6912      	ldr	r2, [r2, #16]
 80046ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	04c11db7 	.word	0x04c11db7

08004730 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2202      	movs	r2, #2
 8004744:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d006      	beq.n	800476c <HAL_CRC_Calculate+0x3c>
 800475e:	2b03      	cmp	r3, #3
 8004760:	d829      	bhi.n	80047b6 <HAL_CRC_Calculate+0x86>
 8004762:	2b01      	cmp	r3, #1
 8004764:	d019      	beq.n	800479a <HAL_CRC_Calculate+0x6a>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d01e      	beq.n	80047a8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800476a:	e024      	b.n	80047b6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e00a      	b.n	8004788 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	441a      	add	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3301      	adds	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d3f0      	bcc.n	8004772 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	613b      	str	r3, [r7, #16]
      break;
 8004798:	e00e      	b.n	80047b8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f812 	bl	80047c8 <CRC_Handle_8>
 80047a4:	6138      	str	r0, [r7, #16]
      break;
 80047a6:	e007      	b.n	80047b8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f899 	bl	80048e4 <CRC_Handle_16>
 80047b2:	6138      	str	r0, [r7, #16]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_CRC_Calculate+0x88>
      break;
 80047b6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80047be:	693b      	ldr	r3, [r7, #16]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e023      	b.n	8004822 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	3301      	adds	r3, #1
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	440b      	add	r3, r1
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80047f4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	440b      	add	r3, r1
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004804:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	3303      	adds	r3, #3
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	440b      	add	r3, r1
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004818:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800481a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	429a      	cmp	r2, r3
 800482a:	d3d6      	bcc.n	80047da <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04d      	beq.n	80048d2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	4413      	add	r3, r2
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d116      	bne.n	8004888 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	b21a      	sxth	r2, r3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	3301      	adds	r3, #1
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	440b      	add	r3, r1
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b21b      	sxth	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b21b      	sxth	r3, r3
 800487a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	8b7a      	ldrh	r2, [r7, #26]
 8004886:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d11f      	bne.n	80048d2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	b21a      	sxth	r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3301      	adds	r3, #1
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	440b      	add	r3, r1
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b21b      	sxth	r3, r3
 80048b2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	8b7a      	ldrh	r2, [r7, #26]
 80048be:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	3302      	adds	r3, #2
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4413      	add	r3, r2
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3724      	adds	r7, #36	; 0x24
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e013      	b.n	800491e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	041a      	lsls	r2, r3, #16
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	3302      	adds	r3, #2
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	440b      	add	r3, r1
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	4619      	mov	r1, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3301      	adds	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	d3e6      	bcc.n	80048f6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4413      	add	r3, r2
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004968:	231f      	movs	r3, #31
 800496a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800496c:	bf00      	nop
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	613a      	str	r2, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <HAL_CRCEx_Polynomial_Set+0x34>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_CRCEx_Polynomial_Set+0x16>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b18      	cmp	r3, #24
 8004990:	d846      	bhi.n	8004a20 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a21 	.word	0x08004a21
 80049a0:	08004a21 	.word	0x08004a21
 80049a4:	08004a21 	.word	0x08004a21
 80049a8:	08004a21 	.word	0x08004a21
 80049ac:	08004a21 	.word	0x08004a21
 80049b0:	08004a21 	.word	0x08004a21
 80049b4:	08004a21 	.word	0x08004a21
 80049b8:	08004a15 	.word	0x08004a15
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004a21 	.word	0x08004a21
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a21 	.word	0x08004a21
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a21 	.word	0x08004a21
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	080049fd 	.word	0x080049fd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d913      	bls.n	8004a2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a06:	e010      	b.n	8004a2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d90f      	bls.n	8004a2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d90b      	bls.n	8004a32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a1e:	e008      	b.n	8004a32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
      break;
 8004a24:	e006      	b.n	8004a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a26:	bf00      	nop
 8004a28:	e004      	b.n	8004a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a32:	bf00      	nop
  }
  if (status == HAL_OK)
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10d      	bne.n	8004a56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 0118 	bic.w	r1, r3, #24
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a6c:	f7fe fc7a 	bl	8003364 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e316      	b.n	80050aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a66      	ldr	r2, [pc, #408]	; (8004c1c <HAL_DMA_Init+0x1b8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d04a      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a65      	ldr	r2, [pc, #404]	; (8004c20 <HAL_DMA_Init+0x1bc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d045      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a63      	ldr	r2, [pc, #396]	; (8004c24 <HAL_DMA_Init+0x1c0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d040      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a62      	ldr	r2, [pc, #392]	; (8004c28 <HAL_DMA_Init+0x1c4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d03b      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a60      	ldr	r2, [pc, #384]	; (8004c2c <HAL_DMA_Init+0x1c8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d036      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a5f      	ldr	r2, [pc, #380]	; (8004c30 <HAL_DMA_Init+0x1cc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d031      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5d      	ldr	r2, [pc, #372]	; (8004c34 <HAL_DMA_Init+0x1d0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02c      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5c      	ldr	r2, [pc, #368]	; (8004c38 <HAL_DMA_Init+0x1d4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d027      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a5a      	ldr	r2, [pc, #360]	; (8004c3c <HAL_DMA_Init+0x1d8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a59      	ldr	r2, [pc, #356]	; (8004c40 <HAL_DMA_Init+0x1dc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a57      	ldr	r2, [pc, #348]	; (8004c44 <HAL_DMA_Init+0x1e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <HAL_DMA_Init+0x1e4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a54      	ldr	r2, [pc, #336]	; (8004c4c <HAL_DMA_Init+0x1e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a53      	ldr	r2, [pc, #332]	; (8004c50 <HAL_DMA_Init+0x1ec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a51      	ldr	r2, [pc, #324]	; (8004c54 <HAL_DMA_Init+0x1f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_DMA_Init+0xb8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a50      	ldr	r2, [pc, #320]	; (8004c58 <HAL_DMA_Init+0x1f4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_DMA_Init+0xbc>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_DMA_Init+0xbe>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 813b 	beq.w	8004d9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a37      	ldr	r2, [pc, #220]	; (8004c1c <HAL_DMA_Init+0x1b8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a36      	ldr	r2, [pc, #216]	; (8004c20 <HAL_DMA_Init+0x1bc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a34      	ldr	r2, [pc, #208]	; (8004c24 <HAL_DMA_Init+0x1c0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a33      	ldr	r2, [pc, #204]	; (8004c28 <HAL_DMA_Init+0x1c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a31      	ldr	r2, [pc, #196]	; (8004c2c <HAL_DMA_Init+0x1c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a30      	ldr	r2, [pc, #192]	; (8004c30 <HAL_DMA_Init+0x1cc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2e      	ldr	r2, [pc, #184]	; (8004c34 <HAL_DMA_Init+0x1d0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <HAL_DMA_Init+0x1d4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <HAL_DMA_Init+0x1d8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <HAL_DMA_Init+0x1dc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <HAL_DMA_Init+0x1e0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <HAL_DMA_Init+0x1e4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <HAL_DMA_Init+0x1e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	; (8004c50 <HAL_DMA_Init+0x1ec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <HAL_DMA_Init+0x1f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_Init+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <HAL_DMA_Init+0x1f4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_DMA_Init+0x186>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e007      	b.n	8004bfa <HAL_DMA_Init+0x196>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bfa:	e02f      	b.n	8004c5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bfc:	f7fe fbb2 	bl	8003364 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d928      	bls.n	8004c5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2203      	movs	r2, #3
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e246      	b.n	80050aa <HAL_DMA_Init+0x646>
 8004c1c:	40020010 	.word	0x40020010
 8004c20:	40020028 	.word	0x40020028
 8004c24:	40020040 	.word	0x40020040
 8004c28:	40020058 	.word	0x40020058
 8004c2c:	40020070 	.word	0x40020070
 8004c30:	40020088 	.word	0x40020088
 8004c34:	400200a0 	.word	0x400200a0
 8004c38:	400200b8 	.word	0x400200b8
 8004c3c:	40020410 	.word	0x40020410
 8004c40:	40020428 	.word	0x40020428
 8004c44:	40020440 	.word	0x40020440
 8004c48:	40020458 	.word	0x40020458
 8004c4c:	40020470 	.word	0x40020470
 8004c50:	40020488 	.word	0x40020488
 8004c54:	400204a0 	.word	0x400204a0
 8004c58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1c8      	bne.n	8004bfc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <HAL_DMA_Init+0x420>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d107      	bne.n	8004cc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004cc0:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <HAL_DMA_Init+0x424>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <HAL_DMA_Init+0x428>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d328      	bcc.n	8004d20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b28      	cmp	r3, #40	; 0x28
 8004cd4:	d903      	bls.n	8004cde <HAL_DMA_Init+0x27a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b2e      	cmp	r3, #46	; 0x2e
 8004cdc:	d917      	bls.n	8004d0e <HAL_DMA_Init+0x2aa>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce4:	d903      	bls.n	8004cee <HAL_DMA_Init+0x28a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b42      	cmp	r3, #66	; 0x42
 8004cec:	d90f      	bls.n	8004d0e <HAL_DMA_Init+0x2aa>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b46      	cmp	r3, #70	; 0x46
 8004cf4:	d903      	bls.n	8004cfe <HAL_DMA_Init+0x29a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b48      	cmp	r3, #72	; 0x48
 8004cfc:	d907      	bls.n	8004d0e <HAL_DMA_Init+0x2aa>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b4e      	cmp	r3, #78	; 0x4e
 8004d04:	d905      	bls.n	8004d12 <HAL_DMA_Init+0x2ae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b52      	cmp	r3, #82	; 0x52
 8004d0c:	d801      	bhi.n	8004d12 <HAL_DMA_Init+0x2ae>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_DMA_Init+0x2b0>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0307 	bic.w	r3, r3, #7
 8004d36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d117      	bne.n	8004d7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f002 fb31 	bl	80073c4 <DMA_CheckFifoParam>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e197      	b.n	80050aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f002 fa6c 	bl	8007260 <DMA_CalcBaseAndBitshift>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	223f      	movs	r2, #63	; 0x3f
 8004d96:	409a      	lsls	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	e0cd      	b.n	8004f3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3b      	ldr	r2, [pc, #236]	; (8004e90 <HAL_DMA_Init+0x42c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d022      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a39      	ldr	r2, [pc, #228]	; (8004e94 <HAL_DMA_Init+0x430>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01d      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a38      	ldr	r2, [pc, #224]	; (8004e98 <HAL_DMA_Init+0x434>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d018      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a36      	ldr	r2, [pc, #216]	; (8004e9c <HAL_DMA_Init+0x438>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a35      	ldr	r2, [pc, #212]	; (8004ea0 <HAL_DMA_Init+0x43c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00e      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	; (8004ea4 <HAL_DMA_Init+0x440>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a32      	ldr	r2, [pc, #200]	; (8004ea8 <HAL_DMA_Init+0x444>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_DMA_Init+0x38a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a30      	ldr	r2, [pc, #192]	; (8004eac <HAL_DMA_Init+0x448>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <HAL_DMA_Init+0x38e>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <HAL_DMA_Init+0x390>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8097 	beq.w	8004f28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <HAL_DMA_Init+0x42c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d021      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <HAL_DMA_Init+0x430>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01c      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_DMA_Init+0x434>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d017      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <HAL_DMA_Init+0x438>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d012      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_DMA_Init+0x43c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00d      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_DMA_Init+0x440>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d008      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <HAL_DMA_Init+0x444>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <HAL_DMA_Init+0x3e4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_DMA_Init+0x448>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <HAL_DMA_Init+0x44c>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d020      	beq.n	8004eb4 <HAL_DMA_Init+0x450>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d102      	bne.n	8004e80 <HAL_DMA_Init+0x41c>
 8004e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e7e:	e01a      	b.n	8004eb6 <HAL_DMA_Init+0x452>
 8004e80:	2300      	movs	r3, #0
 8004e82:	e018      	b.n	8004eb6 <HAL_DMA_Init+0x452>
 8004e84:	fe10803f 	.word	0xfe10803f
 8004e88:	5c001000 	.word	0x5c001000
 8004e8c:	ffff0000 	.word	0xffff0000
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494
 8004eb0:	fffe000f 	.word	0xfffe000f
 8004eb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ee4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b6e      	ldr	r3, [pc, #440]	; (80050b4 <HAL_DMA_Init+0x650>)
 8004efc:	4413      	add	r3, r2
 8004efe:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_DMA_Init+0x654>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 f9a7 	bl	8007260 <DMA_CalcBaseAndBitshift>
 8004f12:	4603      	mov	r3, r0
 8004f14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2201      	movs	r2, #1
 8004f20:	409a      	lsls	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	e008      	b.n	8004f3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2203      	movs	r2, #3
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0b7      	b.n	80050aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5f      	ldr	r2, [pc, #380]	; (80050bc <HAL_DMA_Init+0x658>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d072      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5d      	ldr	r2, [pc, #372]	; (80050c0 <HAL_DMA_Init+0x65c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d06d      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_DMA_Init+0x660>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d068      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5a      	ldr	r2, [pc, #360]	; (80050c8 <HAL_DMA_Init+0x664>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d063      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a59      	ldr	r2, [pc, #356]	; (80050cc <HAL_DMA_Init+0x668>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d05e      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a57      	ldr	r2, [pc, #348]	; (80050d0 <HAL_DMA_Init+0x66c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d059      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a56      	ldr	r2, [pc, #344]	; (80050d4 <HAL_DMA_Init+0x670>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d054      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_DMA_Init+0x674>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04f      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a53      	ldr	r2, [pc, #332]	; (80050dc <HAL_DMA_Init+0x678>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04a      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a51      	ldr	r2, [pc, #324]	; (80050e0 <HAL_DMA_Init+0x67c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d045      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a50      	ldr	r2, [pc, #320]	; (80050e4 <HAL_DMA_Init+0x680>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4e      	ldr	r2, [pc, #312]	; (80050e8 <HAL_DMA_Init+0x684>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d03b      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4d      	ldr	r2, [pc, #308]	; (80050ec <HAL_DMA_Init+0x688>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d036      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a4b      	ldr	r2, [pc, #300]	; (80050f0 <HAL_DMA_Init+0x68c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d031      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4a      	ldr	r2, [pc, #296]	; (80050f4 <HAL_DMA_Init+0x690>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a48      	ldr	r2, [pc, #288]	; (80050f8 <HAL_DMA_Init+0x694>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a47      	ldr	r2, [pc, #284]	; (80050fc <HAL_DMA_Init+0x698>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a45      	ldr	r2, [pc, #276]	; (8005100 <HAL_DMA_Init+0x69c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a44      	ldr	r2, [pc, #272]	; (8005104 <HAL_DMA_Init+0x6a0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a42      	ldr	r2, [pc, #264]	; (8005108 <HAL_DMA_Init+0x6a4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a41      	ldr	r2, [pc, #260]	; (800510c <HAL_DMA_Init+0x6a8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a3f      	ldr	r2, [pc, #252]	; (8005110 <HAL_DMA_Init+0x6ac>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3e      	ldr	r2, [pc, #248]	; (8005114 <HAL_DMA_Init+0x6b0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_DMA_Init+0x5c6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3c      	ldr	r2, [pc, #240]	; (8005118 <HAL_DMA_Init+0x6b4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_DMA_Init+0x5ca>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_DMA_Init+0x5cc>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d032      	beq.n	800509a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f002 fa41 	bl	80074bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d102      	bne.n	8005048 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800505c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_DMA_Init+0x624>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b08      	cmp	r3, #8
 800506c:	d80c      	bhi.n	8005088 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f002 fabe 	bl	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	e008      	b.n	800509a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	a7fdabf8 	.word	0xa7fdabf8
 80050b8:	cccccccd 	.word	0xcccccccd
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
 80050fc:	58025408 	.word	0x58025408
 8005100:	5802541c 	.word	0x5802541c
 8005104:	58025430 	.word	0x58025430
 8005108:	58025444 	.word	0x58025444
 800510c:	58025458 	.word	0x58025458
 8005110:	5802546c 	.word	0x5802546c
 8005114:	58025480 	.word	0x58025480
 8005118:	58025494 	.word	0x58025494

0800511c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e226      	b.n	8005586 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_DMA_Start_IT+0x2a>
 8005142:	2302      	movs	r3, #2
 8005144:	e21f      	b.n	8005586 <HAL_DMA_Start_IT+0x46a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 820a 	bne.w	8005570 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a68      	ldr	r2, [pc, #416]	; (8005310 <HAL_DMA_Start_IT+0x1f4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d04a      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a66      	ldr	r2, [pc, #408]	; (8005314 <HAL_DMA_Start_IT+0x1f8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d045      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a65      	ldr	r2, [pc, #404]	; (8005318 <HAL_DMA_Start_IT+0x1fc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d040      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a63      	ldr	r2, [pc, #396]	; (800531c <HAL_DMA_Start_IT+0x200>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d03b      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a62      	ldr	r2, [pc, #392]	; (8005320 <HAL_DMA_Start_IT+0x204>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d036      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a60      	ldr	r2, [pc, #384]	; (8005324 <HAL_DMA_Start_IT+0x208>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d031      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5f      	ldr	r2, [pc, #380]	; (8005328 <HAL_DMA_Start_IT+0x20c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d02c      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5d      	ldr	r2, [pc, #372]	; (800532c <HAL_DMA_Start_IT+0x210>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d027      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a5c      	ldr	r2, [pc, #368]	; (8005330 <HAL_DMA_Start_IT+0x214>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a5a      	ldr	r2, [pc, #360]	; (8005334 <HAL_DMA_Start_IT+0x218>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a59      	ldr	r2, [pc, #356]	; (8005338 <HAL_DMA_Start_IT+0x21c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a57      	ldr	r2, [pc, #348]	; (800533c <HAL_DMA_Start_IT+0x220>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_DMA_Start_IT+0x224>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a54      	ldr	r2, [pc, #336]	; (8005344 <HAL_DMA_Start_IT+0x228>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a53      	ldr	r2, [pc, #332]	; (8005348 <HAL_DMA_Start_IT+0x22c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_DMA_Start_IT+0xee>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a51      	ldr	r2, [pc, #324]	; (800534c <HAL_DMA_Start_IT+0x230>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <HAL_DMA_Start_IT+0x100>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e007      	b.n	800522c <HAL_DMA_Start_IT+0x110>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f001 fe68 	bl	8006f08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a34      	ldr	r2, [pc, #208]	; (8005310 <HAL_DMA_Start_IT+0x1f4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d04a      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a33      	ldr	r2, [pc, #204]	; (8005314 <HAL_DMA_Start_IT+0x1f8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d045      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a31      	ldr	r2, [pc, #196]	; (8005318 <HAL_DMA_Start_IT+0x1fc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d040      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a30      	ldr	r2, [pc, #192]	; (800531c <HAL_DMA_Start_IT+0x200>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d03b      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2e      	ldr	r2, [pc, #184]	; (8005320 <HAL_DMA_Start_IT+0x204>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d036      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <HAL_DMA_Start_IT+0x208>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d031      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <HAL_DMA_Start_IT+0x20c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d02c      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2a      	ldr	r2, [pc, #168]	; (800532c <HAL_DMA_Start_IT+0x210>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d027      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a28      	ldr	r2, [pc, #160]	; (8005330 <HAL_DMA_Start_IT+0x214>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d022      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a27      	ldr	r2, [pc, #156]	; (8005334 <HAL_DMA_Start_IT+0x218>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01d      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a25      	ldr	r2, [pc, #148]	; (8005338 <HAL_DMA_Start_IT+0x21c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d018      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a24      	ldr	r2, [pc, #144]	; (800533c <HAL_DMA_Start_IT+0x220>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <HAL_DMA_Start_IT+0x224>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_DMA_Start_IT+0x228>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <HAL_DMA_Start_IT+0x22c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_DMA_Start_IT+0x1bc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_DMA_Start_IT+0x230>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_DMA_Start_IT+0x1c0>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_DMA_Start_IT+0x1c2>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d036      	beq.n	8005350 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f023 021e 	bic.w	r2, r3, #30
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0216 	orr.w	r2, r2, #22
 80052f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d03e      	beq.n	800537c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0208 	orr.w	r2, r2, #8
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e035      	b.n	800537c <HAL_DMA_Start_IT+0x260>
 8005310:	40020010 	.word	0x40020010
 8005314:	40020028 	.word	0x40020028
 8005318:	40020040 	.word	0x40020040
 800531c:	40020058 	.word	0x40020058
 8005320:	40020070 	.word	0x40020070
 8005324:	40020088 	.word	0x40020088
 8005328:	400200a0 	.word	0x400200a0
 800532c:	400200b8 	.word	0x400200b8
 8005330:	40020410 	.word	0x40020410
 8005334:	40020428 	.word	0x40020428
 8005338:	40020440 	.word	0x40020440
 800533c:	40020458 	.word	0x40020458
 8005340:	40020470 	.word	0x40020470
 8005344:	40020488 	.word	0x40020488
 8005348:	400204a0 	.word	0x400204a0
 800534c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 020e 	bic.w	r2, r3, #14
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 020a 	orr.w	r2, r2, #10
 8005362:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0204 	orr.w	r2, r2, #4
 800537a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_DMA_Start_IT+0x474>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d072      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_DMA_Start_IT+0x478>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d06d      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a80      	ldr	r2, [pc, #512]	; (8005598 <HAL_DMA_Start_IT+0x47c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d068      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7f      	ldr	r2, [pc, #508]	; (800559c <HAL_DMA_Start_IT+0x480>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d063      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7d      	ldr	r2, [pc, #500]	; (80055a0 <HAL_DMA_Start_IT+0x484>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d05e      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <HAL_DMA_Start_IT+0x488>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d059      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <HAL_DMA_Start_IT+0x48c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d054      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a79      	ldr	r2, [pc, #484]	; (80055ac <HAL_DMA_Start_IT+0x490>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d04f      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a77      	ldr	r2, [pc, #476]	; (80055b0 <HAL_DMA_Start_IT+0x494>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d04a      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <HAL_DMA_Start_IT+0x498>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d045      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a74      	ldr	r2, [pc, #464]	; (80055b8 <HAL_DMA_Start_IT+0x49c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d040      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a73      	ldr	r2, [pc, #460]	; (80055bc <HAL_DMA_Start_IT+0x4a0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d03b      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <HAL_DMA_Start_IT+0x4a4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d036      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a70      	ldr	r2, [pc, #448]	; (80055c4 <HAL_DMA_Start_IT+0x4a8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d031      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_DMA_Start_IT+0x4ac>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d02c      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6d      	ldr	r2, [pc, #436]	; (80055cc <HAL_DMA_Start_IT+0x4b0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d027      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6b      	ldr	r2, [pc, #428]	; (80055d0 <HAL_DMA_Start_IT+0x4b4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <HAL_DMA_Start_IT+0x4b8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <HAL_DMA_Start_IT+0x4bc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a67      	ldr	r2, [pc, #412]	; (80055dc <HAL_DMA_Start_IT+0x4c0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <HAL_DMA_Start_IT+0x4c4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a64      	ldr	r2, [pc, #400]	; (80055e4 <HAL_DMA_Start_IT+0x4c8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a62      	ldr	r2, [pc, #392]	; (80055e8 <HAL_DMA_Start_IT+0x4cc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_DMA_Start_IT+0x350>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a61      	ldr	r2, [pc, #388]	; (80055ec <HAL_DMA_Start_IT+0x4d0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_DMA_Start_IT+0x354>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_DMA_Start_IT+0x356>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01a      	beq.n	80054ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a37      	ldr	r2, [pc, #220]	; (8005590 <HAL_DMA_Start_IT+0x474>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d04a      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a36      	ldr	r2, [pc, #216]	; (8005594 <HAL_DMA_Start_IT+0x478>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d045      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a34      	ldr	r2, [pc, #208]	; (8005598 <HAL_DMA_Start_IT+0x47c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d040      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a33      	ldr	r2, [pc, #204]	; (800559c <HAL_DMA_Start_IT+0x480>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d03b      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a31      	ldr	r2, [pc, #196]	; (80055a0 <HAL_DMA_Start_IT+0x484>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d036      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a30      	ldr	r2, [pc, #192]	; (80055a4 <HAL_DMA_Start_IT+0x488>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d031      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2e      	ldr	r2, [pc, #184]	; (80055a8 <HAL_DMA_Start_IT+0x48c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d02c      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2d      	ldr	r2, [pc, #180]	; (80055ac <HAL_DMA_Start_IT+0x490>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d027      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <HAL_DMA_Start_IT+0x494>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <HAL_DMA_Start_IT+0x498>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d01d      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a28      	ldr	r2, [pc, #160]	; (80055b8 <HAL_DMA_Start_IT+0x49c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a27      	ldr	r2, [pc, #156]	; (80055bc <HAL_DMA_Start_IT+0x4a0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <HAL_DMA_Start_IT+0x4a4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <HAL_DMA_Start_IT+0x4a8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <HAL_DMA_Start_IT+0x4ac>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_DMA_Start_IT+0x430>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a21      	ldr	r2, [pc, #132]	; (80055cc <HAL_DMA_Start_IT+0x4b0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <HAL_DMA_Start_IT+0x442>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e012      	b.n	8005584 <HAL_DMA_Start_IT+0x468>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e009      	b.n	8005584 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40020010 	.word	0x40020010
 8005594:	40020028 	.word	0x40020028
 8005598:	40020040 	.word	0x40020040
 800559c:	40020058 	.word	0x40020058
 80055a0:	40020070 	.word	0x40020070
 80055a4:	40020088 	.word	0x40020088
 80055a8:	400200a0 	.word	0x400200a0
 80055ac:	400200b8 	.word	0x400200b8
 80055b0:	40020410 	.word	0x40020410
 80055b4:	40020428 	.word	0x40020428
 80055b8:	40020440 	.word	0x40020440
 80055bc:	40020458 	.word	0x40020458
 80055c0:	40020470 	.word	0x40020470
 80055c4:	40020488 	.word	0x40020488
 80055c8:	400204a0 	.word	0x400204a0
 80055cc:	400204b8 	.word	0x400204b8
 80055d0:	58025408 	.word	0x58025408
 80055d4:	5802541c 	.word	0x5802541c
 80055d8:	58025430 	.word	0x58025430
 80055dc:	58025444 	.word	0x58025444
 80055e0:	58025458 	.word	0x58025458
 80055e4:	5802546c 	.word	0x5802546c
 80055e8:	58025480 	.word	0x58025480
 80055ec:	58025494 	.word	0x58025494

080055f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7fd feb4 	bl	8003364 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e2dc      	b.n	8005bc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d008      	beq.n	8005626 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e2cd      	b.n	8005bc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_DMA_Abort+0x214>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_DMA_Abort+0x218>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a73      	ldr	r2, [pc, #460]	; (800580c <HAL_DMA_Abort+0x21c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a71      	ldr	r2, [pc, #452]	; (8005810 <HAL_DMA_Abort+0x220>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_DMA_Abort+0x224>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_DMA_Abort+0x228>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6d      	ldr	r2, [pc, #436]	; (800581c <HAL_DMA_Abort+0x22c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6b      	ldr	r2, [pc, #428]	; (8005820 <HAL_DMA_Abort+0x230>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6a      	ldr	r2, [pc, #424]	; (8005824 <HAL_DMA_Abort+0x234>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a68      	ldr	r2, [pc, #416]	; (8005828 <HAL_DMA_Abort+0x238>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a67      	ldr	r2, [pc, #412]	; (800582c <HAL_DMA_Abort+0x23c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	; (8005830 <HAL_DMA_Abort+0x240>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a64      	ldr	r2, [pc, #400]	; (8005834 <HAL_DMA_Abort+0x244>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a62      	ldr	r2, [pc, #392]	; (8005838 <HAL_DMA_Abort+0x248>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a61      	ldr	r2, [pc, #388]	; (800583c <HAL_DMA_Abort+0x24c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_Abort+0xd6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5f      	ldr	r2, [pc, #380]	; (8005840 <HAL_DMA_Abort+0x250>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_DMA_Abort+0xda>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_DMA_Abort+0xdc>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 021e 	bic.w	r2, r2, #30
 80056de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e00a      	b.n	800570e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 020e 	bic.w	r2, r2, #14
 8005706:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <HAL_DMA_Abort+0x214>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d072      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3a      	ldr	r2, [pc, #232]	; (8005808 <HAL_DMA_Abort+0x218>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d06d      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a39      	ldr	r2, [pc, #228]	; (800580c <HAL_DMA_Abort+0x21c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d068      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a37      	ldr	r2, [pc, #220]	; (8005810 <HAL_DMA_Abort+0x220>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d063      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a36      	ldr	r2, [pc, #216]	; (8005814 <HAL_DMA_Abort+0x224>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d05e      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a34      	ldr	r2, [pc, #208]	; (8005818 <HAL_DMA_Abort+0x228>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d059      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a33      	ldr	r2, [pc, #204]	; (800581c <HAL_DMA_Abort+0x22c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d054      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a31      	ldr	r2, [pc, #196]	; (8005820 <HAL_DMA_Abort+0x230>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d04f      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a30      	ldr	r2, [pc, #192]	; (8005824 <HAL_DMA_Abort+0x234>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d04a      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <HAL_DMA_Abort+0x238>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d045      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_DMA_Abort+0x23c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d040      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <HAL_DMA_Abort+0x240>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d03b      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <HAL_DMA_Abort+0x244>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d036      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a28      	ldr	r2, [pc, #160]	; (8005838 <HAL_DMA_Abort+0x248>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d031      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a27      	ldr	r2, [pc, #156]	; (800583c <HAL_DMA_Abort+0x24c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d02c      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a25      	ldr	r2, [pc, #148]	; (8005840 <HAL_DMA_Abort+0x250>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d027      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a24      	ldr	r2, [pc, #144]	; (8005844 <HAL_DMA_Abort+0x254>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d022      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a22      	ldr	r2, [pc, #136]	; (8005848 <HAL_DMA_Abort+0x258>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01d      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a21      	ldr	r2, [pc, #132]	; (800584c <HAL_DMA_Abort+0x25c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d018      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_DMA_Abort+0x260>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_DMA_Abort+0x264>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00e      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_DMA_Abort+0x268>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d009      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_DMA_Abort+0x26c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d004      	beq.n	80057fe <HAL_DMA_Abort+0x20e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <HAL_DMA_Abort+0x270>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d132      	bne.n	8005864 <HAL_DMA_Abort+0x274>
 80057fe:	2301      	movs	r3, #1
 8005800:	e031      	b.n	8005866 <HAL_DMA_Abort+0x276>
 8005802:	bf00      	nop
 8005804:	40020010 	.word	0x40020010
 8005808:	40020028 	.word	0x40020028
 800580c:	40020040 	.word	0x40020040
 8005810:	40020058 	.word	0x40020058
 8005814:	40020070 	.word	0x40020070
 8005818:	40020088 	.word	0x40020088
 800581c:	400200a0 	.word	0x400200a0
 8005820:	400200b8 	.word	0x400200b8
 8005824:	40020410 	.word	0x40020410
 8005828:	40020428 	.word	0x40020428
 800582c:	40020440 	.word	0x40020440
 8005830:	40020458 	.word	0x40020458
 8005834:	40020470 	.word	0x40020470
 8005838:	40020488 	.word	0x40020488
 800583c:	400204a0 	.word	0x400204a0
 8005840:	400204b8 	.word	0x400204b8
 8005844:	58025408 	.word	0x58025408
 8005848:	5802541c 	.word	0x5802541c
 800584c:	58025430 	.word	0x58025430
 8005850:	58025444 	.word	0x58025444
 8005854:	58025458 	.word	0x58025458
 8005858:	5802546c 	.word	0x5802546c
 800585c:	58025480 	.word	0x58025480
 8005860:	58025494 	.word	0x58025494
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a6d      	ldr	r2, [pc, #436]	; (8005a34 <HAL_DMA_Abort+0x444>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04a      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a6b      	ldr	r2, [pc, #428]	; (8005a38 <HAL_DMA_Abort+0x448>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d045      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a6a      	ldr	r2, [pc, #424]	; (8005a3c <HAL_DMA_Abort+0x44c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a68      	ldr	r2, [pc, #416]	; (8005a40 <HAL_DMA_Abort+0x450>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03b      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a67      	ldr	r2, [pc, #412]	; (8005a44 <HAL_DMA_Abort+0x454>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d036      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a65      	ldr	r2, [pc, #404]	; (8005a48 <HAL_DMA_Abort+0x458>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a64      	ldr	r2, [pc, #400]	; (8005a4c <HAL_DMA_Abort+0x45c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d02c      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a62      	ldr	r2, [pc, #392]	; (8005a50 <HAL_DMA_Abort+0x460>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d027      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a61      	ldr	r2, [pc, #388]	; (8005a54 <HAL_DMA_Abort+0x464>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5f      	ldr	r2, [pc, #380]	; (8005a58 <HAL_DMA_Abort+0x468>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5e      	ldr	r2, [pc, #376]	; (8005a5c <HAL_DMA_Abort+0x46c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5c      	ldr	r2, [pc, #368]	; (8005a60 <HAL_DMA_Abort+0x470>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5b      	ldr	r2, [pc, #364]	; (8005a64 <HAL_DMA_Abort+0x474>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a59      	ldr	r2, [pc, #356]	; (8005a68 <HAL_DMA_Abort+0x478>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <HAL_DMA_Abort+0x47c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_DMA_Abort+0x32a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a56      	ldr	r2, [pc, #344]	; (8005a70 <HAL_DMA_Abort+0x480>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <HAL_DMA_Abort+0x33c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e007      	b.n	800593c <HAL_DMA_Abort+0x34c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800593c:	e013      	b.n	8005966 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800593e:	f7fd fd11 	bl	8003364 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b05      	cmp	r3, #5
 800594a:	d90c      	bls.n	8005966 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e12d      	b.n	8005bc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <HAL_DMA_Abort+0x444>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d04a      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <HAL_DMA_Abort+0x448>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d045      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <HAL_DMA_Abort+0x44c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d040      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <HAL_DMA_Abort+0x450>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d03b      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <HAL_DMA_Abort+0x454>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d036      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a27      	ldr	r2, [pc, #156]	; (8005a48 <HAL_DMA_Abort+0x458>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d031      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a26      	ldr	r2, [pc, #152]	; (8005a4c <HAL_DMA_Abort+0x45c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d02c      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <HAL_DMA_Abort+0x460>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d027      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <HAL_DMA_Abort+0x464>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <HAL_DMA_Abort+0x468>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a20      	ldr	r2, [pc, #128]	; (8005a5c <HAL_DMA_Abort+0x46c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_DMA_Abort+0x470>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_DMA_Abort+0x474>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_DMA_Abort+0x478>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <HAL_DMA_Abort+0x47c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_DMA_Abort+0x422>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <HAL_DMA_Abort+0x480>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_Abort+0x426>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_DMA_Abort+0x428>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02b      	beq.n	8005a74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	223f      	movs	r2, #63	; 0x3f
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	e02a      	b.n	8005a8a <HAL_DMA_Abort+0x49a>
 8005a34:	40020010 	.word	0x40020010
 8005a38:	40020028 	.word	0x40020028
 8005a3c:	40020040 	.word	0x40020040
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40020070 	.word	0x40020070
 8005a48:	40020088 	.word	0x40020088
 8005a4c:	400200a0 	.word	0x400200a0
 8005a50:	400200b8 	.word	0x400200b8
 8005a54:	40020410 	.word	0x40020410
 8005a58:	40020428 	.word	0x40020428
 8005a5c:	40020440 	.word	0x40020440
 8005a60:	40020458 	.word	0x40020458
 8005a64:	40020470 	.word	0x40020470
 8005a68:	40020488 	.word	0x40020488
 8005a6c:	400204a0 	.word	0x400204a0
 8005a70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2201      	movs	r2, #1
 8005a84:	409a      	lsls	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a4f      	ldr	r2, [pc, #316]	; (8005bcc <HAL_DMA_Abort+0x5dc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d072      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a4d      	ldr	r2, [pc, #308]	; (8005bd0 <HAL_DMA_Abort+0x5e0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d06d      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4c      	ldr	r2, [pc, #304]	; (8005bd4 <HAL_DMA_Abort+0x5e4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d068      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a4a      	ldr	r2, [pc, #296]	; (8005bd8 <HAL_DMA_Abort+0x5e8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d063      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a49      	ldr	r2, [pc, #292]	; (8005bdc <HAL_DMA_Abort+0x5ec>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d05e      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a47      	ldr	r2, [pc, #284]	; (8005be0 <HAL_DMA_Abort+0x5f0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d059      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a46      	ldr	r2, [pc, #280]	; (8005be4 <HAL_DMA_Abort+0x5f4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d054      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a44      	ldr	r2, [pc, #272]	; (8005be8 <HAL_DMA_Abort+0x5f8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d04f      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a43      	ldr	r2, [pc, #268]	; (8005bec <HAL_DMA_Abort+0x5fc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a41      	ldr	r2, [pc, #260]	; (8005bf0 <HAL_DMA_Abort+0x600>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a40      	ldr	r2, [pc, #256]	; (8005bf4 <HAL_DMA_Abort+0x604>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a3e      	ldr	r2, [pc, #248]	; (8005bf8 <HAL_DMA_Abort+0x608>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a3d      	ldr	r2, [pc, #244]	; (8005bfc <HAL_DMA_Abort+0x60c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a3b      	ldr	r2, [pc, #236]	; (8005c00 <HAL_DMA_Abort+0x610>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a3a      	ldr	r2, [pc, #232]	; (8005c04 <HAL_DMA_Abort+0x614>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a38      	ldr	r2, [pc, #224]	; (8005c08 <HAL_DMA_Abort+0x618>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a37      	ldr	r2, [pc, #220]	; (8005c0c <HAL_DMA_Abort+0x61c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a35      	ldr	r2, [pc, #212]	; (8005c10 <HAL_DMA_Abort+0x620>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a34      	ldr	r2, [pc, #208]	; (8005c14 <HAL_DMA_Abort+0x624>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a32      	ldr	r2, [pc, #200]	; (8005c18 <HAL_DMA_Abort+0x628>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a31      	ldr	r2, [pc, #196]	; (8005c1c <HAL_DMA_Abort+0x62c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a2f      	ldr	r2, [pc, #188]	; (8005c20 <HAL_DMA_Abort+0x630>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2e      	ldr	r2, [pc, #184]	; (8005c24 <HAL_DMA_Abort+0x634>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_Abort+0x58a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <HAL_DMA_Abort+0x638>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_DMA_Abort+0x58e>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <HAL_DMA_Abort+0x590>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ba4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40020010 	.word	0x40020010
 8005bd0:	40020028 	.word	0x40020028
 8005bd4:	40020040 	.word	0x40020040
 8005bd8:	40020058 	.word	0x40020058
 8005bdc:	40020070 	.word	0x40020070
 8005be0:	40020088 	.word	0x40020088
 8005be4:	400200a0 	.word	0x400200a0
 8005be8:	400200b8 	.word	0x400200b8
 8005bec:	40020410 	.word	0x40020410
 8005bf0:	40020428 	.word	0x40020428
 8005bf4:	40020440 	.word	0x40020440
 8005bf8:	40020458 	.word	0x40020458
 8005bfc:	40020470 	.word	0x40020470
 8005c00:	40020488 	.word	0x40020488
 8005c04:	400204a0 	.word	0x400204a0
 8005c08:	400204b8 	.word	0x400204b8
 8005c0c:	58025408 	.word	0x58025408
 8005c10:	5802541c 	.word	0x5802541c
 8005c14:	58025430 	.word	0x58025430
 8005c18:	58025444 	.word	0x58025444
 8005c1c:	58025458 	.word	0x58025458
 8005c20:	5802546c 	.word	0x5802546c
 8005c24:	58025480 	.word	0x58025480
 8005c28:	58025494 	.word	0x58025494

08005c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e205      	b.n	800604a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d004      	beq.n	8005c54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e1fa      	b.n	800604a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a8c      	ldr	r2, [pc, #560]	; (8005e8c <HAL_DMA_Abort_IT+0x260>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d04a      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a8b      	ldr	r2, [pc, #556]	; (8005e90 <HAL_DMA_Abort_IT+0x264>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d045      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a89      	ldr	r2, [pc, #548]	; (8005e94 <HAL_DMA_Abort_IT+0x268>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d040      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a88      	ldr	r2, [pc, #544]	; (8005e98 <HAL_DMA_Abort_IT+0x26c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d03b      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a86      	ldr	r2, [pc, #536]	; (8005e9c <HAL_DMA_Abort_IT+0x270>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d036      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a85      	ldr	r2, [pc, #532]	; (8005ea0 <HAL_DMA_Abort_IT+0x274>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d031      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a83      	ldr	r2, [pc, #524]	; (8005ea4 <HAL_DMA_Abort_IT+0x278>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02c      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a82      	ldr	r2, [pc, #520]	; (8005ea8 <HAL_DMA_Abort_IT+0x27c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d027      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a80      	ldr	r2, [pc, #512]	; (8005eac <HAL_DMA_Abort_IT+0x280>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d022      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7f      	ldr	r2, [pc, #508]	; (8005eb0 <HAL_DMA_Abort_IT+0x284>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d01d      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7d      	ldr	r2, [pc, #500]	; (8005eb4 <HAL_DMA_Abort_IT+0x288>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d018      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7c      	ldr	r2, [pc, #496]	; (8005eb8 <HAL_DMA_Abort_IT+0x28c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a7a      	ldr	r2, [pc, #488]	; (8005ebc <HAL_DMA_Abort_IT+0x290>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a79      	ldr	r2, [pc, #484]	; (8005ec0 <HAL_DMA_Abort_IT+0x294>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a77      	ldr	r2, [pc, #476]	; (8005ec4 <HAL_DMA_Abort_IT+0x298>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_DMA_Abort_IT+0xc8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a76      	ldr	r2, [pc, #472]	; (8005ec8 <HAL_DMA_Abort_IT+0x29c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d101      	bne.n	8005cf8 <HAL_DMA_Abort_IT+0xcc>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_DMA_Abort_IT+0xce>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d065      	beq.n	8005dca <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a60      	ldr	r2, [pc, #384]	; (8005e8c <HAL_DMA_Abort_IT+0x260>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d04a      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5e      	ldr	r2, [pc, #376]	; (8005e90 <HAL_DMA_Abort_IT+0x264>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d045      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5d      	ldr	r2, [pc, #372]	; (8005e94 <HAL_DMA_Abort_IT+0x268>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d040      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a5b      	ldr	r2, [pc, #364]	; (8005e98 <HAL_DMA_Abort_IT+0x26c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d03b      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a5a      	ldr	r2, [pc, #360]	; (8005e9c <HAL_DMA_Abort_IT+0x270>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d036      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_DMA_Abort_IT+0x274>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d031      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_DMA_Abort_IT+0x278>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d02c      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a55      	ldr	r2, [pc, #340]	; (8005ea8 <HAL_DMA_Abort_IT+0x27c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d027      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a54      	ldr	r2, [pc, #336]	; (8005eac <HAL_DMA_Abort_IT+0x280>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a52      	ldr	r2, [pc, #328]	; (8005eb0 <HAL_DMA_Abort_IT+0x284>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a51      	ldr	r2, [pc, #324]	; (8005eb4 <HAL_DMA_Abort_IT+0x288>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4f      	ldr	r2, [pc, #316]	; (8005eb8 <HAL_DMA_Abort_IT+0x28c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4e      	ldr	r2, [pc, #312]	; (8005ebc <HAL_DMA_Abort_IT+0x290>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a4c      	ldr	r2, [pc, #304]	; (8005ec0 <HAL_DMA_Abort_IT+0x294>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <HAL_DMA_Abort_IT+0x298>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_DMA_Abort_IT+0x17a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a49      	ldr	r2, [pc, #292]	; (8005ec8 <HAL_DMA_Abort_IT+0x29c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d108      	bne.n	8005db8 <HAL_DMA_Abort_IT+0x18c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e147      	b.n	8006048 <HAL_DMA_Abort_IT+0x41c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e13e      	b.n	8006048 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 020e 	bic.w	r2, r2, #14
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <HAL_DMA_Abort_IT+0x260>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d04a      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <HAL_DMA_Abort_IT+0x264>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d045      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_DMA_Abort_IT+0x268>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d040      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <HAL_DMA_Abort_IT+0x26c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d03b      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <HAL_DMA_Abort_IT+0x270>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d036      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <HAL_DMA_Abort_IT+0x274>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_DMA_Abort_IT+0x278>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d02c      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <HAL_DMA_Abort_IT+0x27c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d027      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_DMA_Abort_IT+0x280>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_DMA_Abort_IT+0x284>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01d      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_DMA_Abort_IT+0x288>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_DMA_Abort_IT+0x28c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_DMA_Abort_IT+0x290>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_DMA_Abort_IT+0x294>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_DMA_Abort_IT+0x298>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_DMA_Abort_IT+0x24e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <HAL_DMA_Abort_IT+0x29c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d128      	bne.n	8005ecc <HAL_DMA_Abort_IT+0x2a0>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e027      	b.n	8005edc <HAL_DMA_Abort_IT+0x2b0>
 8005e8c:	40020010 	.word	0x40020010
 8005e90:	40020028 	.word	0x40020028
 8005e94:	40020040 	.word	0x40020040
 8005e98:	40020058 	.word	0x40020058
 8005e9c:	40020070 	.word	0x40020070
 8005ea0:	40020088 	.word	0x40020088
 8005ea4:	400200a0 	.word	0x400200a0
 8005ea8:	400200b8 	.word	0x400200b8
 8005eac:	40020410 	.word	0x40020410
 8005eb0:	40020428 	.word	0x40020428
 8005eb4:	40020440 	.word	0x40020440
 8005eb8:	40020458 	.word	0x40020458
 8005ebc:	40020470 	.word	0x40020470
 8005ec0:	40020488 	.word	0x40020488
 8005ec4:	400204a0 	.word	0x400204a0
 8005ec8:	400204b8 	.word	0x400204b8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5c      	ldr	r2, [pc, #368]	; (8006054 <HAL_DMA_Abort_IT+0x428>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d072      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5b      	ldr	r2, [pc, #364]	; (8006058 <HAL_DMA_Abort_IT+0x42c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d06d      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a59      	ldr	r2, [pc, #356]	; (800605c <HAL_DMA_Abort_IT+0x430>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d068      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a58      	ldr	r2, [pc, #352]	; (8006060 <HAL_DMA_Abort_IT+0x434>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d063      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a56      	ldr	r2, [pc, #344]	; (8006064 <HAL_DMA_Abort_IT+0x438>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d05e      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a55      	ldr	r2, [pc, #340]	; (8006068 <HAL_DMA_Abort_IT+0x43c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d059      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a53      	ldr	r2, [pc, #332]	; (800606c <HAL_DMA_Abort_IT+0x440>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d054      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_DMA_Abort_IT+0x444>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d04f      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a50      	ldr	r2, [pc, #320]	; (8006074 <HAL_DMA_Abort_IT+0x448>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04a      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4f      	ldr	r2, [pc, #316]	; (8006078 <HAL_DMA_Abort_IT+0x44c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d045      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a4d      	ldr	r2, [pc, #308]	; (800607c <HAL_DMA_Abort_IT+0x450>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d040      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4c      	ldr	r2, [pc, #304]	; (8006080 <HAL_DMA_Abort_IT+0x454>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d03b      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a4a      	ldr	r2, [pc, #296]	; (8006084 <HAL_DMA_Abort_IT+0x458>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d036      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a49      	ldr	r2, [pc, #292]	; (8006088 <HAL_DMA_Abort_IT+0x45c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d031      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a47      	ldr	r2, [pc, #284]	; (800608c <HAL_DMA_Abort_IT+0x460>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02c      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a46      	ldr	r2, [pc, #280]	; (8006090 <HAL_DMA_Abort_IT+0x464>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a44      	ldr	r2, [pc, #272]	; (8006094 <HAL_DMA_Abort_IT+0x468>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a43      	ldr	r2, [pc, #268]	; (8006098 <HAL_DMA_Abort_IT+0x46c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a41      	ldr	r2, [pc, #260]	; (800609c <HAL_DMA_Abort_IT+0x470>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a40      	ldr	r2, [pc, #256]	; (80060a0 <HAL_DMA_Abort_IT+0x474>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a3e      	ldr	r2, [pc, #248]	; (80060a4 <HAL_DMA_Abort_IT+0x478>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a3d      	ldr	r2, [pc, #244]	; (80060a8 <HAL_DMA_Abort_IT+0x47c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <HAL_DMA_Abort_IT+0x480>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x3a0>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a3a      	ldr	r2, [pc, #232]	; (80060b0 <HAL_DMA_Abort_IT+0x484>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_Abort_IT+0x3a4>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <HAL_DMA_Abort_IT+0x3a6>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d028      	beq.n	8006028 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006004:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800601c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006026:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40020010 	.word	0x40020010
 8006058:	40020028 	.word	0x40020028
 800605c:	40020040 	.word	0x40020040
 8006060:	40020058 	.word	0x40020058
 8006064:	40020070 	.word	0x40020070
 8006068:	40020088 	.word	0x40020088
 800606c:	400200a0 	.word	0x400200a0
 8006070:	400200b8 	.word	0x400200b8
 8006074:	40020410 	.word	0x40020410
 8006078:	40020428 	.word	0x40020428
 800607c:	40020440 	.word	0x40020440
 8006080:	40020458 	.word	0x40020458
 8006084:	40020470 	.word	0x40020470
 8006088:	40020488 	.word	0x40020488
 800608c:	400204a0 	.word	0x400204a0
 8006090:	400204b8 	.word	0x400204b8
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494

080060b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060c0:	4b67      	ldr	r3, [pc, #412]	; (8006260 <HAL_DMA_IRQHandler+0x1ac>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a67      	ldr	r2, [pc, #412]	; (8006264 <HAL_DMA_IRQHandler+0x1b0>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	0a9b      	lsrs	r3, r3, #10
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a5f      	ldr	r2, [pc, #380]	; (8006268 <HAL_DMA_IRQHandler+0x1b4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04a      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5d      	ldr	r2, [pc, #372]	; (800626c <HAL_DMA_IRQHandler+0x1b8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d045      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5c      	ldr	r2, [pc, #368]	; (8006270 <HAL_DMA_IRQHandler+0x1bc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d040      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5a      	ldr	r2, [pc, #360]	; (8006274 <HAL_DMA_IRQHandler+0x1c0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03b      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a59      	ldr	r2, [pc, #356]	; (8006278 <HAL_DMA_IRQHandler+0x1c4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d036      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a57      	ldr	r2, [pc, #348]	; (800627c <HAL_DMA_IRQHandler+0x1c8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a56      	ldr	r2, [pc, #344]	; (8006280 <HAL_DMA_IRQHandler+0x1cc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d02c      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a54      	ldr	r2, [pc, #336]	; (8006284 <HAL_DMA_IRQHandler+0x1d0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d027      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a53      	ldr	r2, [pc, #332]	; (8006288 <HAL_DMA_IRQHandler+0x1d4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a51      	ldr	r2, [pc, #324]	; (800628c <HAL_DMA_IRQHandler+0x1d8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a50      	ldr	r2, [pc, #320]	; (8006290 <HAL_DMA_IRQHandler+0x1dc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a4e      	ldr	r2, [pc, #312]	; (8006294 <HAL_DMA_IRQHandler+0x1e0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4d      	ldr	r2, [pc, #308]	; (8006298 <HAL_DMA_IRQHandler+0x1e4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4b      	ldr	r2, [pc, #300]	; (800629c <HAL_DMA_IRQHandler+0x1e8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4a      	ldr	r2, [pc, #296]	; (80062a0 <HAL_DMA_IRQHandler+0x1ec>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_DMA_IRQHandler+0xd2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a48      	ldr	r2, [pc, #288]	; (80062a4 <HAL_DMA_IRQHandler+0x1f0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <HAL_DMA_IRQHandler+0xd6>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_DMA_IRQHandler+0xd8>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 842b 	beq.w	80069e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2208      	movs	r2, #8
 800619c:	409a      	lsls	r2, r3
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80a2 	beq.w	80062ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2e      	ldr	r2, [pc, #184]	; (8006268 <HAL_DMA_IRQHandler+0x1b4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2d      	ldr	r2, [pc, #180]	; (800626c <HAL_DMA_IRQHandler+0x1b8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d045      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2b      	ldr	r2, [pc, #172]	; (8006270 <HAL_DMA_IRQHandler+0x1bc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d040      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2a      	ldr	r2, [pc, #168]	; (8006274 <HAL_DMA_IRQHandler+0x1c0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d03b      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a28      	ldr	r2, [pc, #160]	; (8006278 <HAL_DMA_IRQHandler+0x1c4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d036      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a27      	ldr	r2, [pc, #156]	; (800627c <HAL_DMA_IRQHandler+0x1c8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d031      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a25      	ldr	r2, [pc, #148]	; (8006280 <HAL_DMA_IRQHandler+0x1cc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02c      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a24      	ldr	r2, [pc, #144]	; (8006284 <HAL_DMA_IRQHandler+0x1d0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d027      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a22      	ldr	r2, [pc, #136]	; (8006288 <HAL_DMA_IRQHandler+0x1d4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a21      	ldr	r2, [pc, #132]	; (800628c <HAL_DMA_IRQHandler+0x1d8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01d      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_DMA_IRQHandler+0x1dc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_DMA_IRQHandler+0x1e0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <HAL_DMA_IRQHandler+0x1e4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_DMA_IRQHandler+0x1e8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <HAL_DMA_IRQHandler+0x1ec>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_DMA_IRQHandler+0x194>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <HAL_DMA_IRQHandler+0x1f0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d12f      	bne.n	80062a8 <HAL_DMA_IRQHandler+0x1f4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf14      	ite	ne
 8006256:	2301      	movne	r3, #1
 8006258:	2300      	moveq	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	e02e      	b.n	80062bc <HAL_DMA_IRQHandler+0x208>
 800625e:	bf00      	nop
 8006260:	24000004 	.word	0x24000004
 8006264:	1b4e81b5 	.word	0x1b4e81b5
 8006268:	40020010 	.word	0x40020010
 800626c:	40020028 	.word	0x40020028
 8006270:	40020040 	.word	0x40020040
 8006274:	40020058 	.word	0x40020058
 8006278:	40020070 	.word	0x40020070
 800627c:	40020088 	.word	0x40020088
 8006280:	400200a0 	.word	0x400200a0
 8006284:	400200b8 	.word	0x400200b8
 8006288:	40020410 	.word	0x40020410
 800628c:	40020428 	.word	0x40020428
 8006290:	40020440 	.word	0x40020440
 8006294:	40020458 	.word	0x40020458
 8006298:	40020470 	.word	0x40020470
 800629c:	40020488 	.word	0x40020488
 80062a0:	400204a0 	.word	0x400204a0
 80062a4:	400204b8 	.word	0x400204b8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d015      	beq.n	80062ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0204 	bic.w	r2, r2, #4
 80062ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	2208      	movs	r2, #8
 80062da:	409a      	lsls	r2, r3
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	f043 0201 	orr.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d06e      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a69      	ldr	r2, [pc, #420]	; (80064ac <HAL_DMA_IRQHandler+0x3f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d04a      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a67      	ldr	r2, [pc, #412]	; (80064b0 <HAL_DMA_IRQHandler+0x3fc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d045      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a66      	ldr	r2, [pc, #408]	; (80064b4 <HAL_DMA_IRQHandler+0x400>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d040      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a64      	ldr	r2, [pc, #400]	; (80064b8 <HAL_DMA_IRQHandler+0x404>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d03b      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a63      	ldr	r2, [pc, #396]	; (80064bc <HAL_DMA_IRQHandler+0x408>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d036      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a61      	ldr	r2, [pc, #388]	; (80064c0 <HAL_DMA_IRQHandler+0x40c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d031      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a60      	ldr	r2, [pc, #384]	; (80064c4 <HAL_DMA_IRQHandler+0x410>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5e      	ldr	r2, [pc, #376]	; (80064c8 <HAL_DMA_IRQHandler+0x414>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5d      	ldr	r2, [pc, #372]	; (80064cc <HAL_DMA_IRQHandler+0x418>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a5b      	ldr	r2, [pc, #364]	; (80064d0 <HAL_DMA_IRQHandler+0x41c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5a      	ldr	r2, [pc, #360]	; (80064d4 <HAL_DMA_IRQHandler+0x420>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a58      	ldr	r2, [pc, #352]	; (80064d8 <HAL_DMA_IRQHandler+0x424>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a57      	ldr	r2, [pc, #348]	; (80064dc <HAL_DMA_IRQHandler+0x428>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a55      	ldr	r2, [pc, #340]	; (80064e0 <HAL_DMA_IRQHandler+0x42c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a54      	ldr	r2, [pc, #336]	; (80064e4 <HAL_DMA_IRQHandler+0x430>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x2ee>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a52      	ldr	r2, [pc, #328]	; (80064e8 <HAL_DMA_IRQHandler+0x434>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10a      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x304>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e003      	b.n	80063c0 <HAL_DMA_IRQHandler+0x30c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2201      	movs	r2, #1
 80063ce:	409a      	lsls	r2, r3
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	f043 0202 	orr.w	r2, r3, #2
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2204      	movs	r2, #4
 80063ea:	409a      	lsls	r2, r3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 808f 	beq.w	8006514 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <HAL_DMA_IRQHandler+0x3f8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <HAL_DMA_IRQHandler+0x3fc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a29      	ldr	r2, [pc, #164]	; (80064b4 <HAL_DMA_IRQHandler+0x400>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <HAL_DMA_IRQHandler+0x404>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a26      	ldr	r2, [pc, #152]	; (80064bc <HAL_DMA_IRQHandler+0x408>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <HAL_DMA_IRQHandler+0x40c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a23      	ldr	r2, [pc, #140]	; (80064c4 <HAL_DMA_IRQHandler+0x410>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a21      	ldr	r2, [pc, #132]	; (80064c8 <HAL_DMA_IRQHandler+0x414>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a20      	ldr	r2, [pc, #128]	; (80064cc <HAL_DMA_IRQHandler+0x418>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_DMA_IRQHandler+0x41c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <HAL_DMA_IRQHandler+0x420>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <HAL_DMA_IRQHandler+0x424>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1a      	ldr	r2, [pc, #104]	; (80064dc <HAL_DMA_IRQHandler+0x428>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a18      	ldr	r2, [pc, #96]	; (80064e0 <HAL_DMA_IRQHandler+0x42c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <HAL_DMA_IRQHandler+0x430>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0x3e2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <HAL_DMA_IRQHandler+0x434>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d12a      	bne.n	80064ec <HAL_DMA_IRQHandler+0x438>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e023      	b.n	80064f4 <HAL_DMA_IRQHandler+0x440>
 80064ac:	40020010 	.word	0x40020010
 80064b0:	40020028 	.word	0x40020028
 80064b4:	40020040 	.word	0x40020040
 80064b8:	40020058 	.word	0x40020058
 80064bc:	40020070 	.word	0x40020070
 80064c0:	40020088 	.word	0x40020088
 80064c4:	400200a0 	.word	0x400200a0
 80064c8:	400200b8 	.word	0x400200b8
 80064cc:	40020410 	.word	0x40020410
 80064d0:	40020428 	.word	0x40020428
 80064d4:	40020440 	.word	0x40020440
 80064d8:	40020458 	.word	0x40020458
 80064dc:	40020470 	.word	0x40020470
 80064e0:	40020488 	.word	0x40020488
 80064e4:	400204a0 	.word	0x400204a0
 80064e8:	400204b8 	.word	0x400204b8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2204      	movs	r2, #4
 8006502:	409a      	lsls	r2, r3
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	f043 0204 	orr.w	r2, r3, #4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2210      	movs	r2, #16
 800651e:	409a      	lsls	r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80a6 	beq.w	8006676 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a85      	ldr	r2, [pc, #532]	; (8006744 <HAL_DMA_IRQHandler+0x690>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d04a      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a83      	ldr	r2, [pc, #524]	; (8006748 <HAL_DMA_IRQHandler+0x694>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d045      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a82      	ldr	r2, [pc, #520]	; (800674c <HAL_DMA_IRQHandler+0x698>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d040      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a80      	ldr	r2, [pc, #512]	; (8006750 <HAL_DMA_IRQHandler+0x69c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d03b      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7f      	ldr	r2, [pc, #508]	; (8006754 <HAL_DMA_IRQHandler+0x6a0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d036      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a7d      	ldr	r2, [pc, #500]	; (8006758 <HAL_DMA_IRQHandler+0x6a4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d031      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a7c      	ldr	r2, [pc, #496]	; (800675c <HAL_DMA_IRQHandler+0x6a8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d02c      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a7a      	ldr	r2, [pc, #488]	; (8006760 <HAL_DMA_IRQHandler+0x6ac>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d027      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a79      	ldr	r2, [pc, #484]	; (8006764 <HAL_DMA_IRQHandler+0x6b0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a77      	ldr	r2, [pc, #476]	; (8006768 <HAL_DMA_IRQHandler+0x6b4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01d      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a76      	ldr	r2, [pc, #472]	; (800676c <HAL_DMA_IRQHandler+0x6b8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a74      	ldr	r2, [pc, #464]	; (8006770 <HAL_DMA_IRQHandler+0x6bc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a73      	ldr	r2, [pc, #460]	; (8006774 <HAL_DMA_IRQHandler+0x6c0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a71      	ldr	r2, [pc, #452]	; (8006778 <HAL_DMA_IRQHandler+0x6c4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a70      	ldr	r2, [pc, #448]	; (800677c <HAL_DMA_IRQHandler+0x6c8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_DMA_IRQHandler+0x516>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6e      	ldr	r2, [pc, #440]	; (8006780 <HAL_DMA_IRQHandler+0x6cc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10a      	bne.n	80065e0 <HAL_DMA_IRQHandler+0x52c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	e009      	b.n	80065f4 <HAL_DMA_IRQHandler+0x540>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d03e      	beq.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2210      	movs	r2, #16
 8006602:	409a      	lsls	r2, r3
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d018      	beq.n	8006648 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d024      	beq.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
 8006634:	e01f      	b.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01b      	beq.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
 8006646:	e016      	b.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0208 	bic.w	r2, r2, #8
 8006664:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2220      	movs	r2, #32
 8006680:	409a      	lsls	r2, r3
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8110 	beq.w	80068ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2c      	ldr	r2, [pc, #176]	; (8006744 <HAL_DMA_IRQHandler+0x690>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a2b      	ldr	r2, [pc, #172]	; (8006748 <HAL_DMA_IRQHandler+0x694>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d045      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a29      	ldr	r2, [pc, #164]	; (800674c <HAL_DMA_IRQHandler+0x698>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d040      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a28      	ldr	r2, [pc, #160]	; (8006750 <HAL_DMA_IRQHandler+0x69c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d03b      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a26      	ldr	r2, [pc, #152]	; (8006754 <HAL_DMA_IRQHandler+0x6a0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d036      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a25      	ldr	r2, [pc, #148]	; (8006758 <HAL_DMA_IRQHandler+0x6a4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d031      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a23      	ldr	r2, [pc, #140]	; (800675c <HAL_DMA_IRQHandler+0x6a8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02c      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a22      	ldr	r2, [pc, #136]	; (8006760 <HAL_DMA_IRQHandler+0x6ac>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a20      	ldr	r2, [pc, #128]	; (8006764 <HAL_DMA_IRQHandler+0x6b0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <HAL_DMA_IRQHandler+0x6b4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <HAL_DMA_IRQHandler+0x6b8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <HAL_DMA_IRQHandler+0x6bc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <HAL_DMA_IRQHandler+0x6c0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a19      	ldr	r2, [pc, #100]	; (8006778 <HAL_DMA_IRQHandler+0x6c4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <HAL_DMA_IRQHandler+0x6c8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_IRQHandler+0x678>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <HAL_DMA_IRQHandler+0x6cc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d12b      	bne.n	8006784 <HAL_DMA_IRQHandler+0x6d0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf14      	ite	ne
 800673a:	2301      	movne	r3, #1
 800673c:	2300      	moveq	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	e02a      	b.n	8006798 <HAL_DMA_IRQHandler+0x6e4>
 8006742:	bf00      	nop
 8006744:	40020010 	.word	0x40020010
 8006748:	40020028 	.word	0x40020028
 800674c:	40020040 	.word	0x40020040
 8006750:	40020058 	.word	0x40020058
 8006754:	40020070 	.word	0x40020070
 8006758:	40020088 	.word	0x40020088
 800675c:	400200a0 	.word	0x400200a0
 8006760:	400200b8 	.word	0x400200b8
 8006764:	40020410 	.word	0x40020410
 8006768:	40020428 	.word	0x40020428
 800676c:	40020440 	.word	0x40020440
 8006770:	40020458 	.word	0x40020458
 8006774:	40020470 	.word	0x40020470
 8006778:	40020488 	.word	0x40020488
 800677c:	400204a0 	.word	0x400204a0
 8006780:	400204b8 	.word	0x400204b8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	bf14      	ite	ne
 8006792:	2301      	movne	r3, #1
 8006794:	2300      	moveq	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8087 	beq.w	80068ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	2220      	movs	r2, #32
 80067a8:	409a      	lsls	r2, r3
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d139      	bne.n	800682e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0216 	bic.w	r2, r2, #22
 80067c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <HAL_DMA_IRQHandler+0x736>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0208 	bic.w	r2, r2, #8
 80067f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	223f      	movs	r2, #63	; 0x3f
 8006804:	409a      	lsls	r2, r3
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 834a 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
          }
          return;
 800682c:	e344      	b.n	8006eb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d018      	beq.n	800686e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	2b00      	cmp	r3, #0
 8006850:	d02c      	beq.n	80068ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
 800685a:	e027      	b.n	80068ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d023      	beq.n	80068ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	e01e      	b.n	80068ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0210 	bic.w	r2, r2, #16
 800688a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8306 	beq.w	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8088 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a7a      	ldr	r2, [pc, #488]	; (8006abc <HAL_DMA_IRQHandler+0xa08>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d04a      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a79      	ldr	r2, [pc, #484]	; (8006ac0 <HAL_DMA_IRQHandler+0xa0c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d045      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a77      	ldr	r2, [pc, #476]	; (8006ac4 <HAL_DMA_IRQHandler+0xa10>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d040      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a76      	ldr	r2, [pc, #472]	; (8006ac8 <HAL_DMA_IRQHandler+0xa14>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d03b      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a74      	ldr	r2, [pc, #464]	; (8006acc <HAL_DMA_IRQHandler+0xa18>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d036      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a73      	ldr	r2, [pc, #460]	; (8006ad0 <HAL_DMA_IRQHandler+0xa1c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d031      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a71      	ldr	r2, [pc, #452]	; (8006ad4 <HAL_DMA_IRQHandler+0xa20>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02c      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a70      	ldr	r2, [pc, #448]	; (8006ad8 <HAL_DMA_IRQHandler+0xa24>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d027      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6e      	ldr	r2, [pc, #440]	; (8006adc <HAL_DMA_IRQHandler+0xa28>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6d      	ldr	r2, [pc, #436]	; (8006ae0 <HAL_DMA_IRQHandler+0xa2c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d01d      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6b      	ldr	r2, [pc, #428]	; (8006ae4 <HAL_DMA_IRQHandler+0xa30>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d018      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6a      	ldr	r2, [pc, #424]	; (8006ae8 <HAL_DMA_IRQHandler+0xa34>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a68      	ldr	r2, [pc, #416]	; (8006aec <HAL_DMA_IRQHandler+0xa38>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00e      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a67      	ldr	r2, [pc, #412]	; (8006af0 <HAL_DMA_IRQHandler+0xa3c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a65      	ldr	r2, [pc, #404]	; (8006af4 <HAL_DMA_IRQHandler+0xa40>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_DMA_IRQHandler+0x8b8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a64      	ldr	r2, [pc, #400]	; (8006af8 <HAL_DMA_IRQHandler+0xa44>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <HAL_DMA_IRQHandler+0x8ca>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e007      	b.n	800698e <HAL_DMA_IRQHandler+0x8da>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0201 	bic.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006996:	429a      	cmp	r2, r3
 8006998:	d307      	bcc.n	80069aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f2      	bne.n	800698e <HAL_DMA_IRQHandler+0x8da>
 80069a8:	e000      	b.n	80069ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069aa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d004      	beq.n	80069cc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069ca:	e003      	b.n	80069d4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8272 	beq.w	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
 80069e6:	e26c      	b.n	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a43      	ldr	r2, [pc, #268]	; (8006afc <HAL_DMA_IRQHandler+0xa48>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d022      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_DMA_IRQHandler+0xa4c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d01d      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <HAL_DMA_IRQHandler+0xa50>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a3f      	ldr	r2, [pc, #252]	; (8006b08 <HAL_DMA_IRQHandler+0xa54>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d013      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a3d      	ldr	r2, [pc, #244]	; (8006b0c <HAL_DMA_IRQHandler+0xa58>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a3c      	ldr	r2, [pc, #240]	; (8006b10 <HAL_DMA_IRQHandler+0xa5c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_DMA_IRQHandler+0xa60>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x984>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a39      	ldr	r2, [pc, #228]	; (8006b18 <HAL_DMA_IRQHandler+0xa64>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d101      	bne.n	8006a3c <HAL_DMA_IRQHandler+0x988>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e000      	b.n	8006a3e <HAL_DMA_IRQHandler+0x98a>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 823f 	beq.w	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	2204      	movs	r2, #4
 8006a56:	409a      	lsls	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80cd 	beq.w	8006bfc <HAL_DMA_IRQHandler+0xb48>
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80c7 	beq.w	8006bfc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2204      	movs	r2, #4
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d049      	beq.n	8006b1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 8210 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa4:	e20a      	b.n	8006ebc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8206 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab8:	e200      	b.n	8006ebc <HAL_DMA_IRQHandler+0xe08>
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d160      	bne.n	8006be8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a8c      	ldr	r2, [pc, #560]	; (8006d5c <HAL_DMA_IRQHandler+0xca8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d04a      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a8a      	ldr	r2, [pc, #552]	; (8006d60 <HAL_DMA_IRQHandler+0xcac>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d045      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a89      	ldr	r2, [pc, #548]	; (8006d64 <HAL_DMA_IRQHandler+0xcb0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d040      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a87      	ldr	r2, [pc, #540]	; (8006d68 <HAL_DMA_IRQHandler+0xcb4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03b      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a86      	ldr	r2, [pc, #536]	; (8006d6c <HAL_DMA_IRQHandler+0xcb8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d036      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a84      	ldr	r2, [pc, #528]	; (8006d70 <HAL_DMA_IRQHandler+0xcbc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d031      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a83      	ldr	r2, [pc, #524]	; (8006d74 <HAL_DMA_IRQHandler+0xcc0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d02c      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a81      	ldr	r2, [pc, #516]	; (8006d78 <HAL_DMA_IRQHandler+0xcc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d027      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a80      	ldr	r2, [pc, #512]	; (8006d7c <HAL_DMA_IRQHandler+0xcc8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a7e      	ldr	r2, [pc, #504]	; (8006d80 <HAL_DMA_IRQHandler+0xccc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01d      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a7d      	ldr	r2, [pc, #500]	; (8006d84 <HAL_DMA_IRQHandler+0xcd0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a7b      	ldr	r2, [pc, #492]	; (8006d88 <HAL_DMA_IRQHandler+0xcd4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7a      	ldr	r2, [pc, #488]	; (8006d8c <HAL_DMA_IRQHandler+0xcd8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a78      	ldr	r2, [pc, #480]	; (8006d90 <HAL_DMA_IRQHandler+0xcdc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a77      	ldr	r2, [pc, #476]	; (8006d94 <HAL_DMA_IRQHandler+0xce0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_DMA_IRQHandler+0xb12>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a75      	ldr	r2, [pc, #468]	; (8006d98 <HAL_DMA_IRQHandler+0xce4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0xb24>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0208 	bic.w	r2, r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e007      	b.n	8006be8 <HAL_DMA_IRQHandler+0xb34>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0204 	bic.w	r2, r2, #4
 8006be6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8165 	beq.w	8006ebc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfa:	e15f      	b.n	8006ebc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2202      	movs	r2, #2
 8006c06:	409a      	lsls	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80c5 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xce8>
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80bf 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2202      	movs	r2, #2
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 813a 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c54:	e134      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 8130 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c68:	e12a      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d168      	bne.n	8006d46 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a38      	ldr	r2, [pc, #224]	; (8006d5c <HAL_DMA_IRQHandler+0xca8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d04a      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a37      	ldr	r2, [pc, #220]	; (8006d60 <HAL_DMA_IRQHandler+0xcac>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d045      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a35      	ldr	r2, [pc, #212]	; (8006d64 <HAL_DMA_IRQHandler+0xcb0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d040      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a34      	ldr	r2, [pc, #208]	; (8006d68 <HAL_DMA_IRQHandler+0xcb4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d03b      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <HAL_DMA_IRQHandler+0xcb8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d036      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a31      	ldr	r2, [pc, #196]	; (8006d70 <HAL_DMA_IRQHandler+0xcbc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d031      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2f      	ldr	r2, [pc, #188]	; (8006d74 <HAL_DMA_IRQHandler+0xcc0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d02c      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2e      	ldr	r2, [pc, #184]	; (8006d78 <HAL_DMA_IRQHandler+0xcc4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d027      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2c      	ldr	r2, [pc, #176]	; (8006d7c <HAL_DMA_IRQHandler+0xcc8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d022      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2b      	ldr	r2, [pc, #172]	; (8006d80 <HAL_DMA_IRQHandler+0xccc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d01d      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	; (8006d84 <HAL_DMA_IRQHandler+0xcd0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a28      	ldr	r2, [pc, #160]	; (8006d88 <HAL_DMA_IRQHandler+0xcd4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a26      	ldr	r2, [pc, #152]	; (8006d8c <HAL_DMA_IRQHandler+0xcd8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a25      	ldr	r2, [pc, #148]	; (8006d90 <HAL_DMA_IRQHandler+0xcdc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <HAL_DMA_IRQHandler+0xce0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_DMA_IRQHandler+0xc60>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <HAL_DMA_IRQHandler+0xce4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <HAL_DMA_IRQHandler+0xc72>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0214 	bic.w	r2, r2, #20
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e007      	b.n	8006d36 <HAL_DMA_IRQHandler+0xc82>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 020a 	bic.w	r2, r2, #10
 8006d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80b8 	beq.w	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d58:	e0b2      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xe0c>
 8006d5a:	bf00      	nop
 8006d5c:	40020010 	.word	0x40020010
 8006d60:	40020028 	.word	0x40020028
 8006d64:	40020040 	.word	0x40020040
 8006d68:	40020058 	.word	0x40020058
 8006d6c:	40020070 	.word	0x40020070
 8006d70:	40020088 	.word	0x40020088
 8006d74:	400200a0 	.word	0x400200a0
 8006d78:	400200b8 	.word	0x400200b8
 8006d7c:	40020410 	.word	0x40020410
 8006d80:	40020428 	.word	0x40020428
 8006d84:	40020440 	.word	0x40020440
 8006d88:	40020458 	.word	0x40020458
 8006d8c:	40020470 	.word	0x40020470
 8006d90:	40020488 	.word	0x40020488
 8006d94:	400204a0 	.word	0x400204a0
 8006d98:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	2208      	movs	r2, #8
 8006da6:	409a      	lsls	r2, r3
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8088 	beq.w	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8082 	beq.w	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a41      	ldr	r2, [pc, #260]	; (8006ec8 <HAL_DMA_IRQHandler+0xe14>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d04a      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3f      	ldr	r2, [pc, #252]	; (8006ecc <HAL_DMA_IRQHandler+0xe18>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d045      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a3e      	ldr	r2, [pc, #248]	; (8006ed0 <HAL_DMA_IRQHandler+0xe1c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d040      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a3c      	ldr	r2, [pc, #240]	; (8006ed4 <HAL_DMA_IRQHandler+0xe20>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d03b      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a3b      	ldr	r2, [pc, #236]	; (8006ed8 <HAL_DMA_IRQHandler+0xe24>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d036      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a39      	ldr	r2, [pc, #228]	; (8006edc <HAL_DMA_IRQHandler+0xe28>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d031      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a38      	ldr	r2, [pc, #224]	; (8006ee0 <HAL_DMA_IRQHandler+0xe2c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d02c      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a36      	ldr	r2, [pc, #216]	; (8006ee4 <HAL_DMA_IRQHandler+0xe30>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d027      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a35      	ldr	r2, [pc, #212]	; (8006ee8 <HAL_DMA_IRQHandler+0xe34>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d022      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a33      	ldr	r2, [pc, #204]	; (8006eec <HAL_DMA_IRQHandler+0xe38>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01d      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a32      	ldr	r2, [pc, #200]	; (8006ef0 <HAL_DMA_IRQHandler+0xe3c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d018      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a30      	ldr	r2, [pc, #192]	; (8006ef4 <HAL_DMA_IRQHandler+0xe40>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d013      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <HAL_DMA_IRQHandler+0xe44>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2d      	ldr	r2, [pc, #180]	; (8006efc <HAL_DMA_IRQHandler+0xe48>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2c      	ldr	r2, [pc, #176]	; (8006f00 <HAL_DMA_IRQHandler+0xe4c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_DMA_IRQHandler+0xdaa>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a2a      	ldr	r2, [pc, #168]	; (8006f04 <HAL_DMA_IRQHandler+0xe50>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d108      	bne.n	8006e70 <HAL_DMA_IRQHandler+0xdbc>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 021c 	bic.w	r2, r2, #28
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e007      	b.n	8006e80 <HAL_DMA_IRQHandler+0xdcc>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 020e 	bic.w	r2, r2, #14
 8006e7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	2201      	movs	r2, #1
 8006e8a:	409a      	lsls	r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
 8006eb6:	e004      	b.n	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ec2:	3728      	adds	r7, #40	; 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40020010 	.word	0x40020010
 8006ecc:	40020028 	.word	0x40020028
 8006ed0:	40020040 	.word	0x40020040
 8006ed4:	40020058 	.word	0x40020058
 8006ed8:	40020070 	.word	0x40020070
 8006edc:	40020088 	.word	0x40020088
 8006ee0:	400200a0 	.word	0x400200a0
 8006ee4:	400200b8 	.word	0x400200b8
 8006ee8:	40020410 	.word	0x40020410
 8006eec:	40020428 	.word	0x40020428
 8006ef0:	40020440 	.word	0x40020440
 8006ef4:	40020458 	.word	0x40020458
 8006ef8:	40020470 	.word	0x40020470
 8006efc:	40020488 	.word	0x40020488
 8006f00:	400204a0 	.word	0x400204a0
 8006f04:	400204b8 	.word	0x400204b8

08006f08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a84      	ldr	r2, [pc, #528]	; (8007138 <DMA_SetConfig+0x230>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d072      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a82      	ldr	r2, [pc, #520]	; (800713c <DMA_SetConfig+0x234>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d06d      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a81      	ldr	r2, [pc, #516]	; (8007140 <DMA_SetConfig+0x238>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d068      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a7f      	ldr	r2, [pc, #508]	; (8007144 <DMA_SetConfig+0x23c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d063      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	; (8007148 <DMA_SetConfig+0x240>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d05e      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7c      	ldr	r2, [pc, #496]	; (800714c <DMA_SetConfig+0x244>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d059      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7b      	ldr	r2, [pc, #492]	; (8007150 <DMA_SetConfig+0x248>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d054      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a79      	ldr	r2, [pc, #484]	; (8007154 <DMA_SetConfig+0x24c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04f      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a78      	ldr	r2, [pc, #480]	; (8007158 <DMA_SetConfig+0x250>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d04a      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a76      	ldr	r2, [pc, #472]	; (800715c <DMA_SetConfig+0x254>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d045      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a75      	ldr	r2, [pc, #468]	; (8007160 <DMA_SetConfig+0x258>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d040      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a73      	ldr	r2, [pc, #460]	; (8007164 <DMA_SetConfig+0x25c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d03b      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a72      	ldr	r2, [pc, #456]	; (8007168 <DMA_SetConfig+0x260>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d036      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a70      	ldr	r2, [pc, #448]	; (800716c <DMA_SetConfig+0x264>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d031      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a6f      	ldr	r2, [pc, #444]	; (8007170 <DMA_SetConfig+0x268>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d02c      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a6d      	ldr	r2, [pc, #436]	; (8007174 <DMA_SetConfig+0x26c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d027      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a6c      	ldr	r2, [pc, #432]	; (8007178 <DMA_SetConfig+0x270>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a6a      	ldr	r2, [pc, #424]	; (800717c <DMA_SetConfig+0x274>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01d      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a69      	ldr	r2, [pc, #420]	; (8007180 <DMA_SetConfig+0x278>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a67      	ldr	r2, [pc, #412]	; (8007184 <DMA_SetConfig+0x27c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a66      	ldr	r2, [pc, #408]	; (8007188 <DMA_SetConfig+0x280>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a64      	ldr	r2, [pc, #400]	; (800718c <DMA_SetConfig+0x284>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a63      	ldr	r2, [pc, #396]	; (8007190 <DMA_SetConfig+0x288>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <DMA_SetConfig+0x10a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a61      	ldr	r2, [pc, #388]	; (8007194 <DMA_SetConfig+0x28c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d101      	bne.n	8007016 <DMA_SetConfig+0x10e>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <DMA_SetConfig+0x110>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007024:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007036:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3e      	ldr	r2, [pc, #248]	; (8007138 <DMA_SetConfig+0x230>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d04a      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3d      	ldr	r2, [pc, #244]	; (800713c <DMA_SetConfig+0x234>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d045      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a3b      	ldr	r2, [pc, #236]	; (8007140 <DMA_SetConfig+0x238>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d040      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a3a      	ldr	r2, [pc, #232]	; (8007144 <DMA_SetConfig+0x23c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d03b      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a38      	ldr	r2, [pc, #224]	; (8007148 <DMA_SetConfig+0x240>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d036      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a37      	ldr	r2, [pc, #220]	; (800714c <DMA_SetConfig+0x244>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d031      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a35      	ldr	r2, [pc, #212]	; (8007150 <DMA_SetConfig+0x248>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d02c      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a34      	ldr	r2, [pc, #208]	; (8007154 <DMA_SetConfig+0x24c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d027      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a32      	ldr	r2, [pc, #200]	; (8007158 <DMA_SetConfig+0x250>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d022      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a31      	ldr	r2, [pc, #196]	; (800715c <DMA_SetConfig+0x254>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01d      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2f      	ldr	r2, [pc, #188]	; (8007160 <DMA_SetConfig+0x258>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d018      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2e      	ldr	r2, [pc, #184]	; (8007164 <DMA_SetConfig+0x25c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d013      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2c      	ldr	r2, [pc, #176]	; (8007168 <DMA_SetConfig+0x260>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00e      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a2b      	ldr	r2, [pc, #172]	; (800716c <DMA_SetConfig+0x264>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d009      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <DMA_SetConfig+0x268>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <DMA_SetConfig+0x1d0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a28      	ldr	r2, [pc, #160]	; (8007174 <DMA_SetConfig+0x26c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d101      	bne.n	80070dc <DMA_SetConfig+0x1d4>
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <DMA_SetConfig+0x1d6>
 80070dc:	2300      	movs	r3, #0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d05a      	beq.n	8007198 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	223f      	movs	r2, #63	; 0x3f
 80070ec:	409a      	lsls	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007100:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d108      	bne.n	8007124 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007122:	e087      	b.n	8007234 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]
}
 8007134:	e07e      	b.n	8007234 <DMA_SetConfig+0x32c>
 8007136:	bf00      	nop
 8007138:	40020010 	.word	0x40020010
 800713c:	40020028 	.word	0x40020028
 8007140:	40020040 	.word	0x40020040
 8007144:	40020058 	.word	0x40020058
 8007148:	40020070 	.word	0x40020070
 800714c:	40020088 	.word	0x40020088
 8007150:	400200a0 	.word	0x400200a0
 8007154:	400200b8 	.word	0x400200b8
 8007158:	40020410 	.word	0x40020410
 800715c:	40020428 	.word	0x40020428
 8007160:	40020440 	.word	0x40020440
 8007164:	40020458 	.word	0x40020458
 8007168:	40020470 	.word	0x40020470
 800716c:	40020488 	.word	0x40020488
 8007170:	400204a0 	.word	0x400204a0
 8007174:	400204b8 	.word	0x400204b8
 8007178:	58025408 	.word	0x58025408
 800717c:	5802541c 	.word	0x5802541c
 8007180:	58025430 	.word	0x58025430
 8007184:	58025444 	.word	0x58025444
 8007188:	58025458 	.word	0x58025458
 800718c:	5802546c 	.word	0x5802546c
 8007190:	58025480 	.word	0x58025480
 8007194:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a28      	ldr	r2, [pc, #160]	; (8007240 <DMA_SetConfig+0x338>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d022      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <DMA_SetConfig+0x33c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d01d      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a25      	ldr	r2, [pc, #148]	; (8007248 <DMA_SetConfig+0x340>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d018      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a24      	ldr	r2, [pc, #144]	; (800724c <DMA_SetConfig+0x344>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <DMA_SetConfig+0x348>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	; (8007254 <DMA_SetConfig+0x34c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <DMA_SetConfig+0x350>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <DMA_SetConfig+0x2e0>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <DMA_SetConfig+0x354>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d101      	bne.n	80071ec <DMA_SetConfig+0x2e4>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <DMA_SetConfig+0x2e6>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d020      	beq.n	8007234 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2201      	movs	r2, #1
 80071fc:	409a      	lsls	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d108      	bne.n	8007224 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	60da      	str	r2, [r3, #12]
}
 8007222:	e007      	b.n	8007234 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	58025408 	.word	0x58025408
 8007244:	5802541c 	.word	0x5802541c
 8007248:	58025430 	.word	0x58025430
 800724c:	58025444 	.word	0x58025444
 8007250:	58025458 	.word	0x58025458
 8007254:	5802546c 	.word	0x5802546c
 8007258:	58025480 	.word	0x58025480
 800725c:	58025494 	.word	0x58025494

08007260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a42      	ldr	r2, [pc, #264]	; (8007378 <DMA_CalcBaseAndBitshift+0x118>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d04a      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a41      	ldr	r2, [pc, #260]	; (800737c <DMA_CalcBaseAndBitshift+0x11c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d045      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <DMA_CalcBaseAndBitshift+0x120>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d040      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3e      	ldr	r2, [pc, #248]	; (8007384 <DMA_CalcBaseAndBitshift+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d03b      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a3c      	ldr	r2, [pc, #240]	; (8007388 <DMA_CalcBaseAndBitshift+0x128>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d036      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3b      	ldr	r2, [pc, #236]	; (800738c <DMA_CalcBaseAndBitshift+0x12c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d031      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a39      	ldr	r2, [pc, #228]	; (8007390 <DMA_CalcBaseAndBitshift+0x130>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d02c      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a38      	ldr	r2, [pc, #224]	; (8007394 <DMA_CalcBaseAndBitshift+0x134>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d027      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a36      	ldr	r2, [pc, #216]	; (8007398 <DMA_CalcBaseAndBitshift+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d022      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a35      	ldr	r2, [pc, #212]	; (800739c <DMA_CalcBaseAndBitshift+0x13c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d01d      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a33      	ldr	r2, [pc, #204]	; (80073a0 <DMA_CalcBaseAndBitshift+0x140>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d018      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a32      	ldr	r2, [pc, #200]	; (80073a4 <DMA_CalcBaseAndBitshift+0x144>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d013      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a30      	ldr	r2, [pc, #192]	; (80073a8 <DMA_CalcBaseAndBitshift+0x148>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00e      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <DMA_CalcBaseAndBitshift+0x14c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d009      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <DMA_CalcBaseAndBitshift+0x150>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <DMA_CalcBaseAndBitshift+0xa8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2c      	ldr	r2, [pc, #176]	; (80073b4 <DMA_CalcBaseAndBitshift+0x154>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d101      	bne.n	800730c <DMA_CalcBaseAndBitshift+0xac>
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <DMA_CalcBaseAndBitshift+0xae>
 800730c:	2300      	movs	r3, #0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d024      	beq.n	800735c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	3b10      	subs	r3, #16
 800731a:	4a27      	ldr	r2, [pc, #156]	; (80073b8 <DMA_CalcBaseAndBitshift+0x158>)
 800731c:	fba2 2303 	umull	r2, r3, r2, r3
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	4a24      	ldr	r2, [pc, #144]	; (80073bc <DMA_CalcBaseAndBitshift+0x15c>)
 800732c:	5cd3      	ldrb	r3, [r2, r3]
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b03      	cmp	r3, #3
 8007338:	d908      	bls.n	800734c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4b1f      	ldr	r3, [pc, #124]	; (80073c0 <DMA_CalcBaseAndBitshift+0x160>)
 8007342:	4013      	ands	r3, r2
 8007344:	1d1a      	adds	r2, r3, #4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	659a      	str	r2, [r3, #88]	; 0x58
 800734a:	e00d      	b.n	8007368 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <DMA_CalcBaseAndBitshift+0x160>)
 8007354:	4013      	ands	r3, r2
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6593      	str	r3, [r2, #88]	; 0x58
 800735a:	e005      	b.n	8007368 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40020010 	.word	0x40020010
 800737c:	40020028 	.word	0x40020028
 8007380:	40020040 	.word	0x40020040
 8007384:	40020058 	.word	0x40020058
 8007388:	40020070 	.word	0x40020070
 800738c:	40020088 	.word	0x40020088
 8007390:	400200a0 	.word	0x400200a0
 8007394:	400200b8 	.word	0x400200b8
 8007398:	40020410 	.word	0x40020410
 800739c:	40020428 	.word	0x40020428
 80073a0:	40020440 	.word	0x40020440
 80073a4:	40020458 	.word	0x40020458
 80073a8:	40020470 	.word	0x40020470
 80073ac:	40020488 	.word	0x40020488
 80073b0:	400204a0 	.word	0x400204a0
 80073b4:	400204b8 	.word	0x400204b8
 80073b8:	aaaaaaab 	.word	0xaaaaaaab
 80073bc:	080122c4 	.word	0x080122c4
 80073c0:	fffffc00 	.word	0xfffffc00

080073c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d120      	bne.n	800741a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d858      	bhi.n	8007492 <DMA_CheckFifoParam+0xce>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <DMA_CheckFifoParam+0x24>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	0800740b 	.word	0x0800740b
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	08007493 	.word	0x08007493
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d048      	beq.n	8007496 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007408:	e045      	b.n	8007496 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007412:	d142      	bne.n	800749a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007418:	e03f      	b.n	800749a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007422:	d123      	bne.n	800746c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	2b03      	cmp	r3, #3
 800742a:	d838      	bhi.n	800749e <DMA_CheckFifoParam+0xda>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <DMA_CheckFifoParam+0x70>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007445 	.word	0x08007445
 8007438:	0800744b 	.word	0x0800744b
 800743c:	08007445 	.word	0x08007445
 8007440:	0800745d 	.word	0x0800745d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
        break;
 8007448:	e030      	b.n	80074ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d025      	beq.n	80074a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800745a:	e022      	b.n	80074a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007464:	d11f      	bne.n	80074a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800746a:	e01c      	b.n	80074a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	2b02      	cmp	r3, #2
 8007472:	d902      	bls.n	800747a <DMA_CheckFifoParam+0xb6>
 8007474:	2b03      	cmp	r3, #3
 8007476:	d003      	beq.n	8007480 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007478:	e018      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
        break;
 800747e:	e015      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00e      	beq.n	80074aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
    break;
 8007490:	e00b      	b.n	80074aa <DMA_CheckFifoParam+0xe6>
        break;
 8007492:	bf00      	nop
 8007494:	e00a      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        break;
 8007496:	bf00      	nop
 8007498:	e008      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        break;
 800749a:	bf00      	nop
 800749c:	e006      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        break;
 800749e:	bf00      	nop
 80074a0:	e004      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        break;
 80074a2:	bf00      	nop
 80074a4:	e002      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
        break;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <DMA_CheckFifoParam+0xe8>
    break;
 80074aa:	bf00      	nop
    }
  }

  return status;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop

080074bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a38      	ldr	r2, [pc, #224]	; (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d022      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a36      	ldr	r2, [pc, #216]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01d      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a35      	ldr	r2, [pc, #212]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d018      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a33      	ldr	r2, [pc, #204]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d013      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a32      	ldr	r2, [pc, #200]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00e      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a30      	ldr	r2, [pc, #192]	; (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d009      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2f      	ldr	r2, [pc, #188]	; (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d004      	beq.n	800751a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a2d      	ldr	r2, [pc, #180]	; (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01a      	beq.n	800755a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	3b08      	subs	r3, #8
 800752c:	4a28      	ldr	r2, [pc, #160]	; (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800752e:	fba2 2303 	umull	r2, r3, r2, r3
 8007532:	091b      	lsrs	r3, r3, #4
 8007534:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a24      	ldr	r2, [pc, #144]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007548:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	2201      	movs	r2, #1
 8007552:	409a      	lsls	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007558:	e024      	b.n	80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	3b10      	subs	r3, #16
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d806      	bhi.n	8007582 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d902      	bls.n	8007582 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3308      	adds	r3, #8
 8007580:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a16      	ldr	r2, [pc, #88]	; (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007594:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2201      	movs	r2, #1
 800759e:	409a      	lsls	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	58025408 	.word	0x58025408
 80075b4:	5802541c 	.word	0x5802541c
 80075b8:	58025430 	.word	0x58025430
 80075bc:	58025444 	.word	0x58025444
 80075c0:	58025458 	.word	0x58025458
 80075c4:	5802546c 	.word	0x5802546c
 80075c8:	58025480 	.word	0x58025480
 80075cc:	58025494 	.word	0x58025494
 80075d0:	cccccccd 	.word	0xcccccccd
 80075d4:	16009600 	.word	0x16009600
 80075d8:	58025880 	.word	0x58025880
 80075dc:	aaaaaaab 	.word	0xaaaaaaab
 80075e0:	400204b8 	.word	0x400204b8
 80075e4:	4002040f 	.word	0x4002040f
 80075e8:	10008200 	.word	0x10008200
 80075ec:	40020880 	.word	0x40020880

080075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04a      	beq.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d847      	bhi.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a25      	ldr	r2, [pc, #148]	; (80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d022      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a24      	ldr	r2, [pc, #144]	; (80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d01d      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d101      	bne.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a15      	ldr	r2, [pc, #84]	; (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007678:	671a      	str	r2, [r3, #112]	; 0x70
 800767a:	e009      	b.n	8007690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800768e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3b01      	subs	r3, #1
 8007694:	2201      	movs	r2, #1
 8007696:	409a      	lsls	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	58025408 	.word	0x58025408
 80076ac:	5802541c 	.word	0x5802541c
 80076b0:	58025430 	.word	0x58025430
 80076b4:	58025444 	.word	0x58025444
 80076b8:	58025458 	.word	0x58025458
 80076bc:	5802546c 	.word	0x5802546c
 80076c0:	58025480 	.word	0x58025480
 80076c4:	58025494 	.word	0x58025494
 80076c8:	1600963f 	.word	0x1600963f
 80076cc:	58025940 	.word	0x58025940
 80076d0:	1000823f 	.word	0x1000823f
 80076d4:	40020940 	.word	0x40020940

080076d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	; 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076e6:	4b89      	ldr	r3, [pc, #548]	; (800790c <HAL_GPIO_Init+0x234>)
 80076e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ea:	e194      	b.n	8007a16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	2101      	movs	r1, #1
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	fa01 f303 	lsl.w	r3, r1, r3
 80076f8:	4013      	ands	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 8186 	beq.w	8007a10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d00b      	beq.n	8007724 <HAL_GPIO_Init+0x4c>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d007      	beq.n	8007724 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007718:	2b11      	cmp	r3, #17
 800771a:	d003      	beq.n	8007724 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b12      	cmp	r3, #18
 8007722:	d130      	bne.n	8007786 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	2203      	movs	r2, #3
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	43db      	mvns	r3, r3
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4013      	ands	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4313      	orrs	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800775a:	2201      	movs	r2, #1
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	43db      	mvns	r3, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4013      	ands	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	f003 0201 	and.w	r2, r3, #1
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	4313      	orrs	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	2203      	movs	r2, #3
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	4013      	ands	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d003      	beq.n	80077c6 <HAL_GPIO_Init+0xee>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b12      	cmp	r3, #18
 80077c4:	d123      	bne.n	800780e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	08da      	lsrs	r2, r3, #3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3208      	adds	r2, #8
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	220f      	movs	r2, #15
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	43db      	mvns	r3, r3
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	4013      	ands	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	08da      	lsrs	r2, r3, #3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3208      	adds	r2, #8
 8007808:	69b9      	ldr	r1, [r7, #24]
 800780a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	2203      	movs	r2, #3
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4013      	ands	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f003 0203 	and.w	r2, r3, #3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	4313      	orrs	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80e0 	beq.w	8007a10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007850:	4b2f      	ldr	r3, [pc, #188]	; (8007910 <HAL_GPIO_Init+0x238>)
 8007852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007856:	4a2e      	ldr	r2, [pc, #184]	; (8007910 <HAL_GPIO_Init+0x238>)
 8007858:	f043 0302 	orr.w	r3, r3, #2
 800785c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_GPIO_Init+0x238>)
 8007862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800786e:	4a29      	ldr	r2, [pc, #164]	; (8007914 <HAL_GPIO_Init+0x23c>)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	3302      	adds	r3, #2
 8007876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	220f      	movs	r2, #15
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a20      	ldr	r2, [pc, #128]	; (8007918 <HAL_GPIO_Init+0x240>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d052      	beq.n	8007940 <HAL_GPIO_Init+0x268>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <HAL_GPIO_Init+0x244>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d031      	beq.n	8007906 <HAL_GPIO_Init+0x22e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_GPIO_Init+0x248>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d02b      	beq.n	8007902 <HAL_GPIO_Init+0x22a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_GPIO_Init+0x24c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d025      	beq.n	80078fe <HAL_GPIO_Init+0x226>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_GPIO_Init+0x250>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01f      	beq.n	80078fa <HAL_GPIO_Init+0x222>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_GPIO_Init+0x254>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d019      	beq.n	80078f6 <HAL_GPIO_Init+0x21e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_GPIO_Init+0x258>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_GPIO_Init+0x21a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a19      	ldr	r2, [pc, #100]	; (8007934 <HAL_GPIO_Init+0x25c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00d      	beq.n	80078ee <HAL_GPIO_Init+0x216>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_GPIO_Init+0x260>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d007      	beq.n	80078ea <HAL_GPIO_Init+0x212>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a17      	ldr	r2, [pc, #92]	; (800793c <HAL_GPIO_Init+0x264>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d101      	bne.n	80078e6 <HAL_GPIO_Init+0x20e>
 80078e2:	2309      	movs	r3, #9
 80078e4:	e02d      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078e6:	230a      	movs	r3, #10
 80078e8:	e02b      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078ea:	2308      	movs	r3, #8
 80078ec:	e029      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078ee:	2307      	movs	r3, #7
 80078f0:	e027      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078f2:	2306      	movs	r3, #6
 80078f4:	e025      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078f6:	2305      	movs	r3, #5
 80078f8:	e023      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078fa:	2304      	movs	r3, #4
 80078fc:	e021      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 80078fe:	2303      	movs	r3, #3
 8007900:	e01f      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 8007902:	2302      	movs	r3, #2
 8007904:	e01d      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 8007906:	2301      	movs	r3, #1
 8007908:	e01b      	b.n	8007942 <HAL_GPIO_Init+0x26a>
 800790a:	bf00      	nop
 800790c:	58000080 	.word	0x58000080
 8007910:	58024400 	.word	0x58024400
 8007914:	58000400 	.word	0x58000400
 8007918:	58020000 	.word	0x58020000
 800791c:	58020400 	.word	0x58020400
 8007920:	58020800 	.word	0x58020800
 8007924:	58020c00 	.word	0x58020c00
 8007928:	58021000 	.word	0x58021000
 800792c:	58021400 	.word	0x58021400
 8007930:	58021800 	.word	0x58021800
 8007934:	58021c00 	.word	0x58021c00
 8007938:	58022000 	.word	0x58022000
 800793c:	58022400 	.word	0x58022400
 8007940:	2300      	movs	r3, #0
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	f002 0203 	and.w	r2, r2, #3
 8007948:	0092      	lsls	r2, r2, #2
 800794a:	4093      	lsls	r3, r2
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4313      	orrs	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007952:	4938      	ldr	r1, [pc, #224]	; (8007a34 <HAL_GPIO_Init+0x35c>)
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	3302      	adds	r3, #2
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	43db      	mvns	r3, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4013      	ands	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80079da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4013      	ands	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	3301      	adds	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f47f ae63 	bne.w	80076ec <HAL_GPIO_Init+0x14>
  }
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	3724      	adds	r7, #36	; 0x24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	58000400 	.word	0x58000400

08007a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	887b      	ldrh	r3, [r7, #2]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
 8007a54:	e001      	b.n	8007a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
 8007a74:	4613      	mov	r3, r2
 8007a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a78:	787b      	ldrb	r3, [r7, #1]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a84:	e003      	b.n	8007a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	041a      	lsls	r2, r3, #16
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	619a      	str	r2, [r3, #24]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f804 	bl	8007ace <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007aec:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <HAL_PWREx_ConfigSupply+0x70>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d00a      	beq.n	8007b0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007af8:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <HAL_PWREx_ConfigSupply+0x70>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d001      	beq.n	8007b0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e01f      	b.n	8007b4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e01d      	b.n	8007b4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <HAL_PWREx_ConfigSupply+0x70>)
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f023 0207 	bic.w	r2, r3, #7
 8007b16:	490f      	ldr	r1, [pc, #60]	; (8007b54 <HAL_PWREx_ConfigSupply+0x70>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007b1e:	f7fb fc21 	bl	8003364 <HAL_GetTick>
 8007b22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b24:	e009      	b.n	8007b3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007b26:	f7fb fc1d 	bl	8003364 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b34:	d901      	bls.n	8007b3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e007      	b.n	8007b4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_PWREx_ConfigSupply+0x70>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b46:	d1ee      	bne.n	8007b26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	58024800 	.word	0x58024800

08007b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08c      	sub	sp, #48	; 0x30
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e3ff      	b.n	800836a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8087 	beq.w	8007c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b78:	4b99      	ldr	r3, [pc, #612]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b82:	4b97      	ldr	r3, [pc, #604]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	2b10      	cmp	r3, #16
 8007b8c:	d007      	beq.n	8007b9e <HAL_RCC_OscConfig+0x46>
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	2b18      	cmp	r3, #24
 8007b92:	d110      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x5e>
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d10b      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b9e:	4b90      	ldr	r3, [pc, #576]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d06c      	beq.n	8007c84 <HAL_RCC_OscConfig+0x12c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d168      	bne.n	8007c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e3d9      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bbe:	d106      	bne.n	8007bce <HAL_RCC_OscConfig+0x76>
 8007bc0:	4b87      	ldr	r3, [pc, #540]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a86      	ldr	r2, [pc, #536]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	e02e      	b.n	8007c2c <HAL_RCC_OscConfig+0xd4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x98>
 8007bd6:	4b82      	ldr	r3, [pc, #520]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a81      	ldr	r2, [pc, #516]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	4b7f      	ldr	r3, [pc, #508]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a7e      	ldr	r2, [pc, #504]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	e01d      	b.n	8007c2c <HAL_RCC_OscConfig+0xd4>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bf8:	d10c      	bne.n	8007c14 <HAL_RCC_OscConfig+0xbc>
 8007bfa:	4b79      	ldr	r3, [pc, #484]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a78      	ldr	r2, [pc, #480]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4b76      	ldr	r3, [pc, #472]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a75      	ldr	r2, [pc, #468]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e00b      	b.n	8007c2c <HAL_RCC_OscConfig+0xd4>
 8007c14:	4b72      	ldr	r3, [pc, #456]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a71      	ldr	r2, [pc, #452]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b6f      	ldr	r3, [pc, #444]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d013      	beq.n	8007c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fb fb96 	bl	8003364 <HAL_GetTick>
 8007c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c3c:	f7fb fb92 	bl	8003364 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b64      	cmp	r3, #100	; 0x64
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e38d      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c4e:	4b64      	ldr	r3, [pc, #400]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0f0      	beq.n	8007c3c <HAL_RCC_OscConfig+0xe4>
 8007c5a:	e014      	b.n	8007c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb fb82 	bl	8003364 <HAL_GetTick>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c64:	f7fb fb7e 	bl	8003364 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b64      	cmp	r3, #100	; 0x64
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e379      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c76:	4b5a      	ldr	r3, [pc, #360]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x10c>
 8007c82:	e000      	b.n	8007c86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80ae 	beq.w	8007df0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c94:	4b52      	ldr	r3, [pc, #328]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c9e:	4b50      	ldr	r3, [pc, #320]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_RCC_OscConfig+0x162>
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	2b18      	cmp	r3, #24
 8007cae:	d13a      	bne.n	8007d26 <HAL_RCC_OscConfig+0x1ce>
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d135      	bne.n	8007d26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cba:	4b49      	ldr	r3, [pc, #292]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x17a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e34b      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd2:	f7fb fb53 	bl	800337c <HAL_GetREVID>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d817      	bhi.n	8007d10 <HAL_RCC_OscConfig+0x1b8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d108      	bne.n	8007cfa <HAL_RCC_OscConfig+0x1a2>
 8007ce8:	4b3d      	ldr	r3, [pc, #244]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cf0:	4a3b      	ldr	r2, [pc, #236]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf8:	e07a      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cfa:	4b39      	ldr	r3, [pc, #228]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	031b      	lsls	r3, r3, #12
 8007d08:	4935      	ldr	r1, [pc, #212]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d0e:	e06f      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d10:	4b33      	ldr	r3, [pc, #204]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	4930      	ldr	r1, [pc, #192]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d24:	e064      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d045      	beq.n	8007dba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d2e:	4b2c      	ldr	r3, [pc, #176]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f023 0219 	bic.w	r2, r3, #25
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4929      	ldr	r1, [pc, #164]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fb fb10 	bl	8003364 <HAL_GetTick>
 8007d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d48:	f7fb fb0c 	bl	8003364 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e307      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d5a:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f0      	beq.n	8007d48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d66:	f7fb fb09 	bl	800337c <HAL_GetREVID>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d817      	bhi.n	8007da4 <HAL_RCC_OscConfig+0x24c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d108      	bne.n	8007d8e <HAL_RCC_OscConfig+0x236>
 8007d7c:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d84:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8a:	6053      	str	r3, [r2, #4]
 8007d8c:	e030      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
 8007d8e:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	031b      	lsls	r3, r3, #12
 8007d9c:	4910      	ldr	r1, [pc, #64]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	604b      	str	r3, [r1, #4]
 8007da2:	e025      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
 8007da4:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	490b      	ldr	r1, [pc, #44]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	604b      	str	r3, [r1, #4]
 8007db8:	e01a      	b.n	8007df0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a08      	ldr	r2, [pc, #32]	; (8007de0 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc6:	f7fb facd 	bl	8003364 <HAL_GetTick>
 8007dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dce:	f7fb fac9 	bl	8003364 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d903      	bls.n	8007de4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e2c4      	b.n	800836a <HAL_RCC_OscConfig+0x812>
 8007de0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007de4:	4ba4      	ldr	r3, [pc, #656]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1ee      	bne.n	8007dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80a9 	beq.w	8007f50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dfe:	4b9e      	ldr	r3, [pc, #632]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e08:	4b9b      	ldr	r3, [pc, #620]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d007      	beq.n	8007e24 <HAL_RCC_OscConfig+0x2cc>
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b18      	cmp	r3, #24
 8007e18:	d13a      	bne.n	8007e90 <HAL_RCC_OscConfig+0x338>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d135      	bne.n	8007e90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e24:	4b94      	ldr	r3, [pc, #592]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_RCC_OscConfig+0x2e4>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e296      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e3c:	f7fb fa9e 	bl	800337c <HAL_GetREVID>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d817      	bhi.n	8007e7a <HAL_RCC_OscConfig+0x322>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d108      	bne.n	8007e64 <HAL_RCC_OscConfig+0x30c>
 8007e52:	4b89      	ldr	r3, [pc, #548]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e5a:	4a87      	ldr	r2, [pc, #540]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e62:	e075      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e64:	4b84      	ldr	r3, [pc, #528]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	069b      	lsls	r3, r3, #26
 8007e72:	4981      	ldr	r1, [pc, #516]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e78:	e06a      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e7a:	4b7f      	ldr	r3, [pc, #508]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	061b      	lsls	r3, r3, #24
 8007e88:	497b      	ldr	r1, [pc, #492]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e8e:	e05f      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d042      	beq.n	8007f1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e98:	4b77      	ldr	r3, [pc, #476]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a76      	ldr	r2, [pc, #472]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7fb fa5e 	bl	8003364 <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007eac:	f7fb fa5a 	bl	8003364 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e255      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ebe:	4b6e      	ldr	r3, [pc, #440]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f0      	beq.n	8007eac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eca:	f7fb fa57 	bl	800337c <HAL_GetREVID>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d817      	bhi.n	8007f08 <HAL_RCC_OscConfig+0x3b0>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d108      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x39a>
 8007ee0:	4b65      	ldr	r3, [pc, #404]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ee8:	4a63      	ldr	r2, [pc, #396]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e02e      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
 8007ef2:	4b61      	ldr	r3, [pc, #388]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	069b      	lsls	r3, r3, #26
 8007f00:	495d      	ldr	r1, [pc, #372]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	604b      	str	r3, [r1, #4]
 8007f06:	e023      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
 8007f08:	4b5b      	ldr	r3, [pc, #364]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	4958      	ldr	r1, [pc, #352]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60cb      	str	r3, [r1, #12]
 8007f1c:	e018      	b.n	8007f50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f1e:	4b56      	ldr	r3, [pc, #344]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a55      	ldr	r2, [pc, #340]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2a:	f7fb fa1b 	bl	8003364 <HAL_GetTick>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f32:	f7fb fa17 	bl	8003364 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e212      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f44:	4b4c      	ldr	r3, [pc, #304]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d036      	beq.n	8007fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d019      	beq.n	8007f98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f64:	4b44      	ldr	r3, [pc, #272]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f68:	4a43      	ldr	r2, [pc, #268]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f70:	f7fb f9f8 	bl	8003364 <HAL_GetTick>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f78:	f7fb f9f4 	bl	8003364 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e1ef      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f8a:	4b3b      	ldr	r3, [pc, #236]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x420>
 8007f96:	e018      	b.n	8007fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f98:	4b37      	ldr	r3, [pc, #220]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9c:	4a36      	ldr	r2, [pc, #216]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa4:	f7fb f9de 	bl	8003364 <HAL_GetTick>
 8007fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fac:	f7fb f9da 	bl	8003364 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e1d5      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f0      	bne.n	8007fac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d036      	beq.n	8008044 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d019      	beq.n	8008012 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fde:	4b26      	ldr	r3, [pc, #152]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a25      	ldr	r2, [pc, #148]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8007fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fea:	f7fb f9bb 	bl	8003364 <HAL_GetTick>
 8007fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ff2:	f7fb f9b7 	bl	8003364 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e1b2      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008004:	4b1c      	ldr	r3, [pc, #112]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x49a>
 8008010:	e018      	b.n	8008044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008012:	4b19      	ldr	r3, [pc, #100]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 8008018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800801e:	f7fb f9a1 	bl	8003364 <HAL_GetTick>
 8008022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008026:	f7fb f99d 	bl	8003364 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e198      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <HAL_RCC_OscConfig+0x520>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f0      	bne.n	8008026 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8085 	beq.w	800815c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <HAL_RCC_OscConfig+0x524>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a09      	ldr	r2, [pc, #36]	; (800807c <HAL_RCC_OscConfig+0x524>)
 8008058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800805e:	f7fb f981 	bl	8003364 <HAL_GetTick>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008064:	e00c      	b.n	8008080 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008066:	f7fb f97d 	bl	8003364 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	2b64      	cmp	r3, #100	; 0x64
 8008072:	d905      	bls.n	8008080 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e178      	b.n	800836a <HAL_RCC_OscConfig+0x812>
 8008078:	58024400 	.word	0x58024400
 800807c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008080:	4b96      	ldr	r3, [pc, #600]	; (80082dc <HAL_RCC_OscConfig+0x784>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0ec      	beq.n	8008066 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d106      	bne.n	80080a2 <HAL_RCC_OscConfig+0x54a>
 8008094:	4b92      	ldr	r3, [pc, #584]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	4a91      	ldr	r2, [pc, #580]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	6713      	str	r3, [r2, #112]	; 0x70
 80080a0:	e02d      	b.n	80080fe <HAL_RCC_OscConfig+0x5a6>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10c      	bne.n	80080c4 <HAL_RCC_OscConfig+0x56c>
 80080aa:	4b8d      	ldr	r3, [pc, #564]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a8c      	ldr	r2, [pc, #560]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
 80080b6:	4b8a      	ldr	r3, [pc, #552]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	4a89      	ldr	r2, [pc, #548]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	6713      	str	r3, [r2, #112]	; 0x70
 80080c2:	e01c      	b.n	80080fe <HAL_RCC_OscConfig+0x5a6>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b05      	cmp	r3, #5
 80080ca:	d10c      	bne.n	80080e6 <HAL_RCC_OscConfig+0x58e>
 80080cc:	4b84      	ldr	r3, [pc, #528]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d0:	4a83      	ldr	r2, [pc, #524]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	6713      	str	r3, [r2, #112]	; 0x70
 80080d8:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	4a80      	ldr	r2, [pc, #512]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	6713      	str	r3, [r2, #112]	; 0x70
 80080e4:	e00b      	b.n	80080fe <HAL_RCC_OscConfig+0x5a6>
 80080e6:	4b7e      	ldr	r3, [pc, #504]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a7d      	ldr	r2, [pc, #500]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	6713      	str	r3, [r2, #112]	; 0x70
 80080f2:	4b7b      	ldr	r3, [pc, #492]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	4a7a      	ldr	r2, [pc, #488]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80080f8:	f023 0304 	bic.w	r3, r3, #4
 80080fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d015      	beq.n	8008132 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008106:	f7fb f92d 	bl	8003364 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800810c:	e00a      	b.n	8008124 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800810e:	f7fb f929 	bl	8003364 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	f241 3288 	movw	r2, #5000	; 0x1388
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e122      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008124:	4b6e      	ldr	r3, [pc, #440]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0ee      	beq.n	800810e <HAL_RCC_OscConfig+0x5b6>
 8008130:	e014      	b.n	800815c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008132:	f7fb f917 	bl	8003364 <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008138:	e00a      	b.n	8008150 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813a:	f7fb f913 	bl	8003364 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f241 3288 	movw	r2, #5000	; 0x1388
 8008148:	4293      	cmp	r3, r2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e10c      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008150:	4b63      	ldr	r3, [pc, #396]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1ee      	bne.n	800813a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8101 	beq.w	8008368 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008166:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816e:	2b18      	cmp	r3, #24
 8008170:	f000 80bc 	beq.w	80082ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b02      	cmp	r3, #2
 800817a:	f040 8095 	bne.w	80082a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817e:	4b58      	ldr	r3, [pc, #352]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a57      	ldr	r2, [pc, #348]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818a:	f7fb f8eb 	bl	8003364 <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008192:	f7fb f8e7 	bl	8003364 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e0e2      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081a4:	4b4e      	ldr	r3, [pc, #312]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081b0:	4b4b      	ldr	r3, [pc, #300]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80081b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b4:	4b4b      	ldr	r3, [pc, #300]	; (80082e4 <HAL_RCC_OscConfig+0x78c>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081c0:	0112      	lsls	r2, r2, #4
 80081c2:	430a      	orrs	r2, r1
 80081c4:	4946      	ldr	r1, [pc, #280]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	628b      	str	r3, [r1, #40]	; 0x28
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	3b01      	subs	r3, #1
 80081d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	3b01      	subs	r3, #1
 80081da:	025b      	lsls	r3, r3, #9
 80081dc:	b29b      	uxth	r3, r3
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	3b01      	subs	r3, #1
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ec:	431a      	orrs	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	3b01      	subs	r3, #1
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081fa:	4939      	ldr	r1, [pc, #228]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008200:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	4a36      	ldr	r2, [pc, #216]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800820c:	4b34      	ldr	r3, [pc, #208]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800820e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008210:	4b35      	ldr	r3, [pc, #212]	; (80082e8 <HAL_RCC_OscConfig+0x790>)
 8008212:	4013      	ands	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008218:	00d2      	lsls	r2, r2, #3
 800821a:	4931      	ldr	r1, [pc, #196]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800821c:	4313      	orrs	r3, r2
 800821e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008220:	4b2f      	ldr	r3, [pc, #188]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f023 020c 	bic.w	r2, r3, #12
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	492c      	ldr	r1, [pc, #176]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800822e:	4313      	orrs	r3, r2
 8008230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008232:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	f023 0202 	bic.w	r2, r3, #2
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823e:	4928      	ldr	r1, [pc, #160]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008240:	4313      	orrs	r3, r2
 8008242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008244:	4b26      	ldr	r3, [pc, #152]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4a25      	ldr	r2, [pc, #148]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800824a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800824e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008250:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800825a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800825c:	4b20      	ldr	r3, [pc, #128]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008268:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008274:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800827a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800827e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fb f870 	bl	8003364 <HAL_GetTick>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008288:	f7fb f86c 	bl	8003364 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e067      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0x730>
 80082a6:	e05f      	b.n	8008368 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a0c      	ldr	r2, [pc, #48]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80082ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b4:	f7fb f856 	bl	8003364 <HAL_GetTick>
 80082b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082bc:	f7fb f852 	bl	8003364 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e04d      	b.n	800836a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <HAL_RCC_OscConfig+0x788>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0x764>
 80082da:	e045      	b.n	8008368 <HAL_RCC_OscConfig+0x810>
 80082dc:	58024800 	.word	0x58024800
 80082e0:	58024400 	.word	0x58024400
 80082e4:	fffffc0c 	.word	0xfffffc0c
 80082e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082ec:	4b21      	ldr	r3, [pc, #132]	; (8008374 <HAL_RCC_OscConfig+0x81c>)
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082f2:	4b20      	ldr	r3, [pc, #128]	; (8008374 <HAL_RCC_OscConfig+0x81c>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d031      	beq.n	8008364 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f003 0203 	and.w	r2, r3, #3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d12a      	bne.n	8008364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	091b      	lsrs	r3, r3, #4
 8008312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831a:	429a      	cmp	r2, r3
 800831c:	d122      	bne.n	8008364 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800832a:	429a      	cmp	r2, r3
 800832c:	d11a      	bne.n	8008364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	0a5b      	lsrs	r3, r3, #9
 8008332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800833c:	429a      	cmp	r2, r3
 800833e:	d111      	bne.n	8008364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800834e:	429a      	cmp	r2, r3
 8008350:	d108      	bne.n	8008364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	0e1b      	lsrs	r3, r3, #24
 8008356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008360:	429a      	cmp	r2, r3
 8008362:	d001      	beq.n	8008368 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3730      	adds	r7, #48	; 0x30
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400

08008378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e19c      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800838c:	4b8a      	ldr	r3, [pc, #552]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d910      	bls.n	80083bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839a:	4b87      	ldr	r3, [pc, #540]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f023 020f 	bic.w	r2, r3, #15
 80083a2:	4985      	ldr	r1, [pc, #532]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b83      	ldr	r3, [pc, #524]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e184      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	4b7b      	ldr	r3, [pc, #492]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d908      	bls.n	80083ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d8:	4b78      	ldr	r3, [pc, #480]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	4975      	ldr	r1, [pc, #468]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d010      	beq.n	8008418 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	4b70      	ldr	r3, [pc, #448]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008402:	429a      	cmp	r2, r3
 8008404:	d908      	bls.n	8008418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008406:	4b6d      	ldr	r3, [pc, #436]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	496a      	ldr	r1, [pc, #424]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008414:	4313      	orrs	r3, r2
 8008416:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	4b64      	ldr	r3, [pc, #400]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008430:	429a      	cmp	r2, r3
 8008432:	d908      	bls.n	8008446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008434:	4b61      	ldr	r3, [pc, #388]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	495e      	ldr	r1, [pc, #376]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008442:	4313      	orrs	r3, r2
 8008444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	4b59      	ldr	r3, [pc, #356]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800845e:	429a      	cmp	r2, r3
 8008460:	d908      	bls.n	8008474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008462:	4b56      	ldr	r3, [pc, #344]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	4953      	ldr	r1, [pc, #332]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008470:	4313      	orrs	r3, r2
 8008472:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	4b4d      	ldr	r3, [pc, #308]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	429a      	cmp	r2, r3
 800848e:	d908      	bls.n	80084a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008490:	4b4a      	ldr	r3, [pc, #296]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	f023 020f 	bic.w	r2, r3, #15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4947      	ldr	r1, [pc, #284]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d055      	beq.n	800855a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084ae:	4b43      	ldr	r3, [pc, #268]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4940      	ldr	r1, [pc, #256]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d107      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084c8:	4b3c      	ldr	r3, [pc, #240]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d121      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e0f6      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d107      	bne.n	80084f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e0:	4b36      	ldr	r3, [pc, #216]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d115      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e0ea      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0de      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008508:	4b2c      	ldr	r3, [pc, #176]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e0d6      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008518:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f023 0207 	bic.w	r2, r3, #7
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4925      	ldr	r1, [pc, #148]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008526:	4313      	orrs	r3, r2
 8008528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852a:	f7fa ff1b 	bl	8003364 <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008530:	e00a      	b.n	8008548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008532:	f7fa ff17 	bl	8003364 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008540:	4293      	cmp	r3, r2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e0be      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008548:	4b1c      	ldr	r3, [pc, #112]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	429a      	cmp	r2, r3
 8008558:	d1eb      	bne.n	8008532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	429a      	cmp	r2, r3
 8008574:	d208      	bcs.n	8008588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f023 020f 	bic.w	r2, r3, #15
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	490e      	ldr	r1, [pc, #56]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008584:	4313      	orrs	r3, r2
 8008586:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d214      	bcs.n	80085c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 020f 	bic.w	r2, r3, #15
 800859e:	4906      	ldr	r1, [pc, #24]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d005      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e086      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
 80085b8:	52002000 	.word	0x52002000
 80085bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d010      	beq.n	80085ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085d8:	429a      	cmp	r2, r3
 80085da:	d208      	bcs.n	80085ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085dc:	4b3c      	ldr	r3, [pc, #240]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	4939      	ldr	r1, [pc, #228]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	4b34      	ldr	r3, [pc, #208]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008606:	429a      	cmp	r2, r3
 8008608:	d208      	bcs.n	800861c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	492e      	ldr	r1, [pc, #184]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008618:	4313      	orrs	r3, r2
 800861a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008634:	429a      	cmp	r2, r3
 8008636:	d208      	bcs.n	800864a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008638:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	4922      	ldr	r1, [pc, #136]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008646:	4313      	orrs	r3, r2
 8008648:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008662:	429a      	cmp	r2, r3
 8008664:	d208      	bcs.n	8008678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	4917      	ldr	r1, [pc, #92]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008674:	4313      	orrs	r3, r2
 8008676:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008678:	f000 f89e 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 800867c:	4602      	mov	r2, r0
 800867e:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	4912      	ldr	r1, [pc, #72]	; (80086d4 <HAL_RCC_ClockConfig+0x35c>)
 800868a:	5ccb      	ldrb	r3, [r1, r3]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	4a0d      	ldr	r2, [pc, #52]	; (80086d4 <HAL_RCC_ClockConfig+0x35c>)
 80086a0:	5cd3      	ldrb	r3, [r2, r3]
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x360>)
 80086ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <HAL_RCC_ClockConfig+0x364>)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086b6:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <HAL_RCC_ClockConfig+0x368>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fa fc02 	bl	8002ec4 <HAL_InitTick>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	58024400 	.word	0x58024400
 80086d4:	080122b4 	.word	0x080122b4
 80086d8:	24000008 	.word	0x24000008
 80086dc:	24000004 	.word	0x24000004
 80086e0:	2400000c 	.word	0x2400000c

080086e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08c      	sub	sp, #48	; 0x30
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d12a      	bne.n	800874c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80086f6:	4b2d      	ldr	r3, [pc, #180]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 80086f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086fc:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008706:	4b29      	ldr	r3, [pc, #164]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 8008708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871a:	2302      	movs	r3, #2
 800871c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800871e:	2303      	movs	r3, #3
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008722:	2300      	movs	r3, #0
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008726:	2300      	movs	r3, #0
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800872a:	f107 031c 	add.w	r3, r7, #28
 800872e:	4619      	mov	r1, r3
 8008730:	481f      	ldr	r0, [pc, #124]	; (80087b0 <HAL_RCC_MCOConfig+0xcc>)
 8008732:	f7fe ffd1 	bl	80076d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008736:	4b1d      	ldr	r3, [pc, #116]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	430b      	orrs	r3, r1
 8008744:	4919      	ldr	r1, [pc, #100]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 8008746:	4313      	orrs	r3, r2
 8008748:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800874a:	e02a      	b.n	80087a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 800874e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008752:	4a16      	ldr	r2, [pc, #88]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 8008754:	f043 0304 	orr.w	r3, r3, #4
 8008758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800875c:	4b13      	ldr	r3, [pc, #76]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 800875e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800876a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800876e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008770:	2302      	movs	r3, #2
 8008772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008774:	2303      	movs	r3, #3
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008778:	2300      	movs	r3, #0
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800877c:	2300      	movs	r3, #0
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008780:	f107 031c 	add.w	r3, r7, #28
 8008784:	4619      	mov	r1, r3
 8008786:	480b      	ldr	r0, [pc, #44]	; (80087b4 <HAL_RCC_MCOConfig+0xd0>)
 8008788:	f7fe ffa6 	bl	80076d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	01d9      	lsls	r1, r3, #7
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	430b      	orrs	r3, r1
 800879c:	4903      	ldr	r1, [pc, #12]	; (80087ac <HAL_RCC_MCOConfig+0xc8>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	610b      	str	r3, [r1, #16]
}
 80087a2:	bf00      	nop
 80087a4:	3730      	adds	r7, #48	; 0x30
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	58024400 	.word	0x58024400
 80087b0:	58020000 	.word	0x58020000
 80087b4:	58020800 	.word	0x58020800

080087b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b089      	sub	sp, #36	; 0x24
 80087bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087be:	4bb3      	ldr	r3, [pc, #716]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c6:	2b18      	cmp	r3, #24
 80087c8:	f200 8155 	bhi.w	8008a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	08008839 	.word	0x08008839
 80087d8:	08008a77 	.word	0x08008a77
 80087dc:	08008a77 	.word	0x08008a77
 80087e0:	08008a77 	.word	0x08008a77
 80087e4:	08008a77 	.word	0x08008a77
 80087e8:	08008a77 	.word	0x08008a77
 80087ec:	08008a77 	.word	0x08008a77
 80087f0:	08008a77 	.word	0x08008a77
 80087f4:	0800885f 	.word	0x0800885f
 80087f8:	08008a77 	.word	0x08008a77
 80087fc:	08008a77 	.word	0x08008a77
 8008800:	08008a77 	.word	0x08008a77
 8008804:	08008a77 	.word	0x08008a77
 8008808:	08008a77 	.word	0x08008a77
 800880c:	08008a77 	.word	0x08008a77
 8008810:	08008a77 	.word	0x08008a77
 8008814:	08008865 	.word	0x08008865
 8008818:	08008a77 	.word	0x08008a77
 800881c:	08008a77 	.word	0x08008a77
 8008820:	08008a77 	.word	0x08008a77
 8008824:	08008a77 	.word	0x08008a77
 8008828:	08008a77 	.word	0x08008a77
 800882c:	08008a77 	.word	0x08008a77
 8008830:	08008a77 	.word	0x08008a77
 8008834:	0800886b 	.word	0x0800886b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008838:	4b94      	ldr	r3, [pc, #592]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0320 	and.w	r3, r3, #32
 8008840:	2b00      	cmp	r3, #0
 8008842:	d009      	beq.n	8008858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008844:	4b91      	ldr	r3, [pc, #580]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	4a90      	ldr	r2, [pc, #576]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008856:	e111      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008858:	4b8d      	ldr	r3, [pc, #564]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800885a:	61bb      	str	r3, [r7, #24]
    break;
 800885c:	e10e      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800885e:	4b8d      	ldr	r3, [pc, #564]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008860:	61bb      	str	r3, [r7, #24]
    break;
 8008862:	e10b      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008864:	4b8c      	ldr	r3, [pc, #560]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008866:	61bb      	str	r3, [r7, #24]
    break;
 8008868:	e108      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800886a:	4b88      	ldr	r3, [pc, #544]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008874:	4b85      	ldr	r3, [pc, #532]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800887e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008880:	4b82      	ldr	r3, [pc, #520]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800888a:	4b80      	ldr	r3, [pc, #512]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888e:	08db      	lsrs	r3, r3, #3
 8008890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	fb02 f303 	mul.w	r3, r2, r3
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80e1 	beq.w	8008a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	f000 8083 	beq.w	80089bc <HAL_RCC_GetSysClockFreq+0x204>
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	f200 80a1 	bhi.w	8008a00 <HAL_RCC_GetSysClockFreq+0x248>
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_RCC_GetSysClockFreq+0x114>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d056      	beq.n	8008978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80088ca:	e099      	b.n	8008a00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088cc:	4b6f      	ldr	r3, [pc, #444]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d02d      	beq.n	8008934 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088d8:	4b6c      	ldr	r3, [pc, #432]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	08db      	lsrs	r3, r3, #3
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	4a6b      	ldr	r2, [pc, #428]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088e4:	fa22 f303 	lsr.w	r3, r2, r3
 80088e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008902:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008912:	ed97 6a02 	vldr	s12, [r7, #8]
 8008916:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800891a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008932:	e087      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008946:	4b51      	ldr	r3, [pc, #324]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008956:	ed97 6a02 	vldr	s12, [r7, #8]
 800895a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800895e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800896a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008976:	e065      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008982:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898a:	4b40      	ldr	r3, [pc, #256]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899a:	ed97 6a02 	vldr	s12, [r7, #8]
 800899e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80089a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ba:	e043      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80089ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ce:	4b2f      	ldr	r3, [pc, #188]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089de:	ed97 6a02 	vldr	s12, [r7, #8]
 80089e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80089e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fe:	e021      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	0a5b      	lsrs	r3, r3, #9
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	3301      	adds	r3, #1
 8008a50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	ee07 3a90 	vmov	s15, r3
 8008a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a68:	ee17 3a90 	vmov	r3, s15
 8008a6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a6e:	e005      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61bb      	str	r3, [r7, #24]
    break;
 8008a74:	e002      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008a76:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a78:	61bb      	str	r3, [r7, #24]
    break;
 8008a7a:	bf00      	nop
  }

  return sysclockfreq;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3724      	adds	r7, #36	; 0x24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
 8008a94:	003d0900 	.word	0x003d0900
 8008a98:	01e84800 	.word	0x01e84800
 8008a9c:	46000000 	.word	0x46000000
 8008aa0:	4c742400 	.word	0x4c742400
 8008aa4:	4a742400 	.word	0x4a742400
 8008aa8:	4bf42400 	.word	0x4bf42400

08008aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ab2:	f7ff fe81 	bl	80087b8 <HAL_RCC_GetSysClockFreq>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4b10      	ldr	r3, [pc, #64]	; (8008afc <HAL_RCC_GetHCLKFreq+0x50>)
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	0a1b      	lsrs	r3, r3, #8
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	490f      	ldr	r1, [pc, #60]	; (8008b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ac4:	5ccb      	ldrb	r3, [r1, r3]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ace:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <HAL_RCC_GetHCLKFreq+0x50>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	4a09      	ldr	r2, [pc, #36]	; (8008b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ada:	5cd3      	ldrb	r3, [r2, r3]
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	4a07      	ldr	r2, [pc, #28]	; (8008b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ae8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008aea:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8008af2:	681b      	ldr	r3, [r3, #0]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	58024400 	.word	0x58024400
 8008b00:	080122b4 	.word	0x080122b4
 8008b04:	24000008 	.word	0x24000008
 8008b08:	24000004 	.word	0x24000004

08008b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b10:	f7ff ffcc 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	4904      	ldr	r1, [pc, #16]	; (8008b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	58024400 	.word	0x58024400
 8008b34:	080122b4 	.word	0x080122b4

08008b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b3c:	f7ff ffb6 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	4904      	ldr	r1, [pc, #16]	; (8008b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b4e:	5ccb      	ldrb	r3, [r1, r3]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	080122b4 	.word	0x080122b4

08008b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	223f      	movs	r2, #63	; 0x3f
 8008b72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b74:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f003 0207 	and.w	r2, r3, #7
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008b8c:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008b98:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008bbc:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <HAL_RCC_GetClockConfig+0x7c>)
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <HAL_RCC_GetClockConfig+0x80>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 020f 	and.w	r2, r3, #15
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	58024400 	.word	0x58024400
 8008be4:	52002000 	.word	0x52002000

08008be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d03f      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c0c:	d02a      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c12:	d824      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c18:	d018      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c1e:	d81e      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c28:	d007      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c2a:	e018      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2c:	4bab      	ldr	r3, [pc, #684]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	4aaa      	ldr	r2, [pc, #680]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c38:	e015      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	2102      	movs	r1, #2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 fff3 	bl	800ac2c <RCCEx_PLL2_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c4a:	e00c      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3324      	adds	r3, #36	; 0x24
 8008c50:	2102      	movs	r1, #2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f002 f89c 	bl	800ad90 <RCCEx_PLL3_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c5c:	e003      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75fb      	strb	r3, [r7, #23]
      break;
 8008c62:	e000      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c6c:	4b9b      	ldr	r3, [pc, #620]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c78:	4998      	ldr	r1, [pc, #608]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c7e:	e001      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03d      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d826      	bhi.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008cc3 	.word	0x08008cc3
 8008ca8:	08008cd5 	.word	0x08008cd5
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008ced 	.word	0x08008ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb4:	4b89      	ldr	r3, [pc, #548]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a88      	ldr	r2, [pc, #544]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cc0:	e015      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 ffaf 	bl	800ac2c <RCCEx_PLL2_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cd2:	e00c      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3324      	adds	r3, #36	; 0x24
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 f858 	bl	800ad90 <RCCEx_PLL3_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce4:	e003      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cea:	e000      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cf4:	4b79      	ldr	r3, [pc, #484]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf8:	f023 0207 	bic.w	r2, r3, #7
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d00:	4976      	ldr	r1, [pc, #472]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	650b      	str	r3, [r1, #80]	; 0x50
 8008d06:	e001      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d042      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d20:	d02b      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d26:	d825      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d28:	2bc0      	cmp	r3, #192	; 0xc0
 8008d2a:	d028      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008d2e:	d821      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d016      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d81d      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008d3c:	2b40      	cmp	r3, #64	; 0x40
 8008d3e:	d007      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008d40:	e018      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d42:	4b66      	ldr	r3, [pc, #408]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a65      	ldr	r2, [pc, #404]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d4e:	e017      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3304      	adds	r3, #4
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 ff68 	bl	800ac2c <RCCEx_PLL2_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d60:	e00e      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3324      	adds	r3, #36	; 0x24
 8008d66:	2100      	movs	r1, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 f811 	bl	800ad90 <RCCEx_PLL3_Config>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d72:	e005      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
      break;
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d86:	4b55      	ldr	r3, [pc, #340]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	4952      	ldr	r1, [pc, #328]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	650b      	str	r3, [r1, #80]	; 0x50
 8008d98:	e001      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d049      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db4:	d030      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dba:	d82a      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc0:	d02c      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc6:	d824      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dcc:	d018      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dd2:	d81e      	bhi.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ddc:	d007      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008dde:	e018      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	4a3d      	ldr	r2, [pc, #244]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dec:	e017      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3304      	adds	r3, #4
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 ff19 	bl	800ac2c <RCCEx_PLL2_Config>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dfe:	e00e      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3324      	adds	r3, #36	; 0x24
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 ffc2 	bl	800ad90 <RCCEx_PLL3_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e10:	e005      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	75fb      	strb	r3, [r7, #23]
      break;
 8008e16:	e002      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e000      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e24:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e32:	492a      	ldr	r1, [pc, #168]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	658b      	str	r3, [r1, #88]	; 0x58
 8008e38:	e001      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d04c      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e54:	d030      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e5a:	d82a      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e60:	d02c      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e66:	d824      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e6c:	d018      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e72:	d81e      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e7c:	d007      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e7e:	e018      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e017      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 fec9 	bl	800ac2c <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e00e      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 ff72 	bl	800ad90 <RCCEx_PLL3_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008eb0:	e005      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb6:	e002      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ed2:	4902      	ldr	r1, [pc, #8]	; (8008edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	658b      	str	r3, [r1, #88]	; 0x58
 8008ed8:	e004      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008eda:	bf00      	nop
 8008edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d032      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef4:	2b30      	cmp	r3, #48	; 0x30
 8008ef6:	d01c      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008ef8:	2b30      	cmp	r3, #48	; 0x30
 8008efa:	d817      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d00c      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d813      	bhi.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d016      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d10f      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f0c:	4baf      	ldr	r3, [pc, #700]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	4aae      	ldr	r2, [pc, #696]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f18:	e00e      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2102      	movs	r1, #2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fe83 	bl	800ac2c <RCCEx_PLL2_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f2a:	e005      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f3e:	4ba3      	ldr	r3, [pc, #652]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4a:	49a0      	ldr	r1, [pc, #640]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f50:	e001      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d047      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f6a:	d030      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f70:	d82a      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f76:	d02c      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f7c:	d824      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f82:	d018      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f88:	d81e      	bhi.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	d007      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008f94:	e018      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f96:	4b8d      	ldr	r3, [pc, #564]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	4a8c      	ldr	r2, [pc, #560]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fa2:	e017      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fe3e 	bl	800ac2c <RCCEx_PLL2_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fb4:	e00e      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3324      	adds	r3, #36	; 0x24
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fee7 	bl	800ad90 <RCCEx_PLL3_Config>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fc6:	e005      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
      break;
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008fce:	bf00      	nop
 8008fd0:	e000      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d109      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008fda:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe6:	4979      	ldr	r1, [pc, #484]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	650b      	str	r3, [r1, #80]	; 0x50
 8008fec:	e001      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d049      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009006:	d02e      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800900c:	d828      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800900e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009012:	d02a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009018:	d822      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800901a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800901e:	d026      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009024:	d81c      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800902a:	d010      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800902c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009030:	d816      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903a:	d111      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	2101      	movs	r1, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f001 fdf2 	bl	800ac2c <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800904c:	e012      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fe9b 	bl	800ad90 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800905e:	e009      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]
      break;
 8009064:	e006      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009066:	bf00      	nop
 8009068:	e004      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d109      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800907a:	4b54      	ldr	r3, [pc, #336]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009086:	4951      	ldr	r1, [pc, #324]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009088:	4313      	orrs	r3, r2
 800908a:	650b      	str	r3, [r1, #80]	; 0x50
 800908c:	e001      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d04b      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a8:	d02e      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80090aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ae:	d828      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b4:	d02a      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80090b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ba:	d822      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090c0:	d026      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80090c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090c6:	d81c      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d010      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80090ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d2:	d816      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01d      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090dc:	d111      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3304      	adds	r3, #4
 80090e2:	2101      	movs	r1, #1
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 fda1 	bl	800ac2c <RCCEx_PLL2_Config>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090ee:	e012      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fe4a 	bl	800ad90 <RCCEx_PLL3_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009100:	e009      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	e006      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009108:	bf00      	nop
 800910a:	e004      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800911e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009120:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800912a:	4928      	ldr	r1, [pc, #160]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800912c:	4313      	orrs	r3, r2
 800912e:	658b      	str	r3, [r1, #88]	; 0x58
 8009130:	e001      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02f      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914a:	d00e      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800914c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009150:	d814      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d015      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915a:	d10f      	bne.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	4a1a      	ldr	r2, [pc, #104]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009168:	e00c      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f001 fd5b 	bl	800ac2c <RCCEx_PLL2_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800917a:	e003      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
      break;
 8009180:	e000      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800918a:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800918c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009196:	490d      	ldr	r1, [pc, #52]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009198:	4313      	orrs	r3, r2
 800919a:	650b      	str	r3, [r1, #80]	; 0x50
 800919c:	e001      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d033      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d81c      	bhi.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091f7 	.word	0x080091f7
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	080091df 	.word	0x080091df
 80091c8:	080091f7 	.word	0x080091f7
 80091cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d0:	4bb8      	ldr	r3, [pc, #736]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4ab7      	ldr	r2, [pc, #732]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091dc:	e00c      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	2102      	movs	r1, #2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f001 fd21 	bl	800ac2c <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091ee:	e003      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	75fb      	strb	r3, [r7, #23]
      break;
 80091f4:	e000      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80091f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091fe:	4bad      	ldr	r3, [pc, #692]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009202:	f023 0203 	bic.w	r2, r3, #3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	49aa      	ldr	r1, [pc, #680]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800920c:	4313      	orrs	r3, r2
 800920e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009210:	e001      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8086 	beq.w	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009224:	4ba4      	ldr	r3, [pc, #656]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4aa3      	ldr	r2, [pc, #652]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800922a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800922e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009230:	f7fa f898 	bl	8003364 <HAL_GetTick>
 8009234:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009238:	f7fa f894 	bl	8003364 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b64      	cmp	r3, #100	; 0x64
 8009244:	d902      	bls.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	75fb      	strb	r3, [r7, #23]
        break;
 800924a:	e005      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800924c:	4b9a      	ldr	r3, [pc, #616]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0ef      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d166      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800925e:	4b95      	ldr	r3, [pc, #596]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009268:	4053      	eors	r3, r2
 800926a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926e:	2b00      	cmp	r3, #0
 8009270:	d013      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009272:	4b90      	ldr	r3, [pc, #576]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800927c:	4b8d      	ldr	r3, [pc, #564]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	4a8c      	ldr	r2, [pc, #560]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009286:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009288:	4b8a      	ldr	r3, [pc, #552]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	4a89      	ldr	r2, [pc, #548]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800928e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009292:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009294:	4a87      	ldr	r2, [pc, #540]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a4:	d115      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a6:	f7fa f85d 	bl	8003364 <HAL_GetTick>
 80092aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ac:	e00b      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ae:	f7fa f859 	bl	8003364 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092bc:	4293      	cmp	r3, r2
 80092be:	d902      	bls.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	75fb      	strb	r3, [r7, #23]
            break;
 80092c4:	e005      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092c6:	4b7b      	ldr	r3, [pc, #492]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0ed      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d126      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d10d      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80092e8:	4b72      	ldr	r3, [pc, #456]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092f6:	0919      	lsrs	r1, r3, #4
 80092f8:	4b70      	ldr	r3, [pc, #448]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80092fa:	400b      	ands	r3, r1
 80092fc:	496d      	ldr	r1, [pc, #436]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	610b      	str	r3, [r1, #16]
 8009302:	e005      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009304:	4b6b      	ldr	r3, [pc, #428]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	4a6a      	ldr	r2, [pc, #424]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800930a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800930e:	6113      	str	r3, [r2, #16]
 8009310:	4b68      	ldr	r3, [pc, #416]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800931a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800931e:	4965      	ldr	r1, [pc, #404]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	670b      	str	r3, [r1, #112]	; 0x70
 8009324:	e004      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	75bb      	strb	r3, [r7, #22]
 800932a:	e001      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d07e      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009340:	2b28      	cmp	r3, #40	; 0x28
 8009342:	d867      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	0800941b 	.word	0x0800941b
 8009350:	08009415 	.word	0x08009415
 8009354:	08009415 	.word	0x08009415
 8009358:	08009415 	.word	0x08009415
 800935c:	08009415 	.word	0x08009415
 8009360:	08009415 	.word	0x08009415
 8009364:	08009415 	.word	0x08009415
 8009368:	08009415 	.word	0x08009415
 800936c:	080093f1 	.word	0x080093f1
 8009370:	08009415 	.word	0x08009415
 8009374:	08009415 	.word	0x08009415
 8009378:	08009415 	.word	0x08009415
 800937c:	08009415 	.word	0x08009415
 8009380:	08009415 	.word	0x08009415
 8009384:	08009415 	.word	0x08009415
 8009388:	08009415 	.word	0x08009415
 800938c:	08009403 	.word	0x08009403
 8009390:	08009415 	.word	0x08009415
 8009394:	08009415 	.word	0x08009415
 8009398:	08009415 	.word	0x08009415
 800939c:	08009415 	.word	0x08009415
 80093a0:	08009415 	.word	0x08009415
 80093a4:	08009415 	.word	0x08009415
 80093a8:	08009415 	.word	0x08009415
 80093ac:	0800941b 	.word	0x0800941b
 80093b0:	08009415 	.word	0x08009415
 80093b4:	08009415 	.word	0x08009415
 80093b8:	08009415 	.word	0x08009415
 80093bc:	08009415 	.word	0x08009415
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009415 	.word	0x08009415
 80093c8:	08009415 	.word	0x08009415
 80093cc:	0800941b 	.word	0x0800941b
 80093d0:	08009415 	.word	0x08009415
 80093d4:	08009415 	.word	0x08009415
 80093d8:	08009415 	.word	0x08009415
 80093dc:	08009415 	.word	0x08009415
 80093e0:	08009415 	.word	0x08009415
 80093e4:	08009415 	.word	0x08009415
 80093e8:	08009415 	.word	0x08009415
 80093ec:	0800941b 	.word	0x0800941b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3304      	adds	r3, #4
 80093f4:	2101      	movs	r1, #1
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 fc18 	bl	800ac2c <RCCEx_PLL2_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009400:	e00c      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3324      	adds	r3, #36	; 0x24
 8009406:	2101      	movs	r1, #1
 8009408:	4618      	mov	r0, r3
 800940a:	f001 fcc1 	bl	800ad90 <RCCEx_PLL3_Config>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009412:	e003      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
      break;
 8009418:	e000      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800941a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942e:	4921      	ldr	r1, [pc, #132]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009430:	4313      	orrs	r3, r2
 8009432:	654b      	str	r3, [r1, #84]	; 0x54
 8009434:	e001      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d03e      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944a:	2b05      	cmp	r3, #5
 800944c:	d820      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009497 	.word	0x08009497
 8009458:	0800946d 	.word	0x0800946d
 800945c:	0800947f 	.word	0x0800947f
 8009460:	08009497 	.word	0x08009497
 8009464:	08009497 	.word	0x08009497
 8009468:	08009497 	.word	0x08009497
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	2101      	movs	r1, #1
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fbda 	bl	800ac2c <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800947c:	e00c      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3324      	adds	r3, #36	; 0x24
 8009482:	2101      	movs	r1, #1
 8009484:	4618      	mov	r0, r3
 8009486:	f001 fc83 	bl	800ad90 <RCCEx_PLL3_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800948e:	e003      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e000      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d110      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a2:	f023 0207 	bic.w	r2, r3, #7
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	4902      	ldr	r1, [pc, #8]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	654b      	str	r3, [r1, #84]	; 0x54
 80094b0:	e008      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
 80094b8:	58024800 	.word	0x58024800
 80094bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d039      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d820      	bhi.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	08009523 	.word	0x08009523
 80094e4:	080094f9 	.word	0x080094f9
 80094e8:	0800950b 	.word	0x0800950b
 80094ec:	08009523 	.word	0x08009523
 80094f0:	08009523 	.word	0x08009523
 80094f4:	08009523 	.word	0x08009523
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 fb94 	bl	800ac2c <RCCEx_PLL2_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009508:	e00c      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3324      	adds	r3, #36	; 0x24
 800950e:	2101      	movs	r1, #1
 8009510:	4618      	mov	r0, r3
 8009512:	f001 fc3d 	bl	800ad90 <RCCEx_PLL3_Config>
 8009516:	4603      	mov	r3, r0
 8009518:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	75fb      	strb	r3, [r7, #23]
      break;
 8009520:	e000      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800952a:	4bb7      	ldr	r3, [pc, #732]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	f023 0207 	bic.w	r2, r3, #7
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009538:	49b3      	ldr	r1, [pc, #716]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800953a:	4313      	orrs	r3, r2
 800953c:	658b      	str	r3, [r1, #88]	; 0x58
 800953e:	e001      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d04b      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800955a:	d02e      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800955c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009560:	d828      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009566:	d02a      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956c:	d822      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800956e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009572:	d026      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009578:	d81c      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957e:	d010      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009584:	d816      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d01d      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800958a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958e:	d111      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3304      	adds	r3, #4
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f001 fb48 	bl	800ac2c <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095a0:	e012      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3324      	adds	r3, #36	; 0x24
 80095a6:	2102      	movs	r1, #2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 fbf1 	bl	800ad90 <RCCEx_PLL3_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095b2:	e009      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
      break;
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095ba:	bf00      	nop
 80095bc:	e004      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095be:	bf00      	nop
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80095c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095ce:	4b8e      	ldr	r3, [pc, #568]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095dc:	498a      	ldr	r1, [pc, #552]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	654b      	str	r3, [r1, #84]	; 0x54
 80095e2:	e001      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d04b      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095fe:	d02e      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009600:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009604:	d828      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960a:	d02a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009610:	d822      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009616:	d026      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800961c:	d81c      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800961e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009622:	d010      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009628:	d816      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01d      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800962e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009632:	d111      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f001 faf6 	bl	800ac2c <RCCEx_PLL2_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009644:	e012      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3324      	adds	r3, #36	; 0x24
 800964a:	2102      	movs	r1, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f001 fb9f 	bl	800ad90 <RCCEx_PLL3_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009656:	e009      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
      break;
 800965c:	e006      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800965e:	bf00      	nop
 8009660:	e004      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009662:	bf00      	nop
 8009664:	e002      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800966a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009672:	4b65      	ldr	r3, [pc, #404]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009680:	4961      	ldr	r1, [pc, #388]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009682:	4313      	orrs	r3, r2
 8009684:	658b      	str	r3, [r1, #88]	; 0x58
 8009686:	e001      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009694:	2b00      	cmp	r3, #0
 8009696:	d04b      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a2:	d02e      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80096a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096a8:	d828      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ae:	d02a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80096b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b4:	d822      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096ba:	d026      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80096bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096c0:	d81c      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c6:	d010      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80096c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096cc:	d816      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01d      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	d111      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3304      	adds	r3, #4
 80096dc:	2100      	movs	r1, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 faa4 	bl	800ac2c <RCCEx_PLL2_Config>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096e8:	e012      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	2102      	movs	r1, #2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fb4d 	bl	800ad90 <RCCEx_PLL3_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096fa:	e009      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009700:	e006      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009702:	bf00      	nop
 8009704:	e004      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800970e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009716:	4b3c      	ldr	r3, [pc, #240]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009724:	4938      	ldr	r1, [pc, #224]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009726:	4313      	orrs	r3, r2
 8009728:	658b      	str	r3, [r1, #88]	; 0x58
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01a      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d10a      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3324      	adds	r3, #36	; 0x24
 800974c:	2102      	movs	r1, #2
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fb1e 	bl	800ad90 <RCCEx_PLL3_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800975e:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800976c:	4926      	ldr	r1, [pc, #152]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800976e:	4313      	orrs	r3, r2
 8009770:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009788:	d10a      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fafd 	bl	800ad90 <RCCEx_PLL3_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097a0:	4b19      	ldr	r3, [pc, #100]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097ae:	4916      	ldr	r1, [pc, #88]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d036      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ca:	d01f      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80097cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097d0:	d817      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80097d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097da:	d009      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80097dc:	e011      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3304      	adds	r3, #4
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 fa21 	bl	800ac2c <RCCEx_PLL2_Config>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097ee:	e00e      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3324      	adds	r3, #36	; 0x24
 80097f4:	2102      	movs	r1, #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 faca 	bl	800ad90 <RCCEx_PLL3_Config>
 80097fc:	4603      	mov	r3, r0
 80097fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009800:	e005      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	75fb      	strb	r3, [r7, #23]
      break;
 8009806:	e002      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009808:	58024400 	.word	0x58024400
      break;
 800980c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009814:	4b93      	ldr	r3, [pc, #588]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009822:	4990      	ldr	r1, [pc, #576]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	658b      	str	r3, [r1, #88]	; 0x58
 8009828:	e001      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d033      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009844:	d01c      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800984a:	d816      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009850:	d003      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009856:	d007      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009858:	e00f      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800985a:	4b82      	ldr	r3, [pc, #520]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	4a81      	ldr	r2, [pc, #516]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009866:	e00c      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3324      	adds	r3, #36	; 0x24
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fa8e 	bl	800ad90 <RCCEx_PLL3_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009888:	4b76      	ldr	r3, [pc, #472]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009896:	4973      	ldr	r1, [pc, #460]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009898:	4313      	orrs	r3, r2
 800989a:	654b      	str	r3, [r1, #84]	; 0x54
 800989c:	e001      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d029      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80098b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ba:	d007      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80098bc:	e00f      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098be:	4b69      	ldr	r3, [pc, #420]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	4a68      	ldr	r2, [pc, #416]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098ca:	e00b      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	2102      	movs	r1, #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f9aa 	bl	800ac2c <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098dc:	e002      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
      break;
 80098e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098ea:	4b5e      	ldr	r3, [pc, #376]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	495b      	ldr	r1, [pc, #364]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098fc:	e001      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3324      	adds	r3, #36	; 0x24
 8009912:	2102      	movs	r1, #2
 8009914:	4618      	mov	r0, r3
 8009916:	f001 fa3b 	bl	800ad90 <RCCEx_PLL3_Config>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d030      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009938:	d017      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800993a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800993e:	d811      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009944:	d013      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994a:	d80b      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d010      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009954:	d106      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009956:	4b43      	ldr	r3, [pc, #268]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a42      	ldr	r2, [pc, #264]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800995c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009962:	e007      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
      break;
 8009968:	e004      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800996a:	bf00      	nop
 800996c:	e002      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800996e:	bf00      	nop
 8009970:	e000      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800997a:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800997c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009986:	4937      	ldr	r1, [pc, #220]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	654b      	str	r3, [r1, #84]	; 0x54
 800998c:	e001      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800999e:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099aa:	492e      	ldr	r1, [pc, #184]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80099bc:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099ca:	4926      	ldr	r1, [pc, #152]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d008      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099dc:	4b21      	ldr	r3, [pc, #132]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e8:	491e      	ldr	r1, [pc, #120]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a04:	6113      	str	r3, [r2, #16]
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009a10:	4914      	ldr	r1, [pc, #80]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da08      	bge.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a1e:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2a:	490e      	ldr	r1, [pc, #56]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	4906      	ldr	r1, [pc, #24]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009a50:	7dbb      	ldrb	r3, [r7, #22]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	58024400 	.word	0x58024400

08009a68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b090      	sub	sp, #64	; 0x40
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a76:	f040 8095 	bne.w	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009a7a:	4bae      	ldr	r3, [pc, #696]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	633b      	str	r3, [r7, #48]	; 0x30
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	f200 8088 	bhi.w	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009a8c:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a92:	bf00      	nop
 8009a94:	08009aa9 	.word	0x08009aa9
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009b95 	.word	0x08009b95
 8009aa4:	08009b21 	.word	0x08009b21

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009aa8:	4ba2      	ldr	r3, [pc, #648]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ab4:	d108      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 ff64 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ac4:	f000 bc95 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009acc:	f000 bc91 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ad0:	4b98      	ldr	r3, [pc, #608]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009adc:	d108      	bne.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ade:	f107 0318 	add.w	r3, r7, #24
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fca8 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009aec:	f000 bc81 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af4:	f000 bc7d 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009af8:	4b8e      	ldr	r3, [pc, #568]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b04:	d108      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b06:	f107 030c 	add.w	r3, r7, #12
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fde8 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b14:	f000 bc6d 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b1c:	f000 bc69 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b20:	4b84      	ldr	r3, [pc, #528]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b2a:	4b82      	ldr	r3, [pc, #520]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d10c      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b3c:	4b7d      	ldr	r3, [pc, #500]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	08db      	lsrs	r3, r3, #3
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	4a7c      	ldr	r2, [pc, #496]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009b48:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b4e:	e01f      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b50:	4b78      	ldr	r3, [pc, #480]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5c:	d106      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b66:	4b75      	ldr	r3, [pc, #468]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b6a:	e011      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b6c:	4b71      	ldr	r3, [pc, #452]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b78:	d106      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b80:	d102      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b82:	4b6f      	ldr	r3, [pc, #444]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b86:	e003      	b.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b8c:	f000 bc31 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b90:	f000 bc2f 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b94:	4b6b      	ldr	r3, [pc, #428]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b98:	f000 bc2b 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ba0:	f000 bc27 	b.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009baa:	f040 8095 	bne.w	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009bae:	4b61      	ldr	r3, [pc, #388]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009bb6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bbe:	d04d      	beq.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc6:	f200 8084 	bhi.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8009bce:	d07d      	beq.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8009bd4:	d87d      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	2b80      	cmp	r3, #128	; 0x80
 8009bda:	d02d      	beq.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	d877      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d012      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009bee:	e070      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bf0:	4b50      	ldr	r3, [pc, #320]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bfc:	d107      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fec0 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c0c:	e3f1      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c12:	e3ee      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c14:	4b47      	ldr	r3, [pc, #284]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c20:	d107      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c22:	f107 0318 	add.w	r3, r7, #24
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fc06 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c30:	e3df      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c36:	e3dc      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c38:	4b3e      	ldr	r3, [pc, #248]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c44:	d107      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c46:	f107 030c 	add.w	r3, r7, #12
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fd48 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c54:	e3cd      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c5a:	e3ca      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c5c:	4b35      	ldr	r3, [pc, #212]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c66:	4b33      	ldr	r3, [pc, #204]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d10c      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d109      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c78:	4b2e      	ldr	r3, [pc, #184]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	08db      	lsrs	r3, r3, #3
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	4a2d      	ldr	r2, [pc, #180]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c8a:	e01e      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c8c:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c98:	d106      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ca0:	d102      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca6:	e010      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ca8:	4b22      	ldr	r3, [pc, #136]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cb4:	d106      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009cbe:	4b20      	ldr	r3, [pc, #128]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc2:	e002      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009cc8:	e393      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009cca:	e392      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cd0:	e38f      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cd6:	e38c      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cde:	f040 80a7 	bne.w	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009ce2:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cf2:	d05f      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cfa:	f200 8096 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d04:	f000 808e 	beq.w	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d0e:	f200 808c 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d18:	d03a      	beq.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d20:	f200 8083 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00e      	beq.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d30:	d01c      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009d32:	e07a      	b.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009d34:	58024400 	.word	0x58024400
 8009d38:	03d09000 	.word	0x03d09000
 8009d3c:	003d0900 	.word	0x003d0900
 8009d40:	01e84800 	.word	0x01e84800
 8009d44:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d48:	4baa      	ldr	r3, [pc, #680]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d54:	d107      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fe14 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d64:	e345      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d6a:	e342      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d6c:	4ba1      	ldr	r3, [pc, #644]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d78:	d107      	bne.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d7a:	f107 0318 	add.w	r3, r7, #24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fb5a 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d88:	e333      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8e:	e330      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d90:	4b98      	ldr	r3, [pc, #608]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d9c:	d107      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d9e:	f107 030c 	add.w	r3, r7, #12
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 fc9c 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dac:	e321      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009db2:	e31e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009db4:	4b8f      	ldr	r3, [pc, #572]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dbe:	4b8d      	ldr	r3, [pc, #564]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d10c      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dd0:	4b88      	ldr	r3, [pc, #544]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	08db      	lsrs	r3, r3, #3
 8009dd6:	f003 0303 	and.w	r3, r3, #3
 8009dda:	4a87      	ldr	r2, [pc, #540]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de2:	e01e      	b.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009de4:	4b83      	ldr	r3, [pc, #524]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df0:	d106      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df8:	d102      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009dfa:	4b80      	ldr	r3, [pc, #512]	; (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dfe:	e010      	b.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e00:	4b7c      	ldr	r3, [pc, #496]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e0c:	d106      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e14:	d102      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e16:	4b7a      	ldr	r3, [pc, #488]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e1a:	e002      	b.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e20:	e2e7      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e22:	e2e6      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e24:	4b77      	ldr	r3, [pc, #476]	; (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e28:	e2e3      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e2e:	e2e0      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e36:	f040 809c 	bne.w	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009e3a:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009e42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e4a:	d054      	beq.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e52:	f200 808b 	bhi.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e5c:	f000 8083 	beq.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e66:	f200 8081 	bhi.w	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e70:	d02f      	beq.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e78:	d878      	bhi.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e86:	d012      	beq.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009e88:	e070      	b.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e8a:	4b5a      	ldr	r3, [pc, #360]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e96:	d107      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fd73 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ea6:	e2a4      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eac:	e2a1      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eae:	4b51      	ldr	r3, [pc, #324]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eba:	d107      	bne.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ebc:	f107 0318 	add.w	r3, r7, #24
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fab9 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009eca:	e292      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ed0:	e28f      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ed2:	4b48      	ldr	r3, [pc, #288]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ede:	d107      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee0:	f107 030c 	add.w	r3, r7, #12
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fbfb 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009eee:	e280      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef4:	e27d      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ef6:	4b3f      	ldr	r3, [pc, #252]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009efe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f00:	4b3c      	ldr	r3, [pc, #240]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d10c      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f12:	4b38      	ldr	r3, [pc, #224]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	08db      	lsrs	r3, r3, #3
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	4a36      	ldr	r2, [pc, #216]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f24:	e01e      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f26:	4b33      	ldr	r3, [pc, #204]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f32:	d106      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f3a:	d102      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009f3c:	4b2f      	ldr	r3, [pc, #188]	; (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f40:	e010      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f4e:	d106      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f56:	d102      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f58:	4b29      	ldr	r3, [pc, #164]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f5c:	e002      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f62:	e246      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f64:	e245      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f66:	4b27      	ldr	r3, [pc, #156]	; (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f6a:	e242      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f70:	e23f      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f78:	f040 80a8 	bne.w	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009f7c:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f8c:	d060      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f94:	f200 8097 	bhi.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f9e:	f000 808f 	beq.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fa8:	f200 808d 	bhi.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb2:	d03b      	beq.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fba:	f200 8084 	bhi.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d004      	beq.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fca:	d01d      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009fcc:	e07b      	b.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fce:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fda:	d107      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fcd1 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009fea:	e202      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff0:	e1ff      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ff2:	bf00      	nop
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	03d09000 	.word	0x03d09000
 8009ffc:	003d0900 	.word	0x003d0900
 800a000:	01e84800 	.word	0x01e84800
 800a004:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a008:	4ba3      	ldr	r3, [pc, #652]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a014:	d107      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a016:	f107 0318 	add.w	r3, r7, #24
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fa0c 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a024:	e1e5      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a02a:	e1e2      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a02c:	4b9a      	ldr	r3, [pc, #616]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a038:	d107      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a03a:	f107 030c 	add.w	r3, r7, #12
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fb4e 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a048:	e1d3      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a04e:	e1d0      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a050:	4b91      	ldr	r3, [pc, #580]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a058:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a05a:	4b8f      	ldr	r3, [pc, #572]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b04      	cmp	r3, #4
 800a064:	d10c      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a06c:	4b8a      	ldr	r3, [pc, #552]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	08db      	lsrs	r3, r3, #3
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	4a89      	ldr	r2, [pc, #548]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a078:	fa22 f303 	lsr.w	r3, r2, r3
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a07e:	e01e      	b.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a080:	4b85      	ldr	r3, [pc, #532]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a08c:	d106      	bne.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a094:	d102      	bne.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a096:	4b82      	ldr	r3, [pc, #520]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a09a:	e010      	b.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a09c:	4b7e      	ldr	r3, [pc, #504]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0a8:	d106      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b0:	d102      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a0b2:	4b7c      	ldr	r3, [pc, #496]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b6:	e002      	b.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a0bc:	e199      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0be:	e198      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a0c0:	4b79      	ldr	r3, [pc, #484]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0c4:	e195      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ca:	e192      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a0d2:	d173      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a0d4:	4b70      	ldr	r3, [pc, #448]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e4:	d02f      	beq.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0ec:	d863      	bhi.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	d012      	beq.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a0fc:	e05b      	b.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0fe:	4b66      	ldr	r3, [pc, #408]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a10a:	d107      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a10c:	f107 0318 	add.w	r3, r7, #24
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f991 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a11a:	e16a      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a120:	e167      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a122:	4b5d      	ldr	r3, [pc, #372]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a12a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a12e:	d107      	bne.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a130:	f107 030c 	add.w	r3, r7, #12
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fad3 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a13e:	e158      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a144:	e155      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a146:	4b54      	ldr	r3, [pc, #336]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a14e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a150:	4b51      	ldr	r3, [pc, #324]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0304 	and.w	r3, r3, #4
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d10c      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a162:	4b4d      	ldr	r3, [pc, #308]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a4b      	ldr	r2, [pc, #300]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a174:	e01e      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a176:	4b48      	ldr	r3, [pc, #288]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d106      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a18a:	d102      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a18c:	4b44      	ldr	r3, [pc, #272]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a190:	e010      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a192:	4b41      	ldr	r3, [pc, #260]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a19e:	d106      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a6:	d102      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a1b2:	e11e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1b4:	e11d      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ba:	e11a      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c2:	d133      	bne.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a1c4:	4b34      	ldr	r3, [pc, #208]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1da:	d012      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a1dc:	e023      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1de:	4b2e      	ldr	r3, [pc, #184]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1ea:	d107      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fbc9 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1fa:	e0fa      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a200:	e0f7      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a202:	4b25      	ldr	r3, [pc, #148]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a20e:	d107      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a210:	f107 0318 	add.w	r3, r7, #24
 800a214:	4618      	mov	r0, r3
 800a216:	f000 f90f 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a21e:	e0e8      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a224:	e0e5      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a22a:	e0e2      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a232:	f040 808f 	bne.w	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a236:	4b18      	ldr	r3, [pc, #96]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a23e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a246:	d075      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a24e:	d87e      	bhi.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a256:	d060      	beq.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25e:	d876      	bhi.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a266:	d045      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26e:	d86e      	bhi.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a276:	d02b      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27e:	d866      	bhi.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	2b00      	cmp	r3, #0
 800a284:	d004      	beq.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a28c:	d00e      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a28e:	e05e      	b.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a290:	f000 f8bc 	bl	800a40c <HAL_RCCEx_GetD3PCLK1Freq>
 800a294:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a296:	e0ac      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a298:	58024400 	.word	0x58024400
 800a29c:	03d09000 	.word	0x03d09000
 800a2a0:	003d0900 	.word	0x003d0900
 800a2a4:	01e84800 	.word	0x01e84800
 800a2a8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ac:	4b53      	ldr	r3, [pc, #332]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2b8:	d107      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ba:	f107 0318 	add.w	r3, r7, #24
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f8ba 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a2c8:	e093      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ce:	e090      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2d0:	4b4a      	ldr	r3, [pc, #296]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2dc:	d107      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2de:	f107 030c 	add.w	r3, r7, #12
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 f9fc 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a2ec:	e081      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2f2:	e07e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2f4:	4b41      	ldr	r3, [pc, #260]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0304 	and.w	r3, r3, #4
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d109      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a300:	4b3e      	ldr	r3, [pc, #248]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a3d      	ldr	r2, [pc, #244]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a312:	e06e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a318:	e06b      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a31a:	4b38      	ldr	r3, [pc, #224]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a326:	d102      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800a328:	4b36      	ldr	r3, [pc, #216]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32c:	e061      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a332:	e05e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a334:	4b31      	ldr	r3, [pc, #196]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a340:	d102      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a342:	4b31      	ldr	r3, [pc, #196]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a346:	e054      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a34c:	e051      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a352:	e04e      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a35a:	d148      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a35c:	4b27      	ldr	r3, [pc, #156]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a364:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a36c:	d02a      	beq.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a374:	d838      	bhi.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a382:	d00d      	beq.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a384:	e030      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a386:	4b1d      	ldr	r3, [pc, #116]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a392:	d102      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a398:	e02b      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a39e:	e028      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3a0:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3ac:	d107      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fae8 	bl	800a988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a3bc:	e019      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c2:	e016      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3d0:	d107      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d2:	f107 0318 	add.w	r3, r7, #24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f82e 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a3e0:	e007      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e6:	e004      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ec:	e001      	b.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3740      	adds	r7, #64	; 0x40
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	003d0900 	.word	0x003d0900
 800a408:	01e84800 	.word	0x01e84800

0800a40c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a410:	f7fe fb4c 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 800a414:	4602      	mov	r2, r0
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	091b      	lsrs	r3, r3, #4
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	4904      	ldr	r1, [pc, #16]	; (800a434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a422:	5ccb      	ldrb	r3, [r1, r3]
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	58024400 	.word	0x58024400
 800a434:	080122b4 	.word	0x080122b4

0800a438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a438:	b480      	push	{r7}
 800a43a:	b089      	sub	sp, #36	; 0x24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a440:	4ba1      	ldr	r3, [pc, #644]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a44a:	4b9f      	ldr	r3, [pc, #636]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	0b1b      	lsrs	r3, r3, #12
 800a450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a456:	4b9c      	ldr	r3, [pc, #624]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a462:	4b99      	ldr	r3, [pc, #612]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 8111 	beq.w	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	f000 8083 	beq.w	800a594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	f200 80a1 	bhi.w	800a5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d056      	beq.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4a2:	e099      	b.n	800a5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a4:	4b88      	ldr	r3, [pc, #544]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02d      	beq.n	800a50c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4b0:	4b85      	ldr	r3, [pc, #532]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	08db      	lsrs	r3, r3, #3
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	4a84      	ldr	r2, [pc, #528]	; (800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4da:	4b7b      	ldr	r3, [pc, #492]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a50a:	e087      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51e:	4b6a      	ldr	r3, [pc, #424]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a532:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a54e:	e065      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a562:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a572:	ed97 6a03 	vldr	s12, [r7, #12]
 800a576:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a592:	e043      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a6:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5d6:	e021      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b37      	ldr	r3, [pc, #220]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a61a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a61c:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	0a5b      	lsrs	r3, r3, #9
 800a622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a636:	edd7 6a07 	vldr	s13, [r7, #28]
 800a63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a642:	ee17 2a90 	vmov	r2, s15
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a664:	edd7 6a07 	vldr	s13, [r7, #28]
 800a668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a670:	ee17 2a90 	vmov	r2, s15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6a6:	e008      	b.n	800a6ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]
}
 800a6ba:	bf00      	nop
 800a6bc:	3724      	adds	r7, #36	; 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	46000000 	.word	0x46000000
 800a6d4:	4c742400 	.word	0x4c742400
 800a6d8:	4a742400 	.word	0x4a742400
 800a6dc:	4bf42400 	.word	0x4bf42400

0800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b089      	sub	sp, #36	; 0x24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6e8:	4ba1      	ldr	r3, [pc, #644]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a6f2:	4b9f      	ldr	r3, [pc, #636]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	0d1b      	lsrs	r3, r3, #20
 800a6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a6fe:	4b9c      	ldr	r3, [pc, #624]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a70a:	4b99      	ldr	r3, [pc, #612]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 8111 	beq.w	800a950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b02      	cmp	r3, #2
 800a732:	f000 8083 	beq.w	800a83c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	f200 80a1 	bhi.w	800a880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d056      	beq.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a74a:	e099      	b.n	800a880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a74c:	4b88      	ldr	r3, [pc, #544]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d02d      	beq.n	800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a758:	4b85      	ldr	r3, [pc, #532]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	4a84      	ldr	r2, [pc, #528]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
 800a768:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	ee07 3a90 	vmov	s15, r3
 800a770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a782:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a792:	ed97 6a03 	vldr	s12, [r7, #12]
 800a796:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7b2:	e087      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c6:	4b6a      	ldr	r3, [pc, #424]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7f6:	e065      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80a:	4b59      	ldr	r3, [pc, #356]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a83a:	e043      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84e:	4b48      	ldr	r3, [pc, #288]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a862:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a87e:	e021      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a892:	4b37      	ldr	r3, [pc, #220]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	0a5b      	lsrs	r3, r3, #9
 800a8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ea:	ee17 2a90 	vmov	r2, s15
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	0c1b      	lsrs	r3, r3, #16
 800a8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fc:	ee07 3a90 	vmov	s15, r3
 800a900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a918:	ee17 2a90 	vmov	r2, s15
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a920:	4b13      	ldr	r3, [pc, #76]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	0e1b      	lsrs	r3, r3, #24
 800a926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a946:	ee17 2a90 	vmov	r2, s15
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a94e:	e008      	b.n	800a962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	609a      	str	r2, [r3, #8]
}
 800a962:	bf00      	nop
 800a964:	3724      	adds	r7, #36	; 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
 800a974:	03d09000 	.word	0x03d09000
 800a978:	46000000 	.word	0x46000000
 800a97c:	4c742400 	.word	0x4c742400
 800a980:	4a742400 	.word	0x4a742400
 800a984:	4bf42400 	.word	0x4bf42400

0800a988 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a988:	b480      	push	{r7}
 800a98a:	b089      	sub	sp, #36	; 0x24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a990:	4ba0      	ldr	r3, [pc, #640]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a99a:	4b9e      	ldr	r3, [pc, #632]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a9a6:	4b9b      	ldr	r3, [pc, #620]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a9b0:	4b98      	ldr	r3, [pc, #608]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	08db      	lsrs	r3, r3, #3
 800a9b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	fb02 f303 	mul.w	r3, r2, r3
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8111 	beq.w	800abf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	f000 8083 	beq.w	800aae2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	f200 80a1 	bhi.w	800ab26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d056      	beq.n	800aa9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a9f0:	e099      	b.n	800ab26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f2:	4b88      	ldr	r3, [pc, #544]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d02d      	beq.n	800aa5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9fe:	4b85      	ldr	r3, [pc, #532]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	08db      	lsrs	r3, r3, #3
 800aa04:	f003 0303 	and.w	r3, r3, #3
 800aa08:	4a83      	ldr	r2, [pc, #524]	; (800ac18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa0a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa28:	4b7a      	ldr	r3, [pc, #488]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa30:	ee07 3a90 	vmov	s15, r3
 800aa34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa38:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa58:	e087      	b.n	800ab6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	ee07 3a90 	vmov	s15, r3
 800aa60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aa68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6c:	4b69      	ldr	r3, [pc, #420]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa74:	ee07 3a90 	vmov	s15, r3
 800aa78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa80:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa9c:	e065      	b.n	800ab6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aaac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab0:	4b58      	ldr	r3, [pc, #352]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aadc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aae0:	e043      	b.n	800ab6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aaf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf4:	4b47      	ldr	r3, [pc, #284]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafc:	ee07 3a90 	vmov	s15, r3
 800ab00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab04:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab08:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab24:	e021      	b.n	800ab6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	ee07 3a90 	vmov	s15, r3
 800ab2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ac20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab38:	4b36      	ldr	r3, [pc, #216]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab48:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ab6a:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6e:	0a5b      	lsrs	r3, r3, #9
 800ab70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab74:	ee07 3a90 	vmov	s15, r3
 800ab78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab90:	ee17 2a90 	vmov	r2, s15
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ab98:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9c:	0c1b      	lsrs	r3, r3, #16
 800ab9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abbe:	ee17 2a90 	vmov	r2, s15
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800abc6:	4b13      	ldr	r3, [pc, #76]	; (800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	0e1b      	lsrs	r3, r3, #24
 800abcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abec:	ee17 2a90 	vmov	r2, s15
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800abf4:	e008      	b.n	800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	609a      	str	r2, [r3, #8]
}
 800ac08:	bf00      	nop
 800ac0a:	3724      	adds	r7, #36	; 0x24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	58024400 	.word	0x58024400
 800ac18:	03d09000 	.word	0x03d09000
 800ac1c:	46000000 	.word	0x46000000
 800ac20:	4c742400 	.word	0x4c742400
 800ac24:	4a742400 	.word	0x4a742400
 800ac28:	4bf42400 	.word	0x4bf42400

0800ac2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac3a:	4b53      	ldr	r3, [pc, #332]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d101      	bne.n	800ac4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e099      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac4a:	4b4f      	ldr	r3, [pc, #316]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a4e      	ldr	r2, [pc, #312]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac56:	f7f8 fb85 	bl	8003364 <HAL_GetTick>
 800ac5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac5c:	e008      	b.n	800ac70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac5e:	f7f8 fb81 	bl	8003364 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d901      	bls.n	800ac70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e086      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac70:	4b45      	ldr	r3, [pc, #276]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f0      	bne.n	800ac5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac7c:	4b42      	ldr	r3, [pc, #264]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	031b      	lsls	r3, r3, #12
 800ac8a:	493f      	ldr	r1, [pc, #252]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	025b      	lsls	r3, r3, #9
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	431a      	orrs	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	3b01      	subs	r3, #1
 800acac:	041b      	lsls	r3, r3, #16
 800acae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	3b01      	subs	r3, #1
 800acba:	061b      	lsls	r3, r3, #24
 800acbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acc0:	4931      	ldr	r1, [pc, #196]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800acc6:	4b30      	ldr	r3, [pc, #192]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	492d      	ldr	r1, [pc, #180]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acd8:	4b2b      	ldr	r3, [pc, #172]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	f023 0220 	bic.w	r2, r3, #32
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	4928      	ldr	r1, [pc, #160]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acea:	4b27      	ldr	r3, [pc, #156]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acf0:	f023 0310 	bic.w	r3, r3, #16
 800acf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acf6:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acfa:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <RCCEx_PLL2_Config+0x160>)
 800acfc:	4013      	ands	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	69d2      	ldr	r2, [r2, #28]
 800ad02:	00d2      	lsls	r2, r2, #3
 800ad04:	4920      	ldr	r1, [pc, #128]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad0a:	4b1f      	ldr	r3, [pc, #124]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0e:	4a1e      	ldr	r2, [pc, #120]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad10:	f043 0310 	orr.w	r3, r3, #16
 800ad14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d106      	bne.n	800ad2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a19      	ldr	r2, [pc, #100]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad28:	e00f      	b.n	800ad4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d106      	bne.n	800ad3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad30:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad3c:	e005      	b.n	800ad4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad42:	4a11      	ldr	r2, [pc, #68]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a0e      	ldr	r2, [pc, #56]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad56:	f7f8 fb05 	bl	8003364 <HAL_GetTick>
 800ad5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad5c:	e008      	b.n	800ad70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad5e:	f7f8 fb01 	bl	8003364 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d901      	bls.n	800ad70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e006      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad70:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0f0      	beq.n	800ad5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	ffff0007 	.word	0xffff0007

0800ad90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad9e:	4b53      	ldr	r3, [pc, #332]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d101      	bne.n	800adae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e099      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adae:	4b4f      	ldr	r3, [pc, #316]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a4e      	ldr	r2, [pc, #312]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adba:	f7f8 fad3 	bl	8003364 <HAL_GetTick>
 800adbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adc0:	e008      	b.n	800add4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800adc2:	f7f8 facf 	bl	8003364 <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d901      	bls.n	800add4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e086      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800add4:	4b45      	ldr	r3, [pc, #276]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1f0      	bne.n	800adc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ade0:	4b42      	ldr	r3, [pc, #264]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ade2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	051b      	lsls	r3, r3, #20
 800adee:	493f      	ldr	r1, [pc, #252]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	628b      	str	r3, [r1, #40]	; 0x28
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	025b      	lsls	r3, r3, #9
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	061b      	lsls	r3, r3, #24
 800ae20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae24:	4931      	ldr	r1, [pc, #196]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae2a:	4b30      	ldr	r3, [pc, #192]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	492d      	ldr	r1, [pc, #180]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae3c:	4b2b      	ldr	r3, [pc, #172]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	4928      	ldr	r1, [pc, #160]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae4e:	4b27      	ldr	r3, [pc, #156]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	4a26      	ldr	r2, [pc, #152]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae5a:	4b24      	ldr	r3, [pc, #144]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae5e:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <RCCEx_PLL3_Config+0x160>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	69d2      	ldr	r2, [r2, #28]
 800ae66:	00d2      	lsls	r2, r2, #3
 800ae68:	4920      	ldr	r1, [pc, #128]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae6e:	4b1f      	ldr	r3, [pc, #124]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	4a1e      	ldr	r2, [pc, #120]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d106      	bne.n	800ae8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae80:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae84:	4a19      	ldr	r2, [pc, #100]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae8c:	e00f      	b.n	800aeae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d106      	bne.n	800aea2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	4a14      	ldr	r2, [pc, #80]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aea0:	e005      	b.n	800aeae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	4a11      	ldr	r2, [pc, #68]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a0e      	ldr	r2, [pc, #56]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aeb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeba:	f7f8 fa53 	bl	8003364 <HAL_GetTick>
 800aebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aec0:	e008      	b.n	800aed4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aec2:	f7f8 fa4f 	bl	8003364 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d901      	bls.n	800aed4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e006      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0f0      	beq.n	800aec2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	58024400 	.word	0x58024400
 800aef0:	ffff0007 	.word	0xffff0007

0800aef4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d067      	beq.n	800afd6 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7f7 fc12 	bl	8002744 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	22ca      	movs	r2, #202	; 0xca
 800af2e:	625a      	str	r2, [r3, #36]	; 0x24
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2253      	movs	r2, #83	; 0x53
 800af36:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f879 	bl	800b030 <RTC_EnterInitMode>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d13b      	bne.n	800afc0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6899      	ldr	r1, [r3, #8]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4b23      	ldr	r3, [pc, #140]	; (800afe0 <HAL_RTC_Init+0xec>)
 800af54:	400b      	ands	r3, r1
 800af56:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6899      	ldr	r1, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	431a      	orrs	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	431a      	orrs	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	0419      	lsls	r1, r3, #16
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f881 	bl	800b090 <RTC_ExitInitMode>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d113      	bne.n	800afc0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0203 	bic.w	r2, r2, #3
 800afa6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69da      	ldr	r2, [r3, #28]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	431a      	orrs	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	430a      	orrs	r2, r1
 800afbe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	22ff      	movs	r2, #255	; 0xff
 800afc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d103      	bne.n	800afd6 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	ff8fffbf 	.word	0xff8fffbf

0800afe4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68da      	ldr	r2, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800affa:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800affc:	f7f8 f9b2 	bl	8003364 <HAL_GetTick>
 800b000:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b002:	e009      	b.n	800b018 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b004:	f7f8 f9ae 	bl	8003364 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b012:	d901      	bls.n	800b018 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e007      	b.n	800b028 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0ee      	beq.n	800b004 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d11d      	bne.n	800b086 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b054:	f7f8 f986 	bl	8003364 <HAL_GetTick>
 800b058:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b05a:	e00d      	b.n	800b078 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b05c:	f7f8 f982 	bl	8003364 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b06a:	d905      	bls.n	800b078 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2203      	movs	r2, #3
 800b074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0ea      	beq.n	800b05c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b09c:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b0a8:	4b17      	ldr	r3, [pc, #92]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10c      	bne.n	800b0ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff ff95 	bl	800afe4 <HAL_RTC_WaitForSynchro>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01e      	beq.n	800b0fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2203      	movs	r2, #3
 800b0c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	73fb      	strb	r3, [r7, #15]
 800b0cc:	e017      	b.n	800b0fe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b0ce:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	4a0d      	ldr	r2, [pc, #52]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0d4:	f023 0320 	bic.w	r3, r3, #32
 800b0d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff ff82 	bl	800afe4 <HAL_RTC_WaitForSynchro>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2203      	movs	r2, #3
 800b0ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b0f2:	4b05      	ldr	r3, [pc, #20]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	4a04      	ldr	r2, [pc, #16]	; (800b108 <RTC_ExitInitMode+0x78>)
 800b0f8:	f043 0320 	orr.w	r3, r3, #32
 800b0fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	58004000 	.word	0x58004000

0800b10c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e0eb      	b.n	800b2fa <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a75      	ldr	r2, [pc, #468]	; (800b304 <HAL_SPI_Init+0x1f8>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <HAL_SPI_Init+0x46>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a74      	ldr	r2, [pc, #464]	; (800b308 <HAL_SPI_Init+0x1fc>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00a      	beq.n	800b152 <HAL_SPI_Init+0x46>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a72      	ldr	r2, [pc, #456]	; (800b30c <HAL_SPI_Init+0x200>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d005      	beq.n	800b152 <HAL_SPI_Init+0x46>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	2b0f      	cmp	r3, #15
 800b14c:	d901      	bls.n	800b152 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e0d3      	b.n	800b2fa <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fb9e 	bl	800b894 <SPI_GetPacketSize>
 800b158:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a69      	ldr	r2, [pc, #420]	; (800b304 <HAL_SPI_Init+0x1f8>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d00c      	beq.n	800b17e <HAL_SPI_Init+0x72>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a67      	ldr	r2, [pc, #412]	; (800b308 <HAL_SPI_Init+0x1fc>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d007      	beq.n	800b17e <HAL_SPI_Init+0x72>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a66      	ldr	r2, [pc, #408]	; (800b30c <HAL_SPI_Init+0x200>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d002      	beq.n	800b17e <HAL_SPI_Init+0x72>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b08      	cmp	r3, #8
 800b17c:	d811      	bhi.n	800b1a2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b182:	4a60      	ldr	r2, [pc, #384]	; (800b304 <HAL_SPI_Init+0x1f8>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d009      	beq.n	800b19c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a5e      	ldr	r2, [pc, #376]	; (800b308 <HAL_SPI_Init+0x1fc>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d004      	beq.n	800b19c <HAL_SPI_Init+0x90>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a5d      	ldr	r2, [pc, #372]	; (800b30c <HAL_SPI_Init+0x200>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d104      	bne.n	800b1a6 <HAL_SPI_Init+0x9a>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	d901      	bls.n	800b1a6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e0a9      	b.n	800b2fa <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7f7 faf2 	bl	80027a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2202      	movs	r2, #2
 800b1c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0201 	bic.w	r2, r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1e0:	d119      	bne.n	800b216 <HAL_SPI_Init+0x10a>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1ea:	d103      	bne.n	800b1f4 <HAL_SPI_Init+0xe8>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d008      	beq.n	800b206 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10c      	bne.n	800b216 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b204:	d107      	bne.n	800b216 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b214:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69da      	ldr	r2, [r3, #28]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	431a      	orrs	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b228:	ea42 0103 	orr.w	r1, r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	431a      	orrs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	431a      	orrs	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	431a      	orrs	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	431a      	orrs	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b276:	ea42 0103 	orr.w	r1, r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d113      	bne.n	800b2b6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 0201 	bic.w	r2, r2, #1
 800b2c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00a      	beq.n	800b2e8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	40013000 	.word	0x40013000
 800b308:	40003800 	.word	0x40003800
 800b30c:	40003c00 	.word	0x40003c00

0800b310 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	; 0x28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b328:	6a3a      	ldr	r2, [r7, #32]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	4013      	ands	r3, r2
 800b32e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b338:	2300      	movs	r3, #0
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b342:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3330      	adds	r3, #48	; 0x30
 800b34a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d113      	bne.n	800b37e <HAL_SPI_IRQHandler+0x6e>
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	f003 0320 	and.w	r3, r3, #32
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10e      	bne.n	800b37e <HAL_SPI_IRQHandler+0x6e>
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	f003 0304 	and.w	r3, r3, #4
 800b366:	2b00      	cmp	r3, #0
 800b368:	d009      	beq.n	800b37e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
    handled = 1UL;
 800b37a:	2301      	movs	r3, #1
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10f      	bne.n	800b3a8 <HAL_SPI_IRQHandler+0x98>
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <HAL_SPI_IRQHandler+0x98>
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d105      	bne.n	800b3a8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4798      	blx	r3
    handled = 1UL;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10f      	bne.n	800b3d2 <HAL_SPI_IRQHandler+0xc2>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <HAL_SPI_IRQHandler+0xc2>
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d105      	bne.n	800b3d2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
    handled = 1UL;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f040 816f 	bne.w	800b6b8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	f003 0308 	and.w	r3, r3, #8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80a0 	beq.w	800b526 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	699a      	ldr	r2, [r3, #24]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0208 	orr.w	r2, r2, #8
 800b3f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	699a      	ldr	r2, [r3, #24]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0210 	orr.w	r2, r2, #16
 800b404:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	699a      	ldr	r2, [r3, #24]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b414:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f022 0208 	bic.w	r2, r2, #8
 800b424:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00f      	beq.n	800b450 <HAL_SPI_IRQHandler+0x140>
 800b430:	7cfb      	ldrb	r3, [r7, #19]
 800b432:	2b04      	cmp	r3, #4
 800b434:	d004      	beq.n	800b440 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d007      	beq.n	800b450 <HAL_SPI_IRQHandler+0x140>
 800b440:	7cfb      	ldrb	r3, [r7, #19]
 800b442:	2b03      	cmp	r3, #3
 800b444:	d059      	beq.n	800b4fa <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d154      	bne.n	800b4fa <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d13d      	bne.n	800b4da <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800b45e:	e036      	b.n	800b4ce <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	2b0f      	cmp	r3, #15
 800b466:	d90b      	bls.n	800b480 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b472:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b478:	1d1a      	adds	r2, r3, #4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	665a      	str	r2, [r3, #100]	; 0x64
 800b47e:	e01d      	b.n	800b4bc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	2b07      	cmp	r3, #7
 800b486:	d90b      	bls.n	800b4a0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	b292      	uxth	r2, r2
 800b492:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b498:	1c9a      	adds	r2, r3, #2
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	665a      	str	r2, [r3, #100]	; 0x64
 800b49e:	e00d      	b.n	800b4bc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ac:	7812      	ldrb	r2, [r2, #0]
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1c2      	bne.n	800b460 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f93a 	bl	800b754 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f90a 	bl	800b70c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800b4f8:	e0e3      	b.n	800b6c2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b4fa:	7cfb      	ldrb	r3, [r7, #19]
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d103      	bne.n	800b508 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f8f9 	bl	800b6f8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800b506:	e0d9      	b.n	800b6bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b508:	7cfb      	ldrb	r3, [r7, #19]
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	d103      	bne.n	800b516 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f8e8 	bl	800b6e4 <HAL_SPI_RxCpltCallback>
    return;
 800b514:	e0d2      	b.n	800b6bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b516:	7cfb      	ldrb	r3, [r7, #19]
 800b518:	2b03      	cmp	r3, #3
 800b51a:	f040 80cf 	bne.w	800b6bc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f8d6 	bl	800b6d0 <HAL_SPI_TxCpltCallback>
    return;
 800b524:	e0ca      	b.n	800b6bc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00d      	beq.n	800b54c <HAL_SPI_IRQHandler+0x23c>
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	2b00      	cmp	r3, #0
 800b538:	d008      	beq.n	800b54c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b548:	619a      	str	r2, [r3, #24]

    return;
 800b54a:	e0ba      	b.n	800b6c2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 80b5 	beq.w	800b6c2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00f      	beq.n	800b582 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b568:	f043 0204 	orr.w	r2, r3, #4
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	699a      	ldr	r2, [r3, #24]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b580:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00f      	beq.n	800b5ac <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b592:	f043 0201 	orr.w	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00f      	beq.n	800b5d6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5bc:	f043 0208 	orr.w	r2, r3, #8
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699a      	ldr	r2, [r3, #24]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00f      	beq.n	800b600 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699a      	ldr	r2, [r3, #24]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 0220 	orr.w	r2, r2, #32
 800b5fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b606:	2b00      	cmp	r3, #0
 800b608:	d05a      	beq.n	800b6c0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 0201 	bic.w	r2, r2, #1
 800b618:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6919      	ldr	r1, [r3, #16]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	4b28      	ldr	r3, [pc, #160]	; (800b6c8 <HAL_SPI_IRQHandler+0x3b8>)
 800b626:	400b      	ands	r3, r1
 800b628:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b630:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b634:	d138      	bne.n	800b6a8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b644:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d013      	beq.n	800b676 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b652:	4a1e      	ldr	r2, [pc, #120]	; (800b6cc <HAL_SPI_IRQHandler+0x3bc>)
 800b654:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fa fae6 	bl	8005c2c <HAL_DMA_Abort_IT>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b66c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d020      	beq.n	800b6c0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b682:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <HAL_SPI_IRQHandler+0x3bc>)
 800b684:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fa face 	bl	8005c2c <HAL_DMA_Abort_IT>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d014      	beq.n	800b6c0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b6a6:	e00b      	b.n	800b6c0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f82b 	bl	800b70c <HAL_SPI_ErrorCallback>
    return;
 800b6b6:	e003      	b.n	800b6c0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800b6b8:	bf00      	nop
 800b6ba:	e002      	b.n	800b6c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b6bc:	bf00      	nop
 800b6be:	e000      	b.n	800b6c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b6c0:	bf00      	nop
  }
}
 800b6c2:	3728      	adds	r7, #40	; 0x28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	fffffc94 	.word	0xfffffc94
 800b6cc:	0800b721 	.word	0x0800b721

0800b6d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff ffe0 	bl	800b70c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	695b      	ldr	r3, [r3, #20]
 800b762:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	699a      	ldr	r2, [r3, #24]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f042 0208 	orr.w	r2, r2, #8
 800b772:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	699a      	ldr	r2, [r3, #24]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0210 	orr.w	r2, r2, #16
 800b782:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f022 0201 	bic.w	r2, r2, #1
 800b792:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6919      	ldr	r1, [r3, #16]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4b3c      	ldr	r3, [pc, #240]	; (800b890 <SPI_CloseTransfer+0x13c>)
 800b7a0:	400b      	ands	r3, r1
 800b7a2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b7b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b04      	cmp	r3, #4
 800b7be:	d014      	beq.n	800b7ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00f      	beq.n	800b7ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	699a      	ldr	r2, [r3, #24]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f042 0220 	orr.w	r2, r2, #32
 800b7e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d014      	beq.n	800b820 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00f      	beq.n	800b820 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b806:	f043 0204 	orr.w	r2, r3, #4
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	699a      	ldr	r2, [r3, #24]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b81e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00f      	beq.n	800b84a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b830:	f043 0201 	orr.w	r2, r3, #1
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	699a      	ldr	r2, [r3, #24]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b848:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00f      	beq.n	800b874 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b85a:	f043 0208 	orr.w	r2, r3, #8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	699a      	ldr	r2, [r3, #24]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b872:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b884:	bf00      	nop
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	fffffc90 	.word	0xfffffc90

0800b894 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	095b      	lsrs	r3, r3, #5
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	08db      	lsrs	r3, r3, #3
 800b8b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e049      	b.n	800b970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7f6 ffe9 	bl	80028c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f000 fcb9 	bl	800c280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d001      	beq.n	800b990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e047      	b.n	800ba20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a23      	ldr	r2, [pc, #140]	; (800ba2c <HAL_TIM_Base_Start+0xb4>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d01d      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9aa:	d018      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a1f      	ldr	r2, [pc, #124]	; (800ba30 <HAL_TIM_Base_Start+0xb8>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d013      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ba34 <HAL_TIM_Base_Start+0xbc>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00e      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a1c      	ldr	r2, [pc, #112]	; (800ba38 <HAL_TIM_Base_Start+0xc0>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d009      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ba3c <HAL_TIM_Base_Start+0xc4>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d004      	beq.n	800b9de <HAL_TIM_Base_Start+0x66>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a19      	ldr	r2, [pc, #100]	; (800ba40 <HAL_TIM_Base_Start+0xc8>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d115      	bne.n	800ba0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689a      	ldr	r2, [r3, #8]
 800b9e4:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <HAL_TIM_Base_Start+0xcc>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b06      	cmp	r3, #6
 800b9ee:	d015      	beq.n	800ba1c <HAL_TIM_Base_Start+0xa4>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f6:	d011      	beq.n	800ba1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0201 	orr.w	r2, r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba08:	e008      	b.n	800ba1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	e000      	b.n	800ba1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	40010400 	.word	0x40010400
 800ba40:	40001800 	.word	0x40001800
 800ba44:	00010007 	.word	0x00010007

0800ba48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d001      	beq.n	800ba60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e04f      	b.n	800bb00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f042 0201 	orr.w	r2, r2, #1
 800ba76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a23      	ldr	r2, [pc, #140]	; (800bb0c <HAL_TIM_Base_Start_IT+0xc4>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d01d      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba8a:	d018      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a1f      	ldr	r2, [pc, #124]	; (800bb10 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d013      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1e      	ldr	r2, [pc, #120]	; (800bb14 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d00e      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1c      	ldr	r2, [pc, #112]	; (800bb18 <HAL_TIM_Base_Start_IT+0xd0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d009      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a1b      	ldr	r2, [pc, #108]	; (800bb1c <HAL_TIM_Base_Start_IT+0xd4>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d004      	beq.n	800babe <HAL_TIM_Base_Start_IT+0x76>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a19      	ldr	r2, [pc, #100]	; (800bb20 <HAL_TIM_Base_Start_IT+0xd8>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d115      	bne.n	800baea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689a      	ldr	r2, [r3, #8]
 800bac4:	4b17      	ldr	r3, [pc, #92]	; (800bb24 <HAL_TIM_Base_Start_IT+0xdc>)
 800bac6:	4013      	ands	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b06      	cmp	r3, #6
 800bace:	d015      	beq.n	800bafc <HAL_TIM_Base_Start_IT+0xb4>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad6:	d011      	beq.n	800bafc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae8:	e008      	b.n	800bafc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	e000      	b.n	800bafe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	40010000 	.word	0x40010000
 800bb10:	40000400 	.word	0x40000400
 800bb14:	40000800 	.word	0x40000800
 800bb18:	40000c00 	.word	0x40000c00
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40001800 	.word	0x40001800
 800bb24:	00010007 	.word	0x00010007

0800bb28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e049      	b.n	800bbce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d106      	bne.n	800bb54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f841 	bl	800bbd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f000 fb8a 	bl	800c280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d122      	bne.n	800bc46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f003 0302 	and.w	r3, r3, #2
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d11b      	bne.n	800bc46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f06f 0202 	mvn.w	r2, #2
 800bc16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	f003 0303 	and.w	r3, r3, #3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d003      	beq.n	800bc34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fb09 	bl	800c244 <HAL_TIM_IC_CaptureCallback>
 800bc32:	e005      	b.n	800bc40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fafb 	bl	800c230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fb0c 	bl	800c258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d122      	bne.n	800bc9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f003 0304 	and.w	r3, r3, #4
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d11b      	bne.n	800bc9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f06f 0204 	mvn.w	r2, #4
 800bc6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d003      	beq.n	800bc88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fadf 	bl	800c244 <HAL_TIM_IC_CaptureCallback>
 800bc86:	e005      	b.n	800bc94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fad1 	bl	800c230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fae2 	bl	800c258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	f003 0308 	and.w	r3, r3, #8
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d122      	bne.n	800bcee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f003 0308 	and.w	r3, r3, #8
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d11b      	bne.n	800bcee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f06f 0208 	mvn.w	r2, #8
 800bcbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fab5 	bl	800c244 <HAL_TIM_IC_CaptureCallback>
 800bcda:	e005      	b.n	800bce8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 faa7 	bl	800c230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fab8 	bl	800c258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	f003 0310 	and.w	r3, r3, #16
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	d122      	bne.n	800bd42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f003 0310 	and.w	r3, r3, #16
 800bd06:	2b10      	cmp	r3, #16
 800bd08:	d11b      	bne.n	800bd42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f06f 0210 	mvn.w	r2, #16
 800bd12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2208      	movs	r2, #8
 800bd18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fa8b 	bl	800c244 <HAL_TIM_IC_CaptureCallback>
 800bd2e:	e005      	b.n	800bd3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fa7d 	bl	800c230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fa8e 	bl	800c258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10e      	bne.n	800bd6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d107      	bne.n	800bd6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f06f 0201 	mvn.w	r2, #1
 800bd66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7f6 fc4b 	bl	8002604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd78:	2b80      	cmp	r3, #128	; 0x80
 800bd7a:	d10e      	bne.n	800bd9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd86:	2b80      	cmp	r3, #128	; 0x80
 800bd88:	d107      	bne.n	800bd9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 ff0b 	bl	800cbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda8:	d10e      	bne.n	800bdc8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdb4:	2b80      	cmp	r3, #128	; 0x80
 800bdb6:	d107      	bne.n	800bdc8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bdc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fefe 	bl	800cbc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd2:	2b40      	cmp	r3, #64	; 0x40
 800bdd4:	d10e      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde0:	2b40      	cmp	r3, #64	; 0x40
 800bde2:	d107      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bdec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa3c 	bl	800c26c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f003 0320 	and.w	r3, r3, #32
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d10e      	bne.n	800be20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b20      	cmp	r3, #32
 800be0e:	d107      	bne.n	800be20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f06f 0220 	mvn.w	r2, #32
 800be18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 febe 	bl	800cb9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be20:	bf00      	nop
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d101      	bne.n	800be42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800be3e:	2302      	movs	r3, #2
 800be40:	e0fd      	b.n	800c03e <HAL_TIM_PWM_ConfigChannel+0x216>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b14      	cmp	r3, #20
 800be4e:	f200 80f0 	bhi.w	800c032 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800be52:	a201      	add	r2, pc, #4	; (adr r2, 800be58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800be54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800c033 	.word	0x0800c033
 800be60:	0800c033 	.word	0x0800c033
 800be64:	0800c033 	.word	0x0800c033
 800be68:	0800beed 	.word	0x0800beed
 800be6c:	0800c033 	.word	0x0800c033
 800be70:	0800c033 	.word	0x0800c033
 800be74:	0800c033 	.word	0x0800c033
 800be78:	0800bf2f 	.word	0x0800bf2f
 800be7c:	0800c033 	.word	0x0800c033
 800be80:	0800c033 	.word	0x0800c033
 800be84:	0800c033 	.word	0x0800c033
 800be88:	0800bf6f 	.word	0x0800bf6f
 800be8c:	0800c033 	.word	0x0800c033
 800be90:	0800c033 	.word	0x0800c033
 800be94:	0800c033 	.word	0x0800c033
 800be98:	0800bfb1 	.word	0x0800bfb1
 800be9c:	0800c033 	.word	0x0800c033
 800bea0:	0800c033 	.word	0x0800c033
 800bea4:	0800c033 	.word	0x0800c033
 800bea8:	0800bff1 	.word	0x0800bff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fa7e 	bl	800c3b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	699a      	ldr	r2, [r3, #24]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f042 0208 	orr.w	r2, r2, #8
 800bec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	699a      	ldr	r2, [r3, #24]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 0204 	bic.w	r2, r2, #4
 800bed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6999      	ldr	r1, [r3, #24]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	691a      	ldr	r2, [r3, #16]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	619a      	str	r2, [r3, #24]
      break;
 800beea:	e0a3      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 faee 	bl	800c4d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	699a      	ldr	r2, [r3, #24]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699a      	ldr	r2, [r3, #24]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6999      	ldr	r1, [r3, #24]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	021a      	lsls	r2, r3, #8
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	619a      	str	r2, [r3, #24]
      break;
 800bf2c:	e082      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fb57 	bl	800c5e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69da      	ldr	r2, [r3, #28]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f042 0208 	orr.w	r2, r2, #8
 800bf48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69da      	ldr	r2, [r3, #28]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f022 0204 	bic.w	r2, r2, #4
 800bf58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	69d9      	ldr	r1, [r3, #28]
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	691a      	ldr	r2, [r3, #16]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	61da      	str	r2, [r3, #28]
      break;
 800bf6c:	e062      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68b9      	ldr	r1, [r7, #8]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 fbbd 	bl	800c6f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	69da      	ldr	r2, [r3, #28]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	69da      	ldr	r2, [r3, #28]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69d9      	ldr	r1, [r3, #28]
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	021a      	lsls	r2, r3, #8
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	61da      	str	r2, [r3, #28]
      break;
 800bfae:	e041      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68b9      	ldr	r1, [r7, #8]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fc04 	bl	800c7c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0208 	orr.w	r2, r2, #8
 800bfca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0204 	bic.w	r2, r2, #4
 800bfda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	691a      	ldr	r2, [r3, #16]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bfee:	e021      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fc46 	bl	800c888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c00a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c01a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	021a      	lsls	r2, r3, #8
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c030:	e000      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop

0800c048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_TIM_ConfigClockSource+0x18>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e0db      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x1d0>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4b69      	ldr	r3, [pc, #420]	; (800c220 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c086:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a63      	ldr	r2, [pc, #396]	; (800c224 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	f000 80a9 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c09c:	4a61      	ldr	r2, [pc, #388]	; (800c224 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	f200 80ae 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0a4:	4a60      	ldr	r2, [pc, #384]	; (800c228 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	f000 80a1 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c0ac:	4a5e      	ldr	r2, [pc, #376]	; (800c228 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	f200 80a6 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0b4:	4a5d      	ldr	r2, [pc, #372]	; (800c22c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	f000 8099 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c0bc:	4a5b      	ldr	r2, [pc, #364]	; (800c22c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	f200 809e 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0c8:	f000 8091 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c0cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0d0:	f200 8096 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0d8:	f000 8089 	beq.w	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0e0:	f200 808e 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e8:	d03e      	beq.n	800c168 <HAL_TIM_ConfigClockSource+0x120>
 800c0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ee:	f200 8087 	bhi.w	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f6:	f000 8085 	beq.w	800c204 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fe:	d87f      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c100:	2b70      	cmp	r3, #112	; 0x70
 800c102:	d01a      	beq.n	800c13a <HAL_TIM_ConfigClockSource+0xf2>
 800c104:	2b70      	cmp	r3, #112	; 0x70
 800c106:	d87b      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c108:	2b60      	cmp	r3, #96	; 0x60
 800c10a:	d050      	beq.n	800c1ae <HAL_TIM_ConfigClockSource+0x166>
 800c10c:	2b60      	cmp	r3, #96	; 0x60
 800c10e:	d877      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c110:	2b50      	cmp	r3, #80	; 0x50
 800c112:	d03c      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x146>
 800c114:	2b50      	cmp	r3, #80	; 0x50
 800c116:	d873      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c118:	2b40      	cmp	r3, #64	; 0x40
 800c11a:	d058      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0x186>
 800c11c:	2b40      	cmp	r3, #64	; 0x40
 800c11e:	d86f      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c120:	2b30      	cmp	r3, #48	; 0x30
 800c122:	d064      	beq.n	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c124:	2b30      	cmp	r3, #48	; 0x30
 800c126:	d86b      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c128:	2b20      	cmp	r3, #32
 800c12a:	d060      	beq.n	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c12c:	2b20      	cmp	r3, #32
 800c12e:	d867      	bhi.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d05c      	beq.n	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
 800c134:	2b10      	cmp	r3, #16
 800c136:	d05a      	beq.n	800c1ee <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c138:	e062      	b.n	800c200 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	6899      	ldr	r1, [r3, #8]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f000 fc7f 	bl	800ca4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c15c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	609a      	str	r2, [r3, #8]
      break;
 800c166:	e04e      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	6899      	ldr	r1, [r3, #8]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f000 fc68 	bl	800ca4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689a      	ldr	r2, [r3, #8]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c18a:	609a      	str	r2, [r3, #8]
      break;
 800c18c:	e03b      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	6859      	ldr	r1, [r3, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	461a      	mov	r2, r3
 800c19c:	f000 fbd8 	bl	800c950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2150      	movs	r1, #80	; 0x50
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fc32 	bl	800ca10 <TIM_ITRx_SetConfig>
      break;
 800c1ac:	e02b      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	6859      	ldr	r1, [r3, #4]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f000 fbf7 	bl	800c9ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2160      	movs	r1, #96	; 0x60
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 fc22 	bl	800ca10 <TIM_ITRx_SetConfig>
      break;
 800c1cc:	e01b      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	6859      	ldr	r1, [r3, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f000 fbb8 	bl	800c950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2140      	movs	r1, #64	; 0x40
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fc12 	bl	800ca10 <TIM_ITRx_SetConfig>
      break;
 800c1ec:	e00b      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f000 fc09 	bl	800ca10 <TIM_ITRx_SetConfig>
        break;
 800c1fe:	e002      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c200:	bf00      	nop
 800c202:	e000      	b.n	800c206 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c204:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	ffceff88 	.word	0xffceff88
 800c224:	00100040 	.word	0x00100040
 800c228:	00100030 	.word	0x00100030
 800c22c:	00100020 	.word	0x00100020

0800c230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a40      	ldr	r2, [pc, #256]	; (800c394 <TIM_Base_SetConfig+0x114>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d013      	beq.n	800c2c0 <TIM_Base_SetConfig+0x40>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c29e:	d00f      	beq.n	800c2c0 <TIM_Base_SetConfig+0x40>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a3d      	ldr	r2, [pc, #244]	; (800c398 <TIM_Base_SetConfig+0x118>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d00b      	beq.n	800c2c0 <TIM_Base_SetConfig+0x40>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a3c      	ldr	r2, [pc, #240]	; (800c39c <TIM_Base_SetConfig+0x11c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d007      	beq.n	800c2c0 <TIM_Base_SetConfig+0x40>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a3b      	ldr	r2, [pc, #236]	; (800c3a0 <TIM_Base_SetConfig+0x120>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d003      	beq.n	800c2c0 <TIM_Base_SetConfig+0x40>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a3a      	ldr	r2, [pc, #232]	; (800c3a4 <TIM_Base_SetConfig+0x124>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d108      	bne.n	800c2d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a2f      	ldr	r2, [pc, #188]	; (800c394 <TIM_Base_SetConfig+0x114>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d01f      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2e0:	d01b      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a2c      	ldr	r2, [pc, #176]	; (800c398 <TIM_Base_SetConfig+0x118>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d017      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a2b      	ldr	r2, [pc, #172]	; (800c39c <TIM_Base_SetConfig+0x11c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d013      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a2a      	ldr	r2, [pc, #168]	; (800c3a0 <TIM_Base_SetConfig+0x120>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00f      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a29      	ldr	r2, [pc, #164]	; (800c3a4 <TIM_Base_SetConfig+0x124>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00b      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a28      	ldr	r2, [pc, #160]	; (800c3a8 <TIM_Base_SetConfig+0x128>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d007      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a27      	ldr	r2, [pc, #156]	; (800c3ac <TIM_Base_SetConfig+0x12c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d003      	beq.n	800c31a <TIM_Base_SetConfig+0x9a>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a26      	ldr	r2, [pc, #152]	; (800c3b0 <TIM_Base_SetConfig+0x130>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d108      	bne.n	800c32c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	4313      	orrs	r3, r2
 800c32a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	4313      	orrs	r3, r2
 800c338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a10      	ldr	r2, [pc, #64]	; (800c394 <TIM_Base_SetConfig+0x114>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00f      	beq.n	800c378 <TIM_Base_SetConfig+0xf8>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a12      	ldr	r2, [pc, #72]	; (800c3a4 <TIM_Base_SetConfig+0x124>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d00b      	beq.n	800c378 <TIM_Base_SetConfig+0xf8>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a11      	ldr	r2, [pc, #68]	; (800c3a8 <TIM_Base_SetConfig+0x128>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d007      	beq.n	800c378 <TIM_Base_SetConfig+0xf8>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a10      	ldr	r2, [pc, #64]	; (800c3ac <TIM_Base_SetConfig+0x12c>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d003      	beq.n	800c378 <TIM_Base_SetConfig+0xf8>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a0f      	ldr	r2, [pc, #60]	; (800c3b0 <TIM_Base_SetConfig+0x130>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d103      	bne.n	800c380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	691a      	ldr	r2, [r3, #16]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	615a      	str	r2, [r3, #20]
}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	40010000 	.word	0x40010000
 800c398:	40000400 	.word	0x40000400
 800c39c:	40000800 	.word	0x40000800
 800c3a0:	40000c00 	.word	0x40000c00
 800c3a4:	40010400 	.word	0x40010400
 800c3a8:	40014000 	.word	0x40014000
 800c3ac:	40014400 	.word	0x40014400
 800c3b0:	40014800 	.word	0x40014800

0800c3b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	f023 0201 	bic.w	r2, r3, #1
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	4b37      	ldr	r3, [pc, #220]	; (800c4bc <TIM_OC1_SetConfig+0x108>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f023 0303 	bic.w	r3, r3, #3
 800c3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f023 0302 	bic.w	r3, r3, #2
 800c3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	4313      	orrs	r3, r2
 800c406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a2d      	ldr	r2, [pc, #180]	; (800c4c0 <TIM_OC1_SetConfig+0x10c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d00f      	beq.n	800c430 <TIM_OC1_SetConfig+0x7c>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a2c      	ldr	r2, [pc, #176]	; (800c4c4 <TIM_OC1_SetConfig+0x110>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d00b      	beq.n	800c430 <TIM_OC1_SetConfig+0x7c>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a2b      	ldr	r2, [pc, #172]	; (800c4c8 <TIM_OC1_SetConfig+0x114>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d007      	beq.n	800c430 <TIM_OC1_SetConfig+0x7c>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a2a      	ldr	r2, [pc, #168]	; (800c4cc <TIM_OC1_SetConfig+0x118>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d003      	beq.n	800c430 <TIM_OC1_SetConfig+0x7c>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a29      	ldr	r2, [pc, #164]	; (800c4d0 <TIM_OC1_SetConfig+0x11c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d10c      	bne.n	800c44a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f023 0308 	bic.w	r3, r3, #8
 800c436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	4313      	orrs	r3, r2
 800c440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f023 0304 	bic.w	r3, r3, #4
 800c448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a1c      	ldr	r2, [pc, #112]	; (800c4c0 <TIM_OC1_SetConfig+0x10c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00f      	beq.n	800c472 <TIM_OC1_SetConfig+0xbe>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a1b      	ldr	r2, [pc, #108]	; (800c4c4 <TIM_OC1_SetConfig+0x110>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d00b      	beq.n	800c472 <TIM_OC1_SetConfig+0xbe>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a1a      	ldr	r2, [pc, #104]	; (800c4c8 <TIM_OC1_SetConfig+0x114>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d007      	beq.n	800c472 <TIM_OC1_SetConfig+0xbe>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a19      	ldr	r2, [pc, #100]	; (800c4cc <TIM_OC1_SetConfig+0x118>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d003      	beq.n	800c472 <TIM_OC1_SetConfig+0xbe>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a18      	ldr	r2, [pc, #96]	; (800c4d0 <TIM_OC1_SetConfig+0x11c>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d111      	bne.n	800c496 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	4313      	orrs	r3, r2
 800c48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	4313      	orrs	r3, r2
 800c494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	621a      	str	r2, [r3, #32]
}
 800c4b0:	bf00      	nop
 800c4b2:	371c      	adds	r7, #28
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	fffeff8f 	.word	0xfffeff8f
 800c4c0:	40010000 	.word	0x40010000
 800c4c4:	40010400 	.word	0x40010400
 800c4c8:	40014000 	.word	0x40014000
 800c4cc:	40014400 	.word	0x40014400
 800c4d0:	40014800 	.word	0x40014800

0800c4d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b087      	sub	sp, #28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	f023 0210 	bic.w	r2, r3, #16
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	4b34      	ldr	r3, [pc, #208]	; (800c5d0 <TIM_OC2_SetConfig+0xfc>)
 800c500:	4013      	ands	r3, r2
 800c502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	4313      	orrs	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f023 0320 	bic.w	r3, r3, #32
 800c51e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	011b      	lsls	r3, r3, #4
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	4313      	orrs	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a29      	ldr	r2, [pc, #164]	; (800c5d4 <TIM_OC2_SetConfig+0x100>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d003      	beq.n	800c53c <TIM_OC2_SetConfig+0x68>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a28      	ldr	r2, [pc, #160]	; (800c5d8 <TIM_OC2_SetConfig+0x104>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d10d      	bne.n	800c558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	011b      	lsls	r3, r3, #4
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a1e      	ldr	r2, [pc, #120]	; (800c5d4 <TIM_OC2_SetConfig+0x100>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d00f      	beq.n	800c580 <TIM_OC2_SetConfig+0xac>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a1d      	ldr	r2, [pc, #116]	; (800c5d8 <TIM_OC2_SetConfig+0x104>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d00b      	beq.n	800c580 <TIM_OC2_SetConfig+0xac>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a1c      	ldr	r2, [pc, #112]	; (800c5dc <TIM_OC2_SetConfig+0x108>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d007      	beq.n	800c580 <TIM_OC2_SetConfig+0xac>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a1b      	ldr	r2, [pc, #108]	; (800c5e0 <TIM_OC2_SetConfig+0x10c>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d003      	beq.n	800c580 <TIM_OC2_SetConfig+0xac>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <TIM_OC2_SetConfig+0x110>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d113      	bne.n	800c5a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c58e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	621a      	str	r2, [r3, #32]
}
 800c5c2:	bf00      	nop
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	feff8fff 	.word	0xfeff8fff
 800c5d4:	40010000 	.word	0x40010000
 800c5d8:	40010400 	.word	0x40010400
 800c5dc:	40014000 	.word	0x40014000
 800c5e0:	40014400 	.word	0x40014400
 800c5e4:	40014800 	.word	0x40014800

0800c5e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	69db      	ldr	r3, [r3, #28]
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0303 	bic.w	r3, r3, #3
 800c61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	021b      	lsls	r3, r3, #8
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a27      	ldr	r2, [pc, #156]	; (800c6e0 <TIM_OC3_SetConfig+0xf8>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d003      	beq.n	800c64e <TIM_OC3_SetConfig+0x66>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a26      	ldr	r2, [pc, #152]	; (800c6e4 <TIM_OC3_SetConfig+0xfc>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d10d      	bne.n	800c66a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	021b      	lsls	r3, r3, #8
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	4313      	orrs	r3, r2
 800c660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a1c      	ldr	r2, [pc, #112]	; (800c6e0 <TIM_OC3_SetConfig+0xf8>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d00f      	beq.n	800c692 <TIM_OC3_SetConfig+0xaa>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a1b      	ldr	r2, [pc, #108]	; (800c6e4 <TIM_OC3_SetConfig+0xfc>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d00b      	beq.n	800c692 <TIM_OC3_SetConfig+0xaa>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a1a      	ldr	r2, [pc, #104]	; (800c6e8 <TIM_OC3_SetConfig+0x100>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d007      	beq.n	800c692 <TIM_OC3_SetConfig+0xaa>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a19      	ldr	r2, [pc, #100]	; (800c6ec <TIM_OC3_SetConfig+0x104>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d003      	beq.n	800c692 <TIM_OC3_SetConfig+0xaa>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a18      	ldr	r2, [pc, #96]	; (800c6f0 <TIM_OC3_SetConfig+0x108>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d113      	bne.n	800c6ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	011b      	lsls	r3, r3, #4
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	621a      	str	r2, [r3, #32]
}
 800c6d4:	bf00      	nop
 800c6d6:	371c      	adds	r7, #28
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40010400 	.word	0x40010400
 800c6e8:	40014000 	.word	0x40014000
 800c6ec:	40014400 	.word	0x40014400
 800c6f0:	40014800 	.word	0x40014800

0800c6f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	021b      	lsls	r3, r3, #8
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	4313      	orrs	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c73e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	031b      	lsls	r3, r3, #12
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	4313      	orrs	r3, r2
 800c74a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a18      	ldr	r2, [pc, #96]	; (800c7b0 <TIM_OC4_SetConfig+0xbc>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00f      	beq.n	800c774 <TIM_OC4_SetConfig+0x80>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a17      	ldr	r2, [pc, #92]	; (800c7b4 <TIM_OC4_SetConfig+0xc0>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d00b      	beq.n	800c774 <TIM_OC4_SetConfig+0x80>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a16      	ldr	r2, [pc, #88]	; (800c7b8 <TIM_OC4_SetConfig+0xc4>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d007      	beq.n	800c774 <TIM_OC4_SetConfig+0x80>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a15      	ldr	r2, [pc, #84]	; (800c7bc <TIM_OC4_SetConfig+0xc8>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d003      	beq.n	800c774 <TIM_OC4_SetConfig+0x80>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a14      	ldr	r2, [pc, #80]	; (800c7c0 <TIM_OC4_SetConfig+0xcc>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d109      	bne.n	800c788 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c77a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	019b      	lsls	r3, r3, #6
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4313      	orrs	r3, r2
 800c786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	40010000 	.word	0x40010000
 800c7b4:	40010400 	.word	0x40010400
 800c7b8:	40014000 	.word	0x40014000
 800c7bc:	40014400 	.word	0x40014400
 800c7c0:	40014800 	.word	0x40014800

0800c7c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	041b      	lsls	r3, r3, #16
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	4313      	orrs	r3, r2
 800c810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a17      	ldr	r2, [pc, #92]	; (800c874 <TIM_OC5_SetConfig+0xb0>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00f      	beq.n	800c83a <TIM_OC5_SetConfig+0x76>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a16      	ldr	r2, [pc, #88]	; (800c878 <TIM_OC5_SetConfig+0xb4>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d00b      	beq.n	800c83a <TIM_OC5_SetConfig+0x76>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a15      	ldr	r2, [pc, #84]	; (800c87c <TIM_OC5_SetConfig+0xb8>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d007      	beq.n	800c83a <TIM_OC5_SetConfig+0x76>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a14      	ldr	r2, [pc, #80]	; (800c880 <TIM_OC5_SetConfig+0xbc>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC5_SetConfig+0x76>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a13      	ldr	r2, [pc, #76]	; (800c884 <TIM_OC5_SetConfig+0xc0>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d109      	bne.n	800c84e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	021b      	lsls	r3, r3, #8
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	621a      	str	r2, [r3, #32]
}
 800c868:	bf00      	nop
 800c86a:	371c      	adds	r7, #28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	40010000 	.word	0x40010000
 800c878:	40010400 	.word	0x40010400
 800c87c:	40014000 	.word	0x40014000
 800c880:	40014400 	.word	0x40014400
 800c884:	40014800 	.word	0x40014800

0800c888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	051b      	lsls	r3, r3, #20
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a18      	ldr	r2, [pc, #96]	; (800c93c <TIM_OC6_SetConfig+0xb4>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00f      	beq.n	800c900 <TIM_OC6_SetConfig+0x78>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a17      	ldr	r2, [pc, #92]	; (800c940 <TIM_OC6_SetConfig+0xb8>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d00b      	beq.n	800c900 <TIM_OC6_SetConfig+0x78>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a16      	ldr	r2, [pc, #88]	; (800c944 <TIM_OC6_SetConfig+0xbc>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d007      	beq.n	800c900 <TIM_OC6_SetConfig+0x78>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a15      	ldr	r2, [pc, #84]	; (800c948 <TIM_OC6_SetConfig+0xc0>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d003      	beq.n	800c900 <TIM_OC6_SetConfig+0x78>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a14      	ldr	r2, [pc, #80]	; (800c94c <TIM_OC6_SetConfig+0xc4>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d109      	bne.n	800c914 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40014000 	.word	0x40014000
 800c948:	40014400 	.word	0x40014400
 800c94c:	40014800 	.word	0x40014800

0800c950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	f023 0201 	bic.w	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	011b      	lsls	r3, r3, #4
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4313      	orrs	r3, r2
 800c984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f023 030a 	bic.w	r3, r3, #10
 800c98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	f023 0210 	bic.w	r2, r3, #16
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
	...

0800ca10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <TIM_ITRx_SetConfig+0x38>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	f043 0307 	orr.w	r3, r3, #7
 800ca32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	609a      	str	r2, [r3, #8]
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	ffcfff8f 	.word	0xffcfff8f

0800ca4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	021a      	lsls	r2, r3, #8
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	609a      	str	r2, [r3, #8]
}
 800ca80:	bf00      	nop
 800ca82:	371c      	adds	r7, #28
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e068      	b.n	800cb76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a2e      	ldr	r2, [pc, #184]	; (800cb84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d004      	beq.n	800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a2d      	ldr	r2, [pc, #180]	; (800cb88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d108      	bne.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d01d      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb16:	d018      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a1b      	ldr	r2, [pc, #108]	; (800cb8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d013      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a1a      	ldr	r2, [pc, #104]	; (800cb90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d00e      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a18      	ldr	r2, [pc, #96]	; (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d009      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d004      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a14      	ldr	r2, [pc, #80]	; (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d10c      	bne.n	800cb64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	40010000 	.word	0x40010000
 800cb88:	40010400 	.word	0x40010400
 800cb8c:	40000400 	.word	0x40000400
 800cb90:	40000800 	.word	0x40000800
 800cb94:	40000c00 	.word	0x40000c00
 800cb98:	40001800 	.word	0x40001800

0800cb9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cba4:	bf00      	nop
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e042      	b.n	800cc70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7f5 ff15 	bl	8002a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2224      	movs	r2, #36	; 0x24
 800cc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f022 0201 	bic.w	r2, r2, #1
 800cc18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fd40 	bl	800d6a0 <UART_SetConfig>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e022      	b.n	800cc70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 fa94 	bl	800e160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	689a      	ldr	r2, [r3, #8]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f042 0201 	orr.w	r2, r2, #1
 800cc66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 fb1b 	bl	800e2a4 <UART_CheckIdleState>
 800cc6e:	4603      	mov	r3, r0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08a      	sub	sp, #40	; 0x28
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	4613      	mov	r3, r2
 800cc86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	f040 8083 	bne.w	800cd9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <HAL_UART_Transmit+0x28>
 800cc9a:	88fb      	ldrh	r3, [r7, #6]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e07b      	b.n	800cd9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d101      	bne.n	800ccb2 <HAL_UART_Transmit+0x3a>
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e074      	b.n	800cd9c <HAL_UART_Transmit+0x124>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2221      	movs	r2, #33	; 0x21
 800ccc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccca:	f7f6 fb4b 	bl	8003364 <HAL_GetTick>
 800ccce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	88fa      	ldrh	r2, [r7, #6]
 800ccd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	88fa      	ldrh	r2, [r7, #6]
 800ccdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cce8:	d108      	bne.n	800ccfc <HAL_UART_Transmit+0x84>
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d104      	bne.n	800ccfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	e003      	b.n	800cd04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cd0c:	e02c      	b.n	800cd68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2200      	movs	r2, #0
 800cd16:	2180      	movs	r1, #128	; 0x80
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f001 fb0e 	bl	800e33a <UART_WaitOnFlagUntilTimeout>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e039      	b.n	800cd9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	881b      	ldrh	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	3302      	adds	r3, #2
 800cd42:	61bb      	str	r3, [r7, #24]
 800cd44:	e007      	b.n	800cd56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	781a      	ldrb	r2, [r3, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	3301      	adds	r3, #1
 800cd54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1cc      	bne.n	800cd0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2140      	movs	r1, #64	; 0x40
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f001 fadb 	bl	800e33a <UART_WaitOnFlagUntilTimeout>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	e006      	b.n	800cd9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2220      	movs	r2, #32
 800cd92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e000      	b.n	800cd9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cd9a:	2302      	movs	r3, #2
  }
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08a      	sub	sp, #40	; 0x28
 800cda8:	af02      	add	r7, sp, #8
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdba:	2b20      	cmp	r3, #32
 800cdbc:	f040 80c0 	bne.w	800cf40 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <HAL_UART_Receive+0x28>
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e0b8      	b.n	800cf42 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d101      	bne.n	800cdde <HAL_UART_Receive+0x3a>
 800cdda:	2302      	movs	r3, #2
 800cddc:	e0b1      	b.n	800cf42 <HAL_UART_Receive+0x19e>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2222      	movs	r2, #34	; 0x22
 800cdf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdfc:	f7f6 fab2 	bl	8003364 <HAL_GetTick>
 800ce00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	88fa      	ldrh	r2, [r7, #6]
 800ce06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	88fa      	ldrh	r2, [r7, #6]
 800ce0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce1a:	d10e      	bne.n	800ce3a <HAL_UART_Receive+0x96>
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d105      	bne.n	800ce30 <HAL_UART_Receive+0x8c>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ce2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce2e:	e02d      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	22ff      	movs	r2, #255	; 0xff
 800ce34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce38:	e028      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10d      	bne.n	800ce5e <HAL_UART_Receive+0xba>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <HAL_UART_Receive+0xb0>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	22ff      	movs	r2, #255	; 0xff
 800ce4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce52:	e01b      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	227f      	movs	r2, #127	; 0x7f
 800ce58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce5c:	e016      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce66:	d10d      	bne.n	800ce84 <HAL_UART_Receive+0xe0>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d104      	bne.n	800ce7a <HAL_UART_Receive+0xd6>
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	227f      	movs	r2, #127	; 0x7f
 800ce74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce78:	e008      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	223f      	movs	r2, #63	; 0x3f
 800ce7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce82:	e003      	b.n	800ce8c <HAL_UART_Receive+0xe8>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce9c:	d108      	bne.n	800ceb0 <HAL_UART_Receive+0x10c>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d104      	bne.n	800ceb0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	61bb      	str	r3, [r7, #24]
 800ceae:	e003      	b.n	800ceb8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cec0:	e032      	b.n	800cf28 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2200      	movs	r2, #0
 800ceca:	2120      	movs	r1, #32
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f001 fa34 	bl	800e33a <UART_WaitOnFlagUntilTimeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e032      	b.n	800cf42 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10c      	bne.n	800cefc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	8a7b      	ldrh	r3, [r7, #18]
 800ceec:	4013      	ands	r3, r2
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	3302      	adds	r3, #2
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	e00c      	b.n	800cf16 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	8a7b      	ldrh	r3, [r7, #18]
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	4013      	ands	r3, r2
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	3301      	adds	r3, #1
 800cf14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1c6      	bne.n	800cec2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2220      	movs	r2, #32
 800cf38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e000      	b.n	800cf42 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800cf40:	2302      	movs	r3, #2
  }
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3720      	adds	r7, #32
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	4613      	mov	r3, r2
 800cf58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d168      	bne.n	800d036 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <HAL_UART_Transmit_DMA+0x24>
 800cf6a:	88fb      	ldrh	r3, [r7, #6]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e061      	b.n	800d038 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d101      	bne.n	800cf82 <HAL_UART_Transmit_DMA+0x36>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e05a      	b.n	800d038 <HAL_UART_Transmit_DMA+0xec>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	88fa      	ldrh	r2, [r7, #6]
 800cf9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2221      	movs	r2, #33	; 0x21
 800cfac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d02c      	beq.n	800d012 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfbc:	4a20      	ldr	r2, [pc, #128]	; (800d040 <HAL_UART_Transmit_DMA+0xf4>)
 800cfbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfc4:	4a1f      	ldr	r2, [pc, #124]	; (800d044 <HAL_UART_Transmit_DMA+0xf8>)
 800cfc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfcc:	4a1e      	ldr	r2, [pc, #120]	; (800d048 <HAL_UART_Transmit_DMA+0xfc>)
 800cfce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3328      	adds	r3, #40	; 0x28
 800cfe8:	461a      	mov	r2, r3
 800cfea:	88fb      	ldrh	r3, [r7, #6]
 800cfec:	f7f8 f896 	bl	800511c <HAL_DMA_Start_IT>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00d      	beq.n	800d012 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2210      	movs	r2, #16
 800cffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2220      	movs	r2, #32
 800d00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e012      	b.n	800d038 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2240      	movs	r2, #64	; 0x40
 800d018:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689a      	ldr	r2, [r3, #8]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d030:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	e000      	b.n	800d038 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800d036:	2302      	movs	r3, #2
  }
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	0800e5b9 	.word	0x0800e5b9
 800d044:	0800e609 	.word	0x0800e609
 800d048:	0800e6f3 	.word	0x0800e6f3

0800d04c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	4613      	mov	r3, r2
 800d058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d060:	2b20      	cmp	r3, #32
 800d062:	d131      	bne.n	800d0c8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <HAL_UART_Receive_DMA+0x24>
 800d06a:	88fb      	ldrh	r3, [r7, #6]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e02a      	b.n	800d0ca <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d101      	bne.n	800d082 <HAL_UART_Receive_DMA+0x36>
 800d07e:	2302      	movs	r3, #2
 800d080:	e023      	b.n	800d0ca <HAL_UART_Receive_DMA+0x7e>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2201      	movs	r2, #1
 800d086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a0f      	ldr	r2, [pc, #60]	; (800d0d4 <HAL_UART_Receive_DMA+0x88>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d00e      	beq.n	800d0b8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d007      	beq.n	800d0b8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d0b6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d0b8:	88fb      	ldrh	r3, [r7, #6]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	68b9      	ldr	r1, [r7, #8]
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f001 f9bc 	bl	800e43c <UART_Start_Receive_DMA>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	e000      	b.n	800d0ca <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800d0c8:	2302      	movs	r3, #2
  }
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	58000c00 	.word	0x58000c00

0800d0d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b088      	sub	sp, #32
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0f8:	69fa      	ldr	r2, [r7, #28]
 800d0fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800d0fe:	4013      	ands	r3, r2
 800d100:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d118      	bne.n	800d13a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	f003 0320 	and.w	r3, r3, #32
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d013      	beq.n	800d13a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	f003 0320 	and.w	r3, r3, #32
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d122:	2b00      	cmp	r3, #0
 800d124:	d009      	beq.n	800d13a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f000 8282 	beq.w	800d634 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	4798      	blx	r3
      }
      return;
 800d138:	e27c      	b.n	800d634 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 80ef 	beq.w	800d320 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	4b73      	ldr	r3, [pc, #460]	; (800d314 <HAL_UART_IRQHandler+0x23c>)
 800d146:	4013      	ands	r3, r2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d105      	bne.n	800d158 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	4b72      	ldr	r3, [pc, #456]	; (800d318 <HAL_UART_IRQHandler+0x240>)
 800d150:	4013      	ands	r3, r2
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 80e4 	beq.w	800d320 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d010      	beq.n	800d184 <HAL_UART_IRQHandler+0xac>
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00b      	beq.n	800d184 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2201      	movs	r2, #1
 800d172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d17a:	f043 0201 	orr.w	r2, r3, #1
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	f003 0302 	and.w	r3, r3, #2
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d010      	beq.n	800d1b0 <HAL_UART_IRQHandler+0xd8>
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2202      	movs	r2, #2
 800d19e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1a6:	f043 0204 	orr.w	r2, r3, #4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	f003 0304 	and.w	r3, r3, #4
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d010      	beq.n	800d1dc <HAL_UART_IRQHandler+0x104>
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f003 0301 	and.w	r3, r3, #1
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00b      	beq.n	800d1dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2204      	movs	r2, #4
 800d1ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1d2:	f043 0202 	orr.w	r2, r3, #2
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	f003 0308 	and.w	r3, r3, #8
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d015      	beq.n	800d212 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	f003 0320 	and.w	r3, r3, #32
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d104      	bne.n	800d1fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	4b48      	ldr	r3, [pc, #288]	; (800d314 <HAL_UART_IRQHandler+0x23c>)
 800d1f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00b      	beq.n	800d212 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2208      	movs	r2, #8
 800d200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d208:	f043 0208 	orr.w	r2, r3, #8
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d011      	beq.n	800d240 <HAL_UART_IRQHandler+0x168>
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00c      	beq.n	800d240 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d22e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d236:	f043 0220 	orr.w	r2, r3, #32
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d246:	2b00      	cmp	r3, #0
 800d248:	f000 81f6 	beq.w	800d638 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	f003 0320 	and.w	r3, r3, #32
 800d252:	2b00      	cmp	r3, #0
 800d254:	d011      	beq.n	800d27a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	f003 0320 	and.w	r3, r3, #32
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d104      	bne.n	800d26a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d280:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d28c:	2b40      	cmp	r3, #64	; 0x40
 800d28e:	d004      	beq.n	800d29a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d296:	2b00      	cmp	r3, #0
 800d298:	d031      	beq.n	800d2fe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f001 f95a 	bl	800e554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2aa:	2b40      	cmp	r3, #64	; 0x40
 800d2ac:	d123      	bne.n	800d2f6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	689a      	ldr	r2, [r3, #8]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d013      	beq.n	800d2ee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ca:	4a14      	ldr	r2, [pc, #80]	; (800d31c <HAL_UART_IRQHandler+0x244>)
 800d2cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f8 fcaa 	bl	8005c2c <HAL_DMA_Abort_IT>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d017      	beq.n	800d30e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ec:	e00f      	b.n	800d30e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f9c0 	bl	800d674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f4:	e00b      	b.n	800d30e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f9bc 	bl	800d674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2fc:	e007      	b.n	800d30e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f9b8 	bl	800d674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d30c:	e194      	b.n	800d638 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d30e:	bf00      	nop
    return;
 800d310:	e192      	b.n	800d638 <HAL_UART_IRQHandler+0x560>
 800d312:	bf00      	nop
 800d314:	10000001 	.word	0x10000001
 800d318:	04000120 	.word	0x04000120
 800d31c:	0800e773 	.word	0x0800e773

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d324:	2b01      	cmp	r3, #1
 800d326:	f040 810f 	bne.w	800d548 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	f000 8109 	beq.w	800d548 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	f003 0310 	and.w	r3, r3, #16
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 8103 	beq.w	800d548 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2210      	movs	r2, #16
 800d348:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d354:	2b40      	cmp	r3, #64	; 0x40
 800d356:	f040 80bb 	bne.w	800d4d0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a96      	ldr	r2, [pc, #600]	; (800d5bc <HAL_UART_IRQHandler+0x4e4>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d059      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a94      	ldr	r2, [pc, #592]	; (800d5c0 <HAL_UART_IRQHandler+0x4e8>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d053      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a92      	ldr	r2, [pc, #584]	; (800d5c4 <HAL_UART_IRQHandler+0x4ec>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d04d      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a90      	ldr	r2, [pc, #576]	; (800d5c8 <HAL_UART_IRQHandler+0x4f0>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d047      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a8e      	ldr	r2, [pc, #568]	; (800d5cc <HAL_UART_IRQHandler+0x4f4>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d041      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a8c      	ldr	r2, [pc, #560]	; (800d5d0 <HAL_UART_IRQHandler+0x4f8>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d03b      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a8a      	ldr	r2, [pc, #552]	; (800d5d4 <HAL_UART_IRQHandler+0x4fc>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d035      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a88      	ldr	r2, [pc, #544]	; (800d5d8 <HAL_UART_IRQHandler+0x500>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d02f      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a86      	ldr	r2, [pc, #536]	; (800d5dc <HAL_UART_IRQHandler+0x504>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d029      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a84      	ldr	r2, [pc, #528]	; (800d5e0 <HAL_UART_IRQHandler+0x508>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d023      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a82      	ldr	r2, [pc, #520]	; (800d5e4 <HAL_UART_IRQHandler+0x50c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d01d      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a80      	ldr	r2, [pc, #512]	; (800d5e8 <HAL_UART_IRQHandler+0x510>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d017      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a7e      	ldr	r2, [pc, #504]	; (800d5ec <HAL_UART_IRQHandler+0x514>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d011      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a7c      	ldr	r2, [pc, #496]	; (800d5f0 <HAL_UART_IRQHandler+0x518>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d00b      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a7a      	ldr	r2, [pc, #488]	; (800d5f4 <HAL_UART_IRQHandler+0x51c>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d005      	beq.n	800d41a <HAL_UART_IRQHandler+0x342>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a78      	ldr	r2, [pc, #480]	; (800d5f8 <HAL_UART_IRQHandler+0x520>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d105      	bne.n	800d426 <HAL_UART_IRQHandler+0x34e>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	b29b      	uxth	r3, r3
 800d424:	e004      	b.n	800d430 <HAL_UART_IRQHandler+0x358>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800d432:	893b      	ldrh	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 8101 	beq.w	800d63c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d440:	893a      	ldrh	r2, [r7, #8]
 800d442:	429a      	cmp	r2, r3
 800d444:	f080 80fa 	bcs.w	800d63c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	893a      	ldrh	r2, [r7, #8]
 800d44c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d45a:	d02b      	beq.n	800d4b4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d46a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689a      	ldr	r2, [r3, #8]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0201 	bic.w	r2, r2, #1
 800d47a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d48a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2220      	movs	r2, #32
 800d490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f022 0210 	bic.w	r2, r2, #16
 800d4a8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7f8 f89e 	bl	80055f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f8dd 	bl	800d688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4ce:	e0b5      	b.n	800d63c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 80a8 	beq.w	800d640 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800d4f0:	897b      	ldrh	r3, [r7, #10]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 80a4 	beq.w	800d640 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d506:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6899      	ldr	r1, [r3, #8]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	4b3a      	ldr	r3, [pc, #232]	; (800d5fc <HAL_UART_IRQHandler+0x524>)
 800d514:	400b      	ands	r3, r1
 800d516:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2220      	movs	r2, #32
 800d51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 0210 	bic.w	r2, r2, #16
 800d53a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d53c:	897b      	ldrh	r3, [r7, #10]
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f8a1 	bl	800d688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d546:	e07b      	b.n	800d640 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00d      	beq.n	800d56e <HAL_UART_IRQHandler+0x496>
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d008      	beq.n	800d56e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 f933 	bl	800e7d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d56c:	e06b      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d574:	2b00      	cmp	r3, #0
 800d576:	d012      	beq.n	800d59e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d104      	bne.n	800d58c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d008      	beq.n	800d59e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d590:	2b00      	cmp	r3, #0
 800d592:	d057      	beq.n	800d644 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	4798      	blx	r3
    }
    return;
 800d59c:	e052      	b.n	800d644 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d02b      	beq.n	800d600 <HAL_UART_IRQHandler+0x528>
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d026      	beq.n	800d600 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 f8f3 	bl	800e79e <UART_EndTransmit_IT>
    return;
 800d5b8:	e045      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
 800d5ba:	bf00      	nop
 800d5bc:	40020010 	.word	0x40020010
 800d5c0:	40020028 	.word	0x40020028
 800d5c4:	40020040 	.word	0x40020040
 800d5c8:	40020058 	.word	0x40020058
 800d5cc:	40020070 	.word	0x40020070
 800d5d0:	40020088 	.word	0x40020088
 800d5d4:	400200a0 	.word	0x400200a0
 800d5d8:	400200b8 	.word	0x400200b8
 800d5dc:	40020410 	.word	0x40020410
 800d5e0:	40020428 	.word	0x40020428
 800d5e4:	40020440 	.word	0x40020440
 800d5e8:	40020458 	.word	0x40020458
 800d5ec:	40020470 	.word	0x40020470
 800d5f0:	40020488 	.word	0x40020488
 800d5f4:	400204a0 	.word	0x400204a0
 800d5f8:	400204b8 	.word	0x400204b8
 800d5fc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d008      	beq.n	800d61c <HAL_UART_IRQHandler+0x544>
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f001 f8f0 	bl	800e7fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d61a:	e014      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00f      	beq.n	800d646 <HAL_UART_IRQHandler+0x56e>
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	da0c      	bge.n	800d646 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 f8da 	bl	800e7e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d632:	e008      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
      return;
 800d634:	bf00      	nop
 800d636:	e006      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
    return;
 800d638:	bf00      	nop
 800d63a:	e004      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
      return;
 800d63c:	bf00      	nop
 800d63e:	e002      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
      return;
 800d640:	bf00      	nop
 800d642:	e000      	b.n	800d646 <HAL_UART_IRQHandler+0x56e>
    return;
 800d644:	bf00      	nop
  }
}
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d668:	bf00      	nop
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6a0:	b5b0      	push	{r4, r5, r7, lr}
 800d6a2:	b08e      	sub	sp, #56	; 0x38
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	689a      	ldr	r2, [r3, #8]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	4bbf      	ldr	r3, [pc, #764]	; (800d9cc <UART_SetConfig+0x32c>)
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	6812      	ldr	r2, [r2, #0]
 800d6d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6d6:	430b      	orrs	r3, r1
 800d6d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68da      	ldr	r2, [r3, #12]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	699b      	ldr	r3, [r3, #24]
 800d6f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4ab5      	ldr	r2, [pc, #724]	; (800d9d0 <UART_SetConfig+0x330>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d004      	beq.n	800d70a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a1b      	ldr	r3, [r3, #32]
 800d704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d706:	4313      	orrs	r3, r2
 800d708:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	689a      	ldr	r2, [r3, #8]
 800d710:	4bb0      	ldr	r3, [pc, #704]	; (800d9d4 <UART_SetConfig+0x334>)
 800d712:	4013      	ands	r3, r2
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	6812      	ldr	r2, [r2, #0]
 800d718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d71a:	430b      	orrs	r3, r1
 800d71c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	f023 010f 	bic.w	r1, r3, #15
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4aa7      	ldr	r2, [pc, #668]	; (800d9d8 <UART_SetConfig+0x338>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d176      	bne.n	800d82c <UART_SetConfig+0x18c>
 800d73e:	4ba7      	ldr	r3, [pc, #668]	; (800d9dc <UART_SetConfig+0x33c>)
 800d740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d746:	2b28      	cmp	r3, #40	; 0x28
 800d748:	d86c      	bhi.n	800d824 <UART_SetConfig+0x184>
 800d74a:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <UART_SetConfig+0xb0>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d7f5 	.word	0x0800d7f5
 800d754:	0800d825 	.word	0x0800d825
 800d758:	0800d825 	.word	0x0800d825
 800d75c:	0800d825 	.word	0x0800d825
 800d760:	0800d825 	.word	0x0800d825
 800d764:	0800d825 	.word	0x0800d825
 800d768:	0800d825 	.word	0x0800d825
 800d76c:	0800d825 	.word	0x0800d825
 800d770:	0800d7fd 	.word	0x0800d7fd
 800d774:	0800d825 	.word	0x0800d825
 800d778:	0800d825 	.word	0x0800d825
 800d77c:	0800d825 	.word	0x0800d825
 800d780:	0800d825 	.word	0x0800d825
 800d784:	0800d825 	.word	0x0800d825
 800d788:	0800d825 	.word	0x0800d825
 800d78c:	0800d825 	.word	0x0800d825
 800d790:	0800d805 	.word	0x0800d805
 800d794:	0800d825 	.word	0x0800d825
 800d798:	0800d825 	.word	0x0800d825
 800d79c:	0800d825 	.word	0x0800d825
 800d7a0:	0800d825 	.word	0x0800d825
 800d7a4:	0800d825 	.word	0x0800d825
 800d7a8:	0800d825 	.word	0x0800d825
 800d7ac:	0800d825 	.word	0x0800d825
 800d7b0:	0800d80d 	.word	0x0800d80d
 800d7b4:	0800d825 	.word	0x0800d825
 800d7b8:	0800d825 	.word	0x0800d825
 800d7bc:	0800d825 	.word	0x0800d825
 800d7c0:	0800d825 	.word	0x0800d825
 800d7c4:	0800d825 	.word	0x0800d825
 800d7c8:	0800d825 	.word	0x0800d825
 800d7cc:	0800d825 	.word	0x0800d825
 800d7d0:	0800d815 	.word	0x0800d815
 800d7d4:	0800d825 	.word	0x0800d825
 800d7d8:	0800d825 	.word	0x0800d825
 800d7dc:	0800d825 	.word	0x0800d825
 800d7e0:	0800d825 	.word	0x0800d825
 800d7e4:	0800d825 	.word	0x0800d825
 800d7e8:	0800d825 	.word	0x0800d825
 800d7ec:	0800d825 	.word	0x0800d825
 800d7f0:	0800d81d 	.word	0x0800d81d
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7fa:	e222      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d7fc:	2304      	movs	r3, #4
 800d7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d802:	e21e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d804:	2308      	movs	r3, #8
 800d806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d80a:	e21a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d80c:	2310      	movs	r3, #16
 800d80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d812:	e216      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d814:	2320      	movs	r3, #32
 800d816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d81a:	e212      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d81c:	2340      	movs	r3, #64	; 0x40
 800d81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d822:	e20e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d824:	2380      	movs	r3, #128	; 0x80
 800d826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d82a:	e20a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a6b      	ldr	r2, [pc, #428]	; (800d9e0 <UART_SetConfig+0x340>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d130      	bne.n	800d898 <UART_SetConfig+0x1f8>
 800d836:	4b69      	ldr	r3, [pc, #420]	; (800d9dc <UART_SetConfig+0x33c>)
 800d838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	2b05      	cmp	r3, #5
 800d840:	d826      	bhi.n	800d890 <UART_SetConfig+0x1f0>
 800d842:	a201      	add	r2, pc, #4	; (adr r2, 800d848 <UART_SetConfig+0x1a8>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d861 	.word	0x0800d861
 800d84c:	0800d869 	.word	0x0800d869
 800d850:	0800d871 	.word	0x0800d871
 800d854:	0800d879 	.word	0x0800d879
 800d858:	0800d881 	.word	0x0800d881
 800d85c:	0800d889 	.word	0x0800d889
 800d860:	2300      	movs	r3, #0
 800d862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d866:	e1ec      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d868:	2304      	movs	r3, #4
 800d86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d86e:	e1e8      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d870:	2308      	movs	r3, #8
 800d872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d876:	e1e4      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d878:	2310      	movs	r3, #16
 800d87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d87e:	e1e0      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d880:	2320      	movs	r3, #32
 800d882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d886:	e1dc      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d888:	2340      	movs	r3, #64	; 0x40
 800d88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d88e:	e1d8      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d890:	2380      	movs	r3, #128	; 0x80
 800d892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d896:	e1d4      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a51      	ldr	r2, [pc, #324]	; (800d9e4 <UART_SetConfig+0x344>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d130      	bne.n	800d904 <UART_SetConfig+0x264>
 800d8a2:	4b4e      	ldr	r3, [pc, #312]	; (800d9dc <UART_SetConfig+0x33c>)
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a6:	f003 0307 	and.w	r3, r3, #7
 800d8aa:	2b05      	cmp	r3, #5
 800d8ac:	d826      	bhi.n	800d8fc <UART_SetConfig+0x25c>
 800d8ae:	a201      	add	r2, pc, #4	; (adr r2, 800d8b4 <UART_SetConfig+0x214>)
 800d8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b4:	0800d8cd 	.word	0x0800d8cd
 800d8b8:	0800d8d5 	.word	0x0800d8d5
 800d8bc:	0800d8dd 	.word	0x0800d8dd
 800d8c0:	0800d8e5 	.word	0x0800d8e5
 800d8c4:	0800d8ed 	.word	0x0800d8ed
 800d8c8:	0800d8f5 	.word	0x0800d8f5
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8d2:	e1b6      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8d4:	2304      	movs	r3, #4
 800d8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8da:	e1b2      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8dc:	2308      	movs	r3, #8
 800d8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8e2:	e1ae      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ea:	e1aa      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8ec:	2320      	movs	r3, #32
 800d8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8f2:	e1a6      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8f4:	2340      	movs	r3, #64	; 0x40
 800d8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8fa:	e1a2      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d8fc:	2380      	movs	r3, #128	; 0x80
 800d8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d902:	e19e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a37      	ldr	r2, [pc, #220]	; (800d9e8 <UART_SetConfig+0x348>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d130      	bne.n	800d970 <UART_SetConfig+0x2d0>
 800d90e:	4b33      	ldr	r3, [pc, #204]	; (800d9dc <UART_SetConfig+0x33c>)
 800d910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d912:	f003 0307 	and.w	r3, r3, #7
 800d916:	2b05      	cmp	r3, #5
 800d918:	d826      	bhi.n	800d968 <UART_SetConfig+0x2c8>
 800d91a:	a201      	add	r2, pc, #4	; (adr r2, 800d920 <UART_SetConfig+0x280>)
 800d91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d920:	0800d939 	.word	0x0800d939
 800d924:	0800d941 	.word	0x0800d941
 800d928:	0800d949 	.word	0x0800d949
 800d92c:	0800d951 	.word	0x0800d951
 800d930:	0800d959 	.word	0x0800d959
 800d934:	0800d961 	.word	0x0800d961
 800d938:	2300      	movs	r3, #0
 800d93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d93e:	e180      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d940:	2304      	movs	r3, #4
 800d942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d946:	e17c      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d948:	2308      	movs	r3, #8
 800d94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d94e:	e178      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d950:	2310      	movs	r3, #16
 800d952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d956:	e174      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d958:	2320      	movs	r3, #32
 800d95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d95e:	e170      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d960:	2340      	movs	r3, #64	; 0x40
 800d962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d966:	e16c      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d968:	2380      	movs	r3, #128	; 0x80
 800d96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d96e:	e168      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a1d      	ldr	r2, [pc, #116]	; (800d9ec <UART_SetConfig+0x34c>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d142      	bne.n	800da00 <UART_SetConfig+0x360>
 800d97a:	4b18      	ldr	r3, [pc, #96]	; (800d9dc <UART_SetConfig+0x33c>)
 800d97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	2b05      	cmp	r3, #5
 800d984:	d838      	bhi.n	800d9f8 <UART_SetConfig+0x358>
 800d986:	a201      	add	r2, pc, #4	; (adr r2, 800d98c <UART_SetConfig+0x2ec>)
 800d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98c:	0800d9a5 	.word	0x0800d9a5
 800d990:	0800d9ad 	.word	0x0800d9ad
 800d994:	0800d9b5 	.word	0x0800d9b5
 800d998:	0800d9bd 	.word	0x0800d9bd
 800d99c:	0800d9c5 	.word	0x0800d9c5
 800d9a0:	0800d9f1 	.word	0x0800d9f1
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9aa:	e14a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9ac:	2304      	movs	r3, #4
 800d9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9b2:	e146      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9b4:	2308      	movs	r3, #8
 800d9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ba:	e142      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9bc:	2310      	movs	r3, #16
 800d9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9c2:	e13e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9c4:	2320      	movs	r3, #32
 800d9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ca:	e13a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9cc:	cfff69f3 	.word	0xcfff69f3
 800d9d0:	58000c00 	.word	0x58000c00
 800d9d4:	11fff4ff 	.word	0x11fff4ff
 800d9d8:	40011000 	.word	0x40011000
 800d9dc:	58024400 	.word	0x58024400
 800d9e0:	40004400 	.word	0x40004400
 800d9e4:	40004800 	.word	0x40004800
 800d9e8:	40004c00 	.word	0x40004c00
 800d9ec:	40005000 	.word	0x40005000
 800d9f0:	2340      	movs	r3, #64	; 0x40
 800d9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9f6:	e124      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800d9f8:	2380      	movs	r3, #128	; 0x80
 800d9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9fe:	e120      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4acc      	ldr	r2, [pc, #816]	; (800dd38 <UART_SetConfig+0x698>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d176      	bne.n	800daf8 <UART_SetConfig+0x458>
 800da0a:	4bcc      	ldr	r3, [pc, #816]	; (800dd3c <UART_SetConfig+0x69c>)
 800da0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da12:	2b28      	cmp	r3, #40	; 0x28
 800da14:	d86c      	bhi.n	800daf0 <UART_SetConfig+0x450>
 800da16:	a201      	add	r2, pc, #4	; (adr r2, 800da1c <UART_SetConfig+0x37c>)
 800da18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1c:	0800dac1 	.word	0x0800dac1
 800da20:	0800daf1 	.word	0x0800daf1
 800da24:	0800daf1 	.word	0x0800daf1
 800da28:	0800daf1 	.word	0x0800daf1
 800da2c:	0800daf1 	.word	0x0800daf1
 800da30:	0800daf1 	.word	0x0800daf1
 800da34:	0800daf1 	.word	0x0800daf1
 800da38:	0800daf1 	.word	0x0800daf1
 800da3c:	0800dac9 	.word	0x0800dac9
 800da40:	0800daf1 	.word	0x0800daf1
 800da44:	0800daf1 	.word	0x0800daf1
 800da48:	0800daf1 	.word	0x0800daf1
 800da4c:	0800daf1 	.word	0x0800daf1
 800da50:	0800daf1 	.word	0x0800daf1
 800da54:	0800daf1 	.word	0x0800daf1
 800da58:	0800daf1 	.word	0x0800daf1
 800da5c:	0800dad1 	.word	0x0800dad1
 800da60:	0800daf1 	.word	0x0800daf1
 800da64:	0800daf1 	.word	0x0800daf1
 800da68:	0800daf1 	.word	0x0800daf1
 800da6c:	0800daf1 	.word	0x0800daf1
 800da70:	0800daf1 	.word	0x0800daf1
 800da74:	0800daf1 	.word	0x0800daf1
 800da78:	0800daf1 	.word	0x0800daf1
 800da7c:	0800dad9 	.word	0x0800dad9
 800da80:	0800daf1 	.word	0x0800daf1
 800da84:	0800daf1 	.word	0x0800daf1
 800da88:	0800daf1 	.word	0x0800daf1
 800da8c:	0800daf1 	.word	0x0800daf1
 800da90:	0800daf1 	.word	0x0800daf1
 800da94:	0800daf1 	.word	0x0800daf1
 800da98:	0800daf1 	.word	0x0800daf1
 800da9c:	0800dae1 	.word	0x0800dae1
 800daa0:	0800daf1 	.word	0x0800daf1
 800daa4:	0800daf1 	.word	0x0800daf1
 800daa8:	0800daf1 	.word	0x0800daf1
 800daac:	0800daf1 	.word	0x0800daf1
 800dab0:	0800daf1 	.word	0x0800daf1
 800dab4:	0800daf1 	.word	0x0800daf1
 800dab8:	0800daf1 	.word	0x0800daf1
 800dabc:	0800dae9 	.word	0x0800dae9
 800dac0:	2301      	movs	r3, #1
 800dac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dac6:	e0bc      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dac8:	2304      	movs	r3, #4
 800daca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dace:	e0b8      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dad0:	2308      	movs	r3, #8
 800dad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dad6:	e0b4      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dad8:	2310      	movs	r3, #16
 800dada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dade:	e0b0      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dae0:	2320      	movs	r3, #32
 800dae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dae6:	e0ac      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dae8:	2340      	movs	r3, #64	; 0x40
 800daea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daee:	e0a8      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800daf0:	2380      	movs	r3, #128	; 0x80
 800daf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daf6:	e0a4      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a90      	ldr	r2, [pc, #576]	; (800dd40 <UART_SetConfig+0x6a0>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d130      	bne.n	800db64 <UART_SetConfig+0x4c4>
 800db02:	4b8e      	ldr	r3, [pc, #568]	; (800dd3c <UART_SetConfig+0x69c>)
 800db04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db06:	f003 0307 	and.w	r3, r3, #7
 800db0a:	2b05      	cmp	r3, #5
 800db0c:	d826      	bhi.n	800db5c <UART_SetConfig+0x4bc>
 800db0e:	a201      	add	r2, pc, #4	; (adr r2, 800db14 <UART_SetConfig+0x474>)
 800db10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db14:	0800db2d 	.word	0x0800db2d
 800db18:	0800db35 	.word	0x0800db35
 800db1c:	0800db3d 	.word	0x0800db3d
 800db20:	0800db45 	.word	0x0800db45
 800db24:	0800db4d 	.word	0x0800db4d
 800db28:	0800db55 	.word	0x0800db55
 800db2c:	2300      	movs	r3, #0
 800db2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db32:	e086      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db34:	2304      	movs	r3, #4
 800db36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db3a:	e082      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db3c:	2308      	movs	r3, #8
 800db3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db42:	e07e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db44:	2310      	movs	r3, #16
 800db46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db4a:	e07a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db4c:	2320      	movs	r3, #32
 800db4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db52:	e076      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db54:	2340      	movs	r3, #64	; 0x40
 800db56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db5a:	e072      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db5c:	2380      	movs	r3, #128	; 0x80
 800db5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db62:	e06e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a76      	ldr	r2, [pc, #472]	; (800dd44 <UART_SetConfig+0x6a4>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d130      	bne.n	800dbd0 <UART_SetConfig+0x530>
 800db6e:	4b73      	ldr	r3, [pc, #460]	; (800dd3c <UART_SetConfig+0x69c>)
 800db70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	2b05      	cmp	r3, #5
 800db78:	d826      	bhi.n	800dbc8 <UART_SetConfig+0x528>
 800db7a:	a201      	add	r2, pc, #4	; (adr r2, 800db80 <UART_SetConfig+0x4e0>)
 800db7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db80:	0800db99 	.word	0x0800db99
 800db84:	0800dba1 	.word	0x0800dba1
 800db88:	0800dba9 	.word	0x0800dba9
 800db8c:	0800dbb1 	.word	0x0800dbb1
 800db90:	0800dbb9 	.word	0x0800dbb9
 800db94:	0800dbc1 	.word	0x0800dbc1
 800db98:	2300      	movs	r3, #0
 800db9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db9e:	e050      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dba0:	2304      	movs	r3, #4
 800dba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dba6:	e04c      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dba8:	2308      	movs	r3, #8
 800dbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbae:	e048      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dbb0:	2310      	movs	r3, #16
 800dbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbb6:	e044      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dbb8:	2320      	movs	r3, #32
 800dbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbbe:	e040      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dbc0:	2340      	movs	r3, #64	; 0x40
 800dbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbc6:	e03c      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dbc8:	2380      	movs	r3, #128	; 0x80
 800dbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbce:	e038      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a5c      	ldr	r2, [pc, #368]	; (800dd48 <UART_SetConfig+0x6a8>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d130      	bne.n	800dc3c <UART_SetConfig+0x59c>
 800dbda:	4b58      	ldr	r3, [pc, #352]	; (800dd3c <UART_SetConfig+0x69c>)
 800dbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbde:	f003 0307 	and.w	r3, r3, #7
 800dbe2:	2b05      	cmp	r3, #5
 800dbe4:	d826      	bhi.n	800dc34 <UART_SetConfig+0x594>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <UART_SetConfig+0x54c>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc05 	.word	0x0800dc05
 800dbf0:	0800dc0d 	.word	0x0800dc0d
 800dbf4:	0800dc15 	.word	0x0800dc15
 800dbf8:	0800dc1d 	.word	0x0800dc1d
 800dbfc:	0800dc25 	.word	0x0800dc25
 800dc00:	0800dc2d 	.word	0x0800dc2d
 800dc04:	2302      	movs	r3, #2
 800dc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc0a:	e01a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc0c:	2304      	movs	r3, #4
 800dc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc12:	e016      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc14:	2308      	movs	r3, #8
 800dc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc1a:	e012      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc1c:	2310      	movs	r3, #16
 800dc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc22:	e00e      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc24:	2320      	movs	r3, #32
 800dc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc2a:	e00a      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc2c:	2340      	movs	r3, #64	; 0x40
 800dc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc32:	e006      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc34:	2380      	movs	r3, #128	; 0x80
 800dc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc3a:	e002      	b.n	800dc42 <UART_SetConfig+0x5a2>
 800dc3c:	2380      	movs	r3, #128	; 0x80
 800dc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a40      	ldr	r2, [pc, #256]	; (800dd48 <UART_SetConfig+0x6a8>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	f040 80ef 	bne.w	800de2c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc52:	2b20      	cmp	r3, #32
 800dc54:	dc46      	bgt.n	800dce4 <UART_SetConfig+0x644>
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	f2c0 8081 	blt.w	800dd5e <UART_SetConfig+0x6be>
 800dc5c:	3b02      	subs	r3, #2
 800dc5e:	2b1e      	cmp	r3, #30
 800dc60:	d87d      	bhi.n	800dd5e <UART_SetConfig+0x6be>
 800dc62:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <UART_SetConfig+0x5c8>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dceb 	.word	0x0800dceb
 800dc6c:	0800dd5f 	.word	0x0800dd5f
 800dc70:	0800dcf3 	.word	0x0800dcf3
 800dc74:	0800dd5f 	.word	0x0800dd5f
 800dc78:	0800dd5f 	.word	0x0800dd5f
 800dc7c:	0800dd5f 	.word	0x0800dd5f
 800dc80:	0800dd03 	.word	0x0800dd03
 800dc84:	0800dd5f 	.word	0x0800dd5f
 800dc88:	0800dd5f 	.word	0x0800dd5f
 800dc8c:	0800dd5f 	.word	0x0800dd5f
 800dc90:	0800dd5f 	.word	0x0800dd5f
 800dc94:	0800dd5f 	.word	0x0800dd5f
 800dc98:	0800dd5f 	.word	0x0800dd5f
 800dc9c:	0800dd5f 	.word	0x0800dd5f
 800dca0:	0800dd13 	.word	0x0800dd13
 800dca4:	0800dd5f 	.word	0x0800dd5f
 800dca8:	0800dd5f 	.word	0x0800dd5f
 800dcac:	0800dd5f 	.word	0x0800dd5f
 800dcb0:	0800dd5f 	.word	0x0800dd5f
 800dcb4:	0800dd5f 	.word	0x0800dd5f
 800dcb8:	0800dd5f 	.word	0x0800dd5f
 800dcbc:	0800dd5f 	.word	0x0800dd5f
 800dcc0:	0800dd5f 	.word	0x0800dd5f
 800dcc4:	0800dd5f 	.word	0x0800dd5f
 800dcc8:	0800dd5f 	.word	0x0800dd5f
 800dccc:	0800dd5f 	.word	0x0800dd5f
 800dcd0:	0800dd5f 	.word	0x0800dd5f
 800dcd4:	0800dd5f 	.word	0x0800dd5f
 800dcd8:	0800dd5f 	.word	0x0800dd5f
 800dcdc:	0800dd5f 	.word	0x0800dd5f
 800dce0:	0800dd51 	.word	0x0800dd51
 800dce4:	2b40      	cmp	r3, #64	; 0x40
 800dce6:	d036      	beq.n	800dd56 <UART_SetConfig+0x6b6>
 800dce8:	e039      	b.n	800dd5e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dcea:	f7fc fb8f 	bl	800a40c <HAL_RCCEx_GetD3PCLK1Freq>
 800dcee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dcf0:	e03b      	b.n	800dd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcf2:	f107 0314 	add.w	r3, r7, #20
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fc fb9e 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd00:	e033      	b.n	800dd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd02:	f107 0308 	add.w	r3, r7, #8
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fc fcea 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd10:	e02b      	b.n	800dd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd12:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <UART_SetConfig+0x69c>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d009      	beq.n	800dd32 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd1e:	4b07      	ldr	r3, [pc, #28]	; (800dd3c <UART_SetConfig+0x69c>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	08db      	lsrs	r3, r3, #3
 800dd24:	f003 0303 	and.w	r3, r3, #3
 800dd28:	4a08      	ldr	r2, [pc, #32]	; (800dd4c <UART_SetConfig+0x6ac>)
 800dd2a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd30:	e01b      	b.n	800dd6a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800dd32:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <UART_SetConfig+0x6ac>)
 800dd34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd36:	e018      	b.n	800dd6a <UART_SetConfig+0x6ca>
 800dd38:	40011400 	.word	0x40011400
 800dd3c:	58024400 	.word	0x58024400
 800dd40:	40007800 	.word	0x40007800
 800dd44:	40007c00 	.word	0x40007c00
 800dd48:	58000c00 	.word	0x58000c00
 800dd4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd50:	4bc4      	ldr	r3, [pc, #784]	; (800e064 <UART_SetConfig+0x9c4>)
 800dd52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd54:	e009      	b.n	800dd6a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd5c:	e005      	b.n	800dd6a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dd68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f000 81da 	beq.w	800e126 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd76:	4abc      	ldr	r2, [pc, #752]	; (800e068 <UART_SetConfig+0x9c8>)
 800dd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685a      	ldr	r2, [r3, #4]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	6a3a      	ldr	r2, [r7, #32]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d305      	bcc.n	800dda2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd9c:	6a3a      	ldr	r2, [r7, #32]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d903      	bls.n	800ddaa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dda8:	e1bd      	b.n	800e126 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	4618      	mov	r0, r3
 800ddae:	f04f 0100 	mov.w	r1, #0
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	4aac      	ldr	r2, [pc, #688]	; (800e068 <UART_SetConfig+0x9c8>)
 800ddb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	f04f 0300 	mov.w	r3, #0
 800ddc2:	f7f2 fae5 	bl	8000390 <__aeabi_uldivmod>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4610      	mov	r0, r2
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f04f 0200 	mov.w	r2, #0
 800ddd2:	f04f 0300 	mov.w	r3, #0
 800ddd6:	020b      	lsls	r3, r1, #8
 800ddd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dddc:	0202      	lsls	r2, r0, #8
 800ddde:	6879      	ldr	r1, [r7, #4]
 800dde0:	6849      	ldr	r1, [r1, #4]
 800dde2:	0849      	lsrs	r1, r1, #1
 800dde4:	4608      	mov	r0, r1
 800dde6:	f04f 0100 	mov.w	r1, #0
 800ddea:	1814      	adds	r4, r2, r0
 800ddec:	eb43 0501 	adc.w	r5, r3, r1
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	f04f 0300 	mov.w	r3, #0
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	f7f2 fac7 	bl	8000390 <__aeabi_uldivmod>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	4613      	mov	r3, r2
 800de08:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de10:	d308      	bcc.n	800de24 <UART_SetConfig+0x784>
 800de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de18:	d204      	bcs.n	800de24 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de20:	60da      	str	r2, [r3, #12]
 800de22:	e180      	b.n	800e126 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800de24:	2301      	movs	r3, #1
 800de26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800de2a:	e17c      	b.n	800e126 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	69db      	ldr	r3, [r3, #28]
 800de30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de34:	f040 80bf 	bne.w	800dfb6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800de38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	dc49      	bgt.n	800ded4 <UART_SetConfig+0x834>
 800de40:	2b00      	cmp	r3, #0
 800de42:	db7c      	blt.n	800df3e <UART_SetConfig+0x89e>
 800de44:	2b20      	cmp	r3, #32
 800de46:	d87a      	bhi.n	800df3e <UART_SetConfig+0x89e>
 800de48:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0x7b0>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800dedb 	.word	0x0800dedb
 800de54:	0800dee3 	.word	0x0800dee3
 800de58:	0800df3f 	.word	0x0800df3f
 800de5c:	0800df3f 	.word	0x0800df3f
 800de60:	0800deeb 	.word	0x0800deeb
 800de64:	0800df3f 	.word	0x0800df3f
 800de68:	0800df3f 	.word	0x0800df3f
 800de6c:	0800df3f 	.word	0x0800df3f
 800de70:	0800defb 	.word	0x0800defb
 800de74:	0800df3f 	.word	0x0800df3f
 800de78:	0800df3f 	.word	0x0800df3f
 800de7c:	0800df3f 	.word	0x0800df3f
 800de80:	0800df3f 	.word	0x0800df3f
 800de84:	0800df3f 	.word	0x0800df3f
 800de88:	0800df3f 	.word	0x0800df3f
 800de8c:	0800df3f 	.word	0x0800df3f
 800de90:	0800df0b 	.word	0x0800df0b
 800de94:	0800df3f 	.word	0x0800df3f
 800de98:	0800df3f 	.word	0x0800df3f
 800de9c:	0800df3f 	.word	0x0800df3f
 800dea0:	0800df3f 	.word	0x0800df3f
 800dea4:	0800df3f 	.word	0x0800df3f
 800dea8:	0800df3f 	.word	0x0800df3f
 800deac:	0800df3f 	.word	0x0800df3f
 800deb0:	0800df3f 	.word	0x0800df3f
 800deb4:	0800df3f 	.word	0x0800df3f
 800deb8:	0800df3f 	.word	0x0800df3f
 800debc:	0800df3f 	.word	0x0800df3f
 800dec0:	0800df3f 	.word	0x0800df3f
 800dec4:	0800df3f 	.word	0x0800df3f
 800dec8:	0800df3f 	.word	0x0800df3f
 800decc:	0800df3f 	.word	0x0800df3f
 800ded0:	0800df31 	.word	0x0800df31
 800ded4:	2b40      	cmp	r3, #64	; 0x40
 800ded6:	d02e      	beq.n	800df36 <UART_SetConfig+0x896>
 800ded8:	e031      	b.n	800df3e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deda:	f7fa fe17 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 800dede:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dee0:	e033      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dee2:	f7fa fe29 	bl	8008b38 <HAL_RCC_GetPCLK2Freq>
 800dee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dee8:	e02f      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deea:	f107 0314 	add.w	r3, r7, #20
 800deee:	4618      	mov	r0, r3
 800def0:	f7fc faa2 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800def8:	e027      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800defa:	f107 0308 	add.w	r3, r7, #8
 800defe:	4618      	mov	r0, r3
 800df00:	f7fc fbee 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df08:	e01f      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df0a:	4b58      	ldr	r3, [pc, #352]	; (800e06c <UART_SetConfig+0x9cc>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0320 	and.w	r3, r3, #32
 800df12:	2b00      	cmp	r3, #0
 800df14:	d009      	beq.n	800df2a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df16:	4b55      	ldr	r3, [pc, #340]	; (800e06c <UART_SetConfig+0x9cc>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	08db      	lsrs	r3, r3, #3
 800df1c:	f003 0303 	and.w	r3, r3, #3
 800df20:	4a53      	ldr	r2, [pc, #332]	; (800e070 <UART_SetConfig+0x9d0>)
 800df22:	fa22 f303 	lsr.w	r3, r2, r3
 800df26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df28:	e00f      	b.n	800df4a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800df2a:	4b51      	ldr	r3, [pc, #324]	; (800e070 <UART_SetConfig+0x9d0>)
 800df2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df2e:	e00c      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df30:	4b4c      	ldr	r3, [pc, #304]	; (800e064 <UART_SetConfig+0x9c4>)
 800df32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df34:	e009      	b.n	800df4a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df3c:	e005      	b.n	800df4a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800df3e:	2300      	movs	r3, #0
 800df40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800df42:	2301      	movs	r3, #1
 800df44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800df48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f000 80ea 	beq.w	800e126 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df56:	4a44      	ldr	r2, [pc, #272]	; (800e068 <UART_SetConfig+0x9c8>)
 800df58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df5c:	461a      	mov	r2, r3
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	fbb3 f3f2 	udiv	r3, r3, r2
 800df64:	005a      	lsls	r2, r3, #1
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	085b      	lsrs	r3, r3, #1
 800df6c:	441a      	add	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	fbb2 f3f3 	udiv	r3, r2, r3
 800df76:	b29b      	uxth	r3, r3
 800df78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	2b0f      	cmp	r3, #15
 800df7e:	d916      	bls.n	800dfae <UART_SetConfig+0x90e>
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df86:	d212      	bcs.n	800dfae <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	f023 030f 	bic.w	r3, r3, #15
 800df90:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	085b      	lsrs	r3, r3, #1
 800df96:	b29b      	uxth	r3, r3
 800df98:	f003 0307 	and.w	r3, r3, #7
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dfaa:	60da      	str	r2, [r3, #12]
 800dfac:	e0bb      	b.n	800e126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dfb4:	e0b7      	b.n	800e126 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dfb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dfba:	2b20      	cmp	r3, #32
 800dfbc:	dc4a      	bgt.n	800e054 <UART_SetConfig+0x9b4>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f2c0 8086 	blt.w	800e0d0 <UART_SetConfig+0xa30>
 800dfc4:	2b20      	cmp	r3, #32
 800dfc6:	f200 8083 	bhi.w	800e0d0 <UART_SetConfig+0xa30>
 800dfca:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <UART_SetConfig+0x930>)
 800dfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd0:	0800e05b 	.word	0x0800e05b
 800dfd4:	0800e075 	.word	0x0800e075
 800dfd8:	0800e0d1 	.word	0x0800e0d1
 800dfdc:	0800e0d1 	.word	0x0800e0d1
 800dfe0:	0800e07d 	.word	0x0800e07d
 800dfe4:	0800e0d1 	.word	0x0800e0d1
 800dfe8:	0800e0d1 	.word	0x0800e0d1
 800dfec:	0800e0d1 	.word	0x0800e0d1
 800dff0:	0800e08d 	.word	0x0800e08d
 800dff4:	0800e0d1 	.word	0x0800e0d1
 800dff8:	0800e0d1 	.word	0x0800e0d1
 800dffc:	0800e0d1 	.word	0x0800e0d1
 800e000:	0800e0d1 	.word	0x0800e0d1
 800e004:	0800e0d1 	.word	0x0800e0d1
 800e008:	0800e0d1 	.word	0x0800e0d1
 800e00c:	0800e0d1 	.word	0x0800e0d1
 800e010:	0800e09d 	.word	0x0800e09d
 800e014:	0800e0d1 	.word	0x0800e0d1
 800e018:	0800e0d1 	.word	0x0800e0d1
 800e01c:	0800e0d1 	.word	0x0800e0d1
 800e020:	0800e0d1 	.word	0x0800e0d1
 800e024:	0800e0d1 	.word	0x0800e0d1
 800e028:	0800e0d1 	.word	0x0800e0d1
 800e02c:	0800e0d1 	.word	0x0800e0d1
 800e030:	0800e0d1 	.word	0x0800e0d1
 800e034:	0800e0d1 	.word	0x0800e0d1
 800e038:	0800e0d1 	.word	0x0800e0d1
 800e03c:	0800e0d1 	.word	0x0800e0d1
 800e040:	0800e0d1 	.word	0x0800e0d1
 800e044:	0800e0d1 	.word	0x0800e0d1
 800e048:	0800e0d1 	.word	0x0800e0d1
 800e04c:	0800e0d1 	.word	0x0800e0d1
 800e050:	0800e0c3 	.word	0x0800e0c3
 800e054:	2b40      	cmp	r3, #64	; 0x40
 800e056:	d037      	beq.n	800e0c8 <UART_SetConfig+0xa28>
 800e058:	e03a      	b.n	800e0d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e05a:	f7fa fd57 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 800e05e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e060:	e03c      	b.n	800e0dc <UART_SetConfig+0xa3c>
 800e062:	bf00      	nop
 800e064:	003d0900 	.word	0x003d0900
 800e068:	080122cc 	.word	0x080122cc
 800e06c:	58024400 	.word	0x58024400
 800e070:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e074:	f7fa fd60 	bl	8008b38 <HAL_RCC_GetPCLK2Freq>
 800e078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e07a:	e02f      	b.n	800e0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	4618      	mov	r0, r3
 800e082:	f7fc f9d9 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e08a:	e027      	b.n	800e0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e08c:	f107 0308 	add.w	r3, r7, #8
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc fb25 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e09a:	e01f      	b.n	800e0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e09c:	4b2c      	ldr	r3, [pc, #176]	; (800e150 <UART_SetConfig+0xab0>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 0320 	and.w	r3, r3, #32
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d009      	beq.n	800e0bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0a8:	4b29      	ldr	r3, [pc, #164]	; (800e150 <UART_SetConfig+0xab0>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	08db      	lsrs	r3, r3, #3
 800e0ae:	f003 0303 	and.w	r3, r3, #3
 800e0b2:	4a28      	ldr	r2, [pc, #160]	; (800e154 <UART_SetConfig+0xab4>)
 800e0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0ba:	e00f      	b.n	800e0dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e0bc:	4b25      	ldr	r3, [pc, #148]	; (800e154 <UART_SetConfig+0xab4>)
 800e0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0c0:	e00c      	b.n	800e0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0c2:	4b25      	ldr	r3, [pc, #148]	; (800e158 <UART_SetConfig+0xab8>)
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0c6:	e009      	b.n	800e0dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0ce:	e005      	b.n	800e0dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e0da:	bf00      	nop
    }

    if (pclk != 0U)
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d021      	beq.n	800e126 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	4a1d      	ldr	r2, [pc, #116]	; (800e15c <UART_SetConfig+0xabc>)
 800e0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	085b      	lsrs	r3, r3, #1
 800e0fa:	441a      	add	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	fbb2 f3f3 	udiv	r3, r2, r3
 800e104:	b29b      	uxth	r3, r3
 800e106:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	2b0f      	cmp	r3, #15
 800e10c:	d908      	bls.n	800e120 <UART_SetConfig+0xa80>
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e114:	d204      	bcs.n	800e120 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e11c:	60da      	str	r2, [r3, #12]
 800e11e:	e002      	b.n	800e126 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e142:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e146:	4618      	mov	r0, r3
 800e148:	3738      	adds	r7, #56	; 0x38
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bdb0      	pop	{r4, r5, r7, pc}
 800e14e:	bf00      	nop
 800e150:	58024400 	.word	0x58024400
 800e154:	03d09000 	.word	0x03d09000
 800e158:	003d0900 	.word	0x003d0900
 800e15c:	080122cc 	.word	0x080122cc

0800e160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16c:	f003 0301 	and.w	r3, r3, #1
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00a      	beq.n	800e18a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	430a      	orrs	r2, r1
 800e188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18e:	f003 0302 	and.w	r3, r3, #2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00a      	beq.n	800e1ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	430a      	orrs	r2, r1
 800e1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d2:	f003 0308 	and.w	r3, r3, #8
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00a      	beq.n	800e1f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f4:	f003 0310 	and.w	r3, r3, #16
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00a      	beq.n	800e212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	430a      	orrs	r2, r1
 800e210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e216:	f003 0320 	and.w	r3, r3, #32
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d01a      	beq.n	800e276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	430a      	orrs	r2, r1
 800e254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e25e:	d10a      	bne.n	800e276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	430a      	orrs	r2, r1
 800e296:	605a      	str	r2, [r3, #4]
  }
}
 800e298:	bf00      	nop
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e2b4:	f7f5 f856 	bl	8003364 <HAL_GetTick>
 800e2b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f003 0308 	and.w	r3, r3, #8
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	d10e      	bne.n	800e2e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f82f 	bl	800e33a <UART_WaitOnFlagUntilTimeout>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d001      	beq.n	800e2e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e025      	b.n	800e332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 0304 	and.w	r3, r3, #4
 800e2f0:	2b04      	cmp	r3, #4
 800e2f2:	d10e      	bne.n	800e312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f819 	bl	800e33a <UART_WaitOnFlagUntilTimeout>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e30e:	2303      	movs	r3, #3
 800e310:	e00f      	b.n	800e332 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2220      	movs	r2, #32
 800e316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2220      	movs	r2, #32
 800e31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b084      	sub	sp, #16
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60f8      	str	r0, [r7, #12]
 800e342:	60b9      	str	r1, [r7, #8]
 800e344:	603b      	str	r3, [r7, #0]
 800e346:	4613      	mov	r3, r2
 800e348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e34a:	e062      	b.n	800e412 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e352:	d05e      	beq.n	800e412 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e354:	f7f5 f806 	bl	8003364 <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	429a      	cmp	r2, r3
 800e362:	d302      	bcc.n	800e36a <UART_WaitOnFlagUntilTimeout+0x30>
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d11d      	bne.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e378:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689a      	ldr	r2, [r3, #8]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f022 0201 	bic.w	r2, r2, #1
 800e388:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2220      	movs	r2, #32
 800e38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2220      	movs	r2, #32
 800e396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	e045      	b.n	800e432 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f003 0304 	and.w	r3, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d02e      	beq.n	800e412 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	69db      	ldr	r3, [r3, #28]
 800e3ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3c2:	d126      	bne.n	800e412 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e3dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	689a      	ldr	r2, [r3, #8]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f022 0201 	bic.w	r2, r2, #1
 800e3ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2220      	movs	r2, #32
 800e3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2220      	movs	r2, #32
 800e3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2220      	movs	r2, #32
 800e402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e00f      	b.n	800e432 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	69da      	ldr	r2, [r3, #28]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	4013      	ands	r3, r2
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	429a      	cmp	r2, r3
 800e420:	bf0c      	ite	eq
 800e422:	2301      	moveq	r3, #1
 800e424:	2300      	movne	r3, #0
 800e426:	b2db      	uxtb	r3, r3
 800e428:	461a      	mov	r2, r3
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d08d      	beq.n	800e34c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	4613      	mov	r3, r2
 800e448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	88fa      	ldrh	r2, [r7, #6]
 800e454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2222      	movs	r2, #34	; 0x22
 800e464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d02c      	beq.n	800e4ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e474:	4a25      	ldr	r2, [pc, #148]	; (800e50c <UART_Start_Receive_DMA+0xd0>)
 800e476:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e47c:	4a24      	ldr	r2, [pc, #144]	; (800e510 <UART_Start_Receive_DMA+0xd4>)
 800e47e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e484:	4a23      	ldr	r2, [pc, #140]	; (800e514 <UART_Start_Receive_DMA+0xd8>)
 800e486:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e48c:	2200      	movs	r2, #0
 800e48e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	3324      	adds	r3, #36	; 0x24
 800e49a:	4619      	mov	r1, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	88fb      	ldrh	r3, [r7, #6]
 800e4a4:	f7f6 fe3a 	bl	800511c <HAL_DMA_Start_IT>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00d      	beq.n	800e4ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2210      	movs	r2, #16
 800e4b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e01c      	b.n	800e504 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4e0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	689a      	ldr	r2, [r3, #8]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f042 0201 	orr.w	r2, r2, #1
 800e4f0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	689a      	ldr	r2, [r3, #8]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e500:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	0800e625 	.word	0x0800e625
 800e510:	0800e6bb 	.word	0x0800e6bb
 800e514:	0800e6f3 	.word	0x0800e6f3

0800e518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e52e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	689a      	ldr	r2, [r3, #8]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e53e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2220      	movs	r2, #32
 800e544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e56a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6899      	ldr	r1, [r3, #8]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b0f      	ldr	r3, [pc, #60]	; (800e5b4 <UART_EndRxTransfer+0x60>)
 800e578:	400b      	ands	r3, r1
 800e57a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e580:	2b01      	cmp	r3, #1
 800e582:	d107      	bne.n	800e594 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f022 0210 	bic.w	r2, r2, #16
 800e592:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2220      	movs	r2, #32
 800e598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	effffffe 	.word	0xeffffffe

0800e5b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	69db      	ldr	r3, [r3, #28]
 800e5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ce:	d014      	beq.n	800e5fa <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689a      	ldr	r2, [r3, #8]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e5e6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5f6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5f8:	e002      	b.n	800e600 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7f2 fd30 	bl	8001060 <HAL_UART_TxCpltCallback>
}
 800e600:	bf00      	nop
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e614:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff f818 	bl	800d64c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e61c:	bf00      	nop
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e630:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e63a:	d02b      	beq.n	800e694 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e652:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689a      	ldr	r2, [r3, #8]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f022 0201 	bic.w	r2, r2, #1
 800e662:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	689a      	ldr	r2, [r3, #8]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e672:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2220      	movs	r2, #32
 800e678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e680:	2b01      	cmp	r3, #1
 800e682:	d107      	bne.n	800e694 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f022 0210 	bic.w	r2, r2, #16
 800e692:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d107      	bne.n	800e6ac <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7fe ffef 	bl	800d688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6aa:	e002      	b.n	800e6b2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f7f2 fcfd 	bl	80010ac <HAL_UART_RxCpltCallback>
}
 800e6b2:	bf00      	nop
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d109      	bne.n	800e6e4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6d6:	085b      	lsrs	r3, r3, #1
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f7fe ffd3 	bl	800d688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6e2:	e002      	b.n	800e6ea <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f7fe ffbb 	bl	800d660 <HAL_UART_RxHalfCpltCallback>
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e706:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71a:	2b80      	cmp	r3, #128	; 0x80
 800e71c:	d109      	bne.n	800e732 <UART_DMAError+0x40>
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	2b21      	cmp	r3, #33	; 0x21
 800e722:	d106      	bne.n	800e732 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2200      	movs	r2, #0
 800e728:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e72c:	6978      	ldr	r0, [r7, #20]
 800e72e:	f7ff fef3 	bl	800e518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73c:	2b40      	cmp	r3, #64	; 0x40
 800e73e:	d109      	bne.n	800e754 <UART_DMAError+0x62>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b22      	cmp	r3, #34	; 0x22
 800e744:	d106      	bne.n	800e754 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2200      	movs	r2, #0
 800e74a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e74e:	6978      	ldr	r0, [r7, #20]
 800e750:	f7ff ff00 	bl	800e554 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e75a:	f043 0210 	orr.w	r2, r3, #16
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e764:	6978      	ldr	r0, [r7, #20]
 800e766:	f7fe ff85 	bl	800d674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e76a:	bf00      	nop
 800e76c:	3718      	adds	r7, #24
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b084      	sub	sp, #16
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7fe ff6f 	bl	800d674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7b4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7f2 fc4b 	bl	8001060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7da:	bf00      	nop
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b083      	sub	sp, #12
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7ee:	bf00      	nop
 800e7f0:	370c      	adds	r7, #12
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr

0800e7fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7fa:	b480      	push	{r7}
 800e7fc:	b083      	sub	sp, #12
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e802:	bf00      	nop
 800e804:	370c      	adds	r7, #12
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e80e:	b480      	push	{r7}
 800e810:	b085      	sub	sp, #20
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d101      	bne.n	800e824 <HAL_UARTEx_DisableFifoMode+0x16>
 800e820:	2302      	movs	r3, #2
 800e822:	e027      	b.n	800e874 <HAL_UARTEx_DisableFifoMode+0x66>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2224      	movs	r2, #36	; 0x24
 800e830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f022 0201 	bic.w	r2, r2, #1
 800e84a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e852:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2220      	movs	r2, #32
 800e866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e890:	2b01      	cmp	r3, #1
 800e892:	d101      	bne.n	800e898 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e894:	2302      	movs	r3, #2
 800e896:	e02d      	b.n	800e8f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2224      	movs	r2, #36	; 0x24
 800e8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	683a      	ldr	r2, [r7, #0]
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f84f 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d101      	bne.n	800e914 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e910:	2302      	movs	r3, #2
 800e912:	e02d      	b.n	800e970 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2224      	movs	r2, #36	; 0x24
 800e920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f022 0201 	bic.w	r2, r2, #1
 800e93a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	430a      	orrs	r2, r1
 800e94e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f811 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2220      	movs	r2, #32
 800e962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e984:	2b00      	cmp	r3, #0
 800e986:	d108      	bne.n	800e99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e998:	e031      	b.n	800e9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e99a:	2310      	movs	r3, #16
 800e99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e99e:	2310      	movs	r3, #16
 800e9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	0e5b      	lsrs	r3, r3, #25
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	f003 0307 	and.w	r3, r3, #7
 800e9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	0f5b      	lsrs	r3, r3, #29
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 0307 	and.w	r3, r3, #7
 800e9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	7b3a      	ldrb	r2, [r7, #12]
 800e9c6:	4911      	ldr	r1, [pc, #68]	; (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9c8:	5c8a      	ldrb	r2, [r1, r2]
 800e9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9ce:	7b3a      	ldrb	r2, [r7, #12]
 800e9d0:	490f      	ldr	r1, [pc, #60]	; (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	7b7a      	ldrb	r2, [r7, #13]
 800e9e4:	4909      	ldr	r1, [pc, #36]	; (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9e6:	5c8a      	ldrb	r2, [r1, r2]
 800e9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9ec:	7b7a      	ldrb	r2, [r7, #13]
 800e9ee:	4908      	ldr	r1, [pc, #32]	; (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	080122e4 	.word	0x080122e4
 800ea10:	080122ec 	.word	0x080122ec

0800ea14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f103 0208 	add.w	r2, r3, #8
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f103 0208 	add.w	r2, r3, #8
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f103 0208 	add.w	r2, r3, #8
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea62:	bf00      	nop
 800ea64:	370c      	adds	r7, #12
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	689a      	ldr	r2, [r3, #8]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	683a      	ldr	r2, [r7, #0]
 800ea98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	601a      	str	r2, [r3, #0]
}
 800eaaa:	bf00      	nop
 800eaac:	3714      	adds	r7, #20
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eab6:	b480      	push	{r7}
 800eab8:	b085      	sub	sp, #20
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
 800eabe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eacc:	d103      	bne.n	800ead6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e00c      	b.n	800eaf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3308      	adds	r3, #8
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	e002      	b.n	800eae4 <vListInsert+0x2e>
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d2f6      	bcs.n	800eade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	683a      	ldr	r2, [r7, #0]
 800eb0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	601a      	str	r2, [r3, #0]
}
 800eb1c:	bf00      	nop
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	6892      	ldr	r2, [r2, #8]
 800eb3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	6852      	ldr	r2, [r2, #4]
 800eb48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d103      	bne.n	800eb5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	689a      	ldr	r2, [r3, #8]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	1e5a      	subs	r2, r3, #1
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xQueueGenericReset+0x2a>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	60bb      	str	r3, [r7, #8]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eba6:	f002 fa95 	bl	80110d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb2:	68f9      	ldr	r1, [r7, #12]
 800ebb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebb6:	fb01 f303 	mul.w	r3, r1, r3
 800ebba:	441a      	add	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	68f9      	ldr	r1, [r7, #12]
 800ebda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebdc:	fb01 f303 	mul.w	r3, r1, r3
 800ebe0:	441a      	add	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	22ff      	movs	r2, #255	; 0xff
 800ebea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	22ff      	movs	r2, #255	; 0xff
 800ebf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d114      	bne.n	800ec26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01a      	beq.n	800ec3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	3310      	adds	r3, #16
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f001 fa07 	bl	801001c <xTaskRemoveFromEventList>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d012      	beq.n	800ec3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <xQueueGenericReset+0xcc>)
 800ec16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	e009      	b.n	800ec3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3310      	adds	r3, #16
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7ff fef2 	bl	800ea14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3324      	adds	r3, #36	; 0x24
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7ff feed 	bl	800ea14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec3a:	f002 fa7b 	bl	8011134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec3e:	2301      	movs	r3, #1
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08a      	sub	sp, #40	; 0x28
 800ec50:	af02      	add	r7, sp, #8
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	4613      	mov	r3, r2
 800ec58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10a      	bne.n	800ec76 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	613b      	str	r3, [r7, #16]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	fb02 f303 	mul.w	r3, r2, r3
 800ec7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	3348      	adds	r3, #72	; 0x48
 800ec84:	4618      	mov	r0, r3
 800ec86:	f002 fb47 	bl	8011318 <pvPortMalloc>
 800ec8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00d      	beq.n	800ecae <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	3348      	adds	r3, #72	; 0x48
 800ec9a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec9c:	79fa      	ldrb	r2, [r7, #7]
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	4613      	mov	r3, r2
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	68b9      	ldr	r1, [r7, #8]
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 f805 	bl	800ecb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ecae:	69bb      	ldr	r3, [r7, #24]
	}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
 800ecc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d103      	bne.n	800ecd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	69ba      	ldr	r2, [r7, #24]
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	e002      	b.n	800ecda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ece6:	2101      	movs	r1, #1
 800ece8:	69b8      	ldr	r0, [r7, #24]
 800ecea:	f7ff ff47 	bl	800eb7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
	...

0800ecf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08e      	sub	sp, #56	; 0x38
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
 800ed04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed06:	2300      	movs	r3, #0
 800ed08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <xQueueGenericSend+0x32>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d103      	bne.n	800ed38 <xQueueGenericSend+0x40>
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d101      	bne.n	800ed3c <xQueueGenericSend+0x44>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e000      	b.n	800ed3e <xQueueGenericSend+0x46>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10a      	bne.n	800ed58 <xQueueGenericSend+0x60>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed54:	bf00      	nop
 800ed56:	e7fe      	b.n	800ed56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d103      	bne.n	800ed66 <xQueueGenericSend+0x6e>
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d101      	bne.n	800ed6a <xQueueGenericSend+0x72>
 800ed66:	2301      	movs	r3, #1
 800ed68:	e000      	b.n	800ed6c <xQueueGenericSend+0x74>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10a      	bne.n	800ed86 <xQueueGenericSend+0x8e>
	__asm volatile
 800ed70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	623b      	str	r3, [r7, #32]
}
 800ed82:	bf00      	nop
 800ed84:	e7fe      	b.n	800ed84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed86:	f001 faeb 	bl	8010360 <xTaskGetSchedulerState>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d102      	bne.n	800ed96 <xQueueGenericSend+0x9e>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <xQueueGenericSend+0xa2>
 800ed96:	2301      	movs	r3, #1
 800ed98:	e000      	b.n	800ed9c <xQueueGenericSend+0xa4>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10a      	bne.n	800edb6 <xQueueGenericSend+0xbe>
	__asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	61fb      	str	r3, [r7, #28]
}
 800edb2:	bf00      	nop
 800edb4:	e7fe      	b.n	800edb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edb6:	f002 f98d 	bl	80110d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d302      	bcc.n	800edcc <xQueueGenericSend+0xd4>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d129      	bne.n	800ee20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edd2:	f000 fbbb 	bl	800f54c <prvCopyDataToQueue>
 800edd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d010      	beq.n	800ee02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ede0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede2:	3324      	adds	r3, #36	; 0x24
 800ede4:	4618      	mov	r0, r3
 800ede6:	f001 f919 	bl	801001c <xTaskRemoveFromEventList>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d013      	beq.n	800ee18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800edf0:	4b3f      	ldr	r3, [pc, #252]	; (800eef0 <xQueueGenericSend+0x1f8>)
 800edf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf6:	601a      	str	r2, [r3, #0]
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	e00a      	b.n	800ee18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee08:	4b39      	ldr	r3, [pc, #228]	; (800eef0 <xQueueGenericSend+0x1f8>)
 800ee0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee0e:	601a      	str	r2, [r3, #0]
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee18:	f002 f98c 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e063      	b.n	800eee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d103      	bne.n	800ee2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee26:	f002 f985 	bl	8011134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e05c      	b.n	800eee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d106      	bne.n	800ee42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee34:	f107 0314 	add.w	r3, r7, #20
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f001 f951 	bl	80100e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee42:	f002 f977 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee46:	f000 fec5 	bl	800fbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee4a:	f002 f943 	bl	80110d4 <vPortEnterCritical>
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee54:	b25b      	sxtb	r3, r3
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	d103      	bne.n	800ee64 <xQueueGenericSend+0x16c>
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee6a:	b25b      	sxtb	r3, r3
 800ee6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee70:	d103      	bne.n	800ee7a <xQueueGenericSend+0x182>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee7a:	f002 f95b 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee7e:	1d3a      	adds	r2, r7, #4
 800ee80:	f107 0314 	add.w	r3, r7, #20
 800ee84:	4611      	mov	r1, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f001 f940 	bl	801010c <xTaskCheckForTimeOut>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d124      	bne.n	800eedc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee94:	f000 fc52 	bl	800f73c <prvIsQueueFull>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d018      	beq.n	800eed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	3310      	adds	r3, #16
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	4611      	mov	r1, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f001 f868 	bl	800ff7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eeac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeae:	f000 fbdd 	bl	800f66c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eeb2:	f000 fe9d 	bl	800fbf0 <xTaskResumeAll>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f47f af7c 	bne.w	800edb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eebe:	4b0c      	ldr	r3, [pc, #48]	; (800eef0 <xQueueGenericSend+0x1f8>)
 800eec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	e772      	b.n	800edb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eed2:	f000 fbcb 	bl	800f66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eed6:	f000 fe8b 	bl	800fbf0 <xTaskResumeAll>
 800eeda:	e76c      	b.n	800edb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eede:	f000 fbc5 	bl	800f66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eee2:	f000 fe85 	bl	800fbf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3738      	adds	r7, #56	; 0x38
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	e000ed04 	.word	0xe000ed04

0800eef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b090      	sub	sp, #64	; 0x40
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10a      	bne.n	800ef22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef1e:	bf00      	nop
 800ef20:	e7fe      	b.n	800ef20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d103      	bne.n	800ef30 <xQueueGenericSendFromISR+0x3c>
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <xQueueGenericSendFromISR+0x40>
 800ef30:	2301      	movs	r3, #1
 800ef32:	e000      	b.n	800ef36 <xQueueGenericSendFromISR+0x42>
 800ef34:	2300      	movs	r3, #0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d10a      	bne.n	800ef50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ef3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3e:	f383 8811 	msr	BASEPRI, r3
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef4c:	bf00      	nop
 800ef4e:	e7fe      	b.n	800ef4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	2b02      	cmp	r3, #2
 800ef54:	d103      	bne.n	800ef5e <xQueueGenericSendFromISR+0x6a>
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <xQueueGenericSendFromISR+0x6e>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e000      	b.n	800ef64 <xQueueGenericSendFromISR+0x70>
 800ef62:	2300      	movs	r3, #0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	623b      	str	r3, [r7, #32]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef7e:	f002 f98b 	bl	8011298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef82:	f3ef 8211 	mrs	r2, BASEPRI
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	61fa      	str	r2, [r7, #28]
 800ef98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d302      	bcc.n	800efb0 <xQueueGenericSendFromISR+0xbc>
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b02      	cmp	r3, #2
 800efae:	d12f      	bne.n	800f010 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	68b9      	ldr	r1, [r7, #8]
 800efc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efc6:	f000 fac1 	bl	800f54c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800efca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd2:	d112      	bne.n	800effa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d016      	beq.n	800f00a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efde:	3324      	adds	r3, #36	; 0x24
 800efe0:	4618      	mov	r0, r3
 800efe2:	f001 f81b 	bl	801001c <xTaskRemoveFromEventList>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00e      	beq.n	800f00a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00b      	beq.n	800f00a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	e007      	b.n	800f00a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800effa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800effe:	3301      	adds	r3, #1
 800f000:	b2db      	uxtb	r3, r3
 800f002:	b25a      	sxtb	r2, r3
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f00a:	2301      	movs	r3, #1
 800f00c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f00e:	e001      	b.n	800f014 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f010:	2300      	movs	r3, #0
 800f012:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f01e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f022:	4618      	mov	r0, r3
 800f024:	3740      	adds	r7, #64	; 0x40
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b08e      	sub	sp, #56	; 0x38
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10a      	bne.n	800f054 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	623b      	str	r3, [r7, #32]
}
 800f050:	bf00      	nop
 800f052:	e7fe      	b.n	800f052 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00a      	beq.n	800f072 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	61fb      	str	r3, [r7, #28]
}
 800f06e:	bf00      	nop
 800f070:	e7fe      	b.n	800f070 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d103      	bne.n	800f082 <xQueueGiveFromISR+0x58>
 800f07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <xQueueGiveFromISR+0x5c>
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <xQueueGiveFromISR+0x5e>
 800f086:	2300      	movs	r3, #0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	61bb      	str	r3, [r7, #24]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0a2:	f002 f8f9 	bl	8011298 <vPortValidateInterruptPriority>
	__asm volatile
 800f0a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	617a      	str	r2, [r7, #20]
 800f0bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f0be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d22b      	bcs.n	800f12a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	1c5a      	adds	r2, r3, #1
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f0e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ec:	d112      	bne.n	800f114 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d016      	beq.n	800f124 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	3324      	adds	r3, #36	; 0x24
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 ff8e 	bl	801001c <xTaskRemoveFromEventList>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00e      	beq.n	800f124 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00b      	beq.n	800f124 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2201      	movs	r2, #1
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	e007      	b.n	800f124 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f118:	3301      	adds	r3, #1
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	b25a      	sxtb	r2, r3
 800f11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f124:	2301      	movs	r3, #1
 800f126:	637b      	str	r3, [r7, #52]	; 0x34
 800f128:	e001      	b.n	800f12e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f12a:	2300      	movs	r3, #0
 800f12c:	637b      	str	r3, [r7, #52]	; 0x34
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f383 8811 	msr	BASEPRI, r3
}
 800f138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3738      	adds	r7, #56	; 0x38
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08c      	sub	sp, #48	; 0x30
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f150:	2300      	movs	r3, #0
 800f152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10a      	bne.n	800f174 <xQueueReceive+0x30>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	623b      	str	r3, [r7, #32]
}
 800f170:	bf00      	nop
 800f172:	e7fe      	b.n	800f172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d103      	bne.n	800f182 <xQueueReceive+0x3e>
 800f17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <xQueueReceive+0x42>
 800f182:	2301      	movs	r3, #1
 800f184:	e000      	b.n	800f188 <xQueueReceive+0x44>
 800f186:	2300      	movs	r3, #0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10a      	bne.n	800f1a2 <xQueueReceive+0x5e>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	61fb      	str	r3, [r7, #28]
}
 800f19e:	bf00      	nop
 800f1a0:	e7fe      	b.n	800f1a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1a2:	f001 f8dd 	bl	8010360 <xTaskGetSchedulerState>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d102      	bne.n	800f1b2 <xQueueReceive+0x6e>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <xQueueReceive+0x72>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e000      	b.n	800f1b8 <xQueueReceive+0x74>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10a      	bne.n	800f1d2 <xQueueReceive+0x8e>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	61bb      	str	r3, [r7, #24]
}
 800f1ce:	bf00      	nop
 800f1d0:	e7fe      	b.n	800f1d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1d2:	f001 ff7f 	bl	80110d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d01f      	beq.n	800f222 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1e2:	68b9      	ldr	r1, [r7, #8]
 800f1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1e6:	f000 fa1b 	bl	800f620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	1e5a      	subs	r2, r3, #1
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00f      	beq.n	800f21a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	3310      	adds	r3, #16
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 ff0c 	bl	801001c <xTaskRemoveFromEventList>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d007      	beq.n	800f21a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f20a:	4b3d      	ldr	r3, [pc, #244]	; (800f300 <xQueueReceive+0x1bc>)
 800f20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f21a:	f001 ff8b 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800f21e:	2301      	movs	r3, #1
 800f220:	e069      	b.n	800f2f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d103      	bne.n	800f230 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f228:	f001 ff84 	bl	8011134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f22c:	2300      	movs	r3, #0
 800f22e:	e062      	b.n	800f2f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f236:	f107 0310 	add.w	r3, r7, #16
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 ff50 	bl	80100e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f240:	2301      	movs	r3, #1
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f244:	f001 ff76 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f248:	f000 fcc4 	bl	800fbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f24c:	f001 ff42 	bl	80110d4 <vPortEnterCritical>
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f256:	b25b      	sxtb	r3, r3
 800f258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25c:	d103      	bne.n	800f266 <xQueueReceive+0x122>
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	2200      	movs	r2, #0
 800f262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f26c:	b25b      	sxtb	r3, r3
 800f26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f272:	d103      	bne.n	800f27c <xQueueReceive+0x138>
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f27c:	f001 ff5a 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f280:	1d3a      	adds	r2, r7, #4
 800f282:	f107 0310 	add.w	r3, r7, #16
 800f286:	4611      	mov	r1, r2
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 ff3f 	bl	801010c <xTaskCheckForTimeOut>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d123      	bne.n	800f2dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f296:	f000 fa3b 	bl	800f710 <prvIsQueueEmpty>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d017      	beq.n	800f2d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	3324      	adds	r3, #36	; 0x24
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 fe67 	bl	800ff7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2b0:	f000 f9dc 	bl	800f66c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2b4:	f000 fc9c 	bl	800fbf0 <xTaskResumeAll>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d189      	bne.n	800f1d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f2be:	4b10      	ldr	r3, [pc, #64]	; (800f300 <xQueueReceive+0x1bc>)
 800f2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	e780      	b.n	800f1d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d2:	f000 f9cb 	bl	800f66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2d6:	f000 fc8b 	bl	800fbf0 <xTaskResumeAll>
 800f2da:	e77a      	b.n	800f1d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2de:	f000 f9c5 	bl	800f66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2e2:	f000 fc85 	bl	800fbf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e8:	f000 fa12 	bl	800f710 <prvIsQueueEmpty>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	f43f af6f 	beq.w	800f1d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3730      	adds	r7, #48	; 0x30
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	e000ed04 	.word	0xe000ed04

0800f304 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b08e      	sub	sp, #56	; 0x38
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f30e:	2300      	movs	r3, #0
 800f310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f316:	2300      	movs	r3, #0
 800f318:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10a      	bne.n	800f336 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	623b      	str	r3, [r7, #32]
}
 800f332:	bf00      	nop
 800f334:	e7fe      	b.n	800f334 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00a      	beq.n	800f354 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	61fb      	str	r3, [r7, #28]
}
 800f350:	bf00      	nop
 800f352:	e7fe      	b.n	800f352 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f354:	f001 f804 	bl	8010360 <xTaskGetSchedulerState>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d102      	bne.n	800f364 <xQueueSemaphoreTake+0x60>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <xQueueSemaphoreTake+0x64>
 800f364:	2301      	movs	r3, #1
 800f366:	e000      	b.n	800f36a <xQueueSemaphoreTake+0x66>
 800f368:	2300      	movs	r3, #0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10a      	bne.n	800f384 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	61bb      	str	r3, [r7, #24]
}
 800f380:	bf00      	nop
 800f382:	e7fe      	b.n	800f382 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f384:	f001 fea6 	bl	80110d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	2b00      	cmp	r3, #0
 800f392:	d024      	beq.n	800f3de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	1e5a      	subs	r2, r3, #1
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d104      	bne.n	800f3ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3a4:	f001 f984 	bl	80106b0 <pvTaskIncrementMutexHeldCount>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00f      	beq.n	800f3d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b8:	3310      	adds	r3, #16
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f000 fe2e 	bl	801001c <xTaskRemoveFromEventList>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d007      	beq.n	800f3d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3c6:	4b54      	ldr	r3, [pc, #336]	; (800f518 <xQueueSemaphoreTake+0x214>)
 800f3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3cc:	601a      	str	r2, [r3, #0]
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f3d6:	f001 fead 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e097      	b.n	800f50e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d111      	bne.n	800f408 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00a      	beq.n	800f400 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	617b      	str	r3, [r7, #20]
}
 800f3fc:	bf00      	nop
 800f3fe:	e7fe      	b.n	800f3fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f400:	f001 fe98 	bl	8011134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f404:	2300      	movs	r3, #0
 800f406:	e082      	b.n	800f50e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d106      	bne.n	800f41c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f40e:	f107 030c 	add.w	r3, r7, #12
 800f412:	4618      	mov	r0, r3
 800f414:	f000 fe64 	bl	80100e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f41c:	f001 fe8a 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f420:	f000 fbd8 	bl	800fbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f424:	f001 fe56 	bl	80110d4 <vPortEnterCritical>
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f42e:	b25b      	sxtb	r3, r3
 800f430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f434:	d103      	bne.n	800f43e <xQueueSemaphoreTake+0x13a>
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f444:	b25b      	sxtb	r3, r3
 800f446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44a:	d103      	bne.n	800f454 <xQueueSemaphoreTake+0x150>
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f454:	f001 fe6e 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f458:	463a      	mov	r2, r7
 800f45a:	f107 030c 	add.w	r3, r7, #12
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fe53 	bl	801010c <xTaskCheckForTimeOut>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d132      	bne.n	800f4d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f46c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f46e:	f000 f94f 	bl	800f710 <prvIsQueueEmpty>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d026      	beq.n	800f4c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d109      	bne.n	800f494 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f480:	f001 fe28 	bl	80110d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 ff87 	bl	801039c <xTaskPriorityInherit>
 800f48e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f490:	f001 fe50 	bl	8011134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f496:	3324      	adds	r3, #36	; 0x24
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	4611      	mov	r1, r2
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 fd6d 	bl	800ff7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4a4:	f000 f8e2 	bl	800f66c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4a8:	f000 fba2 	bl	800fbf0 <xTaskResumeAll>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f47f af68 	bne.w	800f384 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f4b4:	4b18      	ldr	r3, [pc, #96]	; (800f518 <xQueueSemaphoreTake+0x214>)
 800f4b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	f3bf 8f6f 	isb	sy
 800f4c4:	e75e      	b.n	800f384 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f4c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4c8:	f000 f8d0 	bl	800f66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4cc:	f000 fb90 	bl	800fbf0 <xTaskResumeAll>
 800f4d0:	e758      	b.n	800f384 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4d4:	f000 f8ca 	bl	800f66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4d8:	f000 fb8a 	bl	800fbf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4de:	f000 f917 	bl	800f710 <prvIsQueueEmpty>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f43f af4d 	beq.w	800f384 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00d      	beq.n	800f50c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f4f0:	f001 fdf0 	bl	80110d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f4f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4f6:	f000 f811 	bl	800f51c <prvGetDisinheritPriorityAfterTimeout>
 800f4fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f502:	4618      	mov	r0, r3
 800f504:	f001 f846 	bl	8010594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f508:	f001 fe14 	bl	8011134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f50c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3738      	adds	r7, #56	; 0x38
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	e000ed04 	.word	0xe000ed04

0800f51c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d006      	beq.n	800f53a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f1c3 0307 	rsb	r3, r3, #7
 800f536:	60fb      	str	r3, [r7, #12]
 800f538:	e001      	b.n	800f53e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f53a:	2300      	movs	r3, #0
 800f53c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f53e:	68fb      	ldr	r3, [r7, #12]
	}
 800f540:	4618      	mov	r0, r3
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f558:	2300      	movs	r3, #0
 800f55a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10d      	bne.n	800f586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d14d      	bne.n	800f60e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	4618      	mov	r0, r3
 800f578:	f000 ff86 	bl	8010488 <xTaskPriorityDisinherit>
 800f57c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2200      	movs	r2, #0
 800f582:	609a      	str	r2, [r3, #8]
 800f584:	e043      	b.n	800f60e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d119      	bne.n	800f5c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6858      	ldr	r0, [r3, #4]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f594:	461a      	mov	r2, r3
 800f596:	68b9      	ldr	r1, [r7, #8]
 800f598:	f002 f8da 	bl	8011750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a4:	441a      	add	r2, r3
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d32b      	bcc.n	800f60e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	605a      	str	r2, [r3, #4]
 800f5be:	e026      	b.n	800f60e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	68d8      	ldr	r0, [r3, #12]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	68b9      	ldr	r1, [r7, #8]
 800f5cc:	f002 f8c0 	bl	8011750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d8:	425b      	negs	r3, r3
 800f5da:	441a      	add	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	68da      	ldr	r2, [r3, #12]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d207      	bcs.n	800f5fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	689a      	ldr	r2, [r3, #8]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f4:	425b      	negs	r3, r3
 800f5f6:	441a      	add	r2, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d105      	bne.n	800f60e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d002      	beq.n	800f60e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f616:	697b      	ldr	r3, [r7, #20]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d018      	beq.n	800f664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68da      	ldr	r2, [r3, #12]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63a:	441a      	add	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68da      	ldr	r2, [r3, #12]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d303      	bcc.n	800f654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	68d9      	ldr	r1, [r3, #12]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f65c:	461a      	mov	r2, r3
 800f65e:	6838      	ldr	r0, [r7, #0]
 800f660:	f002 f876 	bl	8011750 <memcpy>
	}
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f674:	f001 fd2e 	bl	80110d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f67e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f680:	e011      	b.n	800f6a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f686:	2b00      	cmp	r3, #0
 800f688:	d012      	beq.n	800f6b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	3324      	adds	r3, #36	; 0x24
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 fcc4 	bl	801001c <xTaskRemoveFromEventList>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f69a:	f000 fd99 	bl	80101d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	dce9      	bgt.n	800f682 <prvUnlockQueue+0x16>
 800f6ae:	e000      	b.n	800f6b2 <prvUnlockQueue+0x46>
					break;
 800f6b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	22ff      	movs	r2, #255	; 0xff
 800f6b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f6ba:	f001 fd3b 	bl	8011134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6be:	f001 fd09 	bl	80110d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6ca:	e011      	b.n	800f6f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d012      	beq.n	800f6fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3310      	adds	r3, #16
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fc9f 	bl	801001c <xTaskRemoveFromEventList>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f6e4:	f000 fd74 	bl	80101d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	dce9      	bgt.n	800f6cc <prvUnlockQueue+0x60>
 800f6f8:	e000      	b.n	800f6fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	22ff      	movs	r2, #255	; 0xff
 800f700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f704:	f001 fd16 	bl	8011134 <vPortExitCritical>
}
 800f708:	bf00      	nop
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f718:	f001 fcdc 	bl	80110d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f724:	2301      	movs	r3, #1
 800f726:	60fb      	str	r3, [r7, #12]
 800f728:	e001      	b.n	800f72e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f72a:	2300      	movs	r3, #0
 800f72c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f72e:	f001 fd01 	bl	8011134 <vPortExitCritical>

	return xReturn;
 800f732:	68fb      	ldr	r3, [r7, #12]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f744:	f001 fcc6 	bl	80110d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f750:	429a      	cmp	r2, r3
 800f752:	d102      	bne.n	800f75a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f754:	2301      	movs	r3, #1
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e001      	b.n	800f75e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f75a:	2300      	movs	r3, #0
 800f75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f75e:	f001 fce9 	bl	8011134 <vPortExitCritical>

	return xReturn;
 800f762:	68fb      	ldr	r3, [r7, #12]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f776:	2300      	movs	r3, #0
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	e014      	b.n	800f7a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f77c:	4a0f      	ldr	r2, [pc, #60]	; (800f7bc <vQueueAddToRegistry+0x50>)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10b      	bne.n	800f7a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f788:	490c      	ldr	r1, [pc, #48]	; (800f7bc <vQueueAddToRegistry+0x50>)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	683a      	ldr	r2, [r7, #0]
 800f78e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f792:	4a0a      	ldr	r2, [pc, #40]	; (800f7bc <vQueueAddToRegistry+0x50>)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	4413      	add	r3, r2
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f79e:	e006      	b.n	800f7ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	60fb      	str	r3, [r7, #12]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2b07      	cmp	r3, #7
 800f7aa:	d9e7      	bls.n	800f77c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f7ac:	bf00      	nop
 800f7ae:	bf00      	nop
 800f7b0:	3714      	adds	r7, #20
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	24027d38 	.word	0x24027d38

0800f7c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7d0:	f001 fc80 	bl	80110d4 <vPortEnterCritical>
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7da:	b25b      	sxtb	r3, r3
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d103      	bne.n	800f7ea <vQueueWaitForMessageRestricted+0x2a>
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7f0:	b25b      	sxtb	r3, r3
 800f7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f6:	d103      	bne.n	800f800 <vQueueWaitForMessageRestricted+0x40>
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f800:	f001 fc98 	bl	8011134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d106      	bne.n	800f81a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	3324      	adds	r3, #36	; 0x24
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	68b9      	ldr	r1, [r7, #8]
 800f814:	4618      	mov	r0, r3
 800f816:	f000 fbd5 	bl	800ffc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f81a:	6978      	ldr	r0, [r7, #20]
 800f81c:	f7ff ff26 	bl	800f66c <prvUnlockQueue>
	}
 800f820:	bf00      	nop
 800f822:	3718      	adds	r7, #24
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08c      	sub	sp, #48	; 0x30
 800f82c:	af04      	add	r7, sp, #16
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	4613      	mov	r3, r2
 800f836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f838:	88fb      	ldrh	r3, [r7, #6]
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4618      	mov	r0, r3
 800f83e:	f001 fd6b 	bl	8011318 <pvPortMalloc>
 800f842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00e      	beq.n	800f868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f84a:	20b4      	movs	r0, #180	; 0xb4
 800f84c:	f001 fd64 	bl	8011318 <pvPortMalloc>
 800f850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d003      	beq.n	800f860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	631a      	str	r2, [r3, #48]	; 0x30
 800f85e:	e005      	b.n	800f86c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f860:	6978      	ldr	r0, [r7, #20]
 800f862:	f001 fe25 	bl	80114b0 <vPortFree>
 800f866:	e001      	b.n	800f86c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f868:	2300      	movs	r3, #0
 800f86a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d013      	beq.n	800f89a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f872:	88fa      	ldrh	r2, [r7, #6]
 800f874:	2300      	movs	r3, #0
 800f876:	9303      	str	r3, [sp, #12]
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	9302      	str	r3, [sp, #8]
 800f87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87e:	9301      	str	r3, [sp, #4]
 800f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	68b9      	ldr	r1, [r7, #8]
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f000 f80f 	bl	800f8ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f88e:	69f8      	ldr	r0, [r7, #28]
 800f890:	f000 f8aa 	bl	800f9e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f894:	2301      	movs	r3, #1
 800f896:	61bb      	str	r3, [r7, #24]
 800f898:	e002      	b.n	800f8a0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295
 800f89e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8a0:	69bb      	ldr	r3, [r7, #24]
	}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3720      	adds	r7, #32
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f8c4:	440b      	add	r3, r1
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	f023 0307 	bic.w	r3, r3, #7
 800f8d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	f003 0307 	and.w	r3, r3, #7
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00a      	beq.n	800f8f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	617b      	str	r3, [r7, #20]
}
 800f8f0:	bf00      	nop
 800f8f2:	e7fe      	b.n	800f8f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d01f      	beq.n	800f93a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	61fb      	str	r3, [r7, #28]
 800f8fe:	e012      	b.n	800f926 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	4413      	add	r3, r2
 800f906:	7819      	ldrb	r1, [r3, #0]
 800f908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	4413      	add	r3, r2
 800f90e:	3334      	adds	r3, #52	; 0x34
 800f910:	460a      	mov	r2, r1
 800f912:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	4413      	add	r3, r2
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d006      	beq.n	800f92e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	3301      	adds	r3, #1
 800f924:	61fb      	str	r3, [r7, #28]
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	2b0f      	cmp	r3, #15
 800f92a:	d9e9      	bls.n	800f900 <prvInitialiseNewTask+0x54>
 800f92c:	e000      	b.n	800f930 <prvInitialiseNewTask+0x84>
			{
				break;
 800f92e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	2200      	movs	r2, #0
 800f934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f938:	e003      	b.n	800f942 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	2b06      	cmp	r3, #6
 800f946:	d901      	bls.n	800f94c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f948:	2306      	movs	r3, #6
 800f94a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f950:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f956:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	2200      	movs	r2, #0
 800f95c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	3304      	adds	r3, #4
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff f876 	bl	800ea54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96a:	3318      	adds	r3, #24
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7ff f871 	bl	800ea54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	f1c3 0207 	rsb	r2, r3, #7
 800f97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f986:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98a:	2200      	movs	r2, #0
 800f98c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	2200      	movs	r2, #0
 800f994:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	334c      	adds	r3, #76	; 0x4c
 800f99c:	2260      	movs	r2, #96	; 0x60
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f001 fee3 	bl	801176c <memset>
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	4a0c      	ldr	r2, [pc, #48]	; (800f9dc <prvInitialiseNewTask+0x130>)
 800f9aa:	651a      	str	r2, [r3, #80]	; 0x50
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ae:	4a0c      	ldr	r2, [pc, #48]	; (800f9e0 <prvInitialiseNewTask+0x134>)
 800f9b0:	655a      	str	r2, [r3, #84]	; 0x54
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b4:	4a0b      	ldr	r2, [pc, #44]	; (800f9e4 <prvInitialiseNewTask+0x138>)
 800f9b6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	68f9      	ldr	r1, [r7, #12]
 800f9bc:	69b8      	ldr	r0, [r7, #24]
 800f9be:	f001 fa5f 	bl	8010e80 <pxPortInitialiseStack>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9d4:	bf00      	nop
 800f9d6:	3720      	adds	r7, #32
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	08012314 	.word	0x08012314
 800f9e0:	08012334 	.word	0x08012334
 800f9e4:	080122f4 	.word	0x080122f4

0800f9e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9f0:	f001 fb70 	bl	80110d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9f4:	4b2a      	ldr	r3, [pc, #168]	; (800faa0 <prvAddNewTaskToReadyList+0xb8>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	4a29      	ldr	r2, [pc, #164]	; (800faa0 <prvAddNewTaskToReadyList+0xb8>)
 800f9fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9fe:	4b29      	ldr	r3, [pc, #164]	; (800faa4 <prvAddNewTaskToReadyList+0xbc>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d109      	bne.n	800fa1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa06:	4a27      	ldr	r2, [pc, #156]	; (800faa4 <prvAddNewTaskToReadyList+0xbc>)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa0c:	4b24      	ldr	r3, [pc, #144]	; (800faa0 <prvAddNewTaskToReadyList+0xb8>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d110      	bne.n	800fa36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fa14:	f000 fc00 	bl	8010218 <prvInitialiseTaskLists>
 800fa18:	e00d      	b.n	800fa36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fa1a:	4b23      	ldr	r3, [pc, #140]	; (800faa8 <prvAddNewTaskToReadyList+0xc0>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d109      	bne.n	800fa36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa22:	4b20      	ldr	r3, [pc, #128]	; (800faa4 <prvAddNewTaskToReadyList+0xbc>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d802      	bhi.n	800fa36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa30:	4a1c      	ldr	r2, [pc, #112]	; (800faa4 <prvAddNewTaskToReadyList+0xbc>)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa36:	4b1d      	ldr	r3, [pc, #116]	; (800faac <prvAddNewTaskToReadyList+0xc4>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	4a1b      	ldr	r2, [pc, #108]	; (800faac <prvAddNewTaskToReadyList+0xc4>)
 800fa3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	2201      	movs	r2, #1
 800fa46:	409a      	lsls	r2, r3
 800fa48:	4b19      	ldr	r3, [pc, #100]	; (800fab0 <prvAddNewTaskToReadyList+0xc8>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	4a18      	ldr	r2, [pc, #96]	; (800fab0 <prvAddNewTaskToReadyList+0xc8>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa56:	4613      	mov	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4a15      	ldr	r2, [pc, #84]	; (800fab4 <prvAddNewTaskToReadyList+0xcc>)
 800fa60:	441a      	add	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3304      	adds	r3, #4
 800fa66:	4619      	mov	r1, r3
 800fa68:	4610      	mov	r0, r2
 800fa6a:	f7ff f800 	bl	800ea6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa6e:	f001 fb61 	bl	8011134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa72:	4b0d      	ldr	r3, [pc, #52]	; (800faa8 <prvAddNewTaskToReadyList+0xc0>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00e      	beq.n	800fa98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa7a:	4b0a      	ldr	r3, [pc, #40]	; (800faa4 <prvAddNewTaskToReadyList+0xbc>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d207      	bcs.n	800fa98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa88:	4b0b      	ldr	r3, [pc, #44]	; (800fab8 <prvAddNewTaskToReadyList+0xd0>)
 800fa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	240001d0 	.word	0x240001d0
 800faa4:	240000d0 	.word	0x240000d0
 800faa8:	240001dc 	.word	0x240001dc
 800faac:	240001ec 	.word	0x240001ec
 800fab0:	240001d8 	.word	0x240001d8
 800fab4:	240000d4 	.word	0x240000d4
 800fab8:	e000ed04 	.word	0xe000ed04

0800fabc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fac4:	2300      	movs	r3, #0
 800fac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d017      	beq.n	800fafe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800face:	4b13      	ldr	r3, [pc, #76]	; (800fb1c <vTaskDelay+0x60>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d00a      	beq.n	800faec <vTaskDelay+0x30>
	__asm volatile
 800fad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	60bb      	str	r3, [r7, #8]
}
 800fae8:	bf00      	nop
 800faea:	e7fe      	b.n	800faea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800faec:	f000 f872 	bl	800fbd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800faf0:	2100      	movs	r1, #0
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fdf0 	bl	80106d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800faf8:	f000 f87a 	bl	800fbf0 <xTaskResumeAll>
 800fafc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d107      	bne.n	800fb14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fb04:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <vTaskDelay+0x64>)
 800fb06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb0a:	601a      	str	r2, [r3, #0]
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb14:	bf00      	nop
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	240001f8 	.word	0x240001f8
 800fb20:	e000ed04 	.word	0xe000ed04

0800fb24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800fb2a:	4b22      	ldr	r3, [pc, #136]	; (800fbb4 <vTaskStartScheduler+0x90>)
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	2300      	movs	r3, #0
 800fb34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb38:	491f      	ldr	r1, [pc, #124]	; (800fbb8 <vTaskStartScheduler+0x94>)
 800fb3a:	4820      	ldr	r0, [pc, #128]	; (800fbbc <vTaskStartScheduler+0x98>)
 800fb3c:	f7ff fe74 	bl	800f828 <xTaskCreate>
 800fb40:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d102      	bne.n	800fb4e <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800fb48:	f000 fe2c 	bl	80107a4 <xTimerCreateTimerTask>
 800fb4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d11b      	bne.n	800fb8c <vTaskStartScheduler+0x68>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	60bb      	str	r3, [r7, #8]
}
 800fb66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb68:	4b15      	ldr	r3, [pc, #84]	; (800fbc0 <vTaskStartScheduler+0x9c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	334c      	adds	r3, #76	; 0x4c
 800fb6e:	4a15      	ldr	r2, [pc, #84]	; (800fbc4 <vTaskStartScheduler+0xa0>)
 800fb70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb72:	4b15      	ldr	r3, [pc, #84]	; (800fbc8 <vTaskStartScheduler+0xa4>)
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295
 800fb78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb7a:	4b14      	ldr	r3, [pc, #80]	; (800fbcc <vTaskStartScheduler+0xa8>)
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb80:	4b13      	ldr	r3, [pc, #76]	; (800fbd0 <vTaskStartScheduler+0xac>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb86:	f001 fa03 	bl	8010f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb8a:	e00e      	b.n	800fbaa <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb92:	d10a      	bne.n	800fbaa <vTaskStartScheduler+0x86>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	607b      	str	r3, [r7, #4]
}
 800fba6:	bf00      	nop
 800fba8:	e7fe      	b.n	800fba8 <vTaskStartScheduler+0x84>
}
 800fbaa:	bf00      	nop
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	240001f4 	.word	0x240001f4
 800fbb8:	0801229c 	.word	0x0801229c
 800fbbc:	080101e9 	.word	0x080101e9
 800fbc0:	240000d0 	.word	0x240000d0
 800fbc4:	24000018 	.word	0x24000018
 800fbc8:	240001f0 	.word	0x240001f0
 800fbcc:	240001dc 	.word	0x240001dc
 800fbd0:	240001d4 	.word	0x240001d4

0800fbd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fbd8:	4b04      	ldr	r3, [pc, #16]	; (800fbec <vTaskSuspendAll+0x18>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	4a03      	ldr	r2, [pc, #12]	; (800fbec <vTaskSuspendAll+0x18>)
 800fbe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fbe2:	bf00      	nop
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	240001f8 	.word	0x240001f8

0800fbf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbfe:	4b41      	ldr	r3, [pc, #260]	; (800fd04 <xTaskResumeAll+0x114>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10a      	bne.n	800fc1c <xTaskResumeAll+0x2c>
	__asm volatile
 800fc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	603b      	str	r3, [r7, #0]
}
 800fc18:	bf00      	nop
 800fc1a:	e7fe      	b.n	800fc1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc1c:	f001 fa5a 	bl	80110d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc20:	4b38      	ldr	r3, [pc, #224]	; (800fd04 <xTaskResumeAll+0x114>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	4a37      	ldr	r2, [pc, #220]	; (800fd04 <xTaskResumeAll+0x114>)
 800fc28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc2a:	4b36      	ldr	r3, [pc, #216]	; (800fd04 <xTaskResumeAll+0x114>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d161      	bne.n	800fcf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc32:	4b35      	ldr	r3, [pc, #212]	; (800fd08 <xTaskResumeAll+0x118>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d05d      	beq.n	800fcf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc3a:	e02e      	b.n	800fc9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc3c:	4b33      	ldr	r3, [pc, #204]	; (800fd0c <xTaskResumeAll+0x11c>)
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	3318      	adds	r3, #24
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fe ff6d 	bl	800eb28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3304      	adds	r3, #4
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe ff68 	bl	800eb28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	409a      	lsls	r2, r3
 800fc60:	4b2b      	ldr	r3, [pc, #172]	; (800fd10 <xTaskResumeAll+0x120>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	4a2a      	ldr	r2, [pc, #168]	; (800fd10 <xTaskResumeAll+0x120>)
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	4a27      	ldr	r2, [pc, #156]	; (800fd14 <xTaskResumeAll+0x124>)
 800fc78:	441a      	add	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4610      	mov	r0, r2
 800fc82:	f7fe fef4 	bl	800ea6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc8a:	4b23      	ldr	r3, [pc, #140]	; (800fd18 <xTaskResumeAll+0x128>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d302      	bcc.n	800fc9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fc94:	4b21      	ldr	r3, [pc, #132]	; (800fd1c <xTaskResumeAll+0x12c>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc9a:	4b1c      	ldr	r3, [pc, #112]	; (800fd0c <xTaskResumeAll+0x11c>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1cc      	bne.n	800fc3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d001      	beq.n	800fcac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fca8:	f000 fb3a 	bl	8010320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fcac:	4b1c      	ldr	r3, [pc, #112]	; (800fd20 <xTaskResumeAll+0x130>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d010      	beq.n	800fcda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fcb8:	f000 f846 	bl	800fd48 <xTaskIncrementTick>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fcc2:	4b16      	ldr	r3, [pc, #88]	; (800fd1c <xTaskResumeAll+0x12c>)
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1f1      	bne.n	800fcb8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fcd4:	4b12      	ldr	r3, [pc, #72]	; (800fd20 <xTaskResumeAll+0x130>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fcda:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <xTaskResumeAll+0x12c>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d009      	beq.n	800fcf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fce2:	2301      	movs	r3, #1
 800fce4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fce6:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <xTaskResumeAll+0x134>)
 800fce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fcf6:	f001 fa1d 	bl	8011134 <vPortExitCritical>

	return xAlreadyYielded;
 800fcfa:	68bb      	ldr	r3, [r7, #8]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	240001f8 	.word	0x240001f8
 800fd08:	240001d0 	.word	0x240001d0
 800fd0c:	24000190 	.word	0x24000190
 800fd10:	240001d8 	.word	0x240001d8
 800fd14:	240000d4 	.word	0x240000d4
 800fd18:	240000d0 	.word	0x240000d0
 800fd1c:	240001e4 	.word	0x240001e4
 800fd20:	240001e0 	.word	0x240001e0
 800fd24:	e000ed04 	.word	0xe000ed04

0800fd28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd2e:	4b05      	ldr	r3, [pc, #20]	; (800fd44 <xTaskGetTickCount+0x1c>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd34:	687b      	ldr	r3, [r7, #4]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	370c      	adds	r7, #12
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop
 800fd44:	240001d4 	.word	0x240001d4

0800fd48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd52:	4b4e      	ldr	r3, [pc, #312]	; (800fe8c <xTaskIncrementTick+0x144>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f040 808e 	bne.w	800fe78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd5c:	4b4c      	ldr	r3, [pc, #304]	; (800fe90 <xTaskIncrementTick+0x148>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3301      	adds	r3, #1
 800fd62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd64:	4a4a      	ldr	r2, [pc, #296]	; (800fe90 <xTaskIncrementTick+0x148>)
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d120      	bne.n	800fdb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd70:	4b48      	ldr	r3, [pc, #288]	; (800fe94 <xTaskIncrementTick+0x14c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00a      	beq.n	800fd90 <xTaskIncrementTick+0x48>
	__asm volatile
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	603b      	str	r3, [r7, #0]
}
 800fd8c:	bf00      	nop
 800fd8e:	e7fe      	b.n	800fd8e <xTaskIncrementTick+0x46>
 800fd90:	4b40      	ldr	r3, [pc, #256]	; (800fe94 <xTaskIncrementTick+0x14c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60fb      	str	r3, [r7, #12]
 800fd96:	4b40      	ldr	r3, [pc, #256]	; (800fe98 <xTaskIncrementTick+0x150>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a3e      	ldr	r2, [pc, #248]	; (800fe94 <xTaskIncrementTick+0x14c>)
 800fd9c:	6013      	str	r3, [r2, #0]
 800fd9e:	4a3e      	ldr	r2, [pc, #248]	; (800fe98 <xTaskIncrementTick+0x150>)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6013      	str	r3, [r2, #0]
 800fda4:	4b3d      	ldr	r3, [pc, #244]	; (800fe9c <xTaskIncrementTick+0x154>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	4a3c      	ldr	r2, [pc, #240]	; (800fe9c <xTaskIncrementTick+0x154>)
 800fdac:	6013      	str	r3, [r2, #0]
 800fdae:	f000 fab7 	bl	8010320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fdb2:	4b3b      	ldr	r3, [pc, #236]	; (800fea0 <xTaskIncrementTick+0x158>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d348      	bcc.n	800fe4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdbc:	4b35      	ldr	r3, [pc, #212]	; (800fe94 <xTaskIncrementTick+0x14c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d104      	bne.n	800fdd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdc6:	4b36      	ldr	r3, [pc, #216]	; (800fea0 <xTaskIncrementTick+0x158>)
 800fdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdcc:	601a      	str	r2, [r3, #0]
					break;
 800fdce:	e03e      	b.n	800fe4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd0:	4b30      	ldr	r3, [pc, #192]	; (800fe94 <xTaskIncrementTick+0x14c>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fde0:	693a      	ldr	r2, [r7, #16]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d203      	bcs.n	800fdf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fde8:	4a2d      	ldr	r2, [pc, #180]	; (800fea0 <xTaskIncrementTick+0x158>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fdee:	e02e      	b.n	800fe4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	3304      	adds	r3, #4
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fe fe97 	bl	800eb28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d004      	beq.n	800fe0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	3318      	adds	r3, #24
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe fe8e 	bl	800eb28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe10:	2201      	movs	r2, #1
 800fe12:	409a      	lsls	r2, r3
 800fe14:	4b23      	ldr	r3, [pc, #140]	; (800fea4 <xTaskIncrementTick+0x15c>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	4a22      	ldr	r2, [pc, #136]	; (800fea4 <xTaskIncrementTick+0x15c>)
 800fe1c:	6013      	str	r3, [r2, #0]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe22:	4613      	mov	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4413      	add	r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4a1f      	ldr	r2, [pc, #124]	; (800fea8 <xTaskIncrementTick+0x160>)
 800fe2c:	441a      	add	r2, r3
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	3304      	adds	r3, #4
 800fe32:	4619      	mov	r1, r3
 800fe34:	4610      	mov	r0, r2
 800fe36:	f7fe fe1a 	bl	800ea6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe3e:	4b1b      	ldr	r3, [pc, #108]	; (800feac <xTaskIncrementTick+0x164>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d3b9      	bcc.n	800fdbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe4c:	e7b6      	b.n	800fdbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe4e:	4b17      	ldr	r3, [pc, #92]	; (800feac <xTaskIncrementTick+0x164>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe54:	4914      	ldr	r1, [pc, #80]	; (800fea8 <xTaskIncrementTick+0x160>)
 800fe56:	4613      	mov	r3, r2
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	4413      	add	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	440b      	add	r3, r1
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d901      	bls.n	800fe6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fe66:	2301      	movs	r3, #1
 800fe68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fe6a:	4b11      	ldr	r3, [pc, #68]	; (800feb0 <xTaskIncrementTick+0x168>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d007      	beq.n	800fe82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fe72:	2301      	movs	r3, #1
 800fe74:	617b      	str	r3, [r7, #20]
 800fe76:	e004      	b.n	800fe82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fe78:	4b0e      	ldr	r3, [pc, #56]	; (800feb4 <xTaskIncrementTick+0x16c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	4a0d      	ldr	r2, [pc, #52]	; (800feb4 <xTaskIncrementTick+0x16c>)
 800fe80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fe82:	697b      	ldr	r3, [r7, #20]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	240001f8 	.word	0x240001f8
 800fe90:	240001d4 	.word	0x240001d4
 800fe94:	24000188 	.word	0x24000188
 800fe98:	2400018c 	.word	0x2400018c
 800fe9c:	240001e8 	.word	0x240001e8
 800fea0:	240001f0 	.word	0x240001f0
 800fea4:	240001d8 	.word	0x240001d8
 800fea8:	240000d4 	.word	0x240000d4
 800feac:	240000d0 	.word	0x240000d0
 800feb0:	240001e4 	.word	0x240001e4
 800feb4:	240001e0 	.word	0x240001e0

0800feb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800febe:	4b29      	ldr	r3, [pc, #164]	; (800ff64 <vTaskSwitchContext+0xac>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d003      	beq.n	800fece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fec6:	4b28      	ldr	r3, [pc, #160]	; (800ff68 <vTaskSwitchContext+0xb0>)
 800fec8:	2201      	movs	r2, #1
 800feca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fecc:	e044      	b.n	800ff58 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fece:	4b26      	ldr	r3, [pc, #152]	; (800ff68 <vTaskSwitchContext+0xb0>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fed4:	4b25      	ldr	r3, [pc, #148]	; (800ff6c <vTaskSwitchContext+0xb4>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	fab3 f383 	clz	r3, r3
 800fee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fee2:	7afb      	ldrb	r3, [r7, #11]
 800fee4:	f1c3 031f 	rsb	r3, r3, #31
 800fee8:	617b      	str	r3, [r7, #20]
 800feea:	4921      	ldr	r1, [pc, #132]	; (800ff70 <vTaskSwitchContext+0xb8>)
 800feec:	697a      	ldr	r2, [r7, #20]
 800feee:	4613      	mov	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	4413      	add	r3, r2
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	440b      	add	r3, r1
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10a      	bne.n	800ff14 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	607b      	str	r3, [r7, #4]
}
 800ff10:	bf00      	nop
 800ff12:	e7fe      	b.n	800ff12 <vTaskSwitchContext+0x5a>
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	4613      	mov	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	4413      	add	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4a14      	ldr	r2, [pc, #80]	; (800ff70 <vTaskSwitchContext+0xb8>)
 800ff20:	4413      	add	r3, r2
 800ff22:	613b      	str	r3, [r7, #16]
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	685a      	ldr	r2, [r3, #4]
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	605a      	str	r2, [r3, #4]
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	685a      	ldr	r2, [r3, #4]
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	3308      	adds	r3, #8
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d104      	bne.n	800ff44 <vTaskSwitchContext+0x8c>
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	605a      	str	r2, [r3, #4]
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	4a0a      	ldr	r2, [pc, #40]	; (800ff74 <vTaskSwitchContext+0xbc>)
 800ff4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff4e:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <vTaskSwitchContext+0xbc>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	334c      	adds	r3, #76	; 0x4c
 800ff54:	4a08      	ldr	r2, [pc, #32]	; (800ff78 <vTaskSwitchContext+0xc0>)
 800ff56:	6013      	str	r3, [r2, #0]
}
 800ff58:	bf00      	nop
 800ff5a:	371c      	adds	r7, #28
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	240001f8 	.word	0x240001f8
 800ff68:	240001e4 	.word	0x240001e4
 800ff6c:	240001d8 	.word	0x240001d8
 800ff70:	240000d4 	.word	0x240000d4
 800ff74:	240000d0 	.word	0x240000d0
 800ff78:	24000018 	.word	0x24000018

0800ff7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10a      	bne.n	800ffa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	60fb      	str	r3, [r7, #12]
}
 800ff9e:	bf00      	nop
 800ffa0:	e7fe      	b.n	800ffa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffa2:	4b07      	ldr	r3, [pc, #28]	; (800ffc0 <vTaskPlaceOnEventList+0x44>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3318      	adds	r3, #24
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7fe fd83 	bl	800eab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	6838      	ldr	r0, [r7, #0]
 800ffb4:	f000 fb90 	bl	80106d8 <prvAddCurrentTaskToDelayedList>
}
 800ffb8:	bf00      	nop
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	240000d0 	.word	0x240000d0

0800ffc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d10a      	bne.n	800ffec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	617b      	str	r3, [r7, #20]
}
 800ffe8:	bf00      	nop
 800ffea:	e7fe      	b.n	800ffea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffec:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <vTaskPlaceOnEventListRestricted+0x54>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3318      	adds	r3, #24
 800fff2:	4619      	mov	r1, r3
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f7fe fd3a 	bl	800ea6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010000:	f04f 33ff 	mov.w	r3, #4294967295
 8010004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010006:	6879      	ldr	r1, [r7, #4]
 8010008:	68b8      	ldr	r0, [r7, #8]
 801000a:	f000 fb65 	bl	80106d8 <prvAddCurrentTaskToDelayedList>
	}
 801000e:	bf00      	nop
 8010010:	3718      	adds	r7, #24
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	240000d0 	.word	0x240000d0

0801001c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010036:	f383 8811 	msr	BASEPRI, r3
 801003a:	f3bf 8f6f 	isb	sy
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	60fb      	str	r3, [r7, #12]
}
 8010044:	bf00      	nop
 8010046:	e7fe      	b.n	8010046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	3318      	adds	r3, #24
 801004c:	4618      	mov	r0, r3
 801004e:	f7fe fd6b 	bl	800eb28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010052:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <xTaskRemoveFromEventList+0xac>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d11c      	bne.n	8010094 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	3304      	adds	r3, #4
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe fd62 	bl	800eb28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010068:	2201      	movs	r2, #1
 801006a:	409a      	lsls	r2, r3
 801006c:	4b17      	ldr	r3, [pc, #92]	; (80100cc <xTaskRemoveFromEventList+0xb0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4313      	orrs	r3, r2
 8010072:	4a16      	ldr	r2, [pc, #88]	; (80100cc <xTaskRemoveFromEventList+0xb0>)
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007a:	4613      	mov	r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4413      	add	r3, r2
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	4a13      	ldr	r2, [pc, #76]	; (80100d0 <xTaskRemoveFromEventList+0xb4>)
 8010084:	441a      	add	r2, r3
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	3304      	adds	r3, #4
 801008a:	4619      	mov	r1, r3
 801008c:	4610      	mov	r0, r2
 801008e:	f7fe fcee 	bl	800ea6e <vListInsertEnd>
 8010092:	e005      	b.n	80100a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	3318      	adds	r3, #24
 8010098:	4619      	mov	r1, r3
 801009a:	480e      	ldr	r0, [pc, #56]	; (80100d4 <xTaskRemoveFromEventList+0xb8>)
 801009c:	f7fe fce7 	bl	800ea6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a4:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <xTaskRemoveFromEventList+0xbc>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d905      	bls.n	80100ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80100ae:	2301      	movs	r3, #1
 80100b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80100b2:	4b0a      	ldr	r3, [pc, #40]	; (80100dc <xTaskRemoveFromEventList+0xc0>)
 80100b4:	2201      	movs	r2, #1
 80100b6:	601a      	str	r2, [r3, #0]
 80100b8:	e001      	b.n	80100be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80100be:	697b      	ldr	r3, [r7, #20]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	240001f8 	.word	0x240001f8
 80100cc:	240001d8 	.word	0x240001d8
 80100d0:	240000d4 	.word	0x240000d4
 80100d4:	24000190 	.word	0x24000190
 80100d8:	240000d0 	.word	0x240000d0
 80100dc:	240001e4 	.word	0x240001e4

080100e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80100e8:	4b06      	ldr	r3, [pc, #24]	; (8010104 <vTaskInternalSetTimeOutState+0x24>)
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80100f0:	4b05      	ldr	r3, [pc, #20]	; (8010108 <vTaskInternalSetTimeOutState+0x28>)
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	605a      	str	r2, [r3, #4]
}
 80100f8:	bf00      	nop
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr
 8010104:	240001e8 	.word	0x240001e8
 8010108:	240001d4 	.word	0x240001d4

0801010c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b088      	sub	sp, #32
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10a      	bne.n	8010132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801011c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	613b      	str	r3, [r7, #16]
}
 801012e:	bf00      	nop
 8010130:	e7fe      	b.n	8010130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	60fb      	str	r3, [r7, #12]
}
 801014a:	bf00      	nop
 801014c:	e7fe      	b.n	801014c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801014e:	f000 ffc1 	bl	80110d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010152:	4b1d      	ldr	r3, [pc, #116]	; (80101c8 <xTaskCheckForTimeOut+0xbc>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016a:	d102      	bne.n	8010172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801016c:	2300      	movs	r3, #0
 801016e:	61fb      	str	r3, [r7, #28]
 8010170:	e023      	b.n	80101ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	4b15      	ldr	r3, [pc, #84]	; (80101cc <xTaskCheckForTimeOut+0xc0>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d007      	beq.n	801018e <xTaskCheckForTimeOut+0x82>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	69ba      	ldr	r2, [r7, #24]
 8010184:	429a      	cmp	r2, r3
 8010186:	d302      	bcc.n	801018e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010188:	2301      	movs	r3, #1
 801018a:	61fb      	str	r3, [r7, #28]
 801018c:	e015      	b.n	80101ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	429a      	cmp	r2, r3
 8010196:	d20b      	bcs.n	80101b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	1ad2      	subs	r2, r2, r3
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff ff9b 	bl	80100e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80101aa:	2300      	movs	r3, #0
 80101ac:	61fb      	str	r3, [r7, #28]
 80101ae:	e004      	b.n	80101ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2200      	movs	r2, #0
 80101b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80101b6:	2301      	movs	r3, #1
 80101b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80101ba:	f000 ffbb 	bl	8011134 <vPortExitCritical>

	return xReturn;
 80101be:	69fb      	ldr	r3, [r7, #28]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3720      	adds	r7, #32
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	240001d4 	.word	0x240001d4
 80101cc:	240001e8 	.word	0x240001e8

080101d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80101d0:	b480      	push	{r7}
 80101d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80101d4:	4b03      	ldr	r3, [pc, #12]	; (80101e4 <vTaskMissedYield+0x14>)
 80101d6:	2201      	movs	r2, #1
 80101d8:	601a      	str	r2, [r3, #0]
}
 80101da:	bf00      	nop
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr
 80101e4:	240001e4 	.word	0x240001e4

080101e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101f0:	f000 f852 	bl	8010298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80101f4:	4b06      	ldr	r3, [pc, #24]	; (8010210 <prvIdleTask+0x28>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d9f9      	bls.n	80101f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80101fc:	4b05      	ldr	r3, [pc, #20]	; (8010214 <prvIdleTask+0x2c>)
 80101fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801020c:	e7f0      	b.n	80101f0 <prvIdleTask+0x8>
 801020e:	bf00      	nop
 8010210:	240000d4 	.word	0x240000d4
 8010214:	e000ed04 	.word	0xe000ed04

08010218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801021e:	2300      	movs	r3, #0
 8010220:	607b      	str	r3, [r7, #4]
 8010222:	e00c      	b.n	801023e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	4613      	mov	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4413      	add	r3, r2
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	4a12      	ldr	r2, [pc, #72]	; (8010278 <prvInitialiseTaskLists+0x60>)
 8010230:	4413      	add	r3, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe fbee 	bl	800ea14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3301      	adds	r3, #1
 801023c:	607b      	str	r3, [r7, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b06      	cmp	r3, #6
 8010242:	d9ef      	bls.n	8010224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010244:	480d      	ldr	r0, [pc, #52]	; (801027c <prvInitialiseTaskLists+0x64>)
 8010246:	f7fe fbe5 	bl	800ea14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801024a:	480d      	ldr	r0, [pc, #52]	; (8010280 <prvInitialiseTaskLists+0x68>)
 801024c:	f7fe fbe2 	bl	800ea14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010250:	480c      	ldr	r0, [pc, #48]	; (8010284 <prvInitialiseTaskLists+0x6c>)
 8010252:	f7fe fbdf 	bl	800ea14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010256:	480c      	ldr	r0, [pc, #48]	; (8010288 <prvInitialiseTaskLists+0x70>)
 8010258:	f7fe fbdc 	bl	800ea14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801025c:	480b      	ldr	r0, [pc, #44]	; (801028c <prvInitialiseTaskLists+0x74>)
 801025e:	f7fe fbd9 	bl	800ea14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010262:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <prvInitialiseTaskLists+0x78>)
 8010264:	4a05      	ldr	r2, [pc, #20]	; (801027c <prvInitialiseTaskLists+0x64>)
 8010266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010268:	4b0a      	ldr	r3, [pc, #40]	; (8010294 <prvInitialiseTaskLists+0x7c>)
 801026a:	4a05      	ldr	r2, [pc, #20]	; (8010280 <prvInitialiseTaskLists+0x68>)
 801026c:	601a      	str	r2, [r3, #0]
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	240000d4 	.word	0x240000d4
 801027c:	24000160 	.word	0x24000160
 8010280:	24000174 	.word	0x24000174
 8010284:	24000190 	.word	0x24000190
 8010288:	240001a4 	.word	0x240001a4
 801028c:	240001bc 	.word	0x240001bc
 8010290:	24000188 	.word	0x24000188
 8010294:	2400018c 	.word	0x2400018c

08010298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801029e:	e019      	b.n	80102d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80102a0:	f000 ff18 	bl	80110d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a4:	4b10      	ldr	r3, [pc, #64]	; (80102e8 <prvCheckTasksWaitingTermination+0x50>)
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	3304      	adds	r3, #4
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fe fc39 	bl	800eb28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80102b6:	4b0d      	ldr	r3, [pc, #52]	; (80102ec <prvCheckTasksWaitingTermination+0x54>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	4a0b      	ldr	r2, [pc, #44]	; (80102ec <prvCheckTasksWaitingTermination+0x54>)
 80102be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80102c0:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <prvCheckTasksWaitingTermination+0x58>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	4a0a      	ldr	r2, [pc, #40]	; (80102f0 <prvCheckTasksWaitingTermination+0x58>)
 80102c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80102ca:	f000 ff33 	bl	8011134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f810 	bl	80102f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102d4:	4b06      	ldr	r3, [pc, #24]	; (80102f0 <prvCheckTasksWaitingTermination+0x58>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1e1      	bne.n	80102a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80102dc:	bf00      	nop
 80102de:	bf00      	nop
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	240001a4 	.word	0x240001a4
 80102ec:	240001d0 	.word	0x240001d0
 80102f0:	240001b8 	.word	0x240001b8

080102f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	334c      	adds	r3, #76	; 0x4c
 8010300:	4618      	mov	r0, r3
 8010302:	f001 faa3 	bl	801184c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030a:	4618      	mov	r0, r3
 801030c:	f001 f8d0 	bl	80114b0 <vPortFree>
			vPortFree( pxTCB );
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f001 f8cd 	bl	80114b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010316:	bf00      	nop
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010326:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <prvResetNextTaskUnblockTime+0x38>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d104      	bne.n	801033a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010330:	4b0a      	ldr	r3, [pc, #40]	; (801035c <prvResetNextTaskUnblockTime+0x3c>)
 8010332:	f04f 32ff 	mov.w	r2, #4294967295
 8010336:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010338:	e008      	b.n	801034c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801033a:	4b07      	ldr	r3, [pc, #28]	; (8010358 <prvResetNextTaskUnblockTime+0x38>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	4a04      	ldr	r2, [pc, #16]	; (801035c <prvResetNextTaskUnblockTime+0x3c>)
 801034a:	6013      	str	r3, [r2, #0]
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr
 8010358:	24000188 	.word	0x24000188
 801035c:	240001f0 	.word	0x240001f0

08010360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010366:	4b0b      	ldr	r3, [pc, #44]	; (8010394 <xTaskGetSchedulerState+0x34>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801036e:	2301      	movs	r3, #1
 8010370:	607b      	str	r3, [r7, #4]
 8010372:	e008      	b.n	8010386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010374:	4b08      	ldr	r3, [pc, #32]	; (8010398 <xTaskGetSchedulerState+0x38>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801037c:	2302      	movs	r3, #2
 801037e:	607b      	str	r3, [r7, #4]
 8010380:	e001      	b.n	8010386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010382:	2300      	movs	r3, #0
 8010384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010386:	687b      	ldr	r3, [r7, #4]
	}
 8010388:	4618      	mov	r0, r3
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr
 8010394:	240001dc 	.word	0x240001dc
 8010398:	240001f8 	.word	0x240001f8

0801039c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80103a8:	2300      	movs	r3, #0
 80103aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d05e      	beq.n	8010470 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b6:	4b31      	ldr	r3, [pc, #196]	; (801047c <xTaskPriorityInherit+0xe0>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	429a      	cmp	r2, r3
 80103be:	d24e      	bcs.n	801045e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	699b      	ldr	r3, [r3, #24]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	db06      	blt.n	80103d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103c8:	4b2c      	ldr	r3, [pc, #176]	; (801047c <xTaskPriorityInherit+0xe0>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ce:	f1c3 0207 	rsb	r2, r3, #7
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	6959      	ldr	r1, [r3, #20]
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103de:	4613      	mov	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4413      	add	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	4a26      	ldr	r2, [pc, #152]	; (8010480 <xTaskPriorityInherit+0xe4>)
 80103e8:	4413      	add	r3, r2
 80103ea:	4299      	cmp	r1, r3
 80103ec:	d12f      	bne.n	801044e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	3304      	adds	r3, #4
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fe fb98 	bl	800eb28 <uxListRemove>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d10a      	bne.n	8010414 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010402:	2201      	movs	r2, #1
 8010404:	fa02 f303 	lsl.w	r3, r2, r3
 8010408:	43da      	mvns	r2, r3
 801040a:	4b1e      	ldr	r3, [pc, #120]	; (8010484 <xTaskPriorityInherit+0xe8>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4013      	ands	r3, r2
 8010410:	4a1c      	ldr	r2, [pc, #112]	; (8010484 <xTaskPriorityInherit+0xe8>)
 8010412:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010414:	4b19      	ldr	r3, [pc, #100]	; (801047c <xTaskPriorityInherit+0xe0>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	2201      	movs	r2, #1
 8010424:	409a      	lsls	r2, r3
 8010426:	4b17      	ldr	r3, [pc, #92]	; (8010484 <xTaskPriorityInherit+0xe8>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4313      	orrs	r3, r2
 801042c:	4a15      	ldr	r2, [pc, #84]	; (8010484 <xTaskPriorityInherit+0xe8>)
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010434:	4613      	mov	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4a10      	ldr	r2, [pc, #64]	; (8010480 <xTaskPriorityInherit+0xe4>)
 801043e:	441a      	add	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	3304      	adds	r3, #4
 8010444:	4619      	mov	r1, r3
 8010446:	4610      	mov	r0, r2
 8010448:	f7fe fb11 	bl	800ea6e <vListInsertEnd>
 801044c:	e004      	b.n	8010458 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801044e:	4b0b      	ldr	r3, [pc, #44]	; (801047c <xTaskPriorityInherit+0xe0>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010458:	2301      	movs	r3, #1
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	e008      	b.n	8010470 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010462:	4b06      	ldr	r3, [pc, #24]	; (801047c <xTaskPriorityInherit+0xe0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010468:	429a      	cmp	r2, r3
 801046a:	d201      	bcs.n	8010470 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801046c:	2301      	movs	r3, #1
 801046e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010470:	68fb      	ldr	r3, [r7, #12]
	}
 8010472:	4618      	mov	r0, r3
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	240000d0 	.word	0x240000d0
 8010480:	240000d4 	.word	0x240000d4
 8010484:	240001d8 	.word	0x240001d8

08010488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010494:	2300      	movs	r3, #0
 8010496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d06e      	beq.n	801057c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801049e:	4b3a      	ldr	r3, [pc, #232]	; (8010588 <xTaskPriorityDisinherit+0x100>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	693a      	ldr	r2, [r7, #16]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d00a      	beq.n	80104be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80104a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ac:	f383 8811 	msr	BASEPRI, r3
 80104b0:	f3bf 8f6f 	isb	sy
 80104b4:	f3bf 8f4f 	dsb	sy
 80104b8:	60fb      	str	r3, [r7, #12]
}
 80104ba:	bf00      	nop
 80104bc:	e7fe      	b.n	80104bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d10a      	bne.n	80104dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80104c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	60bb      	str	r3, [r7, #8]
}
 80104d8:	bf00      	nop
 80104da:	e7fe      	b.n	80104da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104e0:	1e5a      	subs	r2, r3, #1
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d044      	beq.n	801057c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d140      	bne.n	801057c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	3304      	adds	r3, #4
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe fb12 	bl	800eb28 <uxListRemove>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d115      	bne.n	8010536 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801050e:	491f      	ldr	r1, [pc, #124]	; (801058c <xTaskPriorityDisinherit+0x104>)
 8010510:	4613      	mov	r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4413      	add	r3, r2
 8010516:	009b      	lsls	r3, r3, #2
 8010518:	440b      	add	r3, r1
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10a      	bne.n	8010536 <xTaskPriorityDisinherit+0xae>
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010524:	2201      	movs	r2, #1
 8010526:	fa02 f303 	lsl.w	r3, r2, r3
 801052a:	43da      	mvns	r2, r3
 801052c:	4b18      	ldr	r3, [pc, #96]	; (8010590 <xTaskPriorityDisinherit+0x108>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4013      	ands	r3, r2
 8010532:	4a17      	ldr	r2, [pc, #92]	; (8010590 <xTaskPriorityDisinherit+0x108>)
 8010534:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010542:	f1c3 0207 	rsb	r2, r3, #7
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	2201      	movs	r2, #1
 8010550:	409a      	lsls	r2, r3
 8010552:	4b0f      	ldr	r3, [pc, #60]	; (8010590 <xTaskPriorityDisinherit+0x108>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4313      	orrs	r3, r2
 8010558:	4a0d      	ldr	r2, [pc, #52]	; (8010590 <xTaskPriorityDisinherit+0x108>)
 801055a:	6013      	str	r3, [r2, #0]
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010560:	4613      	mov	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4413      	add	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4a08      	ldr	r2, [pc, #32]	; (801058c <xTaskPriorityDisinherit+0x104>)
 801056a:	441a      	add	r2, r3
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	3304      	adds	r3, #4
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7fe fa7b 	bl	800ea6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010578:	2301      	movs	r3, #1
 801057a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801057c:	697b      	ldr	r3, [r7, #20]
	}
 801057e:	4618      	mov	r0, r3
 8010580:	3718      	adds	r7, #24
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	240000d0 	.word	0x240000d0
 801058c:	240000d4 	.word	0x240000d4
 8010590:	240001d8 	.word	0x240001d8

08010594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010594:	b580      	push	{r7, lr}
 8010596:	b088      	sub	sp, #32
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80105a2:	2301      	movs	r3, #1
 80105a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d077      	beq.n	801069c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d10a      	bne.n	80105ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80105b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b8:	f383 8811 	msr	BASEPRI, r3
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	60fb      	str	r3, [r7, #12]
}
 80105c6:	bf00      	nop
 80105c8:	e7fe      	b.n	80105c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ce:	683a      	ldr	r2, [r7, #0]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d902      	bls.n	80105da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	61fb      	str	r3, [r7, #28]
 80105d8:	e002      	b.n	80105e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80105e0:	69bb      	ldr	r3, [r7, #24]
 80105e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e4:	69fa      	ldr	r2, [r7, #28]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d058      	beq.n	801069c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105ee:	697a      	ldr	r2, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d153      	bne.n	801069c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80105f4:	4b2b      	ldr	r3, [pc, #172]	; (80106a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	69ba      	ldr	r2, [r7, #24]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d10a      	bne.n	8010614 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	60bb      	str	r3, [r7, #8]
}
 8010610:	bf00      	nop
 8010612:	e7fe      	b.n	8010612 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010618:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	2b00      	cmp	r3, #0
 8010626:	db04      	blt.n	8010632 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	f1c3 0207 	rsb	r2, r3, #7
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	6959      	ldr	r1, [r3, #20]
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	4613      	mov	r3, r2
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4413      	add	r3, r2
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	4a19      	ldr	r2, [pc, #100]	; (80106a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010642:	4413      	add	r3, r2
 8010644:	4299      	cmp	r1, r3
 8010646:	d129      	bne.n	801069c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	3304      	adds	r3, #4
 801064c:	4618      	mov	r0, r3
 801064e:	f7fe fa6b 	bl	800eb28 <uxListRemove>
 8010652:	4603      	mov	r3, r0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10a      	bne.n	801066e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065c:	2201      	movs	r2, #1
 801065e:	fa02 f303 	lsl.w	r3, r2, r3
 8010662:	43da      	mvns	r2, r3
 8010664:	4b11      	ldr	r3, [pc, #68]	; (80106ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4013      	ands	r3, r2
 801066a:	4a10      	ldr	r2, [pc, #64]	; (80106ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801066c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010672:	2201      	movs	r2, #1
 8010674:	409a      	lsls	r2, r3
 8010676:	4b0d      	ldr	r3, [pc, #52]	; (80106ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4313      	orrs	r3, r2
 801067c:	4a0b      	ldr	r2, [pc, #44]	; (80106ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801067e:	6013      	str	r3, [r2, #0]
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010684:	4613      	mov	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	4413      	add	r3, r2
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	4a06      	ldr	r2, [pc, #24]	; (80106a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801068e:	441a      	add	r2, r3
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	3304      	adds	r3, #4
 8010694:	4619      	mov	r1, r3
 8010696:	4610      	mov	r0, r2
 8010698:	f7fe f9e9 	bl	800ea6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801069c:	bf00      	nop
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	240000d0 	.word	0x240000d0
 80106a8:	240000d4 	.word	0x240000d4
 80106ac:	240001d8 	.word	0x240001d8

080106b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80106b0:	b480      	push	{r7}
 80106b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80106b4:	4b07      	ldr	r3, [pc, #28]	; (80106d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d004      	beq.n	80106c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80106bc:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80106c2:	3201      	adds	r2, #1
 80106c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80106c6:	4b03      	ldr	r3, [pc, #12]	; (80106d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80106c8:	681b      	ldr	r3, [r3, #0]
	}
 80106ca:	4618      	mov	r0, r3
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr
 80106d4:	240000d0 	.word	0x240000d0

080106d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106e2:	4b29      	ldr	r3, [pc, #164]	; (8010788 <prvAddCurrentTaskToDelayedList+0xb0>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106e8:	4b28      	ldr	r3, [pc, #160]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	3304      	adds	r3, #4
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fa1a 	bl	800eb28 <uxListRemove>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10b      	bne.n	8010712 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80106fa:	4b24      	ldr	r3, [pc, #144]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010700:	2201      	movs	r2, #1
 8010702:	fa02 f303 	lsl.w	r3, r2, r3
 8010706:	43da      	mvns	r2, r3
 8010708:	4b21      	ldr	r3, [pc, #132]	; (8010790 <prvAddCurrentTaskToDelayedList+0xb8>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4013      	ands	r3, r2
 801070e:	4a20      	ldr	r2, [pc, #128]	; (8010790 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010710:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010718:	d10a      	bne.n	8010730 <prvAddCurrentTaskToDelayedList+0x58>
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d007      	beq.n	8010730 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010720:	4b1a      	ldr	r3, [pc, #104]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	3304      	adds	r3, #4
 8010726:	4619      	mov	r1, r3
 8010728:	481a      	ldr	r0, [pc, #104]	; (8010794 <prvAddCurrentTaskToDelayedList+0xbc>)
 801072a:	f7fe f9a0 	bl	800ea6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801072e:	e026      	b.n	801077e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	4413      	add	r3, r2
 8010736:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010738:	4b14      	ldr	r3, [pc, #80]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	429a      	cmp	r2, r3
 8010746:	d209      	bcs.n	801075c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010748:	4b13      	ldr	r3, [pc, #76]	; (8010798 <prvAddCurrentTaskToDelayedList+0xc0>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	4b0f      	ldr	r3, [pc, #60]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3304      	adds	r3, #4
 8010752:	4619      	mov	r1, r3
 8010754:	4610      	mov	r0, r2
 8010756:	f7fe f9ae 	bl	800eab6 <vListInsert>
}
 801075a:	e010      	b.n	801077e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801075c:	4b0f      	ldr	r3, [pc, #60]	; (801079c <prvAddCurrentTaskToDelayedList+0xc4>)
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	4b0a      	ldr	r3, [pc, #40]	; (801078c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	3304      	adds	r3, #4
 8010766:	4619      	mov	r1, r3
 8010768:	4610      	mov	r0, r2
 801076a:	f7fe f9a4 	bl	800eab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801076e:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	68ba      	ldr	r2, [r7, #8]
 8010774:	429a      	cmp	r2, r3
 8010776:	d202      	bcs.n	801077e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010778:	4a09      	ldr	r2, [pc, #36]	; (80107a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	6013      	str	r3, [r2, #0]
}
 801077e:	bf00      	nop
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	240001d4 	.word	0x240001d4
 801078c:	240000d0 	.word	0x240000d0
 8010790:	240001d8 	.word	0x240001d8
 8010794:	240001bc 	.word	0x240001bc
 8010798:	2400018c 	.word	0x2400018c
 801079c:	24000188 	.word	0x24000188
 80107a0:	240001f0 	.word	0x240001f0

080107a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80107aa:	2300      	movs	r3, #0
 80107ac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80107ae:	f000 fb31 	bl	8010e14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80107b2:	4b11      	ldr	r3, [pc, #68]	; (80107f8 <xTimerCreateTimerTask+0x54>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00b      	beq.n	80107d2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80107ba:	4b10      	ldr	r3, [pc, #64]	; (80107fc <xTimerCreateTimerTask+0x58>)
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	2305      	movs	r3, #5
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107c8:	490d      	ldr	r1, [pc, #52]	; (8010800 <xTimerCreateTimerTask+0x5c>)
 80107ca:	480e      	ldr	r0, [pc, #56]	; (8010804 <xTimerCreateTimerTask+0x60>)
 80107cc:	f7ff f82c 	bl	800f828 <xTaskCreate>
 80107d0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10a      	bne.n	80107ee <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	f383 8811 	msr	BASEPRI, r3
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	603b      	str	r3, [r7, #0]
}
 80107ea:	bf00      	nop
 80107ec:	e7fe      	b.n	80107ec <xTimerCreateTimerTask+0x48>
	return xReturn;
 80107ee:	687b      	ldr	r3, [r7, #4]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	2400022c 	.word	0x2400022c
 80107fc:	24000230 	.word	0x24000230
 8010800:	080122a4 	.word	0x080122a4
 8010804:	080109f5 	.word	0x080109f5

08010808 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af02      	add	r7, sp, #8
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010816:	2028      	movs	r0, #40	; 0x28
 8010818:	f000 fd7e 	bl	8011318 <pvPortMalloc>
 801081c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00d      	beq.n	8010840 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f000 f805 	bl	801084a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010840:	697b      	ldr	r3, [r7, #20]
	}
 8010842:	4618      	mov	r0, r3
 8010844:	3718      	adds	r7, #24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b086      	sub	sp, #24
 801084e:	af00      	add	r7, sp, #0
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	60b9      	str	r1, [r7, #8]
 8010854:	607a      	str	r2, [r7, #4]
 8010856:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10a      	bne.n	8010874 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	617b      	str	r3, [r7, #20]
}
 8010870:	bf00      	nop
 8010872:	e7fe      	b.n	8010872 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010876:	2b00      	cmp	r3, #0
 8010878:	d01e      	beq.n	80108b8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801087a:	f000 facb 	bl	8010e14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	6a3a      	ldr	r2, [r7, #32]
 8010894:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	3304      	adds	r3, #4
 801089a:	4618      	mov	r0, r3
 801089c:	f7fe f8da 	bl	800ea54 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d008      	beq.n	80108b8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108ac:	f043 0304 	orr.w	r3, r3, #4
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80108b8:	bf00      	nop
 80108ba:	3718      	adds	r7, #24
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	; 0x28
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108ce:	2300      	movs	r3, #0
 80108d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d10a      	bne.n	80108ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80108d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	623b      	str	r3, [r7, #32]
}
 80108ea:	bf00      	nop
 80108ec:	e7fe      	b.n	80108ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108ee:	4b1a      	ldr	r3, [pc, #104]	; (8010958 <xTimerGenericCommand+0x98>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d02a      	beq.n	801094c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b05      	cmp	r3, #5
 8010906:	dc18      	bgt.n	801093a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010908:	f7ff fd2a 	bl	8010360 <xTaskGetSchedulerState>
 801090c:	4603      	mov	r3, r0
 801090e:	2b02      	cmp	r3, #2
 8010910:	d109      	bne.n	8010926 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010912:	4b11      	ldr	r3, [pc, #68]	; (8010958 <xTimerGenericCommand+0x98>)
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f107 0114 	add.w	r1, r7, #20
 801091a:	2300      	movs	r3, #0
 801091c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091e:	f7fe f9eb 	bl	800ecf8 <xQueueGenericSend>
 8010922:	6278      	str	r0, [r7, #36]	; 0x24
 8010924:	e012      	b.n	801094c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010926:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <xTimerGenericCommand+0x98>)
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	f107 0114 	add.w	r1, r7, #20
 801092e:	2300      	movs	r3, #0
 8010930:	2200      	movs	r2, #0
 8010932:	f7fe f9e1 	bl	800ecf8 <xQueueGenericSend>
 8010936:	6278      	str	r0, [r7, #36]	; 0x24
 8010938:	e008      	b.n	801094c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801093a:	4b07      	ldr	r3, [pc, #28]	; (8010958 <xTimerGenericCommand+0x98>)
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	f107 0114 	add.w	r1, r7, #20
 8010942:	2300      	movs	r3, #0
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	f7fe fad5 	bl	800eef4 <xQueueGenericSendFromISR>
 801094a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801094e:	4618      	mov	r0, r3
 8010950:	3728      	adds	r7, #40	; 0x28
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	2400022c 	.word	0x2400022c

0801095c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af02      	add	r7, sp, #8
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010966:	4b22      	ldr	r3, [pc, #136]	; (80109f0 <prvProcessExpiredTimer+0x94>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	3304      	adds	r3, #4
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe f8d7 	bl	800eb28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010980:	f003 0304 	and.w	r3, r3, #4
 8010984:	2b00      	cmp	r3, #0
 8010986:	d022      	beq.n	80109ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	699a      	ldr	r2, [r3, #24]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	18d1      	adds	r1, r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	6978      	ldr	r0, [r7, #20]
 8010996:	f000 f8d1 	bl	8010b3c <prvInsertTimerInActiveList>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d01f      	beq.n	80109e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109a0:	2300      	movs	r3, #0
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	2300      	movs	r3, #0
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	2100      	movs	r1, #0
 80109aa:	6978      	ldr	r0, [r7, #20]
 80109ac:	f7ff ff88 	bl	80108c0 <xTimerGenericCommand>
 80109b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d113      	bne.n	80109e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	60fb      	str	r3, [r7, #12]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80109d4:	f023 0301 	bic.w	r3, r3, #1
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	6a1b      	ldr	r3, [r3, #32]
 80109e4:	6978      	ldr	r0, [r7, #20]
 80109e6:	4798      	blx	r3
}
 80109e8:	bf00      	nop
 80109ea:	3718      	adds	r7, #24
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	24000224 	.word	0x24000224

080109f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109fc:	f107 0308 	add.w	r3, r7, #8
 8010a00:	4618      	mov	r0, r3
 8010a02:	f000 f857 	bl	8010ab4 <prvGetNextExpireTime>
 8010a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 f803 	bl	8010a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a12:	f000 f8d5 	bl	8010bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a16:	e7f1      	b.n	80109fc <prvTimerTask+0x8>

08010a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a22:	f7ff f8d7 	bl	800fbd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a26:	f107 0308 	add.w	r3, r7, #8
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 f866 	bl	8010afc <prvSampleTimeNow>
 8010a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d130      	bne.n	8010a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10a      	bne.n	8010a54 <prvProcessTimerOrBlockTask+0x3c>
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d806      	bhi.n	8010a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a46:	f7ff f8d3 	bl	800fbf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a4a:	68f9      	ldr	r1, [r7, #12]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ff85 	bl	801095c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a52:	e024      	b.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d008      	beq.n	8010a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a5a:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <prvProcessTimerOrBlockTask+0x90>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d101      	bne.n	8010a68 <prvProcessTimerOrBlockTask+0x50>
 8010a64:	2301      	movs	r3, #1
 8010a66:	e000      	b.n	8010a6a <prvProcessTimerOrBlockTask+0x52>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <prvProcessTimerOrBlockTask+0x94>)
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	4619      	mov	r1, r3
 8010a7a:	f7fe fea1 	bl	800f7c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a7e:	f7ff f8b7 	bl	800fbf0 <xTaskResumeAll>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d10a      	bne.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a88:	4b09      	ldr	r3, [pc, #36]	; (8010ab0 <prvProcessTimerOrBlockTask+0x98>)
 8010a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	f3bf 8f6f 	isb	sy
}
 8010a98:	e001      	b.n	8010a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a9a:	f7ff f8a9 	bl	800fbf0 <xTaskResumeAll>
}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	24000228 	.word	0x24000228
 8010aac:	2400022c 	.word	0x2400022c
 8010ab0:	e000ed04 	.word	0xe000ed04

08010ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b085      	sub	sp, #20
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010abc:	4b0e      	ldr	r3, [pc, #56]	; (8010af8 <prvGetNextExpireTime+0x44>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d101      	bne.n	8010aca <prvGetNextExpireTime+0x16>
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	e000      	b.n	8010acc <prvGetNextExpireTime+0x18>
 8010aca:	2200      	movs	r2, #0
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d105      	bne.n	8010ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ad8:	4b07      	ldr	r3, [pc, #28]	; (8010af8 <prvGetNextExpireTime+0x44>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	e001      	b.n	8010ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3714      	adds	r7, #20
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	24000224 	.word	0x24000224

08010afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b04:	f7ff f910 	bl	800fd28 <xTaskGetTickCount>
 8010b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <prvSampleTimeNow+0x3c>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d205      	bcs.n	8010b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b14:	f000 f91a 	bl	8010d4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]
 8010b1e:	e002      	b.n	8010b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b26:	4a04      	ldr	r2, [pc, #16]	; (8010b38 <prvSampleTimeNow+0x3c>)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	24000234 	.word	0x24000234

08010b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
 8010b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	68ba      	ldr	r2, [r7, #8]
 8010b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d812      	bhi.n	8010b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	1ad2      	subs	r2, r2, r3
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d302      	bcc.n	8010b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b70:	2301      	movs	r3, #1
 8010b72:	617b      	str	r3, [r7, #20]
 8010b74:	e01b      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b76:	4b10      	ldr	r3, [pc, #64]	; (8010bb8 <prvInsertTimerInActiveList+0x7c>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	4619      	mov	r1, r3
 8010b80:	4610      	mov	r0, r2
 8010b82:	f7fd ff98 	bl	800eab6 <vListInsert>
 8010b86:	e012      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d206      	bcs.n	8010b9e <prvInsertTimerInActiveList+0x62>
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d302      	bcc.n	8010b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	e007      	b.n	8010bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b9e:	4b07      	ldr	r3, [pc, #28]	; (8010bbc <prvInsertTimerInActiveList+0x80>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4610      	mov	r0, r2
 8010baa:	f7fd ff84 	bl	800eab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010bae:	697b      	ldr	r3, [r7, #20]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3718      	adds	r7, #24
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	24000228 	.word	0x24000228
 8010bbc:	24000224 	.word	0x24000224

08010bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08c      	sub	sp, #48	; 0x30
 8010bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bc6:	e0ae      	b.n	8010d26 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f2c0 80aa 	blt.w	8010d24 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	695b      	ldr	r3, [r3, #20]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d004      	beq.n	8010be6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	3304      	adds	r3, #4
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fd ffa1 	bl	800eb28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010be6:	1d3b      	adds	r3, r7, #4
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff ff87 	bl	8010afc <prvSampleTimeNow>
 8010bee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2b09      	cmp	r3, #9
 8010bf4:	f200 8097 	bhi.w	8010d26 <prvProcessReceivedCommands+0x166>
 8010bf8:	a201      	add	r2, pc, #4	; (adr r2, 8010c00 <prvProcessReceivedCommands+0x40>)
 8010bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfe:	bf00      	nop
 8010c00:	08010c29 	.word	0x08010c29
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c29 	.word	0x08010c29
 8010c0c:	08010c9d 	.word	0x08010c9d
 8010c10:	08010cb1 	.word	0x08010cb1
 8010c14:	08010cfb 	.word	0x08010cfb
 8010c18:	08010c29 	.word	0x08010c29
 8010c1c:	08010c29 	.word	0x08010c29
 8010c20:	08010c9d 	.word	0x08010c9d
 8010c24:	08010cb1 	.word	0x08010cb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010c2e:	f043 0301 	orr.w	r3, r3, #1
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	18d1      	adds	r1, r2, r3
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6a3a      	ldr	r2, [r7, #32]
 8010c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c48:	f7ff ff78 	bl	8010b3c <prvInsertTimerInActiveList>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d069      	beq.n	8010d26 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	6a1b      	ldr	r3, [r3, #32]
 8010c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010c60:	f003 0304 	and.w	r3, r3, #4
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d05e      	beq.n	8010d26 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	441a      	add	r2, r3
 8010c70:	2300      	movs	r3, #0
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	2300      	movs	r3, #0
 8010c76:	2100      	movs	r1, #0
 8010c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c7a:	f7ff fe21 	bl	80108c0 <xTimerGenericCommand>
 8010c7e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d14f      	bne.n	8010d26 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8010c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8a:	f383 8811 	msr	BASEPRI, r3
 8010c8e:	f3bf 8f6f 	isb	sy
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	61bb      	str	r3, [r7, #24]
}
 8010c98:	bf00      	nop
 8010c9a:	e7fe      	b.n	8010c9a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010ca2:	f023 0301 	bic.w	r3, r3, #1
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8010cae:	e03a      	b.n	8010d26 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010cb6:	f043 0301 	orr.w	r3, r3, #1
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cca:	699b      	ldr	r3, [r3, #24]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10a      	bne.n	8010ce6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8010cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	617b      	str	r3, [r7, #20]
}
 8010ce2:	bf00      	nop
 8010ce4:	e7fe      	b.n	8010ce4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce8:	699a      	ldr	r2, [r3, #24]
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	18d1      	adds	r1, r2, r3
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	6a3a      	ldr	r2, [r7, #32]
 8010cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cf4:	f7ff ff22 	bl	8010b3c <prvInsertTimerInActiveList>
					break;
 8010cf8:	e015      	b.n	8010d26 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d00:	f003 0302 	and.w	r3, r3, #2
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d103      	bne.n	8010d10 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8010d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d0a:	f000 fbd1 	bl	80114b0 <vPortFree>
 8010d0e:	e00a      	b.n	8010d26 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d16:	f023 0301 	bic.w	r3, r3, #1
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d22:	e000      	b.n	8010d26 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d26:	4b08      	ldr	r3, [pc, #32]	; (8010d48 <prvProcessReceivedCommands+0x188>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f107 0108 	add.w	r1, r7, #8
 8010d2e:	2200      	movs	r2, #0
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7fe fa07 	bl	800f144 <xQueueReceive>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f47f af45 	bne.w	8010bc8 <prvProcessReceivedCommands+0x8>
	}
}
 8010d3e:	bf00      	nop
 8010d40:	bf00      	nop
 8010d42:	3728      	adds	r7, #40	; 0x28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	2400022c 	.word	0x2400022c

08010d4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d52:	e048      	b.n	8010de6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d54:	4b2d      	ldr	r3, [pc, #180]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d5e:	4b2b      	ldr	r3, [pc, #172]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fd fedb 	bl	800eb28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010d80:	f003 0304 	and.w	r3, r3, #4
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d02e      	beq.n	8010de6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	699b      	ldr	r3, [r3, #24]
 8010d8c:	693a      	ldr	r2, [r7, #16]
 8010d8e:	4413      	add	r3, r2
 8010d90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d90e      	bls.n	8010db8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010da6:	4b19      	ldr	r3, [pc, #100]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	3304      	adds	r3, #4
 8010dae:	4619      	mov	r1, r3
 8010db0:	4610      	mov	r0, r2
 8010db2:	f7fd fe80 	bl	800eab6 <vListInsert>
 8010db6:	e016      	b.n	8010de6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010db8:	2300      	movs	r3, #0
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f7ff fd7c 	bl	80108c0 <xTimerGenericCommand>
 8010dc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10a      	bne.n	8010de6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	603b      	str	r3, [r7, #0]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010de6:	4b09      	ldr	r3, [pc, #36]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d1b1      	bne.n	8010d54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010df0:	4b06      	ldr	r3, [pc, #24]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010df6:	4b06      	ldr	r3, [pc, #24]	; (8010e10 <prvSwitchTimerLists+0xc4>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a04      	ldr	r2, [pc, #16]	; (8010e0c <prvSwitchTimerLists+0xc0>)
 8010dfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010dfe:	4a04      	ldr	r2, [pc, #16]	; (8010e10 <prvSwitchTimerLists+0xc4>)
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	6013      	str	r3, [r2, #0]
}
 8010e04:	bf00      	nop
 8010e06:	3718      	adds	r7, #24
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	24000224 	.word	0x24000224
 8010e10:	24000228 	.word	0x24000228

08010e14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e18:	f000 f95c 	bl	80110d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e1c:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <prvCheckForValidListAndQueue+0x54>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d11d      	bne.n	8010e60 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e24:	4811      	ldr	r0, [pc, #68]	; (8010e6c <prvCheckForValidListAndQueue+0x58>)
 8010e26:	f7fd fdf5 	bl	800ea14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e2a:	4811      	ldr	r0, [pc, #68]	; (8010e70 <prvCheckForValidListAndQueue+0x5c>)
 8010e2c:	f7fd fdf2 	bl	800ea14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e30:	4b10      	ldr	r3, [pc, #64]	; (8010e74 <prvCheckForValidListAndQueue+0x60>)
 8010e32:	4a0e      	ldr	r2, [pc, #56]	; (8010e6c <prvCheckForValidListAndQueue+0x58>)
 8010e34:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e36:	4b10      	ldr	r3, [pc, #64]	; (8010e78 <prvCheckForValidListAndQueue+0x64>)
 8010e38:	4a0d      	ldr	r2, [pc, #52]	; (8010e70 <prvCheckForValidListAndQueue+0x5c>)
 8010e3a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	210c      	movs	r1, #12
 8010e40:	2010      	movs	r0, #16
 8010e42:	f7fd ff03 	bl	800ec4c <xQueueGenericCreate>
 8010e46:	4603      	mov	r3, r0
 8010e48:	4a07      	ldr	r2, [pc, #28]	; (8010e68 <prvCheckForValidListAndQueue+0x54>)
 8010e4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e4c:	4b06      	ldr	r3, [pc, #24]	; (8010e68 <prvCheckForValidListAndQueue+0x54>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d005      	beq.n	8010e60 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e54:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <prvCheckForValidListAndQueue+0x54>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4908      	ldr	r1, [pc, #32]	; (8010e7c <prvCheckForValidListAndQueue+0x68>)
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe fc86 	bl	800f76c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e60:	f000 f968 	bl	8011134 <vPortExitCritical>
}
 8010e64:	bf00      	nop
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	2400022c 	.word	0x2400022c
 8010e6c:	240001fc 	.word	0x240001fc
 8010e70:	24000210 	.word	0x24000210
 8010e74:	24000224 	.word	0x24000224
 8010e78:	24000228 	.word	0x24000228
 8010e7c:	080122ac 	.word	0x080122ac

08010e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3b04      	subs	r3, #4
 8010e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3b04      	subs	r3, #4
 8010e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	f023 0201 	bic.w	r2, r3, #1
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	3b04      	subs	r3, #4
 8010eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010eb0:	4a0c      	ldr	r2, [pc, #48]	; (8010ee4 <pxPortInitialiseStack+0x64>)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	3b14      	subs	r3, #20
 8010eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3b04      	subs	r3, #4
 8010ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f06f 0202 	mvn.w	r2, #2
 8010ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3b20      	subs	r3, #32
 8010ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3714      	adds	r7, #20
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr
 8010ee4:	08010ee9 	.word	0x08010ee9

08010ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ef2:	4b12      	ldr	r3, [pc, #72]	; (8010f3c <prvTaskExitError+0x54>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d00a      	beq.n	8010f12 <prvTaskExitError+0x2a>
	__asm volatile
 8010efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	60fb      	str	r3, [r7, #12]
}
 8010f0e:	bf00      	nop
 8010f10:	e7fe      	b.n	8010f10 <prvTaskExitError+0x28>
	__asm volatile
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	60bb      	str	r3, [r7, #8]
}
 8010f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f26:	bf00      	nop
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0fc      	beq.n	8010f28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f2e:	bf00      	nop
 8010f30:	bf00      	nop
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	24000014 	.word	0x24000014

08010f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f40:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <pxCurrentTCBConst2>)
 8010f42:	6819      	ldr	r1, [r3, #0]
 8010f44:	6808      	ldr	r0, [r1, #0]
 8010f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4a:	f380 8809 	msr	PSP, r0
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f04f 0000 	mov.w	r0, #0
 8010f56:	f380 8811 	msr	BASEPRI, r0
 8010f5a:	4770      	bx	lr
 8010f5c:	f3af 8000 	nop.w

08010f60 <pxCurrentTCBConst2>:
 8010f60:	240000d0 	.word	0x240000d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f64:	bf00      	nop
 8010f66:	bf00      	nop

08010f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010f68:	4808      	ldr	r0, [pc, #32]	; (8010f8c <prvPortStartFirstTask+0x24>)
 8010f6a:	6800      	ldr	r0, [r0, #0]
 8010f6c:	6800      	ldr	r0, [r0, #0]
 8010f6e:	f380 8808 	msr	MSP, r0
 8010f72:	f04f 0000 	mov.w	r0, #0
 8010f76:	f380 8814 	msr	CONTROL, r0
 8010f7a:	b662      	cpsie	i
 8010f7c:	b661      	cpsie	f
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	df00      	svc	0
 8010f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010f8a:	bf00      	nop
 8010f8c:	e000ed08 	.word	0xe000ed08

08010f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010f96:	4b46      	ldr	r3, [pc, #280]	; (80110b0 <xPortStartScheduler+0x120>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a46      	ldr	r2, [pc, #280]	; (80110b4 <xPortStartScheduler+0x124>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d10a      	bne.n	8010fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	f383 8811 	msr	BASEPRI, r3
 8010fa8:	f3bf 8f6f 	isb	sy
 8010fac:	f3bf 8f4f 	dsb	sy
 8010fb0:	613b      	str	r3, [r7, #16]
}
 8010fb2:	bf00      	nop
 8010fb4:	e7fe      	b.n	8010fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010fb6:	4b3e      	ldr	r3, [pc, #248]	; (80110b0 <xPortStartScheduler+0x120>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a3f      	ldr	r2, [pc, #252]	; (80110b8 <xPortStartScheduler+0x128>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d10a      	bne.n	8010fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	60fb      	str	r3, [r7, #12]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010fd6:	4b39      	ldr	r3, [pc, #228]	; (80110bc <xPortStartScheduler+0x12c>)
 8010fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	22ff      	movs	r2, #255	; 0xff
 8010fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ff0:	78fb      	ldrb	r3, [r7, #3]
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <xPortStartScheduler+0x130>)
 8010ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ffe:	4b31      	ldr	r3, [pc, #196]	; (80110c4 <xPortStartScheduler+0x134>)
 8011000:	2207      	movs	r2, #7
 8011002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011004:	e009      	b.n	801101a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011006:	4b2f      	ldr	r3, [pc, #188]	; (80110c4 <xPortStartScheduler+0x134>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3b01      	subs	r3, #1
 801100c:	4a2d      	ldr	r2, [pc, #180]	; (80110c4 <xPortStartScheduler+0x134>)
 801100e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011010:	78fb      	ldrb	r3, [r7, #3]
 8011012:	b2db      	uxtb	r3, r3
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	b2db      	uxtb	r3, r3
 8011018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	b2db      	uxtb	r3, r3
 801101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011022:	2b80      	cmp	r3, #128	; 0x80
 8011024:	d0ef      	beq.n	8011006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011026:	4b27      	ldr	r3, [pc, #156]	; (80110c4 <xPortStartScheduler+0x134>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f1c3 0307 	rsb	r3, r3, #7
 801102e:	2b04      	cmp	r3, #4
 8011030:	d00a      	beq.n	8011048 <xPortStartScheduler+0xb8>
	__asm volatile
 8011032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	60bb      	str	r3, [r7, #8]
}
 8011044:	bf00      	nop
 8011046:	e7fe      	b.n	8011046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011048:	4b1e      	ldr	r3, [pc, #120]	; (80110c4 <xPortStartScheduler+0x134>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	021b      	lsls	r3, r3, #8
 801104e:	4a1d      	ldr	r2, [pc, #116]	; (80110c4 <xPortStartScheduler+0x134>)
 8011050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011052:	4b1c      	ldr	r3, [pc, #112]	; (80110c4 <xPortStartScheduler+0x134>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801105a:	4a1a      	ldr	r2, [pc, #104]	; (80110c4 <xPortStartScheduler+0x134>)
 801105c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	b2da      	uxtb	r2, r3
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011066:	4b18      	ldr	r3, [pc, #96]	; (80110c8 <xPortStartScheduler+0x138>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4a17      	ldr	r2, [pc, #92]	; (80110c8 <xPortStartScheduler+0x138>)
 801106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011072:	4b15      	ldr	r3, [pc, #84]	; (80110c8 <xPortStartScheduler+0x138>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a14      	ldr	r2, [pc, #80]	; (80110c8 <xPortStartScheduler+0x138>)
 8011078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801107c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801107e:	f000 f8dd 	bl	801123c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011082:	4b12      	ldr	r3, [pc, #72]	; (80110cc <xPortStartScheduler+0x13c>)
 8011084:	2200      	movs	r2, #0
 8011086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011088:	f000 f8fc 	bl	8011284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801108c:	4b10      	ldr	r3, [pc, #64]	; (80110d0 <xPortStartScheduler+0x140>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a0f      	ldr	r2, [pc, #60]	; (80110d0 <xPortStartScheduler+0x140>)
 8011092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011098:	f7ff ff66 	bl	8010f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801109c:	f7fe ff0c 	bl	800feb8 <vTaskSwitchContext>
	prvTaskExitError();
 80110a0:	f7ff ff22 	bl	8010ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3718      	adds	r7, #24
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	e000ed00 	.word	0xe000ed00
 80110b4:	410fc271 	.word	0x410fc271
 80110b8:	410fc270 	.word	0x410fc270
 80110bc:	e000e400 	.word	0xe000e400
 80110c0:	24000238 	.word	0x24000238
 80110c4:	2400023c 	.word	0x2400023c
 80110c8:	e000ed20 	.word	0xe000ed20
 80110cc:	24000014 	.word	0x24000014
 80110d0:	e000ef34 	.word	0xe000ef34

080110d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
	__asm volatile
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	607b      	str	r3, [r7, #4]
}
 80110ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80110ee:	4b0f      	ldr	r3, [pc, #60]	; (801112c <vPortEnterCritical+0x58>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	3301      	adds	r3, #1
 80110f4:	4a0d      	ldr	r2, [pc, #52]	; (801112c <vPortEnterCritical+0x58>)
 80110f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80110f8:	4b0c      	ldr	r3, [pc, #48]	; (801112c <vPortEnterCritical+0x58>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d10f      	bne.n	8011120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011100:	4b0b      	ldr	r3, [pc, #44]	; (8011130 <vPortEnterCritical+0x5c>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00a      	beq.n	8011120 <vPortEnterCritical+0x4c>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	603b      	str	r3, [r7, #0]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <vPortEnterCritical+0x4a>
	}
}
 8011120:	bf00      	nop
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	24000014 	.word	0x24000014
 8011130:	e000ed04 	.word	0xe000ed04

08011134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801113a:	4b12      	ldr	r3, [pc, #72]	; (8011184 <vPortExitCritical+0x50>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10a      	bne.n	8011158 <vPortExitCritical+0x24>
	__asm volatile
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	607b      	str	r3, [r7, #4]
}
 8011154:	bf00      	nop
 8011156:	e7fe      	b.n	8011156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011158:	4b0a      	ldr	r3, [pc, #40]	; (8011184 <vPortExitCritical+0x50>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	3b01      	subs	r3, #1
 801115e:	4a09      	ldr	r2, [pc, #36]	; (8011184 <vPortExitCritical+0x50>)
 8011160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011162:	4b08      	ldr	r3, [pc, #32]	; (8011184 <vPortExitCritical+0x50>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d105      	bne.n	8011176 <vPortExitCritical+0x42>
 801116a:	2300      	movs	r3, #0
 801116c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	f383 8811 	msr	BASEPRI, r3
}
 8011174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011176:	bf00      	nop
 8011178:	370c      	adds	r7, #12
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	24000014 	.word	0x24000014
	...

08011190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011190:	f3ef 8009 	mrs	r0, PSP
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	4b15      	ldr	r3, [pc, #84]	; (80111f0 <pxCurrentTCBConst>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	f01e 0f10 	tst.w	lr, #16
 80111a0:	bf08      	it	eq
 80111a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80111a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111aa:	6010      	str	r0, [r2, #0]
 80111ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80111b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80111b4:	f380 8811 	msr	BASEPRI, r0
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f7fe fe7a 	bl	800feb8 <vTaskSwitchContext>
 80111c4:	f04f 0000 	mov.w	r0, #0
 80111c8:	f380 8811 	msr	BASEPRI, r0
 80111cc:	bc09      	pop	{r0, r3}
 80111ce:	6819      	ldr	r1, [r3, #0]
 80111d0:	6808      	ldr	r0, [r1, #0]
 80111d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d6:	f01e 0f10 	tst.w	lr, #16
 80111da:	bf08      	it	eq
 80111dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80111e0:	f380 8809 	msr	PSP, r0
 80111e4:	f3bf 8f6f 	isb	sy
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	f3af 8000 	nop.w

080111f0 <pxCurrentTCBConst>:
 80111f0:	240000d0 	.word	0x240000d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80111f4:	bf00      	nop
 80111f6:	bf00      	nop

080111f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	607b      	str	r3, [r7, #4]
}
 8011210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011212:	f7fe fd99 	bl	800fd48 <xTaskIncrementTick>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801121c:	4b06      	ldr	r3, [pc, #24]	; (8011238 <SysTick_Handler+0x40>)
 801121e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011222:	601a      	str	r2, [r3, #0]
 8011224:	2300      	movs	r3, #0
 8011226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	f383 8811 	msr	BASEPRI, r3
}
 801122e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	e000ed04 	.word	0xe000ed04

0801123c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801123c:	b480      	push	{r7}
 801123e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011240:	4b0b      	ldr	r3, [pc, #44]	; (8011270 <vPortSetupTimerInterrupt+0x34>)
 8011242:	2200      	movs	r2, #0
 8011244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011246:	4b0b      	ldr	r3, [pc, #44]	; (8011274 <vPortSetupTimerInterrupt+0x38>)
 8011248:	2200      	movs	r2, #0
 801124a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801124c:	4b0a      	ldr	r3, [pc, #40]	; (8011278 <vPortSetupTimerInterrupt+0x3c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4a0a      	ldr	r2, [pc, #40]	; (801127c <vPortSetupTimerInterrupt+0x40>)
 8011252:	fba2 2303 	umull	r2, r3, r2, r3
 8011256:	099b      	lsrs	r3, r3, #6
 8011258:	4a09      	ldr	r2, [pc, #36]	; (8011280 <vPortSetupTimerInterrupt+0x44>)
 801125a:	3b01      	subs	r3, #1
 801125c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801125e:	4b04      	ldr	r3, [pc, #16]	; (8011270 <vPortSetupTimerInterrupt+0x34>)
 8011260:	2207      	movs	r2, #7
 8011262:	601a      	str	r2, [r3, #0]
}
 8011264:	bf00      	nop
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	e000e010 	.word	0xe000e010
 8011274:	e000e018 	.word	0xe000e018
 8011278:	24000004 	.word	0x24000004
 801127c:	10624dd3 	.word	0x10624dd3
 8011280:	e000e014 	.word	0xe000e014

08011284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011294 <vPortEnableVFP+0x10>
 8011288:	6801      	ldr	r1, [r0, #0]
 801128a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801128e:	6001      	str	r1, [r0, #0]
 8011290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011292:	bf00      	nop
 8011294:	e000ed88 	.word	0xe000ed88

08011298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801129e:	f3ef 8305 	mrs	r3, IPSR
 80112a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2b0f      	cmp	r3, #15
 80112a8:	d914      	bls.n	80112d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80112aa:	4a17      	ldr	r2, [pc, #92]	; (8011308 <vPortValidateInterruptPriority+0x70>)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	4413      	add	r3, r2
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80112b4:	4b15      	ldr	r3, [pc, #84]	; (801130c <vPortValidateInterruptPriority+0x74>)
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	7afa      	ldrb	r2, [r7, #11]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d20a      	bcs.n	80112d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	607b      	str	r3, [r7, #4]
}
 80112d0:	bf00      	nop
 80112d2:	e7fe      	b.n	80112d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80112d4:	4b0e      	ldr	r3, [pc, #56]	; (8011310 <vPortValidateInterruptPriority+0x78>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80112dc:	4b0d      	ldr	r3, [pc, #52]	; (8011314 <vPortValidateInterruptPriority+0x7c>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d90a      	bls.n	80112fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80112e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e8:	f383 8811 	msr	BASEPRI, r3
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f3bf 8f4f 	dsb	sy
 80112f4:	603b      	str	r3, [r7, #0]
}
 80112f6:	bf00      	nop
 80112f8:	e7fe      	b.n	80112f8 <vPortValidateInterruptPriority+0x60>
	}
 80112fa:	bf00      	nop
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	e000e3f0 	.word	0xe000e3f0
 801130c:	24000238 	.word	0x24000238
 8011310:	e000ed0c 	.word	0xe000ed0c
 8011314:	2400023c 	.word	0x2400023c

08011318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b08a      	sub	sp, #40	; 0x28
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011324:	f7fe fc56 	bl	800fbd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011328:	4b5b      	ldr	r3, [pc, #364]	; (8011498 <pvPortMalloc+0x180>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011330:	f000 f920 	bl	8011574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011334:	4b59      	ldr	r3, [pc, #356]	; (801149c <pvPortMalloc+0x184>)
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4013      	ands	r3, r2
 801133c:	2b00      	cmp	r3, #0
 801133e:	f040 8093 	bne.w	8011468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d01d      	beq.n	8011384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011348:	2208      	movs	r2, #8
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4413      	add	r3, r2
 801134e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f003 0307 	and.w	r3, r3, #7
 8011356:	2b00      	cmp	r3, #0
 8011358:	d014      	beq.n	8011384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f023 0307 	bic.w	r3, r3, #7
 8011360:	3308      	adds	r3, #8
 8011362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f003 0307 	and.w	r3, r3, #7
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <pvPortMalloc+0x6c>
	__asm volatile
 801136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	617b      	str	r3, [r7, #20]
}
 8011380:	bf00      	nop
 8011382:	e7fe      	b.n	8011382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d06e      	beq.n	8011468 <pvPortMalloc+0x150>
 801138a:	4b45      	ldr	r3, [pc, #276]	; (80114a0 <pvPortMalloc+0x188>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	429a      	cmp	r2, r3
 8011392:	d869      	bhi.n	8011468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011394:	4b43      	ldr	r3, [pc, #268]	; (80114a4 <pvPortMalloc+0x18c>)
 8011396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011398:	4b42      	ldr	r3, [pc, #264]	; (80114a4 <pvPortMalloc+0x18c>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801139e:	e004      	b.n	80113aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d903      	bls.n	80113bc <pvPortMalloc+0xa4>
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1f1      	bne.n	80113a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80113bc:	4b36      	ldr	r3, [pc, #216]	; (8011498 <pvPortMalloc+0x180>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d050      	beq.n	8011468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2208      	movs	r2, #8
 80113cc:	4413      	add	r3, r2
 80113ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	1ad2      	subs	r2, r2, r3
 80113e0:	2308      	movs	r3, #8
 80113e2:	005b      	lsls	r3, r3, #1
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d91f      	bls.n	8011428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80113e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4413      	add	r3, r2
 80113ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	f003 0307 	and.w	r3, r3, #7
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00a      	beq.n	8011410 <pvPortMalloc+0xf8>
	__asm volatile
 80113fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	613b      	str	r3, [r7, #16]
}
 801140c:	bf00      	nop
 801140e:	e7fe      	b.n	801140e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	1ad2      	subs	r2, r2, r3
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011422:	69b8      	ldr	r0, [r7, #24]
 8011424:	f000 f90a 	bl	801163c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011428:	4b1d      	ldr	r3, [pc, #116]	; (80114a0 <pvPortMalloc+0x188>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	4a1b      	ldr	r2, [pc, #108]	; (80114a0 <pvPortMalloc+0x188>)
 8011434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011436:	4b1a      	ldr	r3, [pc, #104]	; (80114a0 <pvPortMalloc+0x188>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	4b1b      	ldr	r3, [pc, #108]	; (80114a8 <pvPortMalloc+0x190>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d203      	bcs.n	801144a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011442:	4b17      	ldr	r3, [pc, #92]	; (80114a0 <pvPortMalloc+0x188>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4a18      	ldr	r2, [pc, #96]	; (80114a8 <pvPortMalloc+0x190>)
 8011448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	685a      	ldr	r2, [r3, #4]
 801144e:	4b13      	ldr	r3, [pc, #76]	; (801149c <pvPortMalloc+0x184>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	431a      	orrs	r2, r3
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801145e:	4b13      	ldr	r3, [pc, #76]	; (80114ac <pvPortMalloc+0x194>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3301      	adds	r3, #1
 8011464:	4a11      	ldr	r2, [pc, #68]	; (80114ac <pvPortMalloc+0x194>)
 8011466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011468:	f7fe fbc2 	bl	800fbf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	f003 0307 	and.w	r3, r3, #7
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00a      	beq.n	801148c <pvPortMalloc+0x174>
	__asm volatile
 8011476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	60fb      	str	r3, [r7, #12]
}
 8011488:	bf00      	nop
 801148a:	e7fe      	b.n	801148a <pvPortMalloc+0x172>
	return pvReturn;
 801148c:	69fb      	ldr	r3, [r7, #28]
}
 801148e:	4618      	mov	r0, r3
 8011490:	3728      	adds	r7, #40	; 0x28
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	24027348 	.word	0x24027348
 801149c:	2402735c 	.word	0x2402735c
 80114a0:	2402734c 	.word	0x2402734c
 80114a4:	24027340 	.word	0x24027340
 80114a8:	24027350 	.word	0x24027350
 80114ac:	24027354 	.word	0x24027354

080114b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d04d      	beq.n	801155e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80114c2:	2308      	movs	r3, #8
 80114c4:	425b      	negs	r3, r3
 80114c6:	697a      	ldr	r2, [r7, #20]
 80114c8:	4413      	add	r3, r2
 80114ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	4b24      	ldr	r3, [pc, #144]	; (8011568 <vPortFree+0xb8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4013      	ands	r3, r2
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d10a      	bne.n	80114f4 <vPortFree+0x44>
	__asm volatile
 80114de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	60fb      	str	r3, [r7, #12]
}
 80114f0:	bf00      	nop
 80114f2:	e7fe      	b.n	80114f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00a      	beq.n	8011512 <vPortFree+0x62>
	__asm volatile
 80114fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011500:	f383 8811 	msr	BASEPRI, r3
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	60bb      	str	r3, [r7, #8]
}
 801150e:	bf00      	nop
 8011510:	e7fe      	b.n	8011510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	4b14      	ldr	r3, [pc, #80]	; (8011568 <vPortFree+0xb8>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4013      	ands	r3, r2
 801151c:	2b00      	cmp	r3, #0
 801151e:	d01e      	beq.n	801155e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d11a      	bne.n	801155e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	4b0e      	ldr	r3, [pc, #56]	; (8011568 <vPortFree+0xb8>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	43db      	mvns	r3, r3
 8011532:	401a      	ands	r2, r3
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011538:	f7fe fb4c 	bl	800fbd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	685a      	ldr	r2, [r3, #4]
 8011540:	4b0a      	ldr	r3, [pc, #40]	; (801156c <vPortFree+0xbc>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4413      	add	r3, r2
 8011546:	4a09      	ldr	r2, [pc, #36]	; (801156c <vPortFree+0xbc>)
 8011548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801154a:	6938      	ldr	r0, [r7, #16]
 801154c:	f000 f876 	bl	801163c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011550:	4b07      	ldr	r3, [pc, #28]	; (8011570 <vPortFree+0xc0>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	3301      	adds	r3, #1
 8011556:	4a06      	ldr	r2, [pc, #24]	; (8011570 <vPortFree+0xc0>)
 8011558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801155a:	f7fe fb49 	bl	800fbf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801155e:	bf00      	nop
 8011560:	3718      	adds	r7, #24
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	2402735c 	.word	0x2402735c
 801156c:	2402734c 	.word	0x2402734c
 8011570:	24027358 	.word	0x24027358

08011574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011574:	b480      	push	{r7}
 8011576:	b085      	sub	sp, #20
 8011578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801157a:	4b29      	ldr	r3, [pc, #164]	; (8011620 <prvHeapInit+0xac>)
 801157c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801157e:	4b29      	ldr	r3, [pc, #164]	; (8011624 <prvHeapInit+0xb0>)
 8011580:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f003 0307 	and.w	r3, r3, #7
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00c      	beq.n	80115a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	3307      	adds	r3, #7
 8011590:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f023 0307 	bic.w	r3, r3, #7
 8011598:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	4a20      	ldr	r2, [pc, #128]	; (8011624 <prvHeapInit+0xb0>)
 80115a2:	4413      	add	r3, r2
 80115a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80115aa:	4a1f      	ldr	r2, [pc, #124]	; (8011628 <prvHeapInit+0xb4>)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80115b0:	4b1d      	ldr	r3, [pc, #116]	; (8011628 <prvHeapInit+0xb4>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	68ba      	ldr	r2, [r7, #8]
 80115ba:	4413      	add	r3, r2
 80115bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80115be:	2208      	movs	r2, #8
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	1a9b      	subs	r3, r3, r2
 80115c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f023 0307 	bic.w	r3, r3, #7
 80115cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	4a16      	ldr	r2, [pc, #88]	; (801162c <prvHeapInit+0xb8>)
 80115d2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80115d4:	4b15      	ldr	r3, [pc, #84]	; (801162c <prvHeapInit+0xb8>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2200      	movs	r2, #0
 80115da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80115dc:	4b13      	ldr	r3, [pc, #76]	; (801162c <prvHeapInit+0xb8>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2200      	movs	r2, #0
 80115e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	1ad2      	subs	r2, r2, r3
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80115f2:	4b0e      	ldr	r3, [pc, #56]	; (801162c <prvHeapInit+0xb8>)
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	4a0c      	ldr	r2, [pc, #48]	; (8011630 <prvHeapInit+0xbc>)
 8011600:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	4a0b      	ldr	r2, [pc, #44]	; (8011634 <prvHeapInit+0xc0>)
 8011608:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801160a:	4b0b      	ldr	r3, [pc, #44]	; (8011638 <prvHeapInit+0xc4>)
 801160c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011610:	601a      	str	r2, [r3, #0]
}
 8011612:	bf00      	nop
 8011614:	3714      	adds	r7, #20
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	00027100 	.word	0x00027100
 8011624:	24000240 	.word	0x24000240
 8011628:	24027340 	.word	0x24027340
 801162c:	24027348 	.word	0x24027348
 8011630:	24027350 	.word	0x24027350
 8011634:	2402734c 	.word	0x2402734c
 8011638:	2402735c 	.word	0x2402735c

0801163c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801163c:	b480      	push	{r7}
 801163e:	b085      	sub	sp, #20
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <prvInsertBlockIntoFreeList+0xac>)
 8011646:	60fb      	str	r3, [r7, #12]
 8011648:	e002      	b.n	8011650 <prvInsertBlockIntoFreeList+0x14>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	60fb      	str	r3, [r7, #12]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	429a      	cmp	r2, r3
 8011658:	d8f7      	bhi.n	801164a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	68ba      	ldr	r2, [r7, #8]
 8011664:	4413      	add	r3, r2
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	429a      	cmp	r2, r3
 801166a:	d108      	bne.n	801167e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	685a      	ldr	r2, [r3, #4]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	441a      	add	r2, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	441a      	add	r2, r3
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d118      	bne.n	80116c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	4b15      	ldr	r3, [pc, #84]	; (80116ec <prvInsertBlockIntoFreeList+0xb0>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	429a      	cmp	r2, r3
 801169c:	d00d      	beq.n	80116ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685a      	ldr	r2, [r3, #4]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	441a      	add	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	e008      	b.n	80116cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116ba:	4b0c      	ldr	r3, [pc, #48]	; (80116ec <prvInsertBlockIntoFreeList+0xb0>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	e003      	b.n	80116cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d002      	beq.n	80116da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116da:	bf00      	nop
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	24027340 	.word	0x24027340
 80116ec:	24027348 	.word	0x24027348

080116f0 <atoi>:
 80116f0:	220a      	movs	r2, #10
 80116f2:	2100      	movs	r1, #0
 80116f4:	f000 b9cc 	b.w	8011a90 <strtol>

080116f8 <__errno>:
 80116f8:	4b01      	ldr	r3, [pc, #4]	; (8011700 <__errno+0x8>)
 80116fa:	6818      	ldr	r0, [r3, #0]
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	24000018 	.word	0x24000018

08011704 <__libc_init_array>:
 8011704:	b570      	push	{r4, r5, r6, lr}
 8011706:	4d0d      	ldr	r5, [pc, #52]	; (801173c <__libc_init_array+0x38>)
 8011708:	4c0d      	ldr	r4, [pc, #52]	; (8011740 <__libc_init_array+0x3c>)
 801170a:	1b64      	subs	r4, r4, r5
 801170c:	10a4      	asrs	r4, r4, #2
 801170e:	2600      	movs	r6, #0
 8011710:	42a6      	cmp	r6, r4
 8011712:	d109      	bne.n	8011728 <__libc_init_array+0x24>
 8011714:	4d0b      	ldr	r5, [pc, #44]	; (8011744 <__libc_init_array+0x40>)
 8011716:	4c0c      	ldr	r4, [pc, #48]	; (8011748 <__libc_init_array+0x44>)
 8011718:	f000 fd58 	bl	80121cc <_init>
 801171c:	1b64      	subs	r4, r4, r5
 801171e:	10a4      	asrs	r4, r4, #2
 8011720:	2600      	movs	r6, #0
 8011722:	42a6      	cmp	r6, r4
 8011724:	d105      	bne.n	8011732 <__libc_init_array+0x2e>
 8011726:	bd70      	pop	{r4, r5, r6, pc}
 8011728:	f855 3b04 	ldr.w	r3, [r5], #4
 801172c:	4798      	blx	r3
 801172e:	3601      	adds	r6, #1
 8011730:	e7ee      	b.n	8011710 <__libc_init_array+0xc>
 8011732:	f855 3b04 	ldr.w	r3, [r5], #4
 8011736:	4798      	blx	r3
 8011738:	3601      	adds	r6, #1
 801173a:	e7f2      	b.n	8011722 <__libc_init_array+0x1e>
 801173c:	08012490 	.word	0x08012490
 8011740:	08012490 	.word	0x08012490
 8011744:	08012490 	.word	0x08012490
 8011748:	08012494 	.word	0x08012494

0801174c <__retarget_lock_acquire_recursive>:
 801174c:	4770      	bx	lr

0801174e <__retarget_lock_release_recursive>:
 801174e:	4770      	bx	lr

08011750 <memcpy>:
 8011750:	440a      	add	r2, r1
 8011752:	4291      	cmp	r1, r2
 8011754:	f100 33ff 	add.w	r3, r0, #4294967295
 8011758:	d100      	bne.n	801175c <memcpy+0xc>
 801175a:	4770      	bx	lr
 801175c:	b510      	push	{r4, lr}
 801175e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011766:	4291      	cmp	r1, r2
 8011768:	d1f9      	bne.n	801175e <memcpy+0xe>
 801176a:	bd10      	pop	{r4, pc}

0801176c <memset>:
 801176c:	4402      	add	r2, r0
 801176e:	4603      	mov	r3, r0
 8011770:	4293      	cmp	r3, r2
 8011772:	d100      	bne.n	8011776 <memset+0xa>
 8011774:	4770      	bx	lr
 8011776:	f803 1b01 	strb.w	r1, [r3], #1
 801177a:	e7f9      	b.n	8011770 <memset+0x4>

0801177c <_malloc_r>:
 801177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177e:	1ccd      	adds	r5, r1, #3
 8011780:	f025 0503 	bic.w	r5, r5, #3
 8011784:	3508      	adds	r5, #8
 8011786:	2d0c      	cmp	r5, #12
 8011788:	bf38      	it	cc
 801178a:	250c      	movcc	r5, #12
 801178c:	2d00      	cmp	r5, #0
 801178e:	4606      	mov	r6, r0
 8011790:	db01      	blt.n	8011796 <_malloc_r+0x1a>
 8011792:	42a9      	cmp	r1, r5
 8011794:	d903      	bls.n	801179e <_malloc_r+0x22>
 8011796:	230c      	movs	r3, #12
 8011798:	6033      	str	r3, [r6, #0]
 801179a:	2000      	movs	r0, #0
 801179c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801179e:	f000 f981 	bl	8011aa4 <__malloc_lock>
 80117a2:	4921      	ldr	r1, [pc, #132]	; (8011828 <_malloc_r+0xac>)
 80117a4:	680a      	ldr	r2, [r1, #0]
 80117a6:	4614      	mov	r4, r2
 80117a8:	b99c      	cbnz	r4, 80117d2 <_malloc_r+0x56>
 80117aa:	4f20      	ldr	r7, [pc, #128]	; (801182c <_malloc_r+0xb0>)
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	b923      	cbnz	r3, 80117ba <_malloc_r+0x3e>
 80117b0:	4621      	mov	r1, r4
 80117b2:	4630      	mov	r0, r6
 80117b4:	f000 f8a6 	bl	8011904 <_sbrk_r>
 80117b8:	6038      	str	r0, [r7, #0]
 80117ba:	4629      	mov	r1, r5
 80117bc:	4630      	mov	r0, r6
 80117be:	f000 f8a1 	bl	8011904 <_sbrk_r>
 80117c2:	1c43      	adds	r3, r0, #1
 80117c4:	d123      	bne.n	801180e <_malloc_r+0x92>
 80117c6:	230c      	movs	r3, #12
 80117c8:	6033      	str	r3, [r6, #0]
 80117ca:	4630      	mov	r0, r6
 80117cc:	f000 f970 	bl	8011ab0 <__malloc_unlock>
 80117d0:	e7e3      	b.n	801179a <_malloc_r+0x1e>
 80117d2:	6823      	ldr	r3, [r4, #0]
 80117d4:	1b5b      	subs	r3, r3, r5
 80117d6:	d417      	bmi.n	8011808 <_malloc_r+0x8c>
 80117d8:	2b0b      	cmp	r3, #11
 80117da:	d903      	bls.n	80117e4 <_malloc_r+0x68>
 80117dc:	6023      	str	r3, [r4, #0]
 80117de:	441c      	add	r4, r3
 80117e0:	6025      	str	r5, [r4, #0]
 80117e2:	e004      	b.n	80117ee <_malloc_r+0x72>
 80117e4:	6863      	ldr	r3, [r4, #4]
 80117e6:	42a2      	cmp	r2, r4
 80117e8:	bf0c      	ite	eq
 80117ea:	600b      	streq	r3, [r1, #0]
 80117ec:	6053      	strne	r3, [r2, #4]
 80117ee:	4630      	mov	r0, r6
 80117f0:	f000 f95e 	bl	8011ab0 <__malloc_unlock>
 80117f4:	f104 000b 	add.w	r0, r4, #11
 80117f8:	1d23      	adds	r3, r4, #4
 80117fa:	f020 0007 	bic.w	r0, r0, #7
 80117fe:	1ac2      	subs	r2, r0, r3
 8011800:	d0cc      	beq.n	801179c <_malloc_r+0x20>
 8011802:	1a1b      	subs	r3, r3, r0
 8011804:	50a3      	str	r3, [r4, r2]
 8011806:	e7c9      	b.n	801179c <_malloc_r+0x20>
 8011808:	4622      	mov	r2, r4
 801180a:	6864      	ldr	r4, [r4, #4]
 801180c:	e7cc      	b.n	80117a8 <_malloc_r+0x2c>
 801180e:	1cc4      	adds	r4, r0, #3
 8011810:	f024 0403 	bic.w	r4, r4, #3
 8011814:	42a0      	cmp	r0, r4
 8011816:	d0e3      	beq.n	80117e0 <_malloc_r+0x64>
 8011818:	1a21      	subs	r1, r4, r0
 801181a:	4630      	mov	r0, r6
 801181c:	f000 f872 	bl	8011904 <_sbrk_r>
 8011820:	3001      	adds	r0, #1
 8011822:	d1dd      	bne.n	80117e0 <_malloc_r+0x64>
 8011824:	e7cf      	b.n	80117c6 <_malloc_r+0x4a>
 8011826:	bf00      	nop
 8011828:	24027360 	.word	0x24027360
 801182c:	24027364 	.word	0x24027364

08011830 <cleanup_glue>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	460c      	mov	r4, r1
 8011834:	6809      	ldr	r1, [r1, #0]
 8011836:	4605      	mov	r5, r0
 8011838:	b109      	cbz	r1, 801183e <cleanup_glue+0xe>
 801183a:	f7ff fff9 	bl	8011830 <cleanup_glue>
 801183e:	4621      	mov	r1, r4
 8011840:	4628      	mov	r0, r5
 8011842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011846:	f000 b939 	b.w	8011abc <_free_r>
	...

0801184c <_reclaim_reent>:
 801184c:	4b2c      	ldr	r3, [pc, #176]	; (8011900 <_reclaim_reent+0xb4>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4283      	cmp	r3, r0
 8011852:	b570      	push	{r4, r5, r6, lr}
 8011854:	4604      	mov	r4, r0
 8011856:	d051      	beq.n	80118fc <_reclaim_reent+0xb0>
 8011858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801185a:	b143      	cbz	r3, 801186e <_reclaim_reent+0x22>
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d14a      	bne.n	80118f8 <_reclaim_reent+0xac>
 8011862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011864:	6819      	ldr	r1, [r3, #0]
 8011866:	b111      	cbz	r1, 801186e <_reclaim_reent+0x22>
 8011868:	4620      	mov	r0, r4
 801186a:	f000 f927 	bl	8011abc <_free_r>
 801186e:	6961      	ldr	r1, [r4, #20]
 8011870:	b111      	cbz	r1, 8011878 <_reclaim_reent+0x2c>
 8011872:	4620      	mov	r0, r4
 8011874:	f000 f922 	bl	8011abc <_free_r>
 8011878:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801187a:	b111      	cbz	r1, 8011882 <_reclaim_reent+0x36>
 801187c:	4620      	mov	r0, r4
 801187e:	f000 f91d 	bl	8011abc <_free_r>
 8011882:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011884:	b111      	cbz	r1, 801188c <_reclaim_reent+0x40>
 8011886:	4620      	mov	r0, r4
 8011888:	f000 f918 	bl	8011abc <_free_r>
 801188c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801188e:	b111      	cbz	r1, 8011896 <_reclaim_reent+0x4a>
 8011890:	4620      	mov	r0, r4
 8011892:	f000 f913 	bl	8011abc <_free_r>
 8011896:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011898:	b111      	cbz	r1, 80118a0 <_reclaim_reent+0x54>
 801189a:	4620      	mov	r0, r4
 801189c:	f000 f90e 	bl	8011abc <_free_r>
 80118a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80118a2:	b111      	cbz	r1, 80118aa <_reclaim_reent+0x5e>
 80118a4:	4620      	mov	r0, r4
 80118a6:	f000 f909 	bl	8011abc <_free_r>
 80118aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80118ac:	b111      	cbz	r1, 80118b4 <_reclaim_reent+0x68>
 80118ae:	4620      	mov	r0, r4
 80118b0:	f000 f904 	bl	8011abc <_free_r>
 80118b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118b6:	b111      	cbz	r1, 80118be <_reclaim_reent+0x72>
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 f8ff 	bl	8011abc <_free_r>
 80118be:	69a3      	ldr	r3, [r4, #24]
 80118c0:	b1e3      	cbz	r3, 80118fc <_reclaim_reent+0xb0>
 80118c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80118c4:	4620      	mov	r0, r4
 80118c6:	4798      	blx	r3
 80118c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80118ca:	b1b9      	cbz	r1, 80118fc <_reclaim_reent+0xb0>
 80118cc:	4620      	mov	r0, r4
 80118ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118d2:	f7ff bfad 	b.w	8011830 <cleanup_glue>
 80118d6:	5949      	ldr	r1, [r1, r5]
 80118d8:	b941      	cbnz	r1, 80118ec <_reclaim_reent+0xa0>
 80118da:	3504      	adds	r5, #4
 80118dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118de:	2d80      	cmp	r5, #128	; 0x80
 80118e0:	68d9      	ldr	r1, [r3, #12]
 80118e2:	d1f8      	bne.n	80118d6 <_reclaim_reent+0x8a>
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 f8e9 	bl	8011abc <_free_r>
 80118ea:	e7ba      	b.n	8011862 <_reclaim_reent+0x16>
 80118ec:	680e      	ldr	r6, [r1, #0]
 80118ee:	4620      	mov	r0, r4
 80118f0:	f000 f8e4 	bl	8011abc <_free_r>
 80118f4:	4631      	mov	r1, r6
 80118f6:	e7ef      	b.n	80118d8 <_reclaim_reent+0x8c>
 80118f8:	2500      	movs	r5, #0
 80118fa:	e7ef      	b.n	80118dc <_reclaim_reent+0x90>
 80118fc:	bd70      	pop	{r4, r5, r6, pc}
 80118fe:	bf00      	nop
 8011900:	24000018 	.word	0x24000018

08011904 <_sbrk_r>:
 8011904:	b538      	push	{r3, r4, r5, lr}
 8011906:	4d06      	ldr	r5, [pc, #24]	; (8011920 <_sbrk_r+0x1c>)
 8011908:	2300      	movs	r3, #0
 801190a:	4604      	mov	r4, r0
 801190c:	4608      	mov	r0, r1
 801190e:	602b      	str	r3, [r5, #0]
 8011910:	f7f1 fbec 	bl	80030ec <_sbrk>
 8011914:	1c43      	adds	r3, r0, #1
 8011916:	d102      	bne.n	801191e <_sbrk_r+0x1a>
 8011918:	682b      	ldr	r3, [r5, #0]
 801191a:	b103      	cbz	r3, 801191e <_sbrk_r+0x1a>
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	bd38      	pop	{r3, r4, r5, pc}
 8011920:	24027d84 	.word	0x24027d84

08011924 <siprintf>:
 8011924:	b40e      	push	{r1, r2, r3}
 8011926:	b500      	push	{lr}
 8011928:	b09c      	sub	sp, #112	; 0x70
 801192a:	ab1d      	add	r3, sp, #116	; 0x74
 801192c:	9002      	str	r0, [sp, #8]
 801192e:	9006      	str	r0, [sp, #24]
 8011930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011934:	4809      	ldr	r0, [pc, #36]	; (801195c <siprintf+0x38>)
 8011936:	9107      	str	r1, [sp, #28]
 8011938:	9104      	str	r1, [sp, #16]
 801193a:	4909      	ldr	r1, [pc, #36]	; (8011960 <siprintf+0x3c>)
 801193c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011940:	9105      	str	r1, [sp, #20]
 8011942:	6800      	ldr	r0, [r0, #0]
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	a902      	add	r1, sp, #8
 8011948:	f000 f964 	bl	8011c14 <_svfiprintf_r>
 801194c:	9b02      	ldr	r3, [sp, #8]
 801194e:	2200      	movs	r2, #0
 8011950:	701a      	strb	r2, [r3, #0]
 8011952:	b01c      	add	sp, #112	; 0x70
 8011954:	f85d eb04 	ldr.w	lr, [sp], #4
 8011958:	b003      	add	sp, #12
 801195a:	4770      	bx	lr
 801195c:	24000018 	.word	0x24000018
 8011960:	ffff0208 	.word	0xffff0208

08011964 <strncmp>:
 8011964:	b510      	push	{r4, lr}
 8011966:	b16a      	cbz	r2, 8011984 <strncmp+0x20>
 8011968:	3901      	subs	r1, #1
 801196a:	1884      	adds	r4, r0, r2
 801196c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011970:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011974:	4293      	cmp	r3, r2
 8011976:	d103      	bne.n	8011980 <strncmp+0x1c>
 8011978:	42a0      	cmp	r0, r4
 801197a:	d001      	beq.n	8011980 <strncmp+0x1c>
 801197c:	2b00      	cmp	r3, #0
 801197e:	d1f5      	bne.n	801196c <strncmp+0x8>
 8011980:	1a98      	subs	r0, r3, r2
 8011982:	bd10      	pop	{r4, pc}
 8011984:	4610      	mov	r0, r2
 8011986:	e7fc      	b.n	8011982 <strncmp+0x1e>

08011988 <_strtol_l.isra.0>:
 8011988:	2b01      	cmp	r3, #1
 801198a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801198e:	d001      	beq.n	8011994 <_strtol_l.isra.0+0xc>
 8011990:	2b24      	cmp	r3, #36	; 0x24
 8011992:	d906      	bls.n	80119a2 <_strtol_l.isra.0+0x1a>
 8011994:	f7ff feb0 	bl	80116f8 <__errno>
 8011998:	2316      	movs	r3, #22
 801199a:	6003      	str	r3, [r0, #0]
 801199c:	2000      	movs	r0, #0
 801199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a2:	4f3a      	ldr	r7, [pc, #232]	; (8011a8c <_strtol_l.isra.0+0x104>)
 80119a4:	468e      	mov	lr, r1
 80119a6:	4676      	mov	r6, lr
 80119a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80119ac:	5de5      	ldrb	r5, [r4, r7]
 80119ae:	f015 0508 	ands.w	r5, r5, #8
 80119b2:	d1f8      	bne.n	80119a6 <_strtol_l.isra.0+0x1e>
 80119b4:	2c2d      	cmp	r4, #45	; 0x2d
 80119b6:	d134      	bne.n	8011a22 <_strtol_l.isra.0+0x9a>
 80119b8:	f89e 4000 	ldrb.w	r4, [lr]
 80119bc:	f04f 0801 	mov.w	r8, #1
 80119c0:	f106 0e02 	add.w	lr, r6, #2
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d05c      	beq.n	8011a82 <_strtol_l.isra.0+0xfa>
 80119c8:	2b10      	cmp	r3, #16
 80119ca:	d10c      	bne.n	80119e6 <_strtol_l.isra.0+0x5e>
 80119cc:	2c30      	cmp	r4, #48	; 0x30
 80119ce:	d10a      	bne.n	80119e6 <_strtol_l.isra.0+0x5e>
 80119d0:	f89e 4000 	ldrb.w	r4, [lr]
 80119d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80119d8:	2c58      	cmp	r4, #88	; 0x58
 80119da:	d14d      	bne.n	8011a78 <_strtol_l.isra.0+0xf0>
 80119dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80119e0:	2310      	movs	r3, #16
 80119e2:	f10e 0e02 	add.w	lr, lr, #2
 80119e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80119ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80119ee:	2600      	movs	r6, #0
 80119f0:	fbbc f9f3 	udiv	r9, ip, r3
 80119f4:	4635      	mov	r5, r6
 80119f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80119fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80119fe:	2f09      	cmp	r7, #9
 8011a00:	d818      	bhi.n	8011a34 <_strtol_l.isra.0+0xac>
 8011a02:	463c      	mov	r4, r7
 8011a04:	42a3      	cmp	r3, r4
 8011a06:	dd24      	ble.n	8011a52 <_strtol_l.isra.0+0xca>
 8011a08:	2e00      	cmp	r6, #0
 8011a0a:	db1f      	blt.n	8011a4c <_strtol_l.isra.0+0xc4>
 8011a0c:	45a9      	cmp	r9, r5
 8011a0e:	d31d      	bcc.n	8011a4c <_strtol_l.isra.0+0xc4>
 8011a10:	d101      	bne.n	8011a16 <_strtol_l.isra.0+0x8e>
 8011a12:	45a2      	cmp	sl, r4
 8011a14:	db1a      	blt.n	8011a4c <_strtol_l.isra.0+0xc4>
 8011a16:	fb05 4503 	mla	r5, r5, r3, r4
 8011a1a:	2601      	movs	r6, #1
 8011a1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011a20:	e7eb      	b.n	80119fa <_strtol_l.isra.0+0x72>
 8011a22:	2c2b      	cmp	r4, #43	; 0x2b
 8011a24:	bf08      	it	eq
 8011a26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011a2a:	46a8      	mov	r8, r5
 8011a2c:	bf08      	it	eq
 8011a2e:	f106 0e02 	addeq.w	lr, r6, #2
 8011a32:	e7c7      	b.n	80119c4 <_strtol_l.isra.0+0x3c>
 8011a34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011a38:	2f19      	cmp	r7, #25
 8011a3a:	d801      	bhi.n	8011a40 <_strtol_l.isra.0+0xb8>
 8011a3c:	3c37      	subs	r4, #55	; 0x37
 8011a3e:	e7e1      	b.n	8011a04 <_strtol_l.isra.0+0x7c>
 8011a40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011a44:	2f19      	cmp	r7, #25
 8011a46:	d804      	bhi.n	8011a52 <_strtol_l.isra.0+0xca>
 8011a48:	3c57      	subs	r4, #87	; 0x57
 8011a4a:	e7db      	b.n	8011a04 <_strtol_l.isra.0+0x7c>
 8011a4c:	f04f 36ff 	mov.w	r6, #4294967295
 8011a50:	e7e4      	b.n	8011a1c <_strtol_l.isra.0+0x94>
 8011a52:	2e00      	cmp	r6, #0
 8011a54:	da05      	bge.n	8011a62 <_strtol_l.isra.0+0xda>
 8011a56:	2322      	movs	r3, #34	; 0x22
 8011a58:	6003      	str	r3, [r0, #0]
 8011a5a:	4665      	mov	r5, ip
 8011a5c:	b942      	cbnz	r2, 8011a70 <_strtol_l.isra.0+0xe8>
 8011a5e:	4628      	mov	r0, r5
 8011a60:	e79d      	b.n	801199e <_strtol_l.isra.0+0x16>
 8011a62:	f1b8 0f00 	cmp.w	r8, #0
 8011a66:	d000      	beq.n	8011a6a <_strtol_l.isra.0+0xe2>
 8011a68:	426d      	negs	r5, r5
 8011a6a:	2a00      	cmp	r2, #0
 8011a6c:	d0f7      	beq.n	8011a5e <_strtol_l.isra.0+0xd6>
 8011a6e:	b10e      	cbz	r6, 8011a74 <_strtol_l.isra.0+0xec>
 8011a70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011a74:	6011      	str	r1, [r2, #0]
 8011a76:	e7f2      	b.n	8011a5e <_strtol_l.isra.0+0xd6>
 8011a78:	2430      	movs	r4, #48	; 0x30
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1b3      	bne.n	80119e6 <_strtol_l.isra.0+0x5e>
 8011a7e:	2308      	movs	r3, #8
 8011a80:	e7b1      	b.n	80119e6 <_strtol_l.isra.0+0x5e>
 8011a82:	2c30      	cmp	r4, #48	; 0x30
 8011a84:	d0a4      	beq.n	80119d0 <_strtol_l.isra.0+0x48>
 8011a86:	230a      	movs	r3, #10
 8011a88:	e7ad      	b.n	80119e6 <_strtol_l.isra.0+0x5e>
 8011a8a:	bf00      	nop
 8011a8c:	08012355 	.word	0x08012355

08011a90 <strtol>:
 8011a90:	4613      	mov	r3, r2
 8011a92:	460a      	mov	r2, r1
 8011a94:	4601      	mov	r1, r0
 8011a96:	4802      	ldr	r0, [pc, #8]	; (8011aa0 <strtol+0x10>)
 8011a98:	6800      	ldr	r0, [r0, #0]
 8011a9a:	f7ff bf75 	b.w	8011988 <_strtol_l.isra.0>
 8011a9e:	bf00      	nop
 8011aa0:	24000018 	.word	0x24000018

08011aa4 <__malloc_lock>:
 8011aa4:	4801      	ldr	r0, [pc, #4]	; (8011aac <__malloc_lock+0x8>)
 8011aa6:	f7ff be51 	b.w	801174c <__retarget_lock_acquire_recursive>
 8011aaa:	bf00      	nop
 8011aac:	24027d7c 	.word	0x24027d7c

08011ab0 <__malloc_unlock>:
 8011ab0:	4801      	ldr	r0, [pc, #4]	; (8011ab8 <__malloc_unlock+0x8>)
 8011ab2:	f7ff be4c 	b.w	801174e <__retarget_lock_release_recursive>
 8011ab6:	bf00      	nop
 8011ab8:	24027d7c 	.word	0x24027d7c

08011abc <_free_r>:
 8011abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011abe:	2900      	cmp	r1, #0
 8011ac0:	d048      	beq.n	8011b54 <_free_r+0x98>
 8011ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ac6:	9001      	str	r0, [sp, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f1a1 0404 	sub.w	r4, r1, #4
 8011ace:	bfb8      	it	lt
 8011ad0:	18e4      	addlt	r4, r4, r3
 8011ad2:	f7ff ffe7 	bl	8011aa4 <__malloc_lock>
 8011ad6:	4a20      	ldr	r2, [pc, #128]	; (8011b58 <_free_r+0x9c>)
 8011ad8:	9801      	ldr	r0, [sp, #4]
 8011ada:	6813      	ldr	r3, [r2, #0]
 8011adc:	4615      	mov	r5, r2
 8011ade:	b933      	cbnz	r3, 8011aee <_free_r+0x32>
 8011ae0:	6063      	str	r3, [r4, #4]
 8011ae2:	6014      	str	r4, [r2, #0]
 8011ae4:	b003      	add	sp, #12
 8011ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011aea:	f7ff bfe1 	b.w	8011ab0 <__malloc_unlock>
 8011aee:	42a3      	cmp	r3, r4
 8011af0:	d90b      	bls.n	8011b0a <_free_r+0x4e>
 8011af2:	6821      	ldr	r1, [r4, #0]
 8011af4:	1862      	adds	r2, r4, r1
 8011af6:	4293      	cmp	r3, r2
 8011af8:	bf04      	itt	eq
 8011afa:	681a      	ldreq	r2, [r3, #0]
 8011afc:	685b      	ldreq	r3, [r3, #4]
 8011afe:	6063      	str	r3, [r4, #4]
 8011b00:	bf04      	itt	eq
 8011b02:	1852      	addeq	r2, r2, r1
 8011b04:	6022      	streq	r2, [r4, #0]
 8011b06:	602c      	str	r4, [r5, #0]
 8011b08:	e7ec      	b.n	8011ae4 <_free_r+0x28>
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	b10b      	cbz	r3, 8011b14 <_free_r+0x58>
 8011b10:	42a3      	cmp	r3, r4
 8011b12:	d9fa      	bls.n	8011b0a <_free_r+0x4e>
 8011b14:	6811      	ldr	r1, [r2, #0]
 8011b16:	1855      	adds	r5, r2, r1
 8011b18:	42a5      	cmp	r5, r4
 8011b1a:	d10b      	bne.n	8011b34 <_free_r+0x78>
 8011b1c:	6824      	ldr	r4, [r4, #0]
 8011b1e:	4421      	add	r1, r4
 8011b20:	1854      	adds	r4, r2, r1
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	6011      	str	r1, [r2, #0]
 8011b26:	d1dd      	bne.n	8011ae4 <_free_r+0x28>
 8011b28:	681c      	ldr	r4, [r3, #0]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	6053      	str	r3, [r2, #4]
 8011b2e:	4421      	add	r1, r4
 8011b30:	6011      	str	r1, [r2, #0]
 8011b32:	e7d7      	b.n	8011ae4 <_free_r+0x28>
 8011b34:	d902      	bls.n	8011b3c <_free_r+0x80>
 8011b36:	230c      	movs	r3, #12
 8011b38:	6003      	str	r3, [r0, #0]
 8011b3a:	e7d3      	b.n	8011ae4 <_free_r+0x28>
 8011b3c:	6825      	ldr	r5, [r4, #0]
 8011b3e:	1961      	adds	r1, r4, r5
 8011b40:	428b      	cmp	r3, r1
 8011b42:	bf04      	itt	eq
 8011b44:	6819      	ldreq	r1, [r3, #0]
 8011b46:	685b      	ldreq	r3, [r3, #4]
 8011b48:	6063      	str	r3, [r4, #4]
 8011b4a:	bf04      	itt	eq
 8011b4c:	1949      	addeq	r1, r1, r5
 8011b4e:	6021      	streq	r1, [r4, #0]
 8011b50:	6054      	str	r4, [r2, #4]
 8011b52:	e7c7      	b.n	8011ae4 <_free_r+0x28>
 8011b54:	b003      	add	sp, #12
 8011b56:	bd30      	pop	{r4, r5, pc}
 8011b58:	24027360 	.word	0x24027360

08011b5c <__ssputs_r>:
 8011b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b60:	688e      	ldr	r6, [r1, #8]
 8011b62:	429e      	cmp	r6, r3
 8011b64:	4682      	mov	sl, r0
 8011b66:	460c      	mov	r4, r1
 8011b68:	4690      	mov	r8, r2
 8011b6a:	461f      	mov	r7, r3
 8011b6c:	d838      	bhi.n	8011be0 <__ssputs_r+0x84>
 8011b6e:	898a      	ldrh	r2, [r1, #12]
 8011b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b74:	d032      	beq.n	8011bdc <__ssputs_r+0x80>
 8011b76:	6825      	ldr	r5, [r4, #0]
 8011b78:	6909      	ldr	r1, [r1, #16]
 8011b7a:	eba5 0901 	sub.w	r9, r5, r1
 8011b7e:	6965      	ldr	r5, [r4, #20]
 8011b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b88:	3301      	adds	r3, #1
 8011b8a:	444b      	add	r3, r9
 8011b8c:	106d      	asrs	r5, r5, #1
 8011b8e:	429d      	cmp	r5, r3
 8011b90:	bf38      	it	cc
 8011b92:	461d      	movcc	r5, r3
 8011b94:	0553      	lsls	r3, r2, #21
 8011b96:	d531      	bpl.n	8011bfc <__ssputs_r+0xa0>
 8011b98:	4629      	mov	r1, r5
 8011b9a:	f7ff fdef 	bl	801177c <_malloc_r>
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	b950      	cbnz	r0, 8011bb8 <__ssputs_r+0x5c>
 8011ba2:	230c      	movs	r3, #12
 8011ba4:	f8ca 3000 	str.w	r3, [sl]
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bae:	81a3      	strh	r3, [r4, #12]
 8011bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb8:	6921      	ldr	r1, [r4, #16]
 8011bba:	464a      	mov	r2, r9
 8011bbc:	f7ff fdc8 	bl	8011750 <memcpy>
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bca:	81a3      	strh	r3, [r4, #12]
 8011bcc:	6126      	str	r6, [r4, #16]
 8011bce:	6165      	str	r5, [r4, #20]
 8011bd0:	444e      	add	r6, r9
 8011bd2:	eba5 0509 	sub.w	r5, r5, r9
 8011bd6:	6026      	str	r6, [r4, #0]
 8011bd8:	60a5      	str	r5, [r4, #8]
 8011bda:	463e      	mov	r6, r7
 8011bdc:	42be      	cmp	r6, r7
 8011bde:	d900      	bls.n	8011be2 <__ssputs_r+0x86>
 8011be0:	463e      	mov	r6, r7
 8011be2:	4632      	mov	r2, r6
 8011be4:	6820      	ldr	r0, [r4, #0]
 8011be6:	4641      	mov	r1, r8
 8011be8:	f000 faa8 	bl	801213c <memmove>
 8011bec:	68a3      	ldr	r3, [r4, #8]
 8011bee:	6822      	ldr	r2, [r4, #0]
 8011bf0:	1b9b      	subs	r3, r3, r6
 8011bf2:	4432      	add	r2, r6
 8011bf4:	60a3      	str	r3, [r4, #8]
 8011bf6:	6022      	str	r2, [r4, #0]
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	e7db      	b.n	8011bb4 <__ssputs_r+0x58>
 8011bfc:	462a      	mov	r2, r5
 8011bfe:	f000 fab7 	bl	8012170 <_realloc_r>
 8011c02:	4606      	mov	r6, r0
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d1e1      	bne.n	8011bcc <__ssputs_r+0x70>
 8011c08:	6921      	ldr	r1, [r4, #16]
 8011c0a:	4650      	mov	r0, sl
 8011c0c:	f7ff ff56 	bl	8011abc <_free_r>
 8011c10:	e7c7      	b.n	8011ba2 <__ssputs_r+0x46>
	...

08011c14 <_svfiprintf_r>:
 8011c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	4698      	mov	r8, r3
 8011c1a:	898b      	ldrh	r3, [r1, #12]
 8011c1c:	061b      	lsls	r3, r3, #24
 8011c1e:	b09d      	sub	sp, #116	; 0x74
 8011c20:	4607      	mov	r7, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	4614      	mov	r4, r2
 8011c26:	d50e      	bpl.n	8011c46 <_svfiprintf_r+0x32>
 8011c28:	690b      	ldr	r3, [r1, #16]
 8011c2a:	b963      	cbnz	r3, 8011c46 <_svfiprintf_r+0x32>
 8011c2c:	2140      	movs	r1, #64	; 0x40
 8011c2e:	f7ff fda5 	bl	801177c <_malloc_r>
 8011c32:	6028      	str	r0, [r5, #0]
 8011c34:	6128      	str	r0, [r5, #16]
 8011c36:	b920      	cbnz	r0, 8011c42 <_svfiprintf_r+0x2e>
 8011c38:	230c      	movs	r3, #12
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c40:	e0d1      	b.n	8011de6 <_svfiprintf_r+0x1d2>
 8011c42:	2340      	movs	r3, #64	; 0x40
 8011c44:	616b      	str	r3, [r5, #20]
 8011c46:	2300      	movs	r3, #0
 8011c48:	9309      	str	r3, [sp, #36]	; 0x24
 8011c4a:	2320      	movs	r3, #32
 8011c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c54:	2330      	movs	r3, #48	; 0x30
 8011c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011e00 <_svfiprintf_r+0x1ec>
 8011c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c5e:	f04f 0901 	mov.w	r9, #1
 8011c62:	4623      	mov	r3, r4
 8011c64:	469a      	mov	sl, r3
 8011c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c6a:	b10a      	cbz	r2, 8011c70 <_svfiprintf_r+0x5c>
 8011c6c:	2a25      	cmp	r2, #37	; 0x25
 8011c6e:	d1f9      	bne.n	8011c64 <_svfiprintf_r+0x50>
 8011c70:	ebba 0b04 	subs.w	fp, sl, r4
 8011c74:	d00b      	beq.n	8011c8e <_svfiprintf_r+0x7a>
 8011c76:	465b      	mov	r3, fp
 8011c78:	4622      	mov	r2, r4
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	f7ff ff6d 	bl	8011b5c <__ssputs_r>
 8011c82:	3001      	adds	r0, #1
 8011c84:	f000 80aa 	beq.w	8011ddc <_svfiprintf_r+0x1c8>
 8011c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c8a:	445a      	add	r2, fp
 8011c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f000 80a2 	beq.w	8011ddc <_svfiprintf_r+0x1c8>
 8011c98:	2300      	movs	r3, #0
 8011c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ca2:	f10a 0a01 	add.w	sl, sl, #1
 8011ca6:	9304      	str	r3, [sp, #16]
 8011ca8:	9307      	str	r3, [sp, #28]
 8011caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cae:	931a      	str	r3, [sp, #104]	; 0x68
 8011cb0:	4654      	mov	r4, sl
 8011cb2:	2205      	movs	r2, #5
 8011cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb8:	4851      	ldr	r0, [pc, #324]	; (8011e00 <_svfiprintf_r+0x1ec>)
 8011cba:	f7ee fb19 	bl	80002f0 <memchr>
 8011cbe:	9a04      	ldr	r2, [sp, #16]
 8011cc0:	b9d8      	cbnz	r0, 8011cfa <_svfiprintf_r+0xe6>
 8011cc2:	06d0      	lsls	r0, r2, #27
 8011cc4:	bf44      	itt	mi
 8011cc6:	2320      	movmi	r3, #32
 8011cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ccc:	0711      	lsls	r1, r2, #28
 8011cce:	bf44      	itt	mi
 8011cd0:	232b      	movmi	r3, #43	; 0x2b
 8011cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011cda:	2b2a      	cmp	r3, #42	; 0x2a
 8011cdc:	d015      	beq.n	8011d0a <_svfiprintf_r+0xf6>
 8011cde:	9a07      	ldr	r2, [sp, #28]
 8011ce0:	4654      	mov	r4, sl
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	f04f 0c0a 	mov.w	ip, #10
 8011ce8:	4621      	mov	r1, r4
 8011cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cee:	3b30      	subs	r3, #48	; 0x30
 8011cf0:	2b09      	cmp	r3, #9
 8011cf2:	d94e      	bls.n	8011d92 <_svfiprintf_r+0x17e>
 8011cf4:	b1b0      	cbz	r0, 8011d24 <_svfiprintf_r+0x110>
 8011cf6:	9207      	str	r2, [sp, #28]
 8011cf8:	e014      	b.n	8011d24 <_svfiprintf_r+0x110>
 8011cfa:	eba0 0308 	sub.w	r3, r0, r8
 8011cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8011d02:	4313      	orrs	r3, r2
 8011d04:	9304      	str	r3, [sp, #16]
 8011d06:	46a2      	mov	sl, r4
 8011d08:	e7d2      	b.n	8011cb0 <_svfiprintf_r+0x9c>
 8011d0a:	9b03      	ldr	r3, [sp, #12]
 8011d0c:	1d19      	adds	r1, r3, #4
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	9103      	str	r1, [sp, #12]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	bfbb      	ittet	lt
 8011d16:	425b      	neglt	r3, r3
 8011d18:	f042 0202 	orrlt.w	r2, r2, #2
 8011d1c:	9307      	strge	r3, [sp, #28]
 8011d1e:	9307      	strlt	r3, [sp, #28]
 8011d20:	bfb8      	it	lt
 8011d22:	9204      	strlt	r2, [sp, #16]
 8011d24:	7823      	ldrb	r3, [r4, #0]
 8011d26:	2b2e      	cmp	r3, #46	; 0x2e
 8011d28:	d10c      	bne.n	8011d44 <_svfiprintf_r+0x130>
 8011d2a:	7863      	ldrb	r3, [r4, #1]
 8011d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8011d2e:	d135      	bne.n	8011d9c <_svfiprintf_r+0x188>
 8011d30:	9b03      	ldr	r3, [sp, #12]
 8011d32:	1d1a      	adds	r2, r3, #4
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	9203      	str	r2, [sp, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bfb8      	it	lt
 8011d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d40:	3402      	adds	r4, #2
 8011d42:	9305      	str	r3, [sp, #20]
 8011d44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011e10 <_svfiprintf_r+0x1fc>
 8011d48:	7821      	ldrb	r1, [r4, #0]
 8011d4a:	2203      	movs	r2, #3
 8011d4c:	4650      	mov	r0, sl
 8011d4e:	f7ee facf 	bl	80002f0 <memchr>
 8011d52:	b140      	cbz	r0, 8011d66 <_svfiprintf_r+0x152>
 8011d54:	2340      	movs	r3, #64	; 0x40
 8011d56:	eba0 000a 	sub.w	r0, r0, sl
 8011d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8011d5e:	9b04      	ldr	r3, [sp, #16]
 8011d60:	4303      	orrs	r3, r0
 8011d62:	3401      	adds	r4, #1
 8011d64:	9304      	str	r3, [sp, #16]
 8011d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d6a:	4826      	ldr	r0, [pc, #152]	; (8011e04 <_svfiprintf_r+0x1f0>)
 8011d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d70:	2206      	movs	r2, #6
 8011d72:	f7ee fabd 	bl	80002f0 <memchr>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d038      	beq.n	8011dec <_svfiprintf_r+0x1d8>
 8011d7a:	4b23      	ldr	r3, [pc, #140]	; (8011e08 <_svfiprintf_r+0x1f4>)
 8011d7c:	bb1b      	cbnz	r3, 8011dc6 <_svfiprintf_r+0x1b2>
 8011d7e:	9b03      	ldr	r3, [sp, #12]
 8011d80:	3307      	adds	r3, #7
 8011d82:	f023 0307 	bic.w	r3, r3, #7
 8011d86:	3308      	adds	r3, #8
 8011d88:	9303      	str	r3, [sp, #12]
 8011d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d8c:	4433      	add	r3, r6
 8011d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d90:	e767      	b.n	8011c62 <_svfiprintf_r+0x4e>
 8011d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d96:	460c      	mov	r4, r1
 8011d98:	2001      	movs	r0, #1
 8011d9a:	e7a5      	b.n	8011ce8 <_svfiprintf_r+0xd4>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	3401      	adds	r4, #1
 8011da0:	9305      	str	r3, [sp, #20]
 8011da2:	4619      	mov	r1, r3
 8011da4:	f04f 0c0a 	mov.w	ip, #10
 8011da8:	4620      	mov	r0, r4
 8011daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dae:	3a30      	subs	r2, #48	; 0x30
 8011db0:	2a09      	cmp	r2, #9
 8011db2:	d903      	bls.n	8011dbc <_svfiprintf_r+0x1a8>
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d0c5      	beq.n	8011d44 <_svfiprintf_r+0x130>
 8011db8:	9105      	str	r1, [sp, #20]
 8011dba:	e7c3      	b.n	8011d44 <_svfiprintf_r+0x130>
 8011dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dc0:	4604      	mov	r4, r0
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	e7f0      	b.n	8011da8 <_svfiprintf_r+0x194>
 8011dc6:	ab03      	add	r3, sp, #12
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	462a      	mov	r2, r5
 8011dcc:	4b0f      	ldr	r3, [pc, #60]	; (8011e0c <_svfiprintf_r+0x1f8>)
 8011dce:	a904      	add	r1, sp, #16
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	f3af 8000 	nop.w
 8011dd6:	1c42      	adds	r2, r0, #1
 8011dd8:	4606      	mov	r6, r0
 8011dda:	d1d6      	bne.n	8011d8a <_svfiprintf_r+0x176>
 8011ddc:	89ab      	ldrh	r3, [r5, #12]
 8011dde:	065b      	lsls	r3, r3, #25
 8011de0:	f53f af2c 	bmi.w	8011c3c <_svfiprintf_r+0x28>
 8011de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011de6:	b01d      	add	sp, #116	; 0x74
 8011de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dec:	ab03      	add	r3, sp, #12
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	462a      	mov	r2, r5
 8011df2:	4b06      	ldr	r3, [pc, #24]	; (8011e0c <_svfiprintf_r+0x1f8>)
 8011df4:	a904      	add	r1, sp, #16
 8011df6:	4638      	mov	r0, r7
 8011df8:	f000 f87a 	bl	8011ef0 <_printf_i>
 8011dfc:	e7eb      	b.n	8011dd6 <_svfiprintf_r+0x1c2>
 8011dfe:	bf00      	nop
 8011e00:	08012455 	.word	0x08012455
 8011e04:	0801245f 	.word	0x0801245f
 8011e08:	00000000 	.word	0x00000000
 8011e0c:	08011b5d 	.word	0x08011b5d
 8011e10:	0801245b 	.word	0x0801245b

08011e14 <_printf_common>:
 8011e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e18:	4616      	mov	r6, r2
 8011e1a:	4699      	mov	r9, r3
 8011e1c:	688a      	ldr	r2, [r1, #8]
 8011e1e:	690b      	ldr	r3, [r1, #16]
 8011e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e24:	4293      	cmp	r3, r2
 8011e26:	bfb8      	it	lt
 8011e28:	4613      	movlt	r3, r2
 8011e2a:	6033      	str	r3, [r6, #0]
 8011e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e30:	4607      	mov	r7, r0
 8011e32:	460c      	mov	r4, r1
 8011e34:	b10a      	cbz	r2, 8011e3a <_printf_common+0x26>
 8011e36:	3301      	adds	r3, #1
 8011e38:	6033      	str	r3, [r6, #0]
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	0699      	lsls	r1, r3, #26
 8011e3e:	bf42      	ittt	mi
 8011e40:	6833      	ldrmi	r3, [r6, #0]
 8011e42:	3302      	addmi	r3, #2
 8011e44:	6033      	strmi	r3, [r6, #0]
 8011e46:	6825      	ldr	r5, [r4, #0]
 8011e48:	f015 0506 	ands.w	r5, r5, #6
 8011e4c:	d106      	bne.n	8011e5c <_printf_common+0x48>
 8011e4e:	f104 0a19 	add.w	sl, r4, #25
 8011e52:	68e3      	ldr	r3, [r4, #12]
 8011e54:	6832      	ldr	r2, [r6, #0]
 8011e56:	1a9b      	subs	r3, r3, r2
 8011e58:	42ab      	cmp	r3, r5
 8011e5a:	dc26      	bgt.n	8011eaa <_printf_common+0x96>
 8011e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e60:	1e13      	subs	r3, r2, #0
 8011e62:	6822      	ldr	r2, [r4, #0]
 8011e64:	bf18      	it	ne
 8011e66:	2301      	movne	r3, #1
 8011e68:	0692      	lsls	r2, r2, #26
 8011e6a:	d42b      	bmi.n	8011ec4 <_printf_common+0xb0>
 8011e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e70:	4649      	mov	r1, r9
 8011e72:	4638      	mov	r0, r7
 8011e74:	47c0      	blx	r8
 8011e76:	3001      	adds	r0, #1
 8011e78:	d01e      	beq.n	8011eb8 <_printf_common+0xa4>
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	68e5      	ldr	r5, [r4, #12]
 8011e7e:	6832      	ldr	r2, [r6, #0]
 8011e80:	f003 0306 	and.w	r3, r3, #6
 8011e84:	2b04      	cmp	r3, #4
 8011e86:	bf08      	it	eq
 8011e88:	1aad      	subeq	r5, r5, r2
 8011e8a:	68a3      	ldr	r3, [r4, #8]
 8011e8c:	6922      	ldr	r2, [r4, #16]
 8011e8e:	bf0c      	ite	eq
 8011e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e94:	2500      	movne	r5, #0
 8011e96:	4293      	cmp	r3, r2
 8011e98:	bfc4      	itt	gt
 8011e9a:	1a9b      	subgt	r3, r3, r2
 8011e9c:	18ed      	addgt	r5, r5, r3
 8011e9e:	2600      	movs	r6, #0
 8011ea0:	341a      	adds	r4, #26
 8011ea2:	42b5      	cmp	r5, r6
 8011ea4:	d11a      	bne.n	8011edc <_printf_common+0xc8>
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	e008      	b.n	8011ebc <_printf_common+0xa8>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	4652      	mov	r2, sl
 8011eae:	4649      	mov	r1, r9
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	47c0      	blx	r8
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d103      	bne.n	8011ec0 <_printf_common+0xac>
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec0:	3501      	adds	r5, #1
 8011ec2:	e7c6      	b.n	8011e52 <_printf_common+0x3e>
 8011ec4:	18e1      	adds	r1, r4, r3
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	2030      	movs	r0, #48	; 0x30
 8011eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ece:	4422      	add	r2, r4
 8011ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ed8:	3302      	adds	r3, #2
 8011eda:	e7c7      	b.n	8011e6c <_printf_common+0x58>
 8011edc:	2301      	movs	r3, #1
 8011ede:	4622      	mov	r2, r4
 8011ee0:	4649      	mov	r1, r9
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	47c0      	blx	r8
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	d0e6      	beq.n	8011eb8 <_printf_common+0xa4>
 8011eea:	3601      	adds	r6, #1
 8011eec:	e7d9      	b.n	8011ea2 <_printf_common+0x8e>
	...

08011ef0 <_printf_i>:
 8011ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef4:	460c      	mov	r4, r1
 8011ef6:	4691      	mov	r9, r2
 8011ef8:	7e27      	ldrb	r7, [r4, #24]
 8011efa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011efc:	2f78      	cmp	r7, #120	; 0x78
 8011efe:	4680      	mov	r8, r0
 8011f00:	469a      	mov	sl, r3
 8011f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f06:	d807      	bhi.n	8011f18 <_printf_i+0x28>
 8011f08:	2f62      	cmp	r7, #98	; 0x62
 8011f0a:	d80a      	bhi.n	8011f22 <_printf_i+0x32>
 8011f0c:	2f00      	cmp	r7, #0
 8011f0e:	f000 80d8 	beq.w	80120c2 <_printf_i+0x1d2>
 8011f12:	2f58      	cmp	r7, #88	; 0x58
 8011f14:	f000 80a3 	beq.w	801205e <_printf_i+0x16e>
 8011f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f20:	e03a      	b.n	8011f98 <_printf_i+0xa8>
 8011f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f26:	2b15      	cmp	r3, #21
 8011f28:	d8f6      	bhi.n	8011f18 <_printf_i+0x28>
 8011f2a:	a001      	add	r0, pc, #4	; (adr r0, 8011f30 <_printf_i+0x40>)
 8011f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f30:	08011f89 	.word	0x08011f89
 8011f34:	08011f9d 	.word	0x08011f9d
 8011f38:	08011f19 	.word	0x08011f19
 8011f3c:	08011f19 	.word	0x08011f19
 8011f40:	08011f19 	.word	0x08011f19
 8011f44:	08011f19 	.word	0x08011f19
 8011f48:	08011f9d 	.word	0x08011f9d
 8011f4c:	08011f19 	.word	0x08011f19
 8011f50:	08011f19 	.word	0x08011f19
 8011f54:	08011f19 	.word	0x08011f19
 8011f58:	08011f19 	.word	0x08011f19
 8011f5c:	080120a9 	.word	0x080120a9
 8011f60:	08011fcd 	.word	0x08011fcd
 8011f64:	0801208b 	.word	0x0801208b
 8011f68:	08011f19 	.word	0x08011f19
 8011f6c:	08011f19 	.word	0x08011f19
 8011f70:	080120cb 	.word	0x080120cb
 8011f74:	08011f19 	.word	0x08011f19
 8011f78:	08011fcd 	.word	0x08011fcd
 8011f7c:	08011f19 	.word	0x08011f19
 8011f80:	08011f19 	.word	0x08011f19
 8011f84:	08012093 	.word	0x08012093
 8011f88:	680b      	ldr	r3, [r1, #0]
 8011f8a:	1d1a      	adds	r2, r3, #4
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	600a      	str	r2, [r1, #0]
 8011f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f98:	2301      	movs	r3, #1
 8011f9a:	e0a3      	b.n	80120e4 <_printf_i+0x1f4>
 8011f9c:	6825      	ldr	r5, [r4, #0]
 8011f9e:	6808      	ldr	r0, [r1, #0]
 8011fa0:	062e      	lsls	r6, r5, #24
 8011fa2:	f100 0304 	add.w	r3, r0, #4
 8011fa6:	d50a      	bpl.n	8011fbe <_printf_i+0xce>
 8011fa8:	6805      	ldr	r5, [r0, #0]
 8011faa:	600b      	str	r3, [r1, #0]
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	da03      	bge.n	8011fb8 <_printf_i+0xc8>
 8011fb0:	232d      	movs	r3, #45	; 0x2d
 8011fb2:	426d      	negs	r5, r5
 8011fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fb8:	485e      	ldr	r0, [pc, #376]	; (8012134 <_printf_i+0x244>)
 8011fba:	230a      	movs	r3, #10
 8011fbc:	e019      	b.n	8011ff2 <_printf_i+0x102>
 8011fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011fc2:	6805      	ldr	r5, [r0, #0]
 8011fc4:	600b      	str	r3, [r1, #0]
 8011fc6:	bf18      	it	ne
 8011fc8:	b22d      	sxthne	r5, r5
 8011fca:	e7ef      	b.n	8011fac <_printf_i+0xbc>
 8011fcc:	680b      	ldr	r3, [r1, #0]
 8011fce:	6825      	ldr	r5, [r4, #0]
 8011fd0:	1d18      	adds	r0, r3, #4
 8011fd2:	6008      	str	r0, [r1, #0]
 8011fd4:	0628      	lsls	r0, r5, #24
 8011fd6:	d501      	bpl.n	8011fdc <_printf_i+0xec>
 8011fd8:	681d      	ldr	r5, [r3, #0]
 8011fda:	e002      	b.n	8011fe2 <_printf_i+0xf2>
 8011fdc:	0669      	lsls	r1, r5, #25
 8011fde:	d5fb      	bpl.n	8011fd8 <_printf_i+0xe8>
 8011fe0:	881d      	ldrh	r5, [r3, #0]
 8011fe2:	4854      	ldr	r0, [pc, #336]	; (8012134 <_printf_i+0x244>)
 8011fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8011fe6:	bf0c      	ite	eq
 8011fe8:	2308      	moveq	r3, #8
 8011fea:	230a      	movne	r3, #10
 8011fec:	2100      	movs	r1, #0
 8011fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ff2:	6866      	ldr	r6, [r4, #4]
 8011ff4:	60a6      	str	r6, [r4, #8]
 8011ff6:	2e00      	cmp	r6, #0
 8011ff8:	bfa2      	ittt	ge
 8011ffa:	6821      	ldrge	r1, [r4, #0]
 8011ffc:	f021 0104 	bicge.w	r1, r1, #4
 8012000:	6021      	strge	r1, [r4, #0]
 8012002:	b90d      	cbnz	r5, 8012008 <_printf_i+0x118>
 8012004:	2e00      	cmp	r6, #0
 8012006:	d04d      	beq.n	80120a4 <_printf_i+0x1b4>
 8012008:	4616      	mov	r6, r2
 801200a:	fbb5 f1f3 	udiv	r1, r5, r3
 801200e:	fb03 5711 	mls	r7, r3, r1, r5
 8012012:	5dc7      	ldrb	r7, [r0, r7]
 8012014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012018:	462f      	mov	r7, r5
 801201a:	42bb      	cmp	r3, r7
 801201c:	460d      	mov	r5, r1
 801201e:	d9f4      	bls.n	801200a <_printf_i+0x11a>
 8012020:	2b08      	cmp	r3, #8
 8012022:	d10b      	bne.n	801203c <_printf_i+0x14c>
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	07df      	lsls	r7, r3, #31
 8012028:	d508      	bpl.n	801203c <_printf_i+0x14c>
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	6861      	ldr	r1, [r4, #4]
 801202e:	4299      	cmp	r1, r3
 8012030:	bfde      	ittt	le
 8012032:	2330      	movle	r3, #48	; 0x30
 8012034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012038:	f106 36ff 	addle.w	r6, r6, #4294967295
 801203c:	1b92      	subs	r2, r2, r6
 801203e:	6122      	str	r2, [r4, #16]
 8012040:	f8cd a000 	str.w	sl, [sp]
 8012044:	464b      	mov	r3, r9
 8012046:	aa03      	add	r2, sp, #12
 8012048:	4621      	mov	r1, r4
 801204a:	4640      	mov	r0, r8
 801204c:	f7ff fee2 	bl	8011e14 <_printf_common>
 8012050:	3001      	adds	r0, #1
 8012052:	d14c      	bne.n	80120ee <_printf_i+0x1fe>
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	b004      	add	sp, #16
 801205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801205e:	4835      	ldr	r0, [pc, #212]	; (8012134 <_printf_i+0x244>)
 8012060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012064:	6823      	ldr	r3, [r4, #0]
 8012066:	680e      	ldr	r6, [r1, #0]
 8012068:	061f      	lsls	r7, r3, #24
 801206a:	f856 5b04 	ldr.w	r5, [r6], #4
 801206e:	600e      	str	r6, [r1, #0]
 8012070:	d514      	bpl.n	801209c <_printf_i+0x1ac>
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	bf44      	itt	mi
 8012076:	f043 0320 	orrmi.w	r3, r3, #32
 801207a:	6023      	strmi	r3, [r4, #0]
 801207c:	b91d      	cbnz	r5, 8012086 <_printf_i+0x196>
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	f023 0320 	bic.w	r3, r3, #32
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	2310      	movs	r3, #16
 8012088:	e7b0      	b.n	8011fec <_printf_i+0xfc>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	f043 0320 	orr.w	r3, r3, #32
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	2378      	movs	r3, #120	; 0x78
 8012094:	4828      	ldr	r0, [pc, #160]	; (8012138 <_printf_i+0x248>)
 8012096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801209a:	e7e3      	b.n	8012064 <_printf_i+0x174>
 801209c:	065e      	lsls	r6, r3, #25
 801209e:	bf48      	it	mi
 80120a0:	b2ad      	uxthmi	r5, r5
 80120a2:	e7e6      	b.n	8012072 <_printf_i+0x182>
 80120a4:	4616      	mov	r6, r2
 80120a6:	e7bb      	b.n	8012020 <_printf_i+0x130>
 80120a8:	680b      	ldr	r3, [r1, #0]
 80120aa:	6826      	ldr	r6, [r4, #0]
 80120ac:	6960      	ldr	r0, [r4, #20]
 80120ae:	1d1d      	adds	r5, r3, #4
 80120b0:	600d      	str	r5, [r1, #0]
 80120b2:	0635      	lsls	r5, r6, #24
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	d501      	bpl.n	80120bc <_printf_i+0x1cc>
 80120b8:	6018      	str	r0, [r3, #0]
 80120ba:	e002      	b.n	80120c2 <_printf_i+0x1d2>
 80120bc:	0671      	lsls	r1, r6, #25
 80120be:	d5fb      	bpl.n	80120b8 <_printf_i+0x1c8>
 80120c0:	8018      	strh	r0, [r3, #0]
 80120c2:	2300      	movs	r3, #0
 80120c4:	6123      	str	r3, [r4, #16]
 80120c6:	4616      	mov	r6, r2
 80120c8:	e7ba      	b.n	8012040 <_printf_i+0x150>
 80120ca:	680b      	ldr	r3, [r1, #0]
 80120cc:	1d1a      	adds	r2, r3, #4
 80120ce:	600a      	str	r2, [r1, #0]
 80120d0:	681e      	ldr	r6, [r3, #0]
 80120d2:	6862      	ldr	r2, [r4, #4]
 80120d4:	2100      	movs	r1, #0
 80120d6:	4630      	mov	r0, r6
 80120d8:	f7ee f90a 	bl	80002f0 <memchr>
 80120dc:	b108      	cbz	r0, 80120e2 <_printf_i+0x1f2>
 80120de:	1b80      	subs	r0, r0, r6
 80120e0:	6060      	str	r0, [r4, #4]
 80120e2:	6863      	ldr	r3, [r4, #4]
 80120e4:	6123      	str	r3, [r4, #16]
 80120e6:	2300      	movs	r3, #0
 80120e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120ec:	e7a8      	b.n	8012040 <_printf_i+0x150>
 80120ee:	6923      	ldr	r3, [r4, #16]
 80120f0:	4632      	mov	r2, r6
 80120f2:	4649      	mov	r1, r9
 80120f4:	4640      	mov	r0, r8
 80120f6:	47d0      	blx	sl
 80120f8:	3001      	adds	r0, #1
 80120fa:	d0ab      	beq.n	8012054 <_printf_i+0x164>
 80120fc:	6823      	ldr	r3, [r4, #0]
 80120fe:	079b      	lsls	r3, r3, #30
 8012100:	d413      	bmi.n	801212a <_printf_i+0x23a>
 8012102:	68e0      	ldr	r0, [r4, #12]
 8012104:	9b03      	ldr	r3, [sp, #12]
 8012106:	4298      	cmp	r0, r3
 8012108:	bfb8      	it	lt
 801210a:	4618      	movlt	r0, r3
 801210c:	e7a4      	b.n	8012058 <_printf_i+0x168>
 801210e:	2301      	movs	r3, #1
 8012110:	4632      	mov	r2, r6
 8012112:	4649      	mov	r1, r9
 8012114:	4640      	mov	r0, r8
 8012116:	47d0      	blx	sl
 8012118:	3001      	adds	r0, #1
 801211a:	d09b      	beq.n	8012054 <_printf_i+0x164>
 801211c:	3501      	adds	r5, #1
 801211e:	68e3      	ldr	r3, [r4, #12]
 8012120:	9903      	ldr	r1, [sp, #12]
 8012122:	1a5b      	subs	r3, r3, r1
 8012124:	42ab      	cmp	r3, r5
 8012126:	dcf2      	bgt.n	801210e <_printf_i+0x21e>
 8012128:	e7eb      	b.n	8012102 <_printf_i+0x212>
 801212a:	2500      	movs	r5, #0
 801212c:	f104 0619 	add.w	r6, r4, #25
 8012130:	e7f5      	b.n	801211e <_printf_i+0x22e>
 8012132:	bf00      	nop
 8012134:	08012466 	.word	0x08012466
 8012138:	08012477 	.word	0x08012477

0801213c <memmove>:
 801213c:	4288      	cmp	r0, r1
 801213e:	b510      	push	{r4, lr}
 8012140:	eb01 0402 	add.w	r4, r1, r2
 8012144:	d902      	bls.n	801214c <memmove+0x10>
 8012146:	4284      	cmp	r4, r0
 8012148:	4623      	mov	r3, r4
 801214a:	d807      	bhi.n	801215c <memmove+0x20>
 801214c:	1e43      	subs	r3, r0, #1
 801214e:	42a1      	cmp	r1, r4
 8012150:	d008      	beq.n	8012164 <memmove+0x28>
 8012152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012156:	f803 2f01 	strb.w	r2, [r3, #1]!
 801215a:	e7f8      	b.n	801214e <memmove+0x12>
 801215c:	4402      	add	r2, r0
 801215e:	4601      	mov	r1, r0
 8012160:	428a      	cmp	r2, r1
 8012162:	d100      	bne.n	8012166 <memmove+0x2a>
 8012164:	bd10      	pop	{r4, pc}
 8012166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801216a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801216e:	e7f7      	b.n	8012160 <memmove+0x24>

08012170 <_realloc_r>:
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012172:	4607      	mov	r7, r0
 8012174:	4614      	mov	r4, r2
 8012176:	460e      	mov	r6, r1
 8012178:	b921      	cbnz	r1, 8012184 <_realloc_r+0x14>
 801217a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801217e:	4611      	mov	r1, r2
 8012180:	f7ff bafc 	b.w	801177c <_malloc_r>
 8012184:	b922      	cbnz	r2, 8012190 <_realloc_r+0x20>
 8012186:	f7ff fc99 	bl	8011abc <_free_r>
 801218a:	4625      	mov	r5, r4
 801218c:	4628      	mov	r0, r5
 801218e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012190:	f000 f814 	bl	80121bc <_malloc_usable_size_r>
 8012194:	42a0      	cmp	r0, r4
 8012196:	d20f      	bcs.n	80121b8 <_realloc_r+0x48>
 8012198:	4621      	mov	r1, r4
 801219a:	4638      	mov	r0, r7
 801219c:	f7ff faee 	bl	801177c <_malloc_r>
 80121a0:	4605      	mov	r5, r0
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d0f2      	beq.n	801218c <_realloc_r+0x1c>
 80121a6:	4631      	mov	r1, r6
 80121a8:	4622      	mov	r2, r4
 80121aa:	f7ff fad1 	bl	8011750 <memcpy>
 80121ae:	4631      	mov	r1, r6
 80121b0:	4638      	mov	r0, r7
 80121b2:	f7ff fc83 	bl	8011abc <_free_r>
 80121b6:	e7e9      	b.n	801218c <_realloc_r+0x1c>
 80121b8:	4635      	mov	r5, r6
 80121ba:	e7e7      	b.n	801218c <_realloc_r+0x1c>

080121bc <_malloc_usable_size_r>:
 80121bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121c0:	1f18      	subs	r0, r3, #4
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	bfbc      	itt	lt
 80121c6:	580b      	ldrlt	r3, [r1, r0]
 80121c8:	18c0      	addlt	r0, r0, r3
 80121ca:	4770      	bx	lr

080121cc <_init>:
 80121cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ce:	bf00      	nop
 80121d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121d2:	bc08      	pop	{r3}
 80121d4:	469e      	mov	lr, r3
 80121d6:	4770      	bx	lr

080121d8 <_fini>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	bf00      	nop
 80121dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121de:	bc08      	pop	{r3}
 80121e0:	469e      	mov	lr, r3
 80121e2:	4770      	bx	lr

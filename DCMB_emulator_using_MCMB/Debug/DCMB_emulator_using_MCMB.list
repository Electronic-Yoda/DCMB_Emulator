
DCMB_emulator_using_MCMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe74  0800fe74  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe74  0800fe74  0001fe74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe7c  0800fe7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe7c  0800fe7c  0001fe7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe80  0800fe80  0001fe80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800fe84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027ce0  24000014  0800fe98  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24027cf4  0800fe98  00027cf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037edf  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005517  00000000  00000000  00057f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ff8  00000000  00000000  0005d438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001df0  00000000  00000000  0005f430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000412ab  00000000  00000000  00061220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001efb6  00000000  00000000  000a24cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001ac2a8  00000000  00000000  000c1481  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026d729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087b4  00000000  00000000  0026d7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fde0 	.word	0x0800fde0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800fde0 	.word	0x0800fde0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <B_tcpStart>:


B_tcpHandle_t* B_tcpStart(B_uartHandle_t** transmitBuarts, 
                            B_uartHandle_t* rxBuart,
                            uint8_t numTransmitBuarts,
                            CRC_HandleTypeDef* crc){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71fb      	strb	r3, [r7, #7]
    B_tcpHandle_t *btcp;
    btcp = pvPortMalloc(sizeof(B_tcpHandle_t));
 80005f0:	201c      	movs	r0, #28
 80005f2:	f00f f9e5 	bl	800f9c0 <pvPortMalloc>
 80005f6:	6138      	str	r0, [r7, #16]
    btcp->numTransmitBuarts = numTransmitBuarts;
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	711a      	strb	r2, [r3, #4]
    btcp->transmitBuarts = pvPortMalloc(sizeof(B_tcpHandle_t*)*numTransmitBuarts);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f00f f9dc 	bl	800f9c0 <pvPortMalloc>
 8000608:	4602      	mov	r2, r0
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e00d      	b.n	8000630 <B_tcpStart+0x50>
    	btcp->transmitBuarts[i] = transmitBuarts[i];
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	441a      	add	r2, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < numTransmitBuarts; i++){
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbed      	blt.n	8000614 <B_tcpStart+0x34>
    }
    btcp->rxBuart = rxBuart;
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	609a      	str	r2, [r3, #8]
    btcp->tcpSeqNum = 0;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	2200      	movs	r2, #0
 8000642:	731a      	strb	r2, [r3, #12]
    btcp->crc = crc;
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	619a      	str	r2, [r3, #24]
    btcp->txQ = xQueueCreate(TCP_TX_QUEUE_SIZE, sizeof(B_tcpPacket_t));
 800064a:	2200      	movs	r2, #0
 800064c:	210c      	movs	r1, #12
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	f00c fe9c 	bl	800d38c <xQueueGenericCreate>
 8000654:	4602      	mov	r2, r0
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	611a      	str	r2, [r3, #16]
    //hpQ = xQueueCreate(10, sizeof(uint8_t));
    //xTaskCreate(tcpTxTask, "tcpTxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->txTask);
    xTaskCreate(tcpRxTask, "tcpRxTask", TCP_TRX_TASK_STACK_SIZE, btcp, TCP_TX_TASK_PRIORITY, &btcp->rxTask);
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	3314      	adds	r3, #20
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2304      	movs	r3, #4
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066a:	4904      	ldr	r1, [pc, #16]	; (800067c <B_tcpStart+0x9c>)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <B_tcpStart+0xa0>)
 800066e:	f00d fc67 	bl	800df40 <xTaskCreate>
    //xTaskCreate(highPowerTask, "highPowerTask", 1024, NULL, 5, NULL);
    return btcp;
 8000672:	693b      	ldr	r3, [r7, #16]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	0800fdf8 	.word	0x0800fdf8
 8000680:	0800083f 	.word	0x0800083f

08000684 <B_tcpSend>:

void B_tcpSend(B_tcpHandle_t *btcp, uint8_t *msg, uint8_t length){
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	4613      	mov	r3, r2
 8000690:	71fb      	strb	r3, [r7, #7]
    uint8_t *buf = pvPortMalloc(sizeof(uint8_t)*(MAX_PACKET_SIZE+8));
 8000692:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000696:	f00f f993 	bl	800f9c0 <pvPortMalloc>
 800069a:	6178      	str	r0, [r7, #20]
    buf[0] = BSSR_SERIAL_START;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	22a5      	movs	r2, #165	; 0xa5
 80006a0:	701a      	strb	r2, [r3, #0]
    buf[1] = length;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	701a      	strb	r2, [r3, #0]
    buf[2] = TCP_ID;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3302      	adds	r3, #2
 80006ae:	2204      	movs	r2, #4
 80006b0:	701a      	strb	r2, [r3, #0]
    buf[3] = btcp->tcpSeqNum;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3303      	adds	r3, #3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	7b12      	ldrb	r2, [r2, #12]
 80006ba:	701a      	strb	r2, [r3, #0]
    memcpy(buf+4, msg, length);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3304      	adds	r3, #4
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00f fb77 	bl	800fdb8 <memcpy>
    //uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, buf, length+4);
    //GEN11 change:
    uint32_t crc_result = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)buf, length+4);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6998      	ldr	r0, [r3, #24]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3304      	adds	r3, #4
 80006d2:	461a      	mov	r2, r3
 80006d4:	6979      	ldr	r1, [r7, #20]
 80006d6:	f003 fce7 	bl	80040a8 <HAL_CRC_Calculate>
 80006da:	4603      	mov	r3, r0
 80006dc:	43db      	mvns	r3, r3
 80006de:	613b      	str	r3, [r7, #16]
    uint16_t buf_pos = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    if((length + 4) == BSSR_SERIAL_START || (length + 4) == BSSR_SERIAL_ESCAPE){
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2ba1      	cmp	r3, #161	; 0xa1
 80006e8:	d002      	beq.n	80006f0 <B_tcpSend+0x6c>
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b56      	cmp	r3, #86	; 0x56
 80006ee:	d10c      	bne.n	800070a <B_tcpSend+0x86>
        buf_pos++;
 80006f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006f2:	3301      	adds	r3, #1
 80006f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        buf[3] = length + 4;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3303      	adds	r3, #3
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	3204      	adds	r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	701a      	strb	r2, [r3, #0]
        buf[2] = BSSR_SERIAL_ESCAPE;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3302      	adds	r3, #2
 8000706:	225a      	movs	r2, #90	; 0x5a
 8000708:	701a      	strb	r2, [r3, #0]
    }
    if(btcp->tcpSeqNum == BSSR_SERIAL_START || btcp->tcpSeqNum == BSSR_SERIAL_ESCAPE){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	7b1b      	ldrb	r3, [r3, #12]
 800070e:	2ba5      	cmp	r3, #165	; 0xa5
 8000710:	d003      	beq.n	800071a <B_tcpSend+0x96>
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	7b1b      	ldrb	r3, [r3, #12]
 8000716:	2b5a      	cmp	r3, #90	; 0x5a
 8000718:	d108      	bne.n	800072c <B_tcpSend+0xa8>
        buf[buf_pos -1] = BSSR_SERIAL_ESCAPE;
 800071a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800071c:	3b01      	subs	r3, #1
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	225a      	movs	r2, #90	; 0x5a
 8000724:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8000726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000728:	3301      	adds	r3, #1
 800072a:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    buf[buf_pos -1] = btcp->tcpSeqNum;
 800072c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800072e:	3b01      	subs	r3, #1
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	4413      	add	r3, r2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	7b12      	ldrb	r2, [r2, #12]
 8000738:	701a      	strb	r2, [r3, #0]
    btcp->tcpSeqNum++;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	7b1b      	ldrb	r3, [r3, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	731a      	strb	r2, [r3, #12]
    for(int i = 0; i < length; i++){
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	e021      	b.n	8000790 <B_tcpSend+0x10c>
        if(msg[i] == BSSR_SERIAL_ESCAPE || msg[i] == BSSR_SERIAL_START){
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b5a      	cmp	r3, #90	; 0x5a
 8000756:	d005      	beq.n	8000764 <B_tcpSend+0xe0>
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2ba5      	cmp	r3, #165	; 0xa5
 8000762:	d107      	bne.n	8000774 <B_tcpSend+0xf0>
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 8000764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4413      	add	r3, r2
 800076a:	225a      	movs	r2, #90	; 0x5a
 800076c:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 800076e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000770:	3301      	adds	r3, #1
 8000772:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf[buf_pos] = msg[i];
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	441a      	add	r2, r3
 800077a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800077c:	6979      	ldr	r1, [r7, #20]
 800077e:	440b      	add	r3, r1
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	701a      	strb	r2, [r3, #0]
        buf_pos++;
 8000784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000786:	3301      	adds	r3, #1
 8000788:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < length; i++){
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	3301      	adds	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	6a3a      	ldr	r2, [r7, #32]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbd9      	blt.n	800074c <B_tcpSend+0xc8>
    }
    for(int i = 0; i < 4; i++){
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	e02e      	b.n	80007fc <B_tcpSend+0x178>
        buf[buf_pos] = (crc_result>>(8*(3-i))) &255;
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	f1c3 0303 	rsb	r3, r3, #3
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	fa22 f103 	lsr.w	r1, r2, r3
 80007ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
        if(buf[buf_pos] == BSSR_SERIAL_ESCAPE || buf[buf_pos] == BSSR_SERIAL_START){
 80007b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b5a      	cmp	r3, #90	; 0x5a
 80007c0:	d005      	beq.n	80007ce <B_tcpSend+0x14a>
 80007c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2ba5      	cmp	r3, #165	; 0xa5
 80007cc:	d110      	bne.n	80007f0 <B_tcpSend+0x16c>
            buf[buf_pos+1] = buf[buf_pos];
 80007ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	441a      	add	r2, r3
 80007d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007d6:	3301      	adds	r3, #1
 80007d8:	6979      	ldr	r1, [r7, #20]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
            buf[buf_pos] = BSSR_SERIAL_ESCAPE;
 80007e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	225a      	movs	r2, #90	; 0x5a
 80007e8:	701a      	strb	r2, [r3, #0]
            buf_pos++;
 80007ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ec:	3301      	adds	r3, #1
 80007ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        buf_pos++;
 80007f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007f2:	3301      	adds	r3, #1
 80007f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    for(int i = 0; i < 4; i++){
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	ddcd      	ble.n	800079e <B_tcpSend+0x11a>
    }
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	e00d      	b.n	8000824 <B_tcpSend+0x1a0>
        B_uartSend(btcp->transmitBuarts[i], buf, buf_pos);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000816:	6979      	ldr	r1, [r7, #20]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa29 	bl	8000c70 <B_uartSend>
    for(int i = 0; i < btcp->numTransmitBuarts; i++){
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	3301      	adds	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	461a      	mov	r2, r3
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	4293      	cmp	r3, r2
 800082e:	dbeb      	blt.n	8000808 <B_tcpSend+0x184>
    }
    vPortFree(buf);
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f00f f987 	bl	800fb44 <vPortFree>
}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <tcpRxTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void tcpRxTask(void *pv){
 800083e:	b580      	push	{r7, lr}
 8000840:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8000844:	af00      	add	r7, sp, #0
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	6018      	str	r0, [r3, #0]
    B_tcpHandle_t* btcp = pv;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    B_bufQEntry_t *e;
    uint8_t input_buffer[MAX_PACKET_SIZE + 4];
    uint8_t raw_input_buffer[(MAX_PACKET_SIZE + 8)*2]; // Just in case every byte is escaped
    uint8_t escaped = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
    uint16_t buf_pos = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
    uint16_t raw_buf_pos = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
    uint8_t expected_length = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
    uint8_t started = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
    uint8_t sender = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
    uint16_t seqNum = 0xffff;
 8000876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087a:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
    uint8_t crcAcc = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
    uint32_t crc = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
    uint32_t crcExpected = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    B_tcpPacket_t pkt;
    for(;;){
        e = B_uartRead(btcp->rxBuart);
 8000890:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa0b 	bl	8000cb2 <B_uartRead>
 800089c:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
        for(int i = 0; i < e->len; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80008a6:	e160      	b.n	8000b6a <tcpRxTask+0x32c>
            raw_input_buffer[raw_buf_pos] = e->buf[i];
 80008a8:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80008b2:	441a      	add	r2, r3
 80008b4:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80008b8:	7811      	ldrb	r1, [r2, #0]
 80008ba:	f107 0214 	add.w	r2, r7, #20
 80008be:	54d1      	strb	r1, [r2, r3]
            raw_buf_pos++;
 80008c0:	f8b7 334a 	ldrh.w	r3, [r7, #842]	; 0x34a
 80008c4:	3301      	adds	r3, #1
 80008c6:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
            if(e->buf[i] == BSSR_SERIAL_ESCAPE && !escaped){
 80008ca:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b5a      	cmp	r3, #90	; 0x5a
 80008da:	d107      	bne.n	80008ec <tcpRxTask+0xae>
 80008dc:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <tcpRxTask+0xae>
                escaped = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
 80008ea:	e002      	b.n	80008f2 <tcpRxTask+0xb4>
            } else {
                escaped = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
            }
            if(!started){
 80008f2:	f897 3348 	ldrb.w	r3, [r7, #840]	; 0x348
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11e      	bne.n	8000938 <tcpRxTask+0xfa>
                if(e->buf[i] == BSSR_SERIAL_START){
 80008fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2ba5      	cmp	r3, #165	; 0xa5
 800090a:	f040 8129 	bne.w	8000b60 <tcpRxTask+0x322>
                    started = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
                    input_buffer[buf_pos] = e->buf[i];
 8000914:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800091e:	441a      	add	r2, r3
 8000920:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000924:	7811      	ldrb	r1, [r2, #0]
 8000926:	f507 7209 	add.w	r2, r7, #548	; 0x224
 800092a:	54d1      	strb	r1, [r2, r3]
                    buf_pos++;
 800092c:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000930:	3301      	adds	r3, #1
 8000932:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000936:	e113      	b.n	8000b60 <tcpRxTask+0x322>
                }
            } else if(!expected_length){
 8000938:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 800093c:	2b00      	cmp	r3, #0
 800093e:	d11a      	bne.n	8000976 <tcpRxTask+0x138>
                expected_length = e->buf[i];
 8000940:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
                input_buffer[buf_pos] = e->buf[i];
 8000952:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800095c:	441a      	add	r2, r3
 800095e:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000962:	7811      	ldrb	r1, [r2, #0]
 8000964:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000968:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 800096a:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 800096e:	3301      	adds	r3, #1
 8000970:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000974:	e0f4      	b.n	8000b60 <tcpRxTask+0x322>
            } else if(!sender){
 8000976:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800097a:	2b00      	cmp	r3, #0
 800097c:	d11a      	bne.n	80009b4 <tcpRxTask+0x176>
                sender = e->buf[i];
 800097e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
                input_buffer[buf_pos] = e->buf[i];
 8000990:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800099a:	441a      	add	r2, r3
 800099c:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009a0:	7811      	ldrb	r1, [r2, #0]
 80009a2:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80009a6:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 80009a8:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009ac:	3301      	adds	r3, #1
 80009ae:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80009b2:	e0d5      	b.n	8000b60 <tcpRxTask+0x322>
            } else if(seqNum == 0xffff){
 80009b4:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 80009b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009bc:	4293      	cmp	r3, r2
 80009be:	d11a      	bne.n	80009f6 <tcpRxTask+0x1b8>
                seqNum = e->buf[i];
 80009c0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
                input_buffer[buf_pos] = e->buf[i];
 80009d2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80009dc:	441a      	add	r2, r3
 80009de:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009e2:	7811      	ldrb	r1, [r2, #0]
 80009e4:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80009e8:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 80009ea:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 80009ee:	3301      	adds	r3, #1
 80009f0:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 80009f4:	e0b4      	b.n	8000b60 <tcpRxTask+0x322>
            } else if(buf_pos < expected_length+4){
 80009f6:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 80009fa:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 80009fe:	3304      	adds	r3, #4
 8000a00:	429a      	cmp	r2, r3
 8000a02:	da11      	bge.n	8000a28 <tcpRxTask+0x1ea>
                input_buffer[buf_pos] = e->buf[i];
 8000a04:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a0e:	441a      	add	r2, r3
 8000a10:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a14:	7811      	ldrb	r1, [r2, #0]
 8000a16:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000a1a:	54d1      	strb	r1, [r2, r3]
                buf_pos++;
 8000a1c:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000a20:	3301      	adds	r3, #1
 8000a22:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
 8000a26:	e09b      	b.n	8000b60 <tcpRxTask+0x322>
            } else if(buf_pos + crcAcc < expected_length+8){
 8000a28:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8000a2c:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000a30:	441a      	add	r2, r3
 8000a32:	f897 3349 	ldrb.w	r3, [r7, #841]	; 0x349
 8000a36:	3308      	adds	r3, #8
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f280 8091 	bge.w	8000b60 <tcpRxTask+0x322>
                crc |= e->buf[i] << ((3-crcAcc)*8);
 8000a3e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000a52:	f1c3 0303 	rsb	r3, r3, #3
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000a62:	4313      	orrs	r3, r2
 8000a64:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
                crcAcc++;
 8000a68:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
                if(crcAcc == 4){
 8000a72:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d172      	bne.n	8000b60 <tcpRxTask+0x322>
                	//crcExpected = ~HAL_CRC_Calculate(btcp->crc, input_buffer, buf_pos);
                	//GEN11 change:
                	crcExpected = ~HAL_CRC_Calculate(btcp->crc, (uint32_t*)input_buffer, buf_pos);
 8000a7a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f8b7 234c 	ldrh.w	r2, [r7, #844]	; 0x34c
 8000a84:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fb0d 	bl	80040a8 <HAL_CRC_Calculate>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	43db      	mvns	r3, r3
 8000a92:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

					if(crcExpected == crc && sender != TCP_ID){
 8000a96:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8000a9a:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d142      	bne.n	8000b28 <tcpRxTask+0x2ea>
 8000aa2:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d03e      	beq.n	8000b28 <tcpRxTask+0x2ea>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000ab0:	e013      	b.n	8000ada <tcpRxTask+0x29c>
							B_uartSend(btcp->transmitBuarts[i], raw_input_buffer, raw_buf_pos);
 8000ab2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 8000ac6:	f107 0114 	add.w	r1, r7, #20
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8d0 	bl	8000c70 <B_uartSend>
						for(int i = 0; i < btcp->numTransmitBuarts; i++){
 8000ad0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000ada:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	dbe3      	blt.n	8000ab2 <tcpRxTask+0x274>
						}
						pkt.length = expected_length;
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	f897 2349 	ldrb.w	r2, [r7, #841]	; 0x349
 8000af2:	701a      	strb	r2, [r3, #0]
						pkt.sender = sender;
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 8000afc:	705a      	strb	r2, [r3, #1]
						pkt.seqNum = seqNum;
 8000afe:	f8b7 3344 	ldrh.w	r3, [r7, #836]	; 0x344
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	709a      	strb	r2, [r3, #2]
						pkt.payload = input_buffer;
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000b12:	605a      	str	r2, [r3, #4]
						pkt.crc = crc;
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8000b1c:	609a      	str	r2, [r3, #8]
						serialParse(&pkt);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fb2c 	bl	8001180 <serialParse>
					}
					raw_buf_pos = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
					crc = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					seqNum = 0xffff;
 8000b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b38:	f8a7 3344 	strh.w	r3, [r7, #836]	; 0x344
					crcAcc = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
					crcExpected = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					sender = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
					buf_pos = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
					expected_length = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3349 	strb.w	r3, [r7, #841]	; 0x349
					started = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3348 	strb.w	r3, [r7, #840]	; 0x348
        for(int i = 0; i < e->len; i++){
 8000b60:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000b64:	3301      	adds	r3, #1
 8000b66:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8000b6a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f63f ae97 	bhi.w	80008a8 <tcpRxTask+0x6a>
                }
            }
        }
        B_uartDoneRead(e);
 8000b7a:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 8000b7e:	f000 f8ad 	bl	8000cdc <B_uartDoneRead>
        e = B_uartRead(btcp->rxBuart);
 8000b82:	e685      	b.n	8000890 <tcpRxTask+0x52>

08000b84 <B_uartStart>:
// ######   ##     ## ## ## ## ##
// ##       ##     ## ##  #### ##
// ##       ##     ## ##   ### ##    ##
// ##        #######  ##    ##  ######

B_uartHandle_t* B_uartStart(UART_HandleTypeDef* huart){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	B_uartHandle_t *buart;
    for(int i = 0; i < 3; i++){
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	e01e      	b.n	8000bd0 <B_uartStart+0x4c>
        if(buarts[i] == NULL){
 8000b92:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <B_uartStart+0xd8>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d115      	bne.n	8000bca <B_uartStart+0x46>
            buarts[i] = pvPortMalloc(sizeof(B_uartHandle_t));
 8000b9e:	2028      	movs	r0, #40	; 0x28
 8000ba0:	f00e ff0e 	bl	800f9c0 <pvPortMalloc>
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <B_uartStart+0xd8>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            buart = buarts[i];
 8000bae:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <B_uartStart+0xd8>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	60fb      	str	r3, [r7, #12]
            huarts[i] = huart;
 8000bb8:	4929      	ldr	r1, [pc, #164]	; (8000c60 <B_uartStart+0xdc>)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            buart->huart = huart;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
            break;
 8000bc8:	e005      	b.n	8000bd6 <B_uartStart+0x52>
    for(int i = 0; i < 3; i++){
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	dddd      	ble.n	8000b92 <B_uartStart+0xe>
        }
    }
    buart->txSem = xSemaphoreCreateBinary();
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f00c fbd6 	bl	800d38c <xQueueGenericCreate>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	605a      	str	r2, [r3, #4]
	buart->txQ = xQueueCreate(TX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	2040      	movs	r0, #64	; 0x40
 8000bec:	f00c fbce 	bl	800d38c <xQueueGenericCreate>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	609a      	str	r2, [r3, #8]
	// buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE); // done in task
	buart->rxQ = xQueueCreate(RX_QUEUE_SIZE, sizeof(B_bufQEntry_t));
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	2040      	movs	r0, #64	; 0x40
 8000bfc:	f00c fbc6 	bl	800d38c <xQueueGenericCreate>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	611a      	str	r2, [r3, #16]
	xTaskCreate(txTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, TX_TASK_PRIORITY, &buart->txTask);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3314      	adds	r3, #20
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	4913      	ldr	r1, [pc, #76]	; (8000c64 <B_uartStart+0xe0>)
 8000c18:	4813      	ldr	r0, [pc, #76]	; (8000c68 <B_uartStart+0xe4>)
 8000c1a:	f00d f991 	bl	800df40 <xTaskCreate>
	xTaskCreate(rxTask, "uartTxTask", TRX_TASK_STACK_SIZE, buart, RX_TASK_PRIORITY, &buart->rxTask);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3318      	adds	r3, #24
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2306      	movs	r3, #6
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <B_uartStart+0xe0>)
 8000c30:	480e      	ldr	r0, [pc, #56]	; (8000c6c <B_uartStart+0xe8>)
 8000c32:	f00d f985 	bl	800df40 <xTaskCreate>
	buart->topFlag = buart->head = buart->tail = 0;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	61da      	str	r2, [r3, #28]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000c50:	bf00      	nop
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000030 	.word	0x24000030
 8000c60:	24000040 	.word	0x24000040
 8000c64:	0800fe04 	.word	0x0800fe04
 8000c68:	08000cfd 	.word	0x08000cfd
 8000c6c:	08000d45 	.word	0x08000d45

08000c70 <B_uartSend>:

int B_uartSend(B_uartHandle_t* buart, uint8_t* buf, size_t len){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	B_bufQEntry_t e;
	e.buf = pvPortMalloc(len);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f00e fe9f 	bl	800f9c0 <pvPortMalloc>
 8000c82:	4603      	mov	r3, r0
 8000c84:	617b      	str	r3, [r7, #20]
	memcpy(e.buf, buf, len);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00f f893 	bl	800fdb8 <memcpy>
	e.len = len;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	61bb      	str	r3, [r7, #24]
	int sent = xQueueSendToBack(buart->txQ, &e, 0);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6898      	ldr	r0, [r3, #8]
 8000c9a:	f107 0114 	add.w	r1, r7, #20
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f00c fbcd 	bl	800d440 <xQueueGenericSend>
 8000ca6:	61f8      	str	r0, [r7, #28]
	return sent;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <B_uartRead>:

B_bufQEntry_t* B_uartRead(B_uartHandle_t* buart){
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	B_bufQEntry_t* e = pvPortMalloc(sizeof(B_bufQEntry_t));
 8000cba:	2008      	movs	r0, #8
 8000cbc:	f00e fe80 	bl	800f9c0 <pvPortMalloc>
 8000cc0:	60f8      	str	r0, [r7, #12]
	xQueueReceive(buart->rxQ, e, portMAX_DELAY);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	68f9      	ldr	r1, [r7, #12]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f00c fdcf 	bl	800d870 <xQueueReceive>
	return e;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <B_uartDoneRead>:

void B_uartDoneRead(B_bufQEntry_t* e){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	vPortFree(e->buf);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00e ff2b 	bl	800fb44 <vPortFree>
	vPortFree(e);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f00e ff28 	bl	800fb44 <vPortFree>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <txTask>:
//  ######     ##    ##     ##    ##     ##  ##
//       ##    ##    #########    ##     ##  ##
// ##    ##    ##    ##     ##    ##     ##  ##    ##
//  ######     ##    ##     ##    ##    ####  ######

static void txTask(void* pv){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	for(;;){
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f107 010c 	add.w	r1, r7, #12
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	4618      	mov	r0, r3
 8000d16:	f00c fdab 	bl	800d870 <xQueueReceive>
		HAL_UART_Transmit_DMA(buart->huart, e.buf, e.len);
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68f9      	ldr	r1, [r7, #12]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	b292      	uxth	r2, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00a fde9 	bl	800b8fc <HAL_UART_Transmit_DMA>
		xSemaphoreTake(buart->txSem, portMAX_DELAY);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00c fe78 	bl	800da28 <xQueueSemaphoreTake>
		vPortFree(e.buf);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00e ff02 	bl	800fb44 <vPortFree>
		xQueueReceive(buart->txQ, &e, portMAX_DELAY);
 8000d40:	e7e2      	b.n	8000d08 <txTask+0xc>
	...

08000d44 <rxTask>:
	}
}

static void rxTask(void* pv){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	B_uartHandle_t* buart = pv;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	617b      	str	r3, [r7, #20]
	B_bufQEntry_t e;
	while(buart->huart->RxState != HAL_UART_STATE_READY) vTaskDelay(1);
 8000d50:	e002      	b.n	8000d58 <rxTask+0x14>
 8000d52:	2001      	movs	r0, #1
 8000d54:	f00d fa26 	bl	800e1a4 <vTaskDelay>
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d60:	2b20      	cmp	r3, #32
 8000d62:	d1f6      	bne.n	8000d52 <rxTask+0xe>
	buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000d64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d68:	f00e fe2a 	bl	800f9c0 <pvPortMalloc>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000d72:	e009      	b.n	8000d88 <rxTask+0x44>
		vTaskDelay(1);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f00d fa15 	bl	800e1a4 <vTaskDelay>
		buart->rxBuf = pvPortMalloc(RX_CIRC_BUF_SIZE);
 8000d7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d7e:	f00e fe1f 	bl	800f9c0 <pvPortMalloc>
 8000d82:	4602      	mov	r2, r0
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	60da      	str	r2, [r3, #12]
	while(!buart->rxBuf){
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f1      	beq.n	8000d74 <rxTask+0x30>
	}
	HAL_UART_Receive_DMA(buart->huart, buart->rxBuf, RX_CIRC_BUF_SIZE);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f00a fe2d 	bl	800b9fc <HAL_UART_Receive_DMA>
	for(;;){
		e.len = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
		vPortEnterCritical();
 8000da6:	f00e fcf1 	bl	800f78c <vPortEnterCritical>
		// no flags will update in this region. Capture head value at beginning.
		// 0 to MAX-1, cuz CNDTR is MAX to 1 in circular mode
		buart->head = RX_CIRC_BUF_SIZE - __HAL_DMA_GET_COUNTER(buart->huart->hdmarx);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a6c      	ldr	r2, [pc, #432]	; (8000f64 <rxTask+0x220>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d068      	beq.n	8000e8a <rxTask+0x146>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a69      	ldr	r2, [pc, #420]	; (8000f68 <rxTask+0x224>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d061      	beq.n	8000e8a <rxTask+0x146>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a67      	ldr	r2, [pc, #412]	; (8000f6c <rxTask+0x228>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d05a      	beq.n	8000e8a <rxTask+0x146>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a64      	ldr	r2, [pc, #400]	; (8000f70 <rxTask+0x22c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d053      	beq.n	8000e8a <rxTask+0x146>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a62      	ldr	r2, [pc, #392]	; (8000f74 <rxTask+0x230>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d04c      	beq.n	8000e8a <rxTask+0x146>
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a5f      	ldr	r2, [pc, #380]	; (8000f78 <rxTask+0x234>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d045      	beq.n	8000e8a <rxTask+0x146>
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a5d      	ldr	r2, [pc, #372]	; (8000f7c <rxTask+0x238>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d03e      	beq.n	8000e8a <rxTask+0x146>
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <rxTask+0x23c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d037      	beq.n	8000e8a <rxTask+0x146>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a58      	ldr	r2, [pc, #352]	; (8000f84 <rxTask+0x240>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d030      	beq.n	8000e8a <rxTask+0x146>
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a55      	ldr	r2, [pc, #340]	; (8000f88 <rxTask+0x244>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d029      	beq.n	8000e8a <rxTask+0x146>
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <rxTask+0x248>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d022      	beq.n	8000e8a <rxTask+0x146>
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a50      	ldr	r2, [pc, #320]	; (8000f90 <rxTask+0x24c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01b      	beq.n	8000e8a <rxTask+0x146>
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <rxTask+0x250>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d014      	beq.n	8000e8a <rxTask+0x146>
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	; (8000f98 <rxTask+0x254>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <rxTask+0x146>
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <rxTask+0x258>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d006      	beq.n	8000e8a <rxTask+0x146>
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <rxTask+0x25c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d107      	bne.n	8000e9a <rxTask+0x156>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000e98:	e006      	b.n	8000ea8 <rxTask+0x164>
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	61d3      	str	r3, [r2, #28]
		if(buart->topFlag){
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d013      	beq.n	8000ede <rxTask+0x19a>
			if(buart->head > buart->tail) buart->tail = buart->head;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d903      	bls.n	8000eca <rxTask+0x186>
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	621a      	str	r2, [r3, #32]
			e.len = RX_CIRC_BUF_SIZE - buart->tail;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000ed2:	60fb      	str	r3, [r7, #12]
			buart->topFlag = 0;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000edc:	e00b      	b.n	8000ef6 <rxTask+0x1b2>
		}else if(buart->head > buart->tail){
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	69da      	ldr	r2, [r3, #28]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d905      	bls.n	8000ef6 <rxTask+0x1b2>
			e.len = buart->head - buart->tail;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	60fb      	str	r3, [r7, #12]
		}
		vPortExitCritical();
 8000ef6:	f00e fc77 	bl	800f7e8 <vPortExitCritical>
		if(e.len){
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d02c      	beq.n	8000f5a <rxTask+0x216>
			e.buf = pvPortMalloc(e.len);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00e fd5c 	bl	800f9c0 <pvPortMalloc>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60bb      	str	r3, [r7, #8]
			memcpy(e.buf, buart->rxBuf+buart->tail, e.len);
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4413      	add	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f00e ff4c 	bl	800fdb8 <memcpy>
			buart->tail += e.len;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	441a      	add	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	621a      	str	r2, [r3, #32]
			buart->tail %= RX_CIRC_BUF_SIZE;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	621a      	str	r2, [r3, #32]
			int sent = xQueueSendToBack(buart->rxQ, &e, 0);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	6918      	ldr	r0, [r3, #16]
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	f00c fa7c 	bl	800d440 <xQueueGenericSend>
 8000f48:	6138      	str	r0, [r7, #16]
			if(sent != pdTRUE) processCriticalFrame(&e);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d004      	beq.n	8000f5a <rxTask+0x216>
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f825 	bl	8000fa4 <processCriticalFrame>
		}
		vTaskDelay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f00d f922 	bl	800e1a4 <vTaskDelay>
		e.len = 0;
 8000f60:	e71f      	b.n	8000da2 <rxTask+0x5e>
 8000f62:	bf00      	nop
 8000f64:	40020010 	.word	0x40020010
 8000f68:	40020028 	.word	0x40020028
 8000f6c:	40020040 	.word	0x40020040
 8000f70:	40020058 	.word	0x40020058
 8000f74:	40020070 	.word	0x40020070
 8000f78:	40020088 	.word	0x40020088
 8000f7c:	400200a0 	.word	0x400200a0
 8000f80:	400200b8 	.word	0x400200b8
 8000f84:	40020410 	.word	0x40020410
 8000f88:	40020428 	.word	0x40020428
 8000f8c:	40020440 	.word	0x40020440
 8000f90:	40020458 	.word	0x40020458
 8000f94:	40020470 	.word	0x40020470
 8000f98:	40020488 	.word	0x40020488
 8000f9c:	400204a0 	.word	0x400204a0
 8000fa0:	400204b8 	.word	0x400204b8

08000fa4 <processCriticalFrame>:
	}
}

static void processCriticalFrame(B_bufQEntry_t* e){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_UART_TxCpltCallback>:
// ##       ######### ##       ##       ##     ## ######### ##       ##  ##
// ##    ## ##     ## ##       ##       ##     ## ##     ## ##    ## ##   ##
//  ######  ##     ## ######## ######## ########  ##     ##  ######  ##    ##


void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e013      	b.n	8000fee <HAL_UART_TxCpltCallback+0x36>
		if(huart == huarts[i]){
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_UART_TxCpltCallback+0x44>)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d109      	bne.n	8000fe8 <HAL_UART_TxCpltCallback+0x30>
			xSemaphoreGiveFromISR(buarts[i]->txSem, NULL);
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_UART_TxCpltCallback+0x48>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00c fbbb 	bl	800d75c <xQueueGiveFromISR>
			return;
 8000fe6:	e005      	b.n	8000ff4 <HAL_UART_TxCpltCallback+0x3c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d9e8      	bls.n	8000fc6 <HAL_UART_TxCpltCallback+0xe>
		}
	}
	//configASSERT(NULL);
}
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000040 	.word	0x24000040
 8001000:	24000030 	.word	0x24000030

08001004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e011      	b.n	8001036 <HAL_UART_RxCpltCallback+0x32>
		if(huart == huarts[i]){
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_UART_RxCpltCallback+0x58>)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d107      	bne.n	8001030 <HAL_UART_RxCpltCallback+0x2c>
			buarts[i]->topFlag = 1;
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_UART_RxCpltCallback+0x5c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return;
 800102e:	e00f      	b.n	8001050 <HAL_UART_RxCpltCallback+0x4c>
	for(size_t i = 0; i < NUM_UARTS; i++){ //TODO linkedList
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d9ea      	bls.n	8001012 <HAL_UART_RxCpltCallback+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	60bb      	str	r3, [r7, #8]
		}
	}
	configASSERT(NULL);
 800104e:	e7fe      	b.n	800104e <HAL_UART_RxCpltCallback+0x4a>
}
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	24000040 	.word	0x24000040
 8001060:	24000030 	.word	0x24000030

08001064 <arm_boot>:
#include "h7Boot.h"
#include "main.h"
void arm_boot(){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  	*(uint32_t*)0x52002008 = 0x08192A3B;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <arm_boot+0x48>)
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <arm_boot+0x4c>)
 800106c:	601a      	str	r2, [r3, #0]
  	*(uint32_t*)0x52002008 = 0x4C5D6E7F;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <arm_boot+0x48>)
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <arm_boot+0x50>)
 8001072:	601a      	str	r2, [r3, #0]
  	// Write new boot address
  	*(uint32_t*)0x52002044 = 0x08000800; // default is 0x1ff00800
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <arm_boot+0x54>)
 8001076:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800107a:	601a      	str	r2, [r3, #0]
  	// Initiate OPTSTART Request
  	*(uint32_t*)0x52002018 |= 0x00000002;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <arm_boot+0x58>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <arm_boot+0x58>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6013      	str	r3, [r2, #0]
  	while(*(uint32_t*)0x52002018 & 0x00000002);
 8001088:	bf00      	nop
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <arm_boot+0x58>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f9      	bne.n	800108a <arm_boot+0x26>
  	// Lock OPTCR
  	*(uint32_t*)0x52002018 |= 0x00000001;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <arm_boot+0x58>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <arm_boot+0x58>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	52002008 	.word	0x52002008
 80010b0:	08192a3b 	.word	0x08192a3b
 80010b4:	4c5d6e7f 	.word	0x4c5d6e7f
 80010b8:	52002044 	.word	0x52002044
 80010bc:	52002018 	.word	0x52002018

080010c0 <mc2StateTmr>:
static void MX_UART8_Init(void);
static void MX_ADC1_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
static void mc2StateTmr(TimerHandle_t xTimer) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	static uint8_t buf[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	//first index set to 0x00 since the data ID for MC2 state is 0x00

	motorState = 1;
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <mc2StateTmr+0xa8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	fwdRevState = 1;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <mc2StateTmr+0xac>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
	buf[1] = motorState  << 4;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <mc2StateTmr+0xa8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <mc2StateTmr+0xb0>)
 80010de:	705a      	strb	r2, [r3, #1]
	buf[1] |= (fwdRevState & 0b01) << 3;
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <mc2StateTmr+0xb0>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <mc2StateTmr+0xac>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <mc2StateTmr+0xb0>)
 80010fc:	705a      	strb	r2, [r3, #1]
	buf[1] |= vfmUpState & 0b01 << 2;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <mc2StateTmr+0xb0>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	b25a      	sxtb	r2, r3
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <mc2StateTmr+0xb4>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	b25b      	sxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b25b      	sxtb	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <mc2StateTmr+0xb0>)
 8001118:	705a      	strb	r2, [r3, #1]
	buf[1] |= vfmDownState & 0b01 << 1;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <mc2StateTmr+0xb0>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	b25a      	sxtb	r2, r3
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <mc2StateTmr+0xb8>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	b25b      	sxtb	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <mc2StateTmr+0xb0>)
 8001134:	705a      	strb	r2, [r3, #1]
	if(vfmUpState == 1){
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <mc2StateTmr+0xb4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <mc2StateTmr+0x84>
		vfmUpState = 0;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <mc2StateTmr+0xb4>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	}
	if(vfmDownState == 1){
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <mc2StateTmr+0xb8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <mc2StateTmr+0x92>
		vfmDownState = 0;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <mc2StateTmr+0xb8>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
	}
	B_tcpSend(btcp, buf, 8);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <mc2StateTmr+0xbc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2208      	movs	r2, #8
 8001158:	4905      	ldr	r1, [pc, #20]	; (8001170 <mc2StateTmr+0xb0>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa92 	bl	8000684 <B_tcpSend>

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000050 	.word	0x24000050
 800116c:	24000052 	.word	0x24000052
 8001170:	24000054 	.word	0x24000054
 8001174:	24000051 	.word	0x24000051
 8001178:	24000053 	.word	0x24000053
 800117c:	24027730 	.word	0x24027730

08001180 <serialParse>:

// call back function used to receive from MCMB
// called by btcp functions
void serialParse(B_tcpPacket_t *pkt) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	switch(pkt->sender){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d000      	beq.n	8001192 <serialParse+0x12>
			if (pkt->payload[4] == 0x05) {
				motorTemperature = pkt->payload[5];
			}

	}
}
 8001190:	e015      	b.n	80011be <serialParse+0x3e>
			if(pkt->payload[4] == 0x03){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	3304      	adds	r3, #4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d104      	bne.n	80011a8 <serialParse+0x28>
				motorFrequency = pkt->payload[5];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	795a      	ldrb	r2, [r3, #5]
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <serialParse+0x4c>)
 80011a6:	701a      	strb	r2, [r3, #0]
			if (pkt->payload[4] == 0x05) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d104      	bne.n	80011be <serialParse+0x3e>
				motorTemperature = pkt->payload[5];
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	795a      	ldrb	r2, [r3, #5]
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <serialParse+0x50>)
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2402759c 	.word	0x2402759c
 80011d0:	24027c14 	.word	0x24027c14

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011da:	f001 fd81 	bl	8002ce0 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_boot();
 80011de:	f7ff ff41 	bl	8001064 <arm_boot>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f8a5 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 fd19 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ea:	f000 fccf 	bl	8001b8c <MX_DMA_Init>
  MX_UART4_Init();
 80011ee:	f000 fbe7 	bl	80019c0 <MX_UART4_Init>
  MX_RTC_Init();
 80011f2:	f000 fa4f 	bl	8001694 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80011f6:	f000 fc7d 	bl	8001af4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011fa:	f000 fb1f 	bl	800183c <MX_TIM2_Init>
  MX_TIM12_Init();
 80011fe:	f000 fb71 	bl	80018e4 <MX_TIM12_Init>
  MX_TIM1_Init();
 8001202:	f000 fac7 	bl	8001794 <MX_TIM1_Init>
  MX_CRC_Init();
 8001206:	f000 fa23 	bl	8001650 <MX_CRC_Init>
  MX_SPI3_Init();
 800120a:	f000 fa6b 	bl	80016e4 <MX_SPI3_Init>
  MX_UART8_Init();
 800120e:	f000 fc25 	bl	8001a5c <MX_UART8_Init>
  MX_ADC1_Init();
 8001212:	f000 f9a5 	bl	8001560 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t SPI_START_VAL = 0b00010001;
 8001216:	2311      	movs	r3, #17
 8001218:	71fb      	strb	r3, [r7, #7]
  buart = B_uartStart(&huart2);
 800121a:	4837      	ldr	r0, [pc, #220]	; (80012f8 <main+0x124>)
 800121c:	f7ff fcb2 	bl	8000b84 <B_uartStart>
 8001220:	4602      	mov	r2, r0
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <main+0x128>)
 8001224:	601a      	str	r2, [r3, #0]
  //radioBuart = B_uartStart(&huart8);
  //B_uartHandle_t * sendBuarts[2] = {buart, radioBuart};
  btcp = B_tcpStart(&buart, buart, 1, &hcrc);
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <main+0x128>)
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <main+0x12c>)
 800122c:	2201      	movs	r2, #1
 800122e:	4833      	ldr	r0, [pc, #204]	; (80012fc <main+0x128>)
 8001230:	f7ff f9d6 	bl	80005e0 <B_tcpStart>
 8001234:	4602      	mov	r2, r0
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <main+0x130>)
 8001238:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET); // Main
 800123a:	2201      	movs	r2, #1
 800123c:	2120      	movs	r1, #32
 800123e:	4832      	ldr	r0, [pc, #200]	; (8001308 <main+0x134>)
 8001240:	f005 fdae 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // Motor LED
 8001244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001248:	4830      	ldr	r0, [pc, #192]	; (800130c <main+0x138>)
 800124a:	f005 fd91 	bl	8006d70 <HAL_GPIO_ReadPin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET); // FwdRev
 800124e:	2200      	movs	r2, #0
 8001250:	2102      	movs	r1, #2
 8001252:	482f      	ldr	r0, [pc, #188]	; (8001310 <main+0x13c>)
 8001254:	f005 fda4 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET); // VFM UP
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <main+0x140>)
 8001260:	f005 fd9e 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET); // VFM Down
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	482a      	ldr	r0, [pc, #168]	; (8001314 <main+0x140>)
 800126c:	f005 fd98 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET); // ECO
 8001270:	2201      	movs	r2, #1
 8001272:	2101      	movs	r1, #1
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <main+0x13c>)
 8001276:	f005 fd93 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2, GPIO_PIN_SET); // CS0
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	4826      	ldr	r0, [pc, #152]	; (8001318 <main+0x144>)
 8001280:	f005 fd8e 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET); // CS1
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <main+0x13c>)
 800128a:	f005 fd89 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET); // VFM RESET
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	481f      	ldr	r0, [pc, #124]	; (8001314 <main+0x140>)
 8001296:	f005 fd83 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET); // MT3
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <main+0x140>)
 80012a2:	f005 fd7d 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET); // MT2
 80012a6:	2201      	movs	r2, #1
 80012a8:	2104      	movs	r1, #4
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <main+0x148>)
 80012ac:	f005 fd78 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET); // MT1
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	4817      	ldr	r0, [pc, #92]	; (8001314 <main+0x140>)
 80012b8:	f005 fd72 	bl	8006da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // MT0
 80012bc:	2201      	movs	r2, #1
 80012be:	2108      	movs	r1, #8
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <main+0x14c>)
 80012c2:	f005 fd6d 	bl	8006da0 <HAL_GPIO_WritePin>


  xTimerStart(xTimerCreate("mc2StateTmr", 10, pdTRUE, NULL, mc2StateTmr), 0);
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <main+0x150>)
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2201      	movs	r2, #1
 80012ce:	210a      	movs	r1, #10
 80012d0:	4815      	ldr	r0, [pc, #84]	; (8001328 <main+0x154>)
 80012d2:	f00d fdff 	bl	800eed4 <xTimerCreate>
 80012d6:	4604      	mov	r4, r0
 80012d8:	f00d f88e 	bl	800e3f8 <xTaskGetTickCount>
 80012dc:	4602      	mov	r2, r0
 80012de:	2300      	movs	r3, #0
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	4620      	mov	r0, r4
 80012e8:	f00d fe50 	bl	800ef8c <xTimerGenericCommand>
  HAL_TIM_Base_Start(&htim2);
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <main+0x158>)
 80012ee:	f009 fa1d 	bl	800a72c <HAL_TIM_Base_Start>
#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012f2:	f00b ff27 	bl	800d144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <main+0x122>
 80012f8:	240279cc 	.word	0x240279cc
 80012fc:	24027a58 	.word	0x24027a58
 8001300:	240273d8 	.word	0x240273d8
 8001304:	24027730 	.word	0x24027730
 8001308:	58022400 	.word	0x58022400
 800130c:	58020400 	.word	0x58020400
 8001310:	58021800 	.word	0x58021800
 8001314:	58022000 	.word	0x58022000
 8001318:	58022800 	.word	0x58022800
 800131c:	58021400 	.word	0x58021400
 8001320:	58021000 	.word	0x58021000
 8001324:	080010c1 	.word	0x080010c1
 8001328:	0800fe10 	.word	0x0800fe10
 800132c:	24027934 	.word	0x24027934

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0cc      	sub	sp, #304	; 0x130
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800133a:	224c      	movs	r2, #76	; 0x4c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00e fd45 	bl	800fdce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001348:	2220      	movs	r2, #32
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00e fd3e 	bl	800fdce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4618      	mov	r0, r3
 8001358:	23bc      	movs	r3, #188	; 0xbc
 800135a:	461a      	mov	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	f00e fd36 	bl	800fdce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001362:	2002      	movs	r0, #2
 8001364:	f005 fd5a 	bl	8006e1c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <SystemClock_Config+0x220>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <SystemClock_Config+0x220>)
 8001374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b75      	ldr	r3, [pc, #468]	; (8001550 <SystemClock_Config+0x220>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <SystemClock_Config+0x224>)
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <SystemClock_Config+0x224>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <SystemClock_Config+0x224>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013a2:	bf00      	nop
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <SystemClock_Config+0x220>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b0:	d1f8      	bne.n	80013a4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80013b2:	4b69      	ldr	r3, [pc, #420]	; (8001558 <SystemClock_Config+0x228>)
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <SystemClock_Config+0x228>)
 80013b8:	f023 0303 	bic.w	r3, r3, #3
 80013bc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80013be:	232a      	movs	r3, #42	; 0x2a
 80013c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013ee:	2314      	movs	r3, #20
 80013f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013fa:	2304      	movs	r3, #4
 80013fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001406:	230c      	movs	r3, #12
 8001408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800141c:	4618      	mov	r0, r3
 800141e:	f005 fd47 	bl	8006eb0 <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001428:	f000 febc 	bl	80021a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142c:	233f      	movs	r3, #63	; 0x3f
 800142e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800143e:	2308      	movs	r3, #8
 8001440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f006 f933 	bl	80076d0 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8001470:	f000 fe98 	bl	80021a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_HRTIM1
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <SystemClock_Config+0x22c>)
 800147a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI3
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LPTIM1
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2208      	movs	r2, #8
 8001482:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2220      	movs	r2, #32
 800148a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2202      	movs	r2, #2
 8001492:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	2202      	movs	r2, #2
 800149a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2202      	movs	r2, #2
 80014a2:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	22c0      	movs	r2, #192	; 0xc0
 80014aa:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2220      	movs	r2, #32
 80014ca:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80014ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	2200      	movs	r2, #0
 8001502:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4618      	mov	r0, r3
 8001524:	f006 fd04 	bl	8007f30 <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x202>
  {
    Error_Handler();
 800152e:	f000 fe39 	bl	80021a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001532:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001536:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 800153a:	2000      	movs	r0, #0
 800153c:	f006 fa7e 	bl	8007a3c <HAL_RCC_MCOConfig>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001540:	f005 fca6 	bl	8006e90 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001544:	bf00      	nop
 8001546:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	58024800 	.word	0x58024800
 8001554:	58000400 	.word	0x58000400
 8001558:	58024400 	.word	0x58024400
 800155c:	134d1022 	.word	0x134d1022

08001560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001584:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <MX_ADC1_Init+0xe4>)
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <MX_ADC1_Init+0xe8>)
 8001588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_ADC1_Init+0xe4>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_ADC1_Init+0xe4>)
 8001592:	2208      	movs	r2, #8
 8001594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_ADC1_Init+0xe4>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC1_Init+0xe4>)
 800159e:	2204      	movs	r2, #4
 80015a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015e2:	f001 fd71 	bl	80030c8 <HAL_ADC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015ec:	f000 fdda 	bl	80021a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <MX_ADC1_Init+0xe4>)
 80015fc:	f002 fb36 	bl	8003c6c <HAL_ADCEx_MultiModeConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001606:	f000 fdcd 	bl	80021a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_ADC1_Init+0xec>)
 800160c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160e:	2306      	movs	r3, #6
 8001610:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001616:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161c:	2304      	movs	r3, #4
 800161e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_ADC1_Init+0xe4>)
 800162e:	f001 feeb 	bl	8003408 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001638:	f000 fdb4 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	240275a4 	.word	0x240275a4
 8001648:	40022000 	.word	0x40022000
 800164c:	10c00010 	.word	0x10c00010

08001650 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <MX_CRC_Init+0x3c>)
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <MX_CRC_Init+0x40>)
 8001658:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_CRC_Init+0x3c>)
 800165c:	2200      	movs	r2, #0
 800165e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_CRC_Init+0x3c>)
 8001662:	2200      	movs	r2, #0
 8001664:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_CRC_Init+0x3c>)
 8001668:	2220      	movs	r2, #32
 800166a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_CRC_Init+0x3c>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_CRC_Init+0x3c>)
 8001674:	2201      	movs	r2, #1
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_CRC_Init+0x3c>)
 800167a:	f002 fcb1 	bl	8003fe0 <HAL_CRC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001684:	f000 fd8e 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	240273d8 	.word	0x240273d8
 8001690:	58024c00 	.word	0x58024c00

08001694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_RTC_Init+0x48>)
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <MX_RTC_Init+0x4c>)
 800169c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_RTC_Init+0x48>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_RTC_Init+0x48>)
 80016a6:	227f      	movs	r2, #127	; 0x7f
 80016a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_RTC_Init+0x48>)
 80016ac:	22ff      	movs	r2, #255	; 0xff
 80016ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_RTC_Init+0x48>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_RTC_Init+0x48>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_RTC_Init+0x48>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_RTC_Init+0x48>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_RTC_Init+0x48>)
 80016ca:	f008 faf5 	bl	8009cb8 <HAL_RTC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80016d4:	f000 fd66 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	240277ac 	.word	0x240277ac
 80016e0:	58004000 	.word	0x58004000

080016e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <MX_SPI3_Init+0xa8>)
 80016ea:	4a29      	ldr	r2, [pc, #164]	; (8001790 <MX_SPI3_Init+0xac>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <MX_SPI3_Init+0xa8>)
 80016f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <MX_SPI3_Init+0xa8>)
 80016f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016fc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_SPI3_Init+0xa8>)
 8001700:	2207      	movs	r2, #7
 8001702:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_SPI3_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_SPI3_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_SPI3_Init+0xa8>)
 8001712:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001716:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_SPI3_Init+0xa8>)
 800171a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800171e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_SPI3_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_SPI3_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_SPI3_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_SPI3_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_SPI3_Init+0xa8>)
 800173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_SPI3_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_SPI3_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_SPI3_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_SPI3_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_SPI3_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_SPI3_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_SPI3_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_SPI3_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_SPI3_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_SPI3_Init+0xa8>)
 8001778:	f008 fbaa 	bl	8009ed0 <HAL_SPI_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001782:	f000 fd0f 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24027514 	.word	0x24027514
 8001790:	40003c00 	.word	0x40003c00

08001794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <MX_TIM1_Init+0xa4>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017de:	4815      	ldr	r0, [pc, #84]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017e0:	f008 ff4d 	bl	800a67e <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017ea:	f000 fcdb 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <MX_TIM1_Init+0xa0>)
 80017fc:	f009 fa8a 	bl	800ad14 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001806:	f000 fccd 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_TIM1_Init+0xa0>)
 800181c:	f009 ff78 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001826:	f000 fcbd 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	240277d0 	.word	0x240277d0
 8001838:	40010000 	.word	0x40010000

0800183c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_TIM2_Init+0xa4>)
 800185c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001860:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_TIM2_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_TIM2_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_TIM2_Init+0xa4>)
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_TIM2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_TIM2_Init+0xa4>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <MX_TIM2_Init+0xa4>)
 8001884:	f008 fefb 	bl	800a67e <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800188e:	f000 fc89 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM2_Init+0xa4>)
 80018ac:	f009 fa32 	bl	800ad14 <HAL_TIM_ConfigClockSource>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018b6:	f000 fc75 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_TIM2_Init+0xa4>)
 80018c8:	f009 ff22 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018d2:	f000 fc67 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24027934 	.word	0x24027934

080018e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800190c:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <MX_TIM12_Init+0xd8>)
 800190e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <MX_TIM12_Init+0xd4>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_TIM12_Init+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800191e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001922:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MX_TIM12_Init+0xd4>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001930:	4821      	ldr	r0, [pc, #132]	; (80019b8 <MX_TIM12_Init+0xd4>)
 8001932:	f008 fea4 	bl	800a67e <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800193c:	f000 fc32 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	4619      	mov	r1, r3
 800194c:	481a      	ldr	r0, [pc, #104]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800194e:	f009 f9e1 	bl	800ad14 <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001958:	f000 fc24 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800195e:	f008 ff49 	bl	800a7f4 <HAL_TIM_PWM_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001968:	f000 fc1c 	bl	80021a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196c:	2360      	movs	r3, #96	; 0x60
 800196e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_TIM12_Init+0xd4>)
 8001984:	f009 f8b6 	bl	800aaf4 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800198e:	f000 fc09 	bl	80021a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2204      	movs	r2, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <MX_TIM12_Init+0xd4>)
 800199a:	f009 f8ab 	bl	800aaf4 <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80019a4:	f000 fbfe 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <MX_TIM12_Init+0xd4>)
 80019aa:	f000 fd8b 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 80019ae:	bf00      	nop
 80019b0:	3730      	adds	r7, #48	; 0x30
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	24027b4c 	.word	0x24027b4c
 80019bc:	40001800 	.word	0x40001800

080019c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_UART4_Init+0x90>)
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <MX_UART4_Init+0x94>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <MX_UART4_Init+0x90>)
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <MX_UART4_Init+0x98>)
 80019ce:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_UART4_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <MX_UART4_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_UART4_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_UART4_Init+0x90>)
 80019e4:	220c      	movs	r2, #12
 80019e6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <MX_UART4_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_UART4_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_UART4_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_UART4_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_UART4_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a06:	4812      	ldr	r0, [pc, #72]	; (8001a50 <MX_UART4_Init+0x90>)
 8001a08:	f009 ff28 	bl	800b85c <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001a12:	f000 fbc7 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a16:	2100      	movs	r1, #0
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_UART4_Init+0x90>)
 8001a1a:	f00b faaf 	bl	800cf7c <HAL_UARTEx_SetTxFifoThreshold>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001a24:	f000 fbbe 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <MX_UART4_Init+0x90>)
 8001a2c:	f00b fae4 	bl	800cff8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001a36:	f000 fbb5 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_UART4_Init+0x90>)
 8001a3c:	f00b fa65 	bl	800cf0a <HAL_UARTEx_DisableFifoMode>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001a46:	f000 fbad 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	240278a8 	.word	0x240278a8
 8001a54:	40004c00 	.word	0x40004c00
 8001a58:	001e8480 	.word	0x001e8480

08001a5c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <MX_UART8_Init+0x90>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <MX_UART8_Init+0x94>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 230400;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_UART8_Init+0x90>)
 8001a68:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a6c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_UART8_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_UART8_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_UART8_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_UART8_Init+0x90>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_UART8_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_UART8_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_UART8_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_UART8_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_UART8_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <MX_UART8_Init+0x90>)
 8001aa6:	f009 fed9 	bl	800b85c <HAL_UART_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001ab0:	f000 fb78 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_UART8_Init+0x90>)
 8001ab8:	f00b fa60 	bl	800cf7c <HAL_UARTEx_SetTxFifoThreshold>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001ac2:	f000 fb6f 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <MX_UART8_Init+0x90>)
 8001aca:	f00b fa95 	bl	800cff8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001ad4:	f000 fb66 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_UART8_Init+0x90>)
 8001ada:	f00b fa16 	bl	800cf0a <HAL_UARTEx_DisableFifoMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001ae4:	f000 fb5e 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2402781c 	.word	0x2402781c
 8001af0:	40007c00 	.word	0x40007c00

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MX_USART2_UART_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b00:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b3e:	f009 fe8d 	bl	800b85c <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b48:	f000 fb2c 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b50:	f00b fa14 	bl	800cf7c <HAL_UARTEx_SetTxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f000 fb23 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b62:	f00b fa49 	bl	800cff8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f000 fb1a 	bl	80021a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b72:	f00b f9ca 	bl	800cf0a <HAL_UARTEx_DisableFifoMode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 fb12 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	240279cc 	.word	0x240279cc
 8001b88:	40004400 	.word	0x40004400

08001b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MX_DMA_Init+0x8c>)
 8001b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b98:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <MX_DMA_Init+0x8c>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_DMA_Init+0x8c>)
 8001ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	200b      	movs	r0, #11
 8001bb6:	f002 f9eb 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bba:	200b      	movs	r0, #11
 8001bbc:	f002 fa02 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	200c      	movs	r0, #12
 8001bc6:	f002 f9e3 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bca:	200c      	movs	r0, #12
 8001bcc:	f002 f9fa 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f002 f9db 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bda:	200d      	movs	r0, #13
 8001bdc:	f002 f9f2 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2105      	movs	r1, #5
 8001be4:	200e      	movs	r0, #14
 8001be6:	f002 f9d3 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bea:	200e      	movs	r0, #14
 8001bec:	f002 f9ea 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	200f      	movs	r0, #15
 8001bf6:	f002 f9cb 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f002 f9e2 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2105      	movs	r1, #5
 8001c04:	2010      	movs	r0, #16
 8001c06:	f002 f9c3 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f002 f9da 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	58024400 	.word	0x58024400

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b090      	sub	sp, #64	; 0x40
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	4bc0      	ldr	r3, [pc, #768]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4abe      	ldr	r2, [pc, #760]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4bbc      	ldr	r3, [pc, #752]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c50:	4bb8      	ldr	r3, [pc, #736]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	4ab7      	ldr	r2, [pc, #732]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c60:	4bb4      	ldr	r3, [pc, #720]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6e:	4bb1      	ldr	r3, [pc, #708]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4aaf      	ldr	r2, [pc, #700]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4bad      	ldr	r3, [pc, #692]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8c:	4ba9      	ldr	r3, [pc, #676]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4aa8      	ldr	r2, [pc, #672]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4ba5      	ldr	r3, [pc, #660]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4ba2      	ldr	r3, [pc, #648]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4aa0      	ldr	r2, [pc, #640]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a99      	ldr	r2, [pc, #612]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b96      	ldr	r3, [pc, #600]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ce6:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a91      	ldr	r2, [pc, #580]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d04:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0a:	4a8a      	ldr	r2, [pc, #552]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b84      	ldr	r3, [pc, #528]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a82      	ldr	r2, [pc, #520]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	4a7b      	ldr	r2, [pc, #492]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d5e:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	4a73      	ldr	r2, [pc, #460]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6e:	4b71      	ldr	r3, [pc, #452]	; (8001f34 <MX_GPIO_Init+0x318>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2109      	movs	r1, #9
 8001d80:	486d      	ldr	r0, [pc, #436]	; (8001f38 <MX_GPIO_Init+0x31c>)
 8001d82:	f005 f80d 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001d86:	2200      	movs	r2, #0
 8001d88:	f24f 2191 	movw	r1, #62097	; 0xf291
 8001d8c:	486b      	ldr	r0, [pc, #428]	; (8001f3c <MX_GPIO_Init+0x320>)
 8001d8e:	f005 f807 	bl	8006da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2104      	movs	r1, #4
 8001d96:	486a      	ldr	r0, [pc, #424]	; (8001f40 <MX_GPIO_Init+0x324>)
 8001d98:	f005 f802 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f248 013f 	movw	r1, #32831	; 0x803f
 8001da2:	4868      	ldr	r0, [pc, #416]	; (8001f44 <MX_GPIO_Init+0x328>)
 8001da4:	f004 fffc 	bl	8006da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f24b 0120 	movw	r1, #45088	; 0xb020
 8001dae:	4866      	ldr	r0, [pc, #408]	; (8001f48 <MX_GPIO_Init+0x32c>)
 8001db0:	f004 fff6 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dba:	4864      	ldr	r0, [pc, #400]	; (8001f4c <MX_GPIO_Init+0x330>)
 8001dbc:	f004 fff0 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	21fc      	movs	r1, #252	; 0xfc
 8001dc4:	4862      	ldr	r0, [pc, #392]	; (8001f50 <MX_GPIO_Init+0x334>)
 8001dc6:	f004 ffeb 	bl	8006da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2108      	movs	r1, #8
 8001dce:	4861      	ldr	r0, [pc, #388]	; (8001f54 <MX_GPIO_Init+0x338>)
 8001dd0:	f004 ffe6 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8001dd4:	2309      	movs	r3, #9
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4853      	ldr	r0, [pc, #332]	; (8001f38 <MX_GPIO_Init+0x31c>)
 8001dec:	f004 fe10 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI12 PI13 PI14
                           PI15 PI0 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001df0:	f24f 2391 	movw	r3, #62097	; 0xf291
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	484c      	ldr	r0, [pc, #304]	; (8001f3c <MX_GPIO_Init+0x320>)
 8001e0a:	f004 fe01 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4619      	mov	r1, r3
 8001e24:	4846      	ldr	r0, [pc, #280]	; (8001f40 <MX_GPIO_Init+0x324>)
 8001e26:	f004 fdf3 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN0_Pin */
  GPIO_InitStruct.Pin = GPIO_IN0_Pin;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <MX_GPIO_Init+0x33c>)
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e32:	2302      	movs	r3, #2
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN0_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4842      	ldr	r0, [pc, #264]	; (8001f48 <MX_GPIO_Init+0x32c>)
 8001e3e:	f004 fde7 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ1 PJ2 PJ3 PJ4
                           PJ6 PJ7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001e42:	23de      	movs	r3, #222	; 0xde
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <MX_GPIO_Init+0x33c>)
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	483c      	ldr	r0, [pc, #240]	; (8001f48 <MX_GPIO_Init+0x32c>)
 8001e56:	f004 fddb 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e5a:	f248 033f 	movw	r3, #32831	; 0x803f
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4834      	ldr	r0, [pc, #208]	; (8001f44 <MX_GPIO_Init+0x328>)
 8001e74:	f004 fdcc 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <MX_GPIO_Init+0x33c>)
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	482a      	ldr	r0, [pc, #168]	; (8001f38 <MX_GPIO_Init+0x31c>)
 8001e8e:	f004 fdbf 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ5 PJ12 PJ13 PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001e92:	f24b 0320 	movw	r3, #45088	; 0xb020
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4827      	ldr	r0, [pc, #156]	; (8001f48 <MX_GPIO_Init+0x32c>)
 8001eac:	f004 fdb0 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4820      	ldr	r0, [pc, #128]	; (8001f4c <MX_GPIO_Init+0x330>)
 8001eca:	f004 fda1 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001ece:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481c      	ldr	r0, [pc, #112]	; (8001f5c <MX_GPIO_Init+0x340>)
 8001eec:	f004 fd90 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4815      	ldr	r0, [pc, #84]	; (8001f5c <MX_GPIO_Init+0x340>)
 8001f06:	f004 fd83 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f24:	4619      	mov	r1, r3
 8001f26:	480b      	ldr	r0, [pc, #44]	; (8001f54 <MX_GPIO_Init+0x338>)
 8001f28:	f004 fd72 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN10_Pin */
  GPIO_InitStruct.Pin = GPIO_IN10_Pin;
 8001f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f30:	e016      	b.n	8001f60 <MX_GPIO_Init+0x344>
 8001f32:	bf00      	nop
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58021000 	.word	0x58021000
 8001f3c:	58022000 	.word	0x58022000
 8001f40:	58021400 	.word	0x58021400
 8001f44:	58021800 	.word	0x58021800
 8001f48:	58022400 	.word	0x58022400
 8001f4c:	58021c00 	.word	0x58021c00
 8001f50:	58022800 	.word	0x58022800
 8001f54:	58020c00 	.word	0x58020c00
 8001f58:	11110000 	.word	0x11110000
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f62:	4b7e      	ldr	r3, [pc, #504]	; (800215c <MX_GPIO_Init+0x540>)
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIO_IN10_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	487b      	ldr	r0, [pc, #492]	; (8002160 <MX_GPIO_Init+0x544>)
 8001f72:	f004 fd4d 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ10 PJ11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f90:	4619      	mov	r1, r3
 8001f92:	4874      	ldr	r0, [pc, #464]	; (8002164 <MX_GPIO_Init+0x548>)
 8001f94:	f004 fd3c 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fa8:	2305      	movs	r3, #5
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	486d      	ldr	r0, [pc, #436]	; (8002168 <MX_GPIO_Init+0x54c>)
 8001fb4:	f004 fd2c 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK2 PK3 PK4 PK5
                           PK6 PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fb8:	23fc      	movs	r3, #252	; 0xfc
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4866      	ldr	r0, [pc, #408]	; (8002168 <MX_GPIO_Init+0x54c>)
 8001fd0:	f004 fd1e 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <MX_GPIO_Init+0x540>)
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4860      	ldr	r0, [pc, #384]	; (800216c <MX_GPIO_Init+0x550>)
 8001fea:	f004 fd11 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	4859      	ldr	r0, [pc, #356]	; (8002170 <MX_GPIO_Init+0x554>)
 800200c:	f004 fd00 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2302      	movs	r3, #2
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002022:	2309      	movs	r3, #9
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	4619      	mov	r1, r3
 800202c:	4851      	ldr	r0, [pc, #324]	; (8002174 <MX_GPIO_Init+0x558>)
 800202e:	f004 fcef 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI2 PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002032:	230e      	movs	r3, #14
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002042:	2305      	movs	r3, #5
 8002044:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800204a:	4619      	mov	r1, r3
 800204c:	484a      	ldr	r0, [pc, #296]	; (8002178 <MX_GPIO_Init+0x55c>)
 800204e:	f004 fcdf 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI6;
 8002064:	2307      	movs	r3, #7
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206c:	4619      	mov	r1, r3
 800206e:	4840      	ldr	r0, [pc, #256]	; (8002170 <MX_GPIO_Init+0x554>)
 8002070:	f004 fcce 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002074:	2308      	movs	r3, #8
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002088:	4619      	mov	r1, r3
 800208a:	4835      	ldr	r0, [pc, #212]	; (8002160 <MX_GPIO_Init+0x544>)
 800208c:	f004 fcc0 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020a0:	2305      	movs	r3, #5
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a8:	4619      	mov	r1, r3
 80020aa:	482d      	ldr	r0, [pc, #180]	; (8002160 <MX_GPIO_Init+0x544>)
 80020ac:	f004 fcb0 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c2:	2305      	movs	r3, #5
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4827      	ldr	r0, [pc, #156]	; (800216c <MX_GPIO_Init+0x550>)
 80020ce:	f004 fc9f 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80020d2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80020e4:	2305      	movs	r3, #5
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	481f      	ldr	r0, [pc, #124]	; (800216c <MX_GPIO_Init+0x550>)
 80020f0:	f004 fc8e 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002104:	2309      	movs	r3, #9
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210c:	4619      	mov	r1, r3
 800210e:	481b      	ldr	r0, [pc, #108]	; (800217c <MX_GPIO_Init+0x560>)
 8002110:	f004 fc7e 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002124:	2303      	movs	r3, #3
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <MX_GPIO_Init+0x55c>)
 8002130:	f004 fc6e 	bl	8006a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2105      	movs	r1, #5
 8002138:	2006      	movs	r0, #6
 800213a:	f001 ff29 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800213e:	2006      	movs	r0, #6
 8002140:	f001 ff40 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2105      	movs	r1, #5
 8002148:	2028      	movs	r0, #40	; 0x28
 800214a:	f001 ff21 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	f001 ff38 	bl	8003fc4 <HAL_NVIC_EnableIRQ>

}
 8002154:	bf00      	nop
 8002156:	3740      	adds	r7, #64	; 0x40
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	11110000 	.word	0x11110000
 8002160:	58020c00 	.word	0x58020c00
 8002164:	58022400 	.word	0x58022400
 8002168:	58022800 	.word	0x58022800
 800216c:	58021800 	.word	0x58021800
 8002170:	58020000 	.word	0x58020000
 8002174:	58021c00 	.word	0x58021c00
 8002178:	58022000 	.word	0x58022000
 800217c:	58020400 	.word	0x58020400

08002180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002192:	f000 fde1 	bl	8002d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40001000 	.word	0x40001000

080021a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_MspInit+0x38>)
 80021bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_MspInit+0x38>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_MspInit+0x38>)
 80021cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	210f      	movs	r1, #15
 80021dc:	f06f 0001 	mvn.w	r0, #1
 80021e0:	f001 fed6 	bl	8003f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	58024400 	.word	0x58024400

080021f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_ADC_MspInit+0x80>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d129      	bne.n	8002266 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_ADC_MspInit+0x84>)
 8002214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_ADC_MspInit+0x84>)
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_ADC_MspInit+0x84>)
 8002224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_ADC_MspInit+0x84>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <HAL_ADC_MspInit+0x84>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_ADC_MspInit+0x84>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800224e:	2310      	movs	r3, #16
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_ADC_MspInit+0x88>)
 8002262:	f004 fbd5 	bl	8006a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	58024400 	.word	0x58024400
 8002278:	58020800 	.word	0x58020800

0800227c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_CRC_MspInit+0x3c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10e      	bne.n	80022ac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_CRC_MspInit+0x40>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_CRC_MspInit+0x40>)
 8002296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800229a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_CRC_MspInit+0x40>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	58024c00 	.word	0x58024c00
 80022bc:	58024400 	.word	0x58024400

080022c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RTC_MspInit+0x2c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d105      	bne.n	80022de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RTC_MspInit+0x30>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_RTC_MspInit+0x30>)
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	58004000 	.word	0x58004000
 80022f0:	58024400 	.word	0x58024400

080022f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2d      	ldr	r2, [pc, #180]	; (80023c8 <HAL_SPI_MspInit+0xd4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d154      	bne.n	80023c0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_SPI_MspInit+0xd8>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002380:	2305      	movs	r3, #5
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4811      	ldr	r0, [pc, #68]	; (80023d0 <HAL_SPI_MspInit+0xdc>)
 800238c:	f004 fb40 	bl	8006a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002390:	2308      	movs	r3, #8
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023a0:	2306      	movs	r3, #6
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	480a      	ldr	r0, [pc, #40]	; (80023d4 <HAL_SPI_MspInit+0xe0>)
 80023ac:	f004 fb30 	bl	8006a10 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2105      	movs	r1, #5
 80023b4:	2033      	movs	r0, #51	; 0x33
 80023b6:	f001 fdeb 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80023ba:	2033      	movs	r0, #51	; 0x33
 80023bc:	f001 fe02 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40003c00 	.word	0x40003c00
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58020c00 	.word	0x58020c00
 80023d4:	58020400 	.word	0x58020400

080023d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <HAL_TIM_Base_MspInit+0xdc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10f      	bne.n	800241a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 80023fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002400:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 800240c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002418:	e047      	b.n	80024aa <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d12e      	bne.n	8002482 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002460:	2301      	movs	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002470:	2301      	movs	r3, #1
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	4619      	mov	r1, r3
 800247a:	4810      	ldr	r0, [pc, #64]	; (80024bc <HAL_TIM_Base_MspInit+0xe4>)
 800247c:	f004 fac8 	bl	8006a10 <HAL_GPIO_Init>
}
 8002480:	e013      	b.n	80024aa <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM12)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_TIM_Base_MspInit+0xe8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10e      	bne.n	80024aa <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002498:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_TIM_Base_MspInit+0xe0>)
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40010000 	.word	0x40010000
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58020000 	.word	0x58020000
 80024c0:	40001800 	.word	0x40001800

080024c4 <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_TIM_MspPostInit+0x6c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d11f      	bne.n	8002526 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_TIM_MspPostInit+0x70>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_TIM_MspPostInit+0x70>)
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_TIM_MspPostInit+0x70>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PH9     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002504:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002516:	2302      	movs	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <HAL_TIM_MspPostInit+0x74>)
 8002522:	f004 fa75 	bl	8006a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40001800 	.word	0x40001800
 8002534:	58024400 	.word	0x58024400
 8002538:	58021c00 	.word	0x58021c00

0800253c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	; 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a99      	ldr	r2, [pc, #612]	; (80027c0 <HAL_UART_MspInit+0x284>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 8095 	bne.w	800268a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002560:	4b98      	ldr	r3, [pc, #608]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002566:	4a97      	ldr	r2, [pc, #604]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800256c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002570:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002584:	4a8f      	ldr	r2, [pc, #572]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258e:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800259c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80025ae:	2306      	movs	r3, #6
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4883      	ldr	r0, [pc, #524]	; (80027c8 <HAL_UART_MspInit+0x28c>)
 80025ba:	f004 fa29 	bl	8006a10 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream0;
 80025be:	4b83      	ldr	r3, [pc, #524]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025c0:	4a83      	ldr	r2, [pc, #524]	; (80027d0 <HAL_UART_MspInit+0x294>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ca:	4b80      	ldr	r3, [pc, #512]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025de:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e4:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025f0:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f8:	4b74      	ldr	r3, [pc, #464]	; (80027cc <HAL_UART_MspInit+0x290>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80025fe:	4873      	ldr	r0, [pc, #460]	; (80027cc <HAL_UART_MspInit+0x290>)
 8002600:	f001 feea 	bl	80043d8 <HAL_DMA_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800260a:	f7ff fdcb 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_UART_MspInit+0x290>)
 8002612:	675a      	str	r2, [r3, #116]	; 0x74
 8002614:	4a6d      	ldr	r2, [pc, #436]	; (80027cc <HAL_UART_MspInit+0x290>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_UART_MspInit+0x298>)
 800261c:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_UART_MspInit+0x29c>)
 800261e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002620:	4b6c      	ldr	r3, [pc, #432]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002622:	223f      	movs	r2, #63	; 0x3f
 8002624:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_UART_MspInit+0x298>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263a:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_UART_MspInit+0x298>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002650:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002654:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800265c:	485d      	ldr	r0, [pc, #372]	; (80027d4 <HAL_UART_MspInit+0x298>)
 800265e:	f001 febb 	bl	80043d8 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002668:	f7ff fd9c 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002670:	679a      	str	r2, [r3, #120]	; 0x78
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_UART_MspInit+0x298>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2105      	movs	r1, #5
 800267c:	2034      	movs	r0, #52	; 0x34
 800267e:	f001 fc87 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002682:	2034      	movs	r0, #52	; 0x34
 8002684:	f001 fc9e 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002688:	e14d      	b.n	8002926 <HAL_UART_MspInit+0x3ea>
  else if(huart->Instance==UART8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_UART_MspInit+0x2a0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	f040 80af 	bne.w	80027f4 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002696:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_UART_MspInit+0x288>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800269c:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_UART_MspInit+0x288>)
 800269e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_UART_MspInit+0x288>)
 80026a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_UART_MspInit+0x288>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_UART_MspInit+0x288>)
 80026bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_UART_MspInit+0x288>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80026e4:	2308      	movs	r3, #8
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ec:	4619      	mov	r1, r3
 80026ee:	483c      	ldr	r0, [pc, #240]	; (80027e0 <HAL_UART_MspInit+0x2a4>)
 80026f0:	f004 f98e 	bl	8006a10 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream2;
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_UART_MspInit+0x2ac>)
 80026f8:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80026fa:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 80026fc:	2251      	movs	r2, #81	; 0x51
 80026fe:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 800270e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002712:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002726:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 800272a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800272e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002736:	482b      	ldr	r0, [pc, #172]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 8002738:	f001 fe4e 	bl	80043d8 <HAL_DMA_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002742:	f7ff fd2f 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 800274a:	679a      	str	r2, [r3, #120]	; 0x78
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <HAL_UART_MspInit+0x2a8>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_UART_MspInit+0x2b4>)
 8002756:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 800275a:	2252      	movs	r2, #82	; 0x52
 800275c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 800276c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002770:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278a:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002792:	4816      	ldr	r0, [pc, #88]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 8002794:	f001 fe20 	bl	80043d8 <HAL_DMA_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_MspInit+0x266>
      Error_Handler();
 800279e:	f7ff fd01 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 80027a6:	675a      	str	r2, [r3, #116]	; 0x74
 80027a8:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_UART_MspInit+0x2b0>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2105      	movs	r1, #5
 80027b2:	2053      	movs	r0, #83	; 0x53
 80027b4:	f001 fbec 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80027b8:	2053      	movs	r0, #83	; 0x53
 80027ba:	f001 fc03 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
}
 80027be:	e0b2      	b.n	8002926 <HAL_UART_MspInit+0x3ea>
 80027c0:	40004c00 	.word	0x40004c00
 80027c4:	58024400 	.word	0x58024400
 80027c8:	58020000 	.word	0x58020000
 80027cc:	24027b9c 	.word	0x24027b9c
 80027d0:	40020010 	.word	0x40020010
 80027d4:	240272e4 	.word	0x240272e4
 80027d8:	40020028 	.word	0x40020028
 80027dc:	40007c00 	.word	0x40007c00
 80027e0:	58022400 	.word	0x58022400
 80027e4:	24027680 	.word	0x24027680
 80027e8:	40020040 	.word	0x40020040
 80027ec:	24027734 	.word	0x24027734
 80027f0:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_UART_MspInit+0x3f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f040 8093 	bne.w	8002926 <HAL_UART_MspInit+0x3ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002806:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002810:	4b48      	ldr	r3, [pc, #288]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	4a43      	ldr	r2, [pc, #268]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_UART_MspInit+0x3f8>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800283c:	230c      	movs	r3, #12
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800284c:	2307      	movs	r3, #7
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	4838      	ldr	r0, [pc, #224]	; (8002938 <HAL_UART_MspInit+0x3fc>)
 8002858:	f004 f8da 	bl	8006a10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 800285c:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_UART_MspInit+0x400>)
 800285e:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_UART_MspInit+0x404>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_UART_MspInit+0x400>)
 8002864:	222b      	movs	r2, #43	; 0x2b
 8002866:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_UART_MspInit+0x400>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_UART_MspInit+0x400>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_UART_MspInit+0x400>)
 8002876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_UART_MspInit+0x400>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_UART_MspInit+0x400>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_UART_MspInit+0x400>)
 800288a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_UART_MspInit+0x400>)
 8002892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002896:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_UART_MspInit+0x400>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800289e:	4827      	ldr	r0, [pc, #156]	; (800293c <HAL_UART_MspInit+0x400>)
 80028a0:	f001 fd9a 	bl	80043d8 <HAL_DMA_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_UART_MspInit+0x372>
      Error_Handler();
 80028aa:	f7ff fc7b 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_UART_MspInit+0x400>)
 80028b2:	679a      	str	r2, [r3, #120]	; 0x78
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_UART_MspInit+0x400>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream4;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_UART_MspInit+0x40c>)
 80028be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028c2:	222c      	movs	r2, #44	; 0x2c
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028fa:	4812      	ldr	r0, [pc, #72]	; (8002944 <HAL_UART_MspInit+0x408>)
 80028fc:	f001 fd6c 	bl	80043d8 <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_UART_MspInit+0x3ce>
      Error_Handler();
 8002906:	f7ff fc4d 	bl	80021a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_UART_MspInit+0x408>)
 800290e:	675a      	str	r2, [r3, #116]	; 0x74
 8002910:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_UART_MspInit+0x408>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2105      	movs	r1, #5
 800291a:	2026      	movs	r0, #38	; 0x26
 800291c:	f001 fb38 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002920:	2026      	movs	r0, #38	; 0x26
 8002922:	f001 fb4f 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3738      	adds	r7, #56	; 0x38
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40004400 	.word	0x40004400
 8002934:	58024400 	.word	0x58024400
 8002938:	58020000 	.word	0x58020000
 800293c:	24027360 	.word	0x24027360
 8002940:	40020058 	.word	0x40020058
 8002944:	24027608 	.word	0x24027608
 8002948:	40020070 	.word	0x40020070

0800294c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b090      	sub	sp, #64	; 0x40
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d827      	bhi.n	80029aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800295a:	2200      	movs	r2, #0
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	2036      	movs	r0, #54	; 0x36
 8002960:	f001 fb16 	bl	8003f90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002964:	2036      	movs	r0, #54	; 0x36
 8002966:	f001 fb2d 	bl	8003fc4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800296a:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_InitTick+0xc4>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_InitTick+0xc8>)
 8002972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002976:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_InitTick+0xc8>)
 8002978:	f043 0310 	orr.w	r3, r3, #16
 800297c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_InitTick+0xc8>)
 8002982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800298e:	f107 0210 	add.w	r2, r7, #16
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f005 fa87 	bl	8007eac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_InitTick+0x6a>
 80029a8:	e001      	b.n	80029ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e02b      	b.n	8002a06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ae:	f005 fa51 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 80029b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80029b4:	e004      	b.n	80029c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029b6:	f005 fa4d 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 80029ba:	4603      	mov	r3, r0
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_InitTick+0xcc>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9b      	lsrs	r3, r3, #18
 80029ca:	3b01      	subs	r3, #1
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_InitTick+0xd0>)
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_InitTick+0xd4>)
 80029d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_InitTick+0xd0>)
 80029d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_InitTick+0xd0>)
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_InitTick+0xd0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_InitTick+0xd0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029ee:	480b      	ldr	r0, [pc, #44]	; (8002a1c <HAL_InitTick+0xd0>)
 80029f0:	f007 fe45 	bl	800a67e <HAL_TIM_Base_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029fa:	4808      	ldr	r0, [pc, #32]	; (8002a1c <HAL_InitTick+0xd0>)
 80029fc:	f007 fec4 	bl	800a788 <HAL_TIM_Base_Start_IT>
 8002a00:	4603      	mov	r3, r0
 8002a02:	e000      	b.n	8002a06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3740      	adds	r7, #64	; 0x40
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	24000008 	.word	0x24000008
 8002a14:	58024400 	.word	0x58024400
 8002a18:	431bde83 	.word	0x431bde83
 8002a1c:	24027c64 	.word	0x24027c64
 8002a20:	40001000 	.word	0x40001000

08002a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler+0x4>

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <MemManage_Handler+0x4>

08002a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f004 f9bc 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <DMA1_Stream0_IRQHandler+0x10>)
 8002a66:	f002 fcc1 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	24027b9c 	.word	0x24027b9c

08002a74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <DMA1_Stream1_IRQHandler+0x10>)
 8002a7a:	f002 fcb7 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	240272e4 	.word	0x240272e4

08002a88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <DMA1_Stream2_IRQHandler+0x10>)
 8002a8e:	f002 fcad 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	24027680 	.word	0x24027680

08002a9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <DMA1_Stream3_IRQHandler+0x10>)
 8002aa2:	f002 fca3 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	24027360 	.word	0x24027360

08002ab0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA1_Stream4_IRQHandler+0x10>)
 8002ab6:	f002 fc99 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	24027608 	.word	0x24027608

08002ac4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Stream5_IRQHandler+0x10>)
 8002aca:	f002 fc8f 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24027734 	.word	0x24027734

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f009 f815 	bl	800bb0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	240279cc 	.word	0x240279cc

08002aec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002af0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002af4:	f004 f96d 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002af8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002afc:	f004 f969 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b04:	f004 f965 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b0c:	f004 f961 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b14:	f004 f95d 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002b18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b1c:	f004 f959 	bl	8006dd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <SPI3_IRQHandler+0x10>)
 8002b2a:	f007 fac9 	bl	800a0c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	24027514 	.word	0x24027514

08002b38 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b3c:	4802      	ldr	r0, [pc, #8]	; (8002b48 <UART4_IRQHandler+0x10>)
 8002b3e:	f008 ffe5 	bl	800bb0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	240278a8 	.word	0x240278a8

08002b4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM6_DAC_IRQHandler+0x10>)
 8002b52:	f007 feb0 	bl	800a8b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	24027c64 	.word	0x24027c64

08002b60 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <UART8_IRQHandler+0x10>)
 8002b66:	f008 ffd1 	bl	800bb0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2402781c 	.word	0x2402781c

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <SystemInit+0xec>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <SystemInit+0xec>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b88:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <SystemInit+0xf0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d807      	bhi.n	8002ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <SystemInit+0xf0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 030f 	bic.w	r3, r3, #15
 8002b9c:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <SystemInit+0xf0>)
 8002b9e:	f043 0307 	orr.w	r3, r3, #7
 8002ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <SystemInit+0xf4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <SystemInit+0xf4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <SystemInit+0xf4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <SystemInit+0xf4>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	492b      	ldr	r1, [pc, #172]	; (8002c68 <SystemInit+0xf4>)
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <SystemInit+0xf8>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <SystemInit+0xf0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	2b07      	cmp	r3, #7
 8002bcc:	d907      	bls.n	8002bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <SystemInit+0xf0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 030f 	bic.w	r3, r3, #15
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <SystemInit+0xf0>)
 8002bd8:	f043 0307 	orr.w	r3, r3, #7
 8002bdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <SystemInit+0xf4>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <SystemInit+0xf4>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bea:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <SystemInit+0xf4>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <SystemInit+0xf4>)
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <SystemInit+0xfc>)
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <SystemInit+0xf4>)
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <SystemInit+0x100>)
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <SystemInit+0xf4>)
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <SystemInit+0x104>)
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <SystemInit+0xf4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <SystemInit+0xf4>)
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <SystemInit+0x104>)
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <SystemInit+0xf4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <SystemInit+0xf4>)
 8002c16:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <SystemInit+0x104>)
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <SystemInit+0xf4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <SystemInit+0xf4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <SystemInit+0xf4>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <SystemInit+0xf4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <SystemInit+0x108>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <SystemInit+0x10c>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3e:	d202      	bcs.n	8002c46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <SystemInit+0x110>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <SystemInit+0x114>)
 8002c48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SystemInit+0xec>)
 8002c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c54:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	52002000 	.word	0x52002000
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c70:	02020200 	.word	0x02020200
 8002c74:	01ff0000 	.word	0x01ff0000
 8002c78:	01010280 	.word	0x01010280
 8002c7c:	5c001000 	.word	0x5c001000
 8002c80:	ffff0000 	.word	0xffff0000
 8002c84:	51008108 	.word	0x51008108
 8002c88:	52004000 	.word	0x52004000

08002c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c90:	f7ff ff70 	bl	8002b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c96:	e003      	b.n	8002ca0 <LoopCopyDataInit>

08002c98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002c9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c9e:	3104      	adds	r1, #4

08002ca0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ca0:	480a      	ldr	r0, [pc, #40]	; (8002ccc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002ca4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ca6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ca8:	d3f6      	bcc.n	8002c98 <CopyDataInit>
  ldr  r2, =_sbss
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002cac:	e002      	b.n	8002cb4 <LoopFillZerobss>

08002cae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cb0:	f842 3b04 	str.w	r3, [r2], #4

08002cb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cb8:	d3f9      	bcc.n	8002cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cba:	f00d f859 	bl	800fd70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cbe:	f7fe fa89 	bl	80011d4 <main>
  bx  lr    
 8002cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cc4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002cc8:	0800fe84 	.word	0x0800fe84
  ldr  r0, =_sdata
 8002ccc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002cd0:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8002cd4:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8002cd8:	24027cf4 	.word	0x24027cf4

08002cdc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC3_IRQHandler>
	...

08002ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f001 f947 	bl	8003f7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cec:	f004 ff10 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_Init+0x68>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <HAL_Init+0x6c>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa21 f303 	lsr.w	r3, r1, r3
 8002d08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_Init+0x68>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_Init+0x6c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_Init+0x70>)
 8002d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <HAL_Init+0x74>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7ff fe0e 	bl	800294c <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e002      	b.n	8002d40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3a:	f7ff fa3b 	bl	80021b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	0800fe44 	.word	0x0800fe44
 8002d50:	24000004 	.word	0x24000004
 8002d54:	24000000 	.word	0x24000000

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2400000c 	.word	0x2400000c
 8002d7c:	24027cb0 	.word	0x24027cb0

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	24027cb0 	.word	0x24027cb0

08002d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetREVID+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0c1b      	lsrs	r3, r3, #16
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	5c001000 	.word	0x5c001000

08002db0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b087      	sub	sp, #28
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3360      	adds	r3, #96	; 0x60
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3330      	adds	r3, #48	; 0x30
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	211f      	movs	r1, #31
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 011f 	and.w	r1, r3, #31
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	431a      	orrs	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3314      	adds	r3, #20
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0e5b      	lsrs	r3, r3, #25
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0d1b      	lsrs	r3, r3, #20
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2107      	movs	r1, #7
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0d1b      	lsrs	r3, r3, #20
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0318 	and.w	r3, r3, #24
 8002f92:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f94:	40d9      	lsrs	r1, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	400b      	ands	r3, r1
 8002f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	000fffff 	.word	0x000fffff

08002fb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6093      	str	r3, [r2, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	5fffffc0 	.word	0x5fffffc0

08002fdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <LL_ADC_EnableInternalRegulator+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	6fffffc0 	.word	0x6fffffc0

0800302c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003040:	d101      	bne.n	8003046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <LL_ADC_IsEnabled+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsEnabled+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d101      	bne.n	8003092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d101      	bne.n	80030b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e18e      	b.n	8003400 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff f87d 	bl	80021f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff67 	bl	8002fdc <LL_ADC_IsDeepPowerDownEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff4d 	bl	8002fb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff82 	bl	800302c <LL_ADC_IsInternalRegulatorEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff66 	bl	8003004 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003138:	4b9a      	ldr	r3, [pc, #616]	; (80033a4 <HAL_ADC_Init+0x2dc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	4a9a      	ldr	r2, [pc, #616]	; (80033a8 <HAL_ADC_Init+0x2e0>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003148:	e002      	b.n	8003150 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff66 	bl	800302c <LL_ADC_IsInternalRegulatorEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff77 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 800318c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 8129 	bne.w	80033ee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8125 	bne.w	80033ee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031ac:	f043 0202 	orr.w	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff4b 	bl	8003054 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d136      	bne.n	8003232 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a78      	ldr	r2, [pc, #480]	; (80033ac <HAL_ADC_Init+0x2e4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_ADC_Init+0x110>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a77      	ldr	r2, [pc, #476]	; (80033b0 <HAL_ADC_Init+0x2e8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10e      	bne.n	80031f6 <HAL_ADC_Init+0x12e>
 80031d8:	4874      	ldr	r0, [pc, #464]	; (80033ac <HAL_ADC_Init+0x2e4>)
 80031da:	f7ff ff3b 	bl	8003054 <LL_ADC_IsEnabled>
 80031de:	4604      	mov	r4, r0
 80031e0:	4873      	ldr	r0, [pc, #460]	; (80033b0 <HAL_ADC_Init+0x2e8>)
 80031e2:	f7ff ff37 	bl	8003054 <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4323      	orrs	r3, r4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e008      	b.n	8003208 <HAL_ADC_Init+0x140>
 80031f6:	486f      	ldr	r0, [pc, #444]	; (80033b4 <HAL_ADC_Init+0x2ec>)
 80031f8:	f7ff ff2c 	bl	8003054 <LL_ADC_IsEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a66      	ldr	r2, [pc, #408]	; (80033ac <HAL_ADC_Init+0x2e4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_ADC_Init+0x158>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a65      	ldr	r2, [pc, #404]	; (80033b0 <HAL_ADC_Init+0x2e8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_ADC_Init+0x15c>
 8003220:	4a65      	ldr	r2, [pc, #404]	; (80033b8 <HAL_ADC_Init+0x2f0>)
 8003222:	e000      	b.n	8003226 <HAL_ADC_Init+0x15e>
 8003224:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_ADC_Init+0x2f4>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7ff fdbf 	bl	8002db0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003232:	f7ff fdb1 	bl	8002d98 <HAL_GetREVID>
 8003236:	4602      	mov	r2, r0
 8003238:	f241 0303 	movw	r3, #4099	; 0x1003
 800323c:	429a      	cmp	r2, r3
 800323e:	d914      	bls.n	800326a <HAL_ADC_Init+0x1a2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d110      	bne.n	800326a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7d5b      	ldrb	r3, [r3, #21]
 800324c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003252:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003258:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7f1b      	ldrb	r3, [r3, #28]
 800325e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003260:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003262:	f043 030c 	orr.w	r3, r3, #12
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e00d      	b.n	8003286 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7d5b      	ldrb	r3, [r3, #21]
 800326e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003274:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800327a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7f1b      	ldrb	r3, [r3, #28]
 8003280:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f1b      	ldrb	r3, [r3, #28]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	3b01      	subs	r3, #1
 8003294:	045b      	lsls	r3, r3, #17
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_ADC_Init+0x2f8>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fed2 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 80032d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fedf 	bl	80030a0 <LL_ADC_INJ_IsConversionOngoing>
 80032e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14a      	bne.n	8003380 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d147      	bne.n	8003380 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7d1b      	ldrb	r3, [r3, #20]
 80032f4:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <HAL_ADC_Init+0x2fc>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	430b      	orrs	r3, r1
 8003310:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003318:	2b01      	cmp	r3, #1
 800331a:	d11b      	bne.n	8003354 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_ADC_Init+0x300>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003330:	3a01      	subs	r2, #1
 8003332:	0411      	lsls	r1, r2, #16
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003344:	430a      	orrs	r2, r1
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e007      	b.n	8003364 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fb58 	bl	8003a30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d121      	bne.n	80033cc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f023 010f 	bic.w	r1, r3, #15
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e01c      	b.n	80033dc <HAL_ADC_Init+0x314>
 80033a2:	bf00      	nop
 80033a4:	24000000 	.word	0x24000000
 80033a8:	053e2d63 	.word	0x053e2d63
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022100 	.word	0x40022100
 80033b4:	58026000 	.word	0x58026000
 80033b8:	40022300 	.word	0x40022300
 80033bc:	58026300 	.word	0x58026300
 80033c0:	fff0c003 	.word	0xfff0c003
 80033c4:	ffffbffc 	.word	0xffffbffc
 80033c8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 020f 	bic.w	r2, r2, #15
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
 80033ec:	e007      	b.n	80033fe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3724      	adds	r7, #36	; 0x24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}

08003408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b099      	sub	sp, #100	; 0x64
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a99      	ldr	r2, [pc, #612]	; (8003688 <HAL_ADC_ConfigChannel+0x280>)
 8003422:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x2a>
 800342e:	2302      	movs	r3, #2
 8003430:	e2e6      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x5f8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fe1b 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 82cb 	bne.w	80039e2 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003454:	2b00      	cmp	r3, #0
 8003456:	d108      	bne.n	800346a <HAL_ADC_ConfigChannel+0x62>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2201      	movs	r2, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	e00f      	b.n	800348a <HAL_ADC_ConfigChannel+0x82>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2201      	movs	r2, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	69d1      	ldr	r1, [r2, #28]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fd0b 	bl	8002ec0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fde3 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 80034b4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fdf0 	bl	80030a0 <LL_ADC_INJ_IsConversionOngoing>
 80034c0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 80b3 	bne.w	8003630 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 80af 	bne.w	8003630 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7ff fd1a 	bl	8002f18 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034e4:	4b69      	ldr	r3, [pc, #420]	; (800368c <HAL_ADC_ConfigChannel+0x284>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f0:	d10b      	bne.n	800350a <HAL_ADC_ConfigChannel+0x102>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	e01d      	b.n	8003546 <HAL_ADC_ConfigChannel+0x13e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x128>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	e00a      	b.n	8003546 <HAL_ADC_ConfigChannel+0x13e>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b04      	cmp	r3, #4
 800354e:	d027      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6919      	ldr	r1, [r3, #16]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355e:	f7ff fc5b 	bl	8002e18 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7e5b      	ldrb	r3, [r3, #25]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x170>
 8003572:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003576:	e000      	b.n	800357a <HAL_ADC_ConfigChannel+0x172>
 8003578:	2300      	movs	r3, #0
 800357a:	461a      	mov	r2, r3
 800357c:	f7ff fc85 	bl	8002e8a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6919      	ldr	r1, [r3, #16]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7e1b      	ldrb	r3, [r3, #24]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x18e>
 8003590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003594:	e000      	b.n	8003598 <HAL_ADC_ConfigChannel+0x190>
 8003596:	2300      	movs	r3, #0
 8003598:	461a      	mov	r2, r3
 800359a:	f7ff fc5d 	bl	8002e58 <LL_ADC_SetDataRightShift>
 800359e:	e047      	b.n	8003630 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	069b      	lsls	r3, r3, #26
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d107      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	069b      	lsls	r3, r3, #26
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800360a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	069b      	lsls	r3, r3, #26
 800361c:	429a      	cmp	r2, r3
 800361e:	d107      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800362e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fd0d 	bl	8003054 <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 81d9 	bne.w	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f7ff fc8e 	bl	8002f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <HAL_ADC_ConfigChannel+0x280>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f040 8101 	bne.w	8003862 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x288>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	3301      	adds	r3, #1
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2b09      	cmp	r3, #9
 800367e:	bf94      	ite	ls
 8003680:	2301      	movls	r3, #1
 8003682:	2300      	movhi	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e016      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x2ae>
 8003688:	47ff0000 	.word	0x47ff0000
 800368c:	5c001000 	.word	0x5c001000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d064      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x2ce>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	3301      	adds	r3, #1
 80036ce:	069b      	lsls	r3, r3, #26
 80036d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d4:	e00e      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x2ec>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	069b      	lsls	r3, r3, #26
 80036f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x30c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	e010      	b.n	8003736 <HAL_ADC_ConfigChannel+0x32e>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	ea42 0103 	orr.w	r1, r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_ADC_ConfigChannel+0x354>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	e011      	b.n	8003780 <HAL_ADC_ConfigChannel+0x378>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	e069      	b.n	8003858 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x398>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	069b      	lsls	r3, r3, #26
 800379a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379e:	e00e      	b.n	80037be <HAL_ADC_ConfigChannel+0x3b6>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	61fb      	str	r3, [r7, #28]
  return result;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	069b      	lsls	r3, r3, #26
 80037ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_ADC_ConfigChannel+0x3d6>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0e9b      	lsrs	r3, r3, #26
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	e010      	b.n	8003800 <HAL_ADC_ConfigChannel+0x3f8>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	617b      	str	r3, [r7, #20]
  return result;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	ea42 0103 	orr.w	r1, r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_ADC_ConfigChannel+0x424>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0e9b      	lsrs	r3, r3, #26
 8003816:	3301      	adds	r3, #1
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	3b1e      	subs	r3, #30
 8003824:	051b      	lsls	r3, r3, #20
 8003826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800382a:	e014      	b.n	8003856 <HAL_ADC_ConfigChannel+0x44e>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	60fb      	str	r3, [r7, #12]
  return result;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	3b1e      	subs	r3, #30
 8003850:	051b      	lsls	r3, r3, #20
 8003852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003856:	430b      	orrs	r3, r1
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	4619      	mov	r1, r3
 800385e:	f7ff fb5b 	bl	8002f18 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f280 80c4 	bge.w	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x478>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a64      	ldr	r2, [pc, #400]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x47c>
 8003880:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_ADC_ConfigChannel+0x608>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_ConfigChannel+0x47e>
 8003884:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_ADC_ConfigChannel+0x60c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fab8 	bl	8002dfc <LL_ADC_GetCommonPathInternalCh>
 800388c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_ADC_ConfigChannel+0x49a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5b      	ldr	r2, [pc, #364]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10e      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4b8>
 80038a2:	4859      	ldr	r0, [pc, #356]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 80038a4:	f7ff fbd6 	bl	8003054 <LL_ADC_IsEnabled>
 80038a8:	4604      	mov	r4, r0
 80038aa:	4858      	ldr	r0, [pc, #352]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 80038ac:	f7ff fbd2 	bl	8003054 <LL_ADC_IsEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4323      	orrs	r3, r4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x4ca>
 80038c0:	4855      	ldr	r0, [pc, #340]	; (8003a18 <HAL_ADC_ConfigChannel+0x610>)
 80038c2:	f7ff fbc7 	bl	8003054 <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d07b      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a50      	ldr	r2, [pc, #320]	; (8003a1c <HAL_ADC_ConfigChannel+0x614>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d12e      	bne.n	800393e <HAL_ADC_ConfigChannel+0x536>
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d129      	bne.n	800393e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <HAL_ADC_ConfigChannel+0x610>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d17f      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a43      	ldr	r2, [pc, #268]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x500>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a42      	ldr	r2, [pc, #264]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x504>
 8003908:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <HAL_ADC_ConfigChannel+0x608>)
 800390a:	e000      	b.n	800390e <HAL_ADC_ConfigChannel+0x506>
 800390c:	4a41      	ldr	r2, [pc, #260]	; (8003a14 <HAL_ADC_ConfigChannel+0x60c>)
 800390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7ff fa5d 	bl	8002dd6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800391c:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <HAL_ADC_ConfigChannel+0x618>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_ADC_ConfigChannel+0x61c>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800392e:	e002      	b.n	8003936 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3b01      	subs	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f9      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800393c:	e05a      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a39      	ldr	r2, [pc, #228]	; (8003a28 <HAL_ADC_ConfigChannel+0x620>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d11e      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x57e>
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a30      	ldr	r2, [pc, #192]	; (8003a18 <HAL_ADC_ConfigChannel+0x610>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d14b      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_ADC_ConfigChannel+0x568>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x56c>
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_ConfigChannel+0x608>)
 8003972:	e000      	b.n	8003976 <HAL_ADC_ConfigChannel+0x56e>
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <HAL_ADC_ConfigChannel+0x60c>)
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7ff fa29 	bl	8002dd6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003984:	e036      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_ADC_ConfigChannel+0x624>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d131      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d12c      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_ADC_ConfigChannel+0x610>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d127      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_ADC_ConfigChannel+0x600>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x5b0>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_ADC_ConfigChannel+0x604>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x5b4>
 80039b8:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <HAL_ADC_ConfigChannel+0x608>)
 80039ba:	e000      	b.n	80039be <HAL_ADC_ConfigChannel+0x5b6>
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_ADC_ConfigChannel+0x60c>)
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7ff fa05 	bl	8002dd6 <LL_ADC_SetCommonPathInternalCh>
 80039cc:	e012      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80039e0:	e008      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3764      	adds	r7, #100	; 0x64
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40022100 	.word	0x40022100
 8003a10:	40022300 	.word	0x40022300
 8003a14:	58026300 	.word	0x58026300
 8003a18:	58026000 	.word	0x58026000
 8003a1c:	cb840000 	.word	0xcb840000
 8003a20:	24000000 	.word	0x24000000
 8003a24:	053e2d63 	.word	0x053e2d63
 8003a28:	c7520000 	.word	0xc7520000
 8003a2c:	cfb80000 	.word	0xcfb80000

08003a30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a70      	ldr	r2, [pc, #448]	; (8003c00 <ADC_ConfigureBoostMode+0x1d0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <ADC_ConfigureBoostMode+0x1c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6f      	ldr	r2, [pc, #444]	; (8003c04 <ADC_ConfigureBoostMode+0x1d4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <ADC_ConfigureBoostMode+0x30>
 8003a4c:	4b6e      	ldr	r3, [pc, #440]	; (8003c08 <ADC_ConfigureBoostMode+0x1d8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e008      	b.n	8003a72 <ADC_ConfigureBoostMode+0x42>
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <ADC_ConfigureBoostMode+0x1dc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01a      	beq.n	8003aac <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a76:	f004 f9bd 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8003a7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d006      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x64>
 8003a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a8a:	d00b      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0x74>
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d000      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003a92:	e05d      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e055      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e051      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ab0:	f005 f92c 	bl	8008d0c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003abe:	d02a      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
 8003ac0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ac4:	d813      	bhi.n	8003aee <ADC_ConfigureBoostMode+0xbe>
 8003ac6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003aca:	d024      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
 8003acc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ad0:	d806      	bhi.n	8003ae0 <ADC_ConfigureBoostMode+0xb0>
 8003ad2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ad6:	d01e      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
 8003ad8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003adc:	d01b      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003ade:	e037      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae4:	d017      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
 8003ae6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003aea:	d014      	beq.n	8003b16 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003aec:	e030      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003aee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003af2:	d021      	beq.n	8003b38 <ADC_ConfigureBoostMode+0x108>
 8003af4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003af8:	d806      	bhi.n	8003b08 <ADC_ConfigureBoostMode+0xd8>
 8003afa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003afe:	d013      	beq.n	8003b28 <ADC_ConfigureBoostMode+0xf8>
 8003b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b04:	d014      	beq.n	8003b30 <ADC_ConfigureBoostMode+0x100>
        break;
 8003b06:	e023      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003b08:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b0c:	d018      	beq.n	8003b40 <ADC_ConfigureBoostMode+0x110>
 8003b0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b12:	d019      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x118>
        break;
 8003b14:	e01c      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	60fb      	str	r3, [r7, #12]
        break;
 8003b26:	e013      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]
        break;
 8003b2e:	e00f      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	60fb      	str	r3, [r7, #12]
        break;
 8003b36:	e00b      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	60fb      	str	r3, [r7, #12]
        break;
 8003b3e:	e007      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	09db      	lsrs	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
        break;
 8003b46:	e003      	b.n	8003b50 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	60fb      	str	r3, [r7, #12]
        break;
 8003b4e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b50:	f7ff f922 	bl	8002d98 <HAL_GetREVID>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d815      	bhi.n	8003b8a <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <ADC_ConfigureBoostMode+0x1e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d908      	bls.n	8003b78 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b74:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b76:	e03e      	b.n	8003bf6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	e035      	b.n	8003bf6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <ADC_ConfigureBoostMode+0x1e4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d808      	bhi.n	8003baa <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	e025      	b.n	8003bf6 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <ADC_ConfigureBoostMode+0x1e8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d80a      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	e016      	b.n	8003bf6 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <ADC_ConfigureBoostMode+0x1ec>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d80a      	bhi.n	8003be6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	e007      	b.n	8003bf6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40022100 	.word	0x40022100
 8003c08:	40022300 	.word	0x40022300
 8003c0c:	58026300 	.word	0x58026300
 8003c10:	01312d00 	.word	0x01312d00
 8003c14:	005f5e10 	.word	0x005f5e10
 8003c18:	00bebc20 	.word	0x00bebc20
 8003c1c:	017d7840 	.word	0x017d7840

08003c20 <LL_ADC_IsEnabled>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <LL_ADC_IsEnabled+0x18>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <LL_ADC_IsEnabled+0x1a>
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d101      	bne.n	8003c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b09f      	sub	sp, #124	; 0x7c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ba      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5c      	ldr	r2, [pc, #368]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d102      	bne.n	8003ca2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	e001      	b.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e09d      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ffbd 	bl	8003c46 <LL_ADC_REG_IsConversionOngoing>
 8003ccc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ffb7 	bl	8003c46 <LL_ADC_REG_IsConversionOngoing>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17f      	bne.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d17c      	bne.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a46      	ldr	r2, [pc, #280]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfa:	e000      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d039      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10e      	bne.n	8003d4c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003d2e:	4836      	ldr	r0, [pc, #216]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d30:	f7ff ff76 	bl	8003c20 <LL_ADC_IsEnabled>
 8003d34:	4604      	mov	r4, r0
 8003d36:	4835      	ldr	r0, [pc, #212]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d38:	f7ff ff72 	bl	8003c20 <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e008      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003d4c:	4832      	ldr	r0, [pc, #200]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d4e:	f7ff ff67 	bl	8003c20 <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d047      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7a:	e03a      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10e      	bne.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003d9c:	481a      	ldr	r0, [pc, #104]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d9e:	f7ff ff3f 	bl	8003c20 <LL_ADC_IsEnabled>
 8003da2:	4604      	mov	r4, r0
 8003da4:	4819      	ldr	r0, [pc, #100]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003da6:	f7ff ff3b 	bl	8003c20 <LL_ADC_IsEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4323      	orrs	r3, r4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e008      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003dba:	4817      	ldr	r0, [pc, #92]	; (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dbc:	f7ff ff30 	bl	8003c20 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dda:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ddc:	e009      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003df0:	e000      	b.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003df2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	377c      	adds	r7, #124	; 0x7c
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	40022100 	.word	0x40022100
 8003e10:	40022300 	.word	0x40022300
 8003e14:	58026300 	.word	0x58026300
 8003e18:	58026000 	.word	0x58026000
 8003e1c:	fffff0e0 	.word	0xfffff0e0

08003e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <__NVIC_SetPriorityGrouping+0x40>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <__NVIC_SetPriorityGrouping+0x44>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <__NVIC_SetPriorityGrouping+0x40>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	05fa0000 	.word	0x05fa0000

08003e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <__NVIC_GetPriorityGrouping+0x18>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0307 	and.w	r3, r3, #7
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	db0b      	blt.n	8003eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	4907      	ldr	r1, [pc, #28]	; (8003ebc <__NVIC_EnableIRQ+0x38>)
 8003e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db0a      	blt.n	8003eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	490c      	ldr	r1, [pc, #48]	; (8003f0c <__NVIC_SetPriority+0x4c>)
 8003eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee8:	e00a      	b.n	8003f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4908      	ldr	r1, [pc, #32]	; (8003f10 <__NVIC_SetPriority+0x50>)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	761a      	strb	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f1c3 0307 	rsb	r3, r3, #7
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	bf28      	it	cs
 8003f32:	2304      	movcs	r3, #4
 8003f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d902      	bls.n	8003f44 <NVIC_EncodePriority+0x30>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3b03      	subs	r3, #3
 8003f42:	e000      	b.n	8003f46 <NVIC_EncodePriority+0x32>
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	401a      	ands	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43d9      	mvns	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	4313      	orrs	r3, r2
         );
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff4c 	bl	8003e20 <__NVIC_SetPriorityGrouping>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9e:	f7ff ff63 	bl	8003e68 <__NVIC_GetPriorityGrouping>
 8003fa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7ff ffb3 	bl	8003f14 <NVIC_EncodePriority>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff82 	bl	8003ec0 <__NVIC_SetPriority>
}
 8003fbc:	bf00      	nop
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff56 	bl	8003e84 <__NVIC_EnableIRQ>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e054      	b.n	800409c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7f5b      	ldrb	r3, [r3, #29]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe f93a 	bl	800227c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	791b      	ldrb	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <HAL_CRC_Init+0xc4>)
 800401c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0218 	bic.w	r2, r2, #24
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	e00c      	b.n	800404a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	461a      	mov	r2, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f946 	bl	80042cc <HAL_CRCEx_Polynomial_Set>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e028      	b.n	800409c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	795b      	ldrb	r3, [r3, #5]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f04f 32ff 	mov.w	r2, #4294967295
 800405a:	611a      	str	r2, [r3, #16]
 800405c:	e004      	b.n	8004068 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6912      	ldr	r2, [r2, #16]
 8004066:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	04c11db7 	.word	0x04c11db7

080040a8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d022      	beq.n	800411c <HAL_CRC_Calculate+0x74>
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d002      	beq.n	80040e0 <HAL_CRC_Calculate+0x38>
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d017      	beq.n	800410e <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80040de:	e024      	b.n	800412a <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e00a      	b.n	80040fc <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3301      	adds	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3f0      	bcc.n	80040e6 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
      break;
 800410c:	e00d      	b.n	800412a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f811 	bl	800413a <CRC_Handle_8>
 8004118:	6138      	str	r0, [r7, #16]
      break;
 800411a:	e006      	b.n	800412a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f898 	bl	8004256 <CRC_Handle_16>
 8004126:	6138      	str	r0, [r7, #16]
      break;
 8004128:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004130:	693b      	ldr	r3, [r7, #16]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800413a:	b480      	push	{r7}
 800413c:	b089      	sub	sp, #36	; 0x24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e023      	b.n	8004194 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3301      	adds	r3, #1
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	440b      	add	r3, r1
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004166:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	440b      	add	r3, r1
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004176:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	3303      	adds	r3, #3
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	440b      	add	r3, r1
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800418a:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800418c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3301      	adds	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	429a      	cmp	r2, r3
 800419c:	d3d6      	bcc.n	800414c <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04d      	beq.n	8004244 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4413      	add	r3, r2
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d116      	bne.n	80041fa <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	b21a      	sxth	r2, r3
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	3301      	adds	r3, #1
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	440b      	add	r3, r1
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b21b      	sxth	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b21b      	sxth	r3, r3
 80041ec:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	8b7a      	ldrh	r2, [r7, #26]
 80041f8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d11f      	bne.n	8004244 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4413      	add	r3, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	b21a      	sxth	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3301      	adds	r3, #1
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	440b      	add	r3, r1
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b21b      	sxth	r3, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	b21b      	sxth	r3, r3
 8004224:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	8b7a      	ldrh	r2, [r7, #26]
 8004230:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4413      	add	r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e013      	b.n	8004290 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	041a      	lsls	r2, r3, #16
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	3302      	adds	r3, #2
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	440b      	add	r3, r1
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3e6      	bcc.n	8004268 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80042dc:	231f      	movs	r3, #31
 80042de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80042e0:	bf00      	nop
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1e5a      	subs	r2, r3, #1
 80042e6:	613a      	str	r2, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_CRCEx_Polynomial_Set+0x34>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b18      	cmp	r3, #24
 8004304:	d846      	bhi.n	8004394 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	0800439b 	.word	0x0800439b
 8004310:	08004395 	.word	0x08004395
 8004314:	08004395 	.word	0x08004395
 8004318:	08004395 	.word	0x08004395
 800431c:	08004395 	.word	0x08004395
 8004320:	08004395 	.word	0x08004395
 8004324:	08004395 	.word	0x08004395
 8004328:	08004395 	.word	0x08004395
 800432c:	08004389 	.word	0x08004389
 8004330:	08004395 	.word	0x08004395
 8004334:	08004395 	.word	0x08004395
 8004338:	08004395 	.word	0x08004395
 800433c:	08004395 	.word	0x08004395
 8004340:	08004395 	.word	0x08004395
 8004344:	08004395 	.word	0x08004395
 8004348:	08004395 	.word	0x08004395
 800434c:	0800437d 	.word	0x0800437d
 8004350:	08004395 	.word	0x08004395
 8004354:	08004395 	.word	0x08004395
 8004358:	08004395 	.word	0x08004395
 800435c:	08004395 	.word	0x08004395
 8004360:	08004395 	.word	0x08004395
 8004364:	08004395 	.word	0x08004395
 8004368:	08004395 	.word	0x08004395
 800436c:	08004371 	.word	0x08004371
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d913      	bls.n	800439e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800437a:	e010      	b.n	800439e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b07      	cmp	r3, #7
 8004380:	d90f      	bls.n	80043a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004386:	e00c      	b.n	80043a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d90b      	bls.n	80043a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004392:	e008      	b.n	80043a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]
      break;
 8004398:	e006      	b.n	80043a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80043a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 0118 	bic.w	r1, r3, #24
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7fe fcce 	bl	8002d80 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e316      	b.n	8004a1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a66      	ldr	r2, [pc, #408]	; (8004590 <HAL_DMA_Init+0x1b8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a65      	ldr	r2, [pc, #404]	; (8004594 <HAL_DMA_Init+0x1bc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a63      	ldr	r2, [pc, #396]	; (8004598 <HAL_DMA_Init+0x1c0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a62      	ldr	r2, [pc, #392]	; (800459c <HAL_DMA_Init+0x1c4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a60      	ldr	r2, [pc, #384]	; (80045a0 <HAL_DMA_Init+0x1c8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_DMA_Init+0x1cc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5d      	ldr	r2, [pc, #372]	; (80045a8 <HAL_DMA_Init+0x1d0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5c      	ldr	r2, [pc, #368]	; (80045ac <HAL_DMA_Init+0x1d4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_DMA_Init+0x1d8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a59      	ldr	r2, [pc, #356]	; (80045b4 <HAL_DMA_Init+0x1dc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_DMA_Init+0x1e0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	; (80045bc <HAL_DMA_Init+0x1e4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <HAL_DMA_Init+0x1e8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_DMA_Init+0x1ec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a51      	ldr	r2, [pc, #324]	; (80045c8 <HAL_DMA_Init+0x1f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_Init+0xb8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_DMA_Init+0x1f4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_DMA_Init+0xbc>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_DMA_Init+0xbe>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 813b 	beq.w	8004712 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a37      	ldr	r2, [pc, #220]	; (8004590 <HAL_DMA_Init+0x1b8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d04a      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a36      	ldr	r2, [pc, #216]	; (8004594 <HAL_DMA_Init+0x1bc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d045      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a34      	ldr	r2, [pc, #208]	; (8004598 <HAL_DMA_Init+0x1c0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d040      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a33      	ldr	r2, [pc, #204]	; (800459c <HAL_DMA_Init+0x1c4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03b      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a31      	ldr	r2, [pc, #196]	; (80045a0 <HAL_DMA_Init+0x1c8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d036      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_DMA_Init+0x1cc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d031      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2e      	ldr	r2, [pc, #184]	; (80045a8 <HAL_DMA_Init+0x1d0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02c      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_DMA_Init+0x1d4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d027      	beq.n	800454c <HAL_DMA_Init+0x174>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <HAL_DMA_Init+0x1d8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_DMA_Init+0x174>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_DMA_Init+0x1dc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_DMA_Init+0x174>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <HAL_DMA_Init+0x1e0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_DMA_Init+0x174>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a27      	ldr	r2, [pc, #156]	; (80045bc <HAL_DMA_Init+0x1e4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_DMA_Init+0x174>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a25      	ldr	r2, [pc, #148]	; (80045c0 <HAL_DMA_Init+0x1e8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_DMA_Init+0x174>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_DMA_Init+0x1ec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_DMA_Init+0x174>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_DMA_Init+0x1f0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_DMA_Init+0x174>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <HAL_DMA_Init+0x1f4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <HAL_DMA_Init+0x186>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e007      	b.n	800456e <HAL_DMA_Init+0x196>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800456e:	e02f      	b.n	80045d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004570:	f7fe fc06 	bl	8002d80 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b05      	cmp	r3, #5
 800457c:	d928      	bls.n	80045d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2203      	movs	r2, #3
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e246      	b.n	8004a1e <HAL_DMA_Init+0x646>
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1c8      	bne.n	8004570 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4b83      	ldr	r3, [pc, #524]	; (80047f8 <HAL_DMA_Init+0x420>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80045f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004602:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b04      	cmp	r3, #4
 8004622:	d107      	bne.n	8004634 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4313      	orrs	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004634:	4b71      	ldr	r3, [pc, #452]	; (80047fc <HAL_DMA_Init+0x424>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b71      	ldr	r3, [pc, #452]	; (8004800 <HAL_DMA_Init+0x428>)
 800463a:	4013      	ands	r3, r2
 800463c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004640:	d328      	bcc.n	8004694 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b28      	cmp	r3, #40	; 0x28
 8004648:	d903      	bls.n	8004652 <HAL_DMA_Init+0x27a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b2e      	cmp	r3, #46	; 0x2e
 8004650:	d917      	bls.n	8004682 <HAL_DMA_Init+0x2aa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b3e      	cmp	r3, #62	; 0x3e
 8004658:	d903      	bls.n	8004662 <HAL_DMA_Init+0x28a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b42      	cmp	r3, #66	; 0x42
 8004660:	d90f      	bls.n	8004682 <HAL_DMA_Init+0x2aa>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b46      	cmp	r3, #70	; 0x46
 8004668:	d903      	bls.n	8004672 <HAL_DMA_Init+0x29a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b48      	cmp	r3, #72	; 0x48
 8004670:	d907      	bls.n	8004682 <HAL_DMA_Init+0x2aa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b4e      	cmp	r3, #78	; 0x4e
 8004678:	d905      	bls.n	8004686 <HAL_DMA_Init+0x2ae>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b52      	cmp	r3, #82	; 0x52
 8004680:	d801      	bhi.n	8004686 <HAL_DMA_Init+0x2ae>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_DMA_Init+0x2b0>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004692:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d117      	bne.n	80046ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f002 f813 	bl	80066fc <DMA_CheckFifoParam>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e197      	b.n	8004a1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 ff4e 	bl	8006598 <DMA_CalcBaseAndBitshift>
 80046fc:	4603      	mov	r3, r0
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	223f      	movs	r2, #63	; 0x3f
 800470a:	409a      	lsls	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e0cd      	b.n	80048ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <HAL_DMA_Init+0x42c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a39      	ldr	r2, [pc, #228]	; (8004808 <HAL_DMA_Init+0x430>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a38      	ldr	r2, [pc, #224]	; (800480c <HAL_DMA_Init+0x434>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a36      	ldr	r2, [pc, #216]	; (8004810 <HAL_DMA_Init+0x438>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a35      	ldr	r2, [pc, #212]	; (8004814 <HAL_DMA_Init+0x43c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a33      	ldr	r2, [pc, #204]	; (8004818 <HAL_DMA_Init+0x440>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a32      	ldr	r2, [pc, #200]	; (800481c <HAL_DMA_Init+0x444>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Init+0x38a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a30      	ldr	r2, [pc, #192]	; (8004820 <HAL_DMA_Init+0x448>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_DMA_Init+0x38e>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_DMA_Init+0x390>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8097 	beq.w	800489c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a24      	ldr	r2, [pc, #144]	; (8004804 <HAL_DMA_Init+0x42c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d021      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	; (8004808 <HAL_DMA_Init+0x430>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01c      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a21      	ldr	r2, [pc, #132]	; (800480c <HAL_DMA_Init+0x434>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d017      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <HAL_DMA_Init+0x438>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d012      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_DMA_Init+0x43c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00d      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_DMA_Init+0x440>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d008      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_DMA_Init+0x444>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <HAL_DMA_Init+0x3e4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_DMA_Init+0x448>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_DMA_Init+0x44c>)
 80047da:	4013      	ands	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d020      	beq.n	8004828 <HAL_DMA_Init+0x450>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d102      	bne.n	80047f4 <HAL_DMA_Init+0x41c>
 80047ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f2:	e01a      	b.n	800482a <HAL_DMA_Init+0x452>
 80047f4:	2300      	movs	r3, #0
 80047f6:	e018      	b.n	800482a <HAL_DMA_Init+0x452>
 80047f8:	fe10803f 	.word	0xfe10803f
 80047fc:	5c001000 	.word	0x5c001000
 8004800:	ffff0000 	.word	0xffff0000
 8004804:	58025408 	.word	0x58025408
 8004808:	5802541c 	.word	0x5802541c
 800480c:	58025430 	.word	0x58025430
 8004810:	58025444 	.word	0x58025444
 8004814:	58025458 	.word	0x58025458
 8004818:	5802546c 	.word	0x5802546c
 800481c:	58025480 	.word	0x58025480
 8004820:	58025494 	.word	0x58025494
 8004824:	fffe000f 	.word	0xfffe000f
 8004828:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004858:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <HAL_DMA_Init+0x650>)
 8004870:	4413      	add	r3, r2
 8004872:	4a6e      	ldr	r2, [pc, #440]	; (8004a2c <HAL_DMA_Init+0x654>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 fe89 	bl	8006598 <DMA_CalcBaseAndBitshift>
 8004886:	4603      	mov	r3, r0
 8004888:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2201      	movs	r2, #1
 8004894:	409a      	lsls	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	e008      	b.n	80048ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2240      	movs	r2, #64	; 0x40
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0b7      	b.n	8004a1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5f      	ldr	r2, [pc, #380]	; (8004a30 <HAL_DMA_Init+0x658>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d072      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5d      	ldr	r2, [pc, #372]	; (8004a34 <HAL_DMA_Init+0x65c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d06d      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a5c      	ldr	r2, [pc, #368]	; (8004a38 <HAL_DMA_Init+0x660>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d068      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5a      	ldr	r2, [pc, #360]	; (8004a3c <HAL_DMA_Init+0x664>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d063      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <HAL_DMA_Init+0x668>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d05e      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_DMA_Init+0x66c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d059      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a56      	ldr	r2, [pc, #344]	; (8004a48 <HAL_DMA_Init+0x670>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d054      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a54      	ldr	r2, [pc, #336]	; (8004a4c <HAL_DMA_Init+0x674>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04f      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a53      	ldr	r2, [pc, #332]	; (8004a50 <HAL_DMA_Init+0x678>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d04a      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a51      	ldr	r2, [pc, #324]	; (8004a54 <HAL_DMA_Init+0x67c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d045      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a50      	ldr	r2, [pc, #320]	; (8004a58 <HAL_DMA_Init+0x680>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d040      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a4e      	ldr	r2, [pc, #312]	; (8004a5c <HAL_DMA_Init+0x684>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d03b      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a4d      	ldr	r2, [pc, #308]	; (8004a60 <HAL_DMA_Init+0x688>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d036      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_DMA_Init+0x68c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d031      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <HAL_DMA_Init+0x690>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d02c      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a48      	ldr	r2, [pc, #288]	; (8004a6c <HAL_DMA_Init+0x694>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d027      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a47      	ldr	r2, [pc, #284]	; (8004a70 <HAL_DMA_Init+0x698>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a45      	ldr	r2, [pc, #276]	; (8004a74 <HAL_DMA_Init+0x69c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a44      	ldr	r2, [pc, #272]	; (8004a78 <HAL_DMA_Init+0x6a0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a42      	ldr	r2, [pc, #264]	; (8004a7c <HAL_DMA_Init+0x6a4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a41      	ldr	r2, [pc, #260]	; (8004a80 <HAL_DMA_Init+0x6a8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3f      	ldr	r2, [pc, #252]	; (8004a84 <HAL_DMA_Init+0x6ac>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <HAL_DMA_Init+0x6b0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_DMA_Init+0x5c6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <HAL_DMA_Init+0x6b4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_DMA_Init+0x5ca>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_Init+0x5cc>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d032      	beq.n	8004a0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 ff23 	bl	80067f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d102      	bne.n	80049bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <HAL_DMA_Init+0x624>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d80c      	bhi.n	80049fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 ffa0 	bl	8006928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e008      	b.n	8004a0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	a7fdabf8 	.word	0xa7fdabf8
 8004a2c:	cccccccd 	.word	0xcccccccd
 8004a30:	40020010 	.word	0x40020010
 8004a34:	40020028 	.word	0x40020028
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	40020058 	.word	0x40020058
 8004a40:	40020070 	.word	0x40020070
 8004a44:	40020088 	.word	0x40020088
 8004a48:	400200a0 	.word	0x400200a0
 8004a4c:	400200b8 	.word	0x400200b8
 8004a50:	40020410 	.word	0x40020410
 8004a54:	40020428 	.word	0x40020428
 8004a58:	40020440 	.word	0x40020440
 8004a5c:	40020458 	.word	0x40020458
 8004a60:	40020470 	.word	0x40020470
 8004a64:	40020488 	.word	0x40020488
 8004a68:	400204a0 	.word	0x400204a0
 8004a6c:	400204b8 	.word	0x400204b8
 8004a70:	58025408 	.word	0x58025408
 8004a74:	5802541c 	.word	0x5802541c
 8004a78:	58025430 	.word	0x58025430
 8004a7c:	58025444 	.word	0x58025444
 8004a80:	58025458 	.word	0x58025458
 8004a84:	5802546c 	.word	0x5802546c
 8004a88:	58025480 	.word	0x58025480
 8004a8c:	58025494 	.word	0x58025494

08004a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e226      	b.n	8004efa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA_Start_IT+0x2a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e21f      	b.n	8004efa <HAL_DMA_Start_IT+0x46a>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	f040 820a 	bne.w	8004ee4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a68      	ldr	r2, [pc, #416]	; (8004c84 <HAL_DMA_Start_IT+0x1f4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d04a      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a66      	ldr	r2, [pc, #408]	; (8004c88 <HAL_DMA_Start_IT+0x1f8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d045      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <HAL_DMA_Start_IT+0x1fc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d040      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a63      	ldr	r2, [pc, #396]	; (8004c90 <HAL_DMA_Start_IT+0x200>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d03b      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a62      	ldr	r2, [pc, #392]	; (8004c94 <HAL_DMA_Start_IT+0x204>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d036      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a60      	ldr	r2, [pc, #384]	; (8004c98 <HAL_DMA_Start_IT+0x208>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d031      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <HAL_DMA_Start_IT+0x20c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d02c      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a5d      	ldr	r2, [pc, #372]	; (8004ca0 <HAL_DMA_Start_IT+0x210>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d027      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a5c      	ldr	r2, [pc, #368]	; (8004ca4 <HAL_DMA_Start_IT+0x214>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d022      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5a      	ldr	r2, [pc, #360]	; (8004ca8 <HAL_DMA_Start_IT+0x218>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01d      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a59      	ldr	r2, [pc, #356]	; (8004cac <HAL_DMA_Start_IT+0x21c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a57      	ldr	r2, [pc, #348]	; (8004cb0 <HAL_DMA_Start_IT+0x220>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <HAL_DMA_Start_IT+0x224>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a54      	ldr	r2, [pc, #336]	; (8004cb8 <HAL_DMA_Start_IT+0x228>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a53      	ldr	r2, [pc, #332]	; (8004cbc <HAL_DMA_Start_IT+0x22c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_DMA_Start_IT+0xee>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <HAL_DMA_Start_IT+0x230>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d108      	bne.n	8004b90 <HAL_DMA_Start_IT+0x100>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e007      	b.n	8004ba0 <HAL_DMA_Start_IT+0x110>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f001 fb4a 	bl	8006240 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <HAL_DMA_Start_IT+0x1f4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04a      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a33      	ldr	r2, [pc, #204]	; (8004c88 <HAL_DMA_Start_IT+0x1f8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d045      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a31      	ldr	r2, [pc, #196]	; (8004c8c <HAL_DMA_Start_IT+0x1fc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <HAL_DMA_Start_IT+0x200>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d03b      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2e      	ldr	r2, [pc, #184]	; (8004c94 <HAL_DMA_Start_IT+0x204>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d036      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <HAL_DMA_Start_IT+0x208>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d031      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <HAL_DMA_Start_IT+0x20c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d02c      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <HAL_DMA_Start_IT+0x210>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d027      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <HAL_DMA_Start_IT+0x214>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <HAL_DMA_Start_IT+0x218>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01d      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a25      	ldr	r2, [pc, #148]	; (8004cac <HAL_DMA_Start_IT+0x21c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <HAL_DMA_Start_IT+0x220>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <HAL_DMA_Start_IT+0x224>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <HAL_DMA_Start_IT+0x228>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_DMA_Start_IT+0x22c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_DMA_Start_IT+0x1bc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <HAL_DMA_Start_IT+0x230>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_DMA_Start_IT+0x1c0>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_DMA_Start_IT+0x1c2>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d036      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 021e 	bic.w	r2, r3, #30
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0216 	orr.w	r2, r2, #22
 8004c68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03e      	beq.n	8004cf0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e035      	b.n	8004cf0 <HAL_DMA_Start_IT+0x260>
 8004c84:	40020010 	.word	0x40020010
 8004c88:	40020028 	.word	0x40020028
 8004c8c:	40020040 	.word	0x40020040
 8004c90:	40020058 	.word	0x40020058
 8004c94:	40020070 	.word	0x40020070
 8004c98:	40020088 	.word	0x40020088
 8004c9c:	400200a0 	.word	0x400200a0
 8004ca0:	400200b8 	.word	0x400200b8
 8004ca4:	40020410 	.word	0x40020410
 8004ca8:	40020428 	.word	0x40020428
 8004cac:	40020440 	.word	0x40020440
 8004cb0:	40020458 	.word	0x40020458
 8004cb4:	40020470 	.word	0x40020470
 8004cb8:	40020488 	.word	0x40020488
 8004cbc:	400204a0 	.word	0x400204a0
 8004cc0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 020e 	bic.w	r2, r3, #14
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 020a 	orr.w	r2, r2, #10
 8004cd6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0204 	orr.w	r2, r2, #4
 8004cee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a83      	ldr	r2, [pc, #524]	; (8004f04 <HAL_DMA_Start_IT+0x474>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d072      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a82      	ldr	r2, [pc, #520]	; (8004f08 <HAL_DMA_Start_IT+0x478>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d06d      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <HAL_DMA_Start_IT+0x47c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d068      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7f      	ldr	r2, [pc, #508]	; (8004f10 <HAL_DMA_Start_IT+0x480>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d063      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a7d      	ldr	r2, [pc, #500]	; (8004f14 <HAL_DMA_Start_IT+0x484>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d05e      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7c      	ldr	r2, [pc, #496]	; (8004f18 <HAL_DMA_Start_IT+0x488>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d059      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a7a      	ldr	r2, [pc, #488]	; (8004f1c <HAL_DMA_Start_IT+0x48c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d054      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a79      	ldr	r2, [pc, #484]	; (8004f20 <HAL_DMA_Start_IT+0x490>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04f      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a77      	ldr	r2, [pc, #476]	; (8004f24 <HAL_DMA_Start_IT+0x494>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d04a      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_DMA_Start_IT+0x498>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d045      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a74      	ldr	r2, [pc, #464]	; (8004f2c <HAL_DMA_Start_IT+0x49c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d040      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a73      	ldr	r2, [pc, #460]	; (8004f30 <HAL_DMA_Start_IT+0x4a0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d03b      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a71      	ldr	r2, [pc, #452]	; (8004f34 <HAL_DMA_Start_IT+0x4a4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d036      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a70      	ldr	r2, [pc, #448]	; (8004f38 <HAL_DMA_Start_IT+0x4a8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d031      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a6e      	ldr	r2, [pc, #440]	; (8004f3c <HAL_DMA_Start_IT+0x4ac>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02c      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6d      	ldr	r2, [pc, #436]	; (8004f40 <HAL_DMA_Start_IT+0x4b0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d027      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6b      	ldr	r2, [pc, #428]	; (8004f44 <HAL_DMA_Start_IT+0x4b4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d022      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6a      	ldr	r2, [pc, #424]	; (8004f48 <HAL_DMA_Start_IT+0x4b8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d01d      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a68      	ldr	r2, [pc, #416]	; (8004f4c <HAL_DMA_Start_IT+0x4bc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a67      	ldr	r2, [pc, #412]	; (8004f50 <HAL_DMA_Start_IT+0x4c0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a65      	ldr	r2, [pc, #404]	; (8004f54 <HAL_DMA_Start_IT+0x4c4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a64      	ldr	r2, [pc, #400]	; (8004f58 <HAL_DMA_Start_IT+0x4c8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a62      	ldr	r2, [pc, #392]	; (8004f5c <HAL_DMA_Start_IT+0x4cc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_DMA_Start_IT+0x350>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a61      	ldr	r2, [pc, #388]	; (8004f60 <HAL_DMA_Start_IT+0x4d0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_DMA_Start_IT+0x354>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_DMA_Start_IT+0x356>
 8004de4:	2300      	movs	r3, #0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01a      	beq.n	8004e20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a37      	ldr	r2, [pc, #220]	; (8004f04 <HAL_DMA_Start_IT+0x474>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a36      	ldr	r2, [pc, #216]	; (8004f08 <HAL_DMA_Start_IT+0x478>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <HAL_DMA_Start_IT+0x47c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <HAL_DMA_Start_IT+0x480>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a31      	ldr	r2, [pc, #196]	; (8004f14 <HAL_DMA_Start_IT+0x484>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_DMA_Start_IT+0x488>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <HAL_DMA_Start_IT+0x48c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HAL_DMA_Start_IT+0x490>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <HAL_DMA_Start_IT+0x494>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <HAL_DMA_Start_IT+0x498>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <HAL_DMA_Start_IT+0x49c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <HAL_DMA_Start_IT+0x4a0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_DMA_Start_IT+0x4a4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <HAL_DMA_Start_IT+0x4a8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_DMA_Start_IT+0x4ac>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_DMA_Start_IT+0x430>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_DMA_Start_IT+0x4b0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d108      	bne.n	8004ed2 <HAL_DMA_Start_IT+0x442>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e012      	b.n	8004ef8 <HAL_DMA_Start_IT+0x468>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e009      	b.n	8004ef8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40020010 	.word	0x40020010
 8004f08:	40020028 	.word	0x40020028
 8004f0c:	40020040 	.word	0x40020040
 8004f10:	40020058 	.word	0x40020058
 8004f14:	40020070 	.word	0x40020070
 8004f18:	40020088 	.word	0x40020088
 8004f1c:	400200a0 	.word	0x400200a0
 8004f20:	400200b8 	.word	0x400200b8
 8004f24:	40020410 	.word	0x40020410
 8004f28:	40020428 	.word	0x40020428
 8004f2c:	40020440 	.word	0x40020440
 8004f30:	40020458 	.word	0x40020458
 8004f34:	40020470 	.word	0x40020470
 8004f38:	40020488 	.word	0x40020488
 8004f3c:	400204a0 	.word	0x400204a0
 8004f40:	400204b8 	.word	0x400204b8
 8004f44:	58025408 	.word	0x58025408
 8004f48:	5802541c 	.word	0x5802541c
 8004f4c:	58025430 	.word	0x58025430
 8004f50:	58025444 	.word	0x58025444
 8004f54:	58025458 	.word	0x58025458
 8004f58:	5802546c 	.word	0x5802546c
 8004f5c:	58025480 	.word	0x58025480
 8004f60:	58025494 	.word	0x58025494

08004f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e205      	b.n	8005382 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d004      	beq.n	8004f8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e1fa      	b.n	8005382 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a8c      	ldr	r2, [pc, #560]	; (80051c4 <HAL_DMA_Abort_IT+0x260>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04a      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a8b      	ldr	r2, [pc, #556]	; (80051c8 <HAL_DMA_Abort_IT+0x264>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d045      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a89      	ldr	r2, [pc, #548]	; (80051cc <HAL_DMA_Abort_IT+0x268>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d040      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a88      	ldr	r2, [pc, #544]	; (80051d0 <HAL_DMA_Abort_IT+0x26c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d03b      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a86      	ldr	r2, [pc, #536]	; (80051d4 <HAL_DMA_Abort_IT+0x270>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d036      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a85      	ldr	r2, [pc, #532]	; (80051d8 <HAL_DMA_Abort_IT+0x274>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a83      	ldr	r2, [pc, #524]	; (80051dc <HAL_DMA_Abort_IT+0x278>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02c      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a82      	ldr	r2, [pc, #520]	; (80051e0 <HAL_DMA_Abort_IT+0x27c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d027      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a80      	ldr	r2, [pc, #512]	; (80051e4 <HAL_DMA_Abort_IT+0x280>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7f      	ldr	r2, [pc, #508]	; (80051e8 <HAL_DMA_Abort_IT+0x284>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7d      	ldr	r2, [pc, #500]	; (80051ec <HAL_DMA_Abort_IT+0x288>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7c      	ldr	r2, [pc, #496]	; (80051f0 <HAL_DMA_Abort_IT+0x28c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7a      	ldr	r2, [pc, #488]	; (80051f4 <HAL_DMA_Abort_IT+0x290>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a79      	ldr	r2, [pc, #484]	; (80051f8 <HAL_DMA_Abort_IT+0x294>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a77      	ldr	r2, [pc, #476]	; (80051fc <HAL_DMA_Abort_IT+0x298>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a76      	ldr	r2, [pc, #472]	; (8005200 <HAL_DMA_Abort_IT+0x29c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_DMA_Abort_IT+0xcc>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_DMA_Abort_IT+0xce>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d065      	beq.n	8005102 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a60      	ldr	r2, [pc, #384]	; (80051c4 <HAL_DMA_Abort_IT+0x260>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04a      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5e      	ldr	r2, [pc, #376]	; (80051c8 <HAL_DMA_Abort_IT+0x264>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d045      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a5d      	ldr	r2, [pc, #372]	; (80051cc <HAL_DMA_Abort_IT+0x268>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d040      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a5b      	ldr	r2, [pc, #364]	; (80051d0 <HAL_DMA_Abort_IT+0x26c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d03b      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a5a      	ldr	r2, [pc, #360]	; (80051d4 <HAL_DMA_Abort_IT+0x270>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d036      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a58      	ldr	r2, [pc, #352]	; (80051d8 <HAL_DMA_Abort_IT+0x274>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a57      	ldr	r2, [pc, #348]	; (80051dc <HAL_DMA_Abort_IT+0x278>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d02c      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a55      	ldr	r2, [pc, #340]	; (80051e0 <HAL_DMA_Abort_IT+0x27c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d027      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a54      	ldr	r2, [pc, #336]	; (80051e4 <HAL_DMA_Abort_IT+0x280>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_DMA_Abort_IT+0x284>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a51      	ldr	r2, [pc, #324]	; (80051ec <HAL_DMA_Abort_IT+0x288>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a4f      	ldr	r2, [pc, #316]	; (80051f0 <HAL_DMA_Abort_IT+0x28c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <HAL_DMA_Abort_IT+0x290>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a4c      	ldr	r2, [pc, #304]	; (80051f8 <HAL_DMA_Abort_IT+0x294>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a4b      	ldr	r2, [pc, #300]	; (80051fc <HAL_DMA_Abort_IT+0x298>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_DMA_Abort_IT+0x17a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a49      	ldr	r2, [pc, #292]	; (8005200 <HAL_DMA_Abort_IT+0x29c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <HAL_DMA_Abort_IT+0x18c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e147      	b.n	8005380 <HAL_DMA_Abort_IT+0x41c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e13e      	b.n	8005380 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 020e 	bic.w	r2, r2, #14
 8005110:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <HAL_DMA_Abort_IT+0x260>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d04a      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <HAL_DMA_Abort_IT+0x264>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d045      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_DMA_Abort_IT+0x268>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d040      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a26      	ldr	r2, [pc, #152]	; (80051d0 <HAL_DMA_Abort_IT+0x26c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d03b      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <HAL_DMA_Abort_IT+0x270>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d036      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <HAL_DMA_Abort_IT+0x274>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d031      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a22      	ldr	r2, [pc, #136]	; (80051dc <HAL_DMA_Abort_IT+0x278>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d02c      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a20      	ldr	r2, [pc, #128]	; (80051e0 <HAL_DMA_Abort_IT+0x27c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d027      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_DMA_Abort_IT+0x280>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d022      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <HAL_DMA_Abort_IT+0x284>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_DMA_Abort_IT+0x288>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <HAL_DMA_Abort_IT+0x28c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_DMA_Abort_IT+0x290>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_DMA_Abort_IT+0x294>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_DMA_Abort_IT+0x298>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x24e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_DMA_Abort_IT+0x29c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d128      	bne.n	8005204 <HAL_DMA_Abort_IT+0x2a0>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e027      	b.n	8005214 <HAL_DMA_Abort_IT+0x2b0>
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5c      	ldr	r2, [pc, #368]	; (800538c <HAL_DMA_Abort_IT+0x428>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d072      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5b      	ldr	r2, [pc, #364]	; (8005390 <HAL_DMA_Abort_IT+0x42c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d06d      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a59      	ldr	r2, [pc, #356]	; (8005394 <HAL_DMA_Abort_IT+0x430>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d068      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a58      	ldr	r2, [pc, #352]	; (8005398 <HAL_DMA_Abort_IT+0x434>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d063      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a56      	ldr	r2, [pc, #344]	; (800539c <HAL_DMA_Abort_IT+0x438>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d05e      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a55      	ldr	r2, [pc, #340]	; (80053a0 <HAL_DMA_Abort_IT+0x43c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d059      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a53      	ldr	r2, [pc, #332]	; (80053a4 <HAL_DMA_Abort_IT+0x440>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d054      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a52      	ldr	r2, [pc, #328]	; (80053a8 <HAL_DMA_Abort_IT+0x444>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04f      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a50      	ldr	r2, [pc, #320]	; (80053ac <HAL_DMA_Abort_IT+0x448>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d04a      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a4f      	ldr	r2, [pc, #316]	; (80053b0 <HAL_DMA_Abort_IT+0x44c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d045      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4d      	ldr	r2, [pc, #308]	; (80053b4 <HAL_DMA_Abort_IT+0x450>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d040      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a4c      	ldr	r2, [pc, #304]	; (80053b8 <HAL_DMA_Abort_IT+0x454>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d03b      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a4a      	ldr	r2, [pc, #296]	; (80053bc <HAL_DMA_Abort_IT+0x458>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d036      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a49      	ldr	r2, [pc, #292]	; (80053c0 <HAL_DMA_Abort_IT+0x45c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d031      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a47      	ldr	r2, [pc, #284]	; (80053c4 <HAL_DMA_Abort_IT+0x460>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02c      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a46      	ldr	r2, [pc, #280]	; (80053c8 <HAL_DMA_Abort_IT+0x464>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d027      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a44      	ldr	r2, [pc, #272]	; (80053cc <HAL_DMA_Abort_IT+0x468>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d022      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a43      	ldr	r2, [pc, #268]	; (80053d0 <HAL_DMA_Abort_IT+0x46c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d01d      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a41      	ldr	r2, [pc, #260]	; (80053d4 <HAL_DMA_Abort_IT+0x470>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d018      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a40      	ldr	r2, [pc, #256]	; (80053d8 <HAL_DMA_Abort_IT+0x474>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a3e      	ldr	r2, [pc, #248]	; (80053dc <HAL_DMA_Abort_IT+0x478>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00e      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <HAL_DMA_Abort_IT+0x47c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d009      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3b      	ldr	r2, [pc, #236]	; (80053e4 <HAL_DMA_Abort_IT+0x480>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_DMA_Abort_IT+0x3a0>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <HAL_DMA_Abort_IT+0x484>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Abort_IT+0x3a4>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_DMA_Abort_IT+0x3a6>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d028      	beq.n	8005360 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800533c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800535e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	58025408 	.word	0x58025408
 80053d0:	5802541c 	.word	0x5802541c
 80053d4:	58025430 	.word	0x58025430
 80053d8:	58025444 	.word	0x58025444
 80053dc:	58025458 	.word	0x58025458
 80053e0:	5802546c 	.word	0x5802546c
 80053e4:	58025480 	.word	0x58025480
 80053e8:	58025494 	.word	0x58025494

080053ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053f8:	4b67      	ldr	r3, [pc, #412]	; (8005598 <HAL_DMA_IRQHandler+0x1ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a67      	ldr	r2, [pc, #412]	; (800559c <HAL_DMA_IRQHandler+0x1b0>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0a9b      	lsrs	r3, r3, #10
 8005404:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005410:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5f      	ldr	r2, [pc, #380]	; (80055a0 <HAL_DMA_IRQHandler+0x1b4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d04a      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5d      	ldr	r2, [pc, #372]	; (80055a4 <HAL_DMA_IRQHandler+0x1b8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d045      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a5c      	ldr	r2, [pc, #368]	; (80055a8 <HAL_DMA_IRQHandler+0x1bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d040      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5a      	ldr	r2, [pc, #360]	; (80055ac <HAL_DMA_IRQHandler+0x1c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d03b      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a59      	ldr	r2, [pc, #356]	; (80055b0 <HAL_DMA_IRQHandler+0x1c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d036      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d031      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d02c      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a54      	ldr	r2, [pc, #336]	; (80055bc <HAL_DMA_IRQHandler+0x1d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d027      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a53      	ldr	r2, [pc, #332]	; (80055c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <HAL_DMA_IRQHandler+0x1d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a50      	ldr	r2, [pc, #320]	; (80055c8 <HAL_DMA_IRQHandler+0x1dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4e      	ldr	r2, [pc, #312]	; (80055cc <HAL_DMA_IRQHandler+0x1e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4d      	ldr	r2, [pc, #308]	; (80055d0 <HAL_DMA_IRQHandler+0x1e4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a4b      	ldr	r2, [pc, #300]	; (80055d4 <HAL_DMA_IRQHandler+0x1e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a4a      	ldr	r2, [pc, #296]	; (80055d8 <HAL_DMA_IRQHandler+0x1ec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_DMA_IRQHandler+0xd2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a48      	ldr	r2, [pc, #288]	; (80055dc <HAL_DMA_IRQHandler+0x1f0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <HAL_DMA_IRQHandler+0xd6>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_DMA_IRQHandler+0xd8>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 842b 	beq.w	8005d20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2208      	movs	r2, #8
 80054d4:	409a      	lsls	r2, r3
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80a2 	beq.w	8005624 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2e      	ldr	r2, [pc, #184]	; (80055a0 <HAL_DMA_IRQHandler+0x1b4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04a      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2d      	ldr	r2, [pc, #180]	; (80055a4 <HAL_DMA_IRQHandler+0x1b8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d045      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <HAL_DMA_IRQHandler+0x1bc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d040      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <HAL_DMA_IRQHandler+0x1c0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d03b      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <HAL_DMA_IRQHandler+0x1c4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d036      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d031      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02c      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a24      	ldr	r2, [pc, #144]	; (80055bc <HAL_DMA_IRQHandler+0x1d0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d027      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <HAL_DMA_IRQHandler+0x1d8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d01d      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_DMA_IRQHandler+0x1dc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <HAL_DMA_IRQHandler+0x1e0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_DMA_IRQHandler+0x1e4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <HAL_DMA_IRQHandler+0x1e8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_DMA_IRQHandler+0x1ec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_DMA_IRQHandler+0x194>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_DMA_IRQHandler+0x1f0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d12f      	bne.n	80055e0 <HAL_DMA_IRQHandler+0x1f4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e02e      	b.n	80055f4 <HAL_DMA_IRQHandler+0x208>
 8005596:	bf00      	nop
 8005598:	24000000 	.word	0x24000000
 800559c:	1b4e81b5 	.word	0x1b4e81b5
 80055a0:	40020010 	.word	0x40020010
 80055a4:	40020028 	.word	0x40020028
 80055a8:	40020040 	.word	0x40020040
 80055ac:	40020058 	.word	0x40020058
 80055b0:	40020070 	.word	0x40020070
 80055b4:	40020088 	.word	0x40020088
 80055b8:	400200a0 	.word	0x400200a0
 80055bc:	400200b8 	.word	0x400200b8
 80055c0:	40020410 	.word	0x40020410
 80055c4:	40020428 	.word	0x40020428
 80055c8:	40020440 	.word	0x40020440
 80055cc:	40020458 	.word	0x40020458
 80055d0:	40020470 	.word	0x40020470
 80055d4:	40020488 	.word	0x40020488
 80055d8:	400204a0 	.word	0x400204a0
 80055dc:	400204b8 	.word	0x400204b8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2208      	movs	r2, #8
 8005612:	409a      	lsls	r2, r3
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d06e      	beq.n	8005718 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a69      	ldr	r2, [pc, #420]	; (80057e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a67      	ldr	r2, [pc, #412]	; (80057e8 <HAL_DMA_IRQHandler+0x3fc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a66      	ldr	r2, [pc, #408]	; (80057ec <HAL_DMA_IRQHandler+0x400>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a64      	ldr	r2, [pc, #400]	; (80057f0 <HAL_DMA_IRQHandler+0x404>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a63      	ldr	r2, [pc, #396]	; (80057f4 <HAL_DMA_IRQHandler+0x408>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a61      	ldr	r2, [pc, #388]	; (80057f8 <HAL_DMA_IRQHandler+0x40c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a60      	ldr	r2, [pc, #384]	; (80057fc <HAL_DMA_IRQHandler+0x410>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_DMA_IRQHandler+0x414>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a5d      	ldr	r2, [pc, #372]	; (8005804 <HAL_DMA_IRQHandler+0x418>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_DMA_IRQHandler+0x41c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a5a      	ldr	r2, [pc, #360]	; (800580c <HAL_DMA_IRQHandler+0x420>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a58      	ldr	r2, [pc, #352]	; (8005810 <HAL_DMA_IRQHandler+0x424>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a57      	ldr	r2, [pc, #348]	; (8005814 <HAL_DMA_IRQHandler+0x428>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a55      	ldr	r2, [pc, #340]	; (8005818 <HAL_DMA_IRQHandler+0x42c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a54      	ldr	r2, [pc, #336]	; (800581c <HAL_DMA_IRQHandler+0x430>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_IRQHandler+0x2ee>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a52      	ldr	r2, [pc, #328]	; (8005820 <HAL_DMA_IRQHandler+0x434>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10a      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x304>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e003      	b.n	80056f8 <HAL_DMA_IRQHandler+0x30c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	f043 0202 	orr.w	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2204      	movs	r2, #4
 8005722:	409a      	lsls	r2, r3
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 808f 	beq.w	800584c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04a      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_DMA_IRQHandler+0x3fc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d045      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a29      	ldr	r2, [pc, #164]	; (80057ec <HAL_DMA_IRQHandler+0x400>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_DMA_IRQHandler+0x404>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03b      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_DMA_IRQHandler+0x408>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d036      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <HAL_DMA_IRQHandler+0x40c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d031      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a23      	ldr	r2, [pc, #140]	; (80057fc <HAL_DMA_IRQHandler+0x410>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d02c      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_DMA_IRQHandler+0x414>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a20      	ldr	r2, [pc, #128]	; (8005804 <HAL_DMA_IRQHandler+0x418>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_DMA_IRQHandler+0x41c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_DMA_IRQHandler+0x420>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_DMA_IRQHandler+0x424>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_DMA_IRQHandler+0x428>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_DMA_IRQHandler+0x42c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_DMA_IRQHandler+0x430>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_DMA_IRQHandler+0x3e2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <HAL_DMA_IRQHandler+0x434>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d12a      	bne.n	8005824 <HAL_DMA_IRQHandler+0x438>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e023      	b.n	800582c <HAL_DMA_IRQHandler+0x440>
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00d      	beq.n	800584c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2204      	movs	r2, #4
 800583a:	409a      	lsls	r2, r3
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	2210      	movs	r2, #16
 8005856:	409a      	lsls	r2, r3
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80a6 	beq.w	80059ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a85      	ldr	r2, [pc, #532]	; (8005a7c <HAL_DMA_IRQHandler+0x690>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04a      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a83      	ldr	r2, [pc, #524]	; (8005a80 <HAL_DMA_IRQHandler+0x694>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d045      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a82      	ldr	r2, [pc, #520]	; (8005a84 <HAL_DMA_IRQHandler+0x698>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d040      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a80      	ldr	r2, [pc, #512]	; (8005a88 <HAL_DMA_IRQHandler+0x69c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d03b      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7f      	ldr	r2, [pc, #508]	; (8005a8c <HAL_DMA_IRQHandler+0x6a0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d036      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a7d      	ldr	r2, [pc, #500]	; (8005a90 <HAL_DMA_IRQHandler+0x6a4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d031      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a7c      	ldr	r2, [pc, #496]	; (8005a94 <HAL_DMA_IRQHandler+0x6a8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d02c      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7a      	ldr	r2, [pc, #488]	; (8005a98 <HAL_DMA_IRQHandler+0x6ac>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d027      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a79      	ldr	r2, [pc, #484]	; (8005a9c <HAL_DMA_IRQHandler+0x6b0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d022      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a77      	ldr	r2, [pc, #476]	; (8005aa0 <HAL_DMA_IRQHandler+0x6b4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01d      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a76      	ldr	r2, [pc, #472]	; (8005aa4 <HAL_DMA_IRQHandler+0x6b8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d018      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a74      	ldr	r2, [pc, #464]	; (8005aa8 <HAL_DMA_IRQHandler+0x6bc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a73      	ldr	r2, [pc, #460]	; (8005aac <HAL_DMA_IRQHandler+0x6c0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a71      	ldr	r2, [pc, #452]	; (8005ab0 <HAL_DMA_IRQHandler+0x6c4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a70      	ldr	r2, [pc, #448]	; (8005ab4 <HAL_DMA_IRQHandler+0x6c8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_DMA_IRQHandler+0x516>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6e      	ldr	r2, [pc, #440]	; (8005ab8 <HAL_DMA_IRQHandler+0x6cc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10a      	bne.n	8005918 <HAL_DMA_IRQHandler+0x52c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e009      	b.n	800592c <HAL_DMA_IRQHandler+0x540>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d03e      	beq.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	2210      	movs	r2, #16
 800593a:	409a      	lsls	r2, r3
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d018      	beq.n	8005980 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d024      	beq.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
 800596c:	e01f      	b.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01b      	beq.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
 800597e:	e016      	b.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0208 	bic.w	r2, r2, #8
 800599c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2220      	movs	r2, #32
 80059b8:	409a      	lsls	r2, r3
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8110 	beq.w	8005be4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <HAL_DMA_IRQHandler+0x690>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d04a      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <HAL_DMA_IRQHandler+0x694>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d045      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <HAL_DMA_IRQHandler+0x698>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d040      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <HAL_DMA_IRQHandler+0x69c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d03b      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <HAL_DMA_IRQHandler+0x6a0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d036      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <HAL_DMA_IRQHandler+0x6a4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d031      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <HAL_DMA_IRQHandler+0x6a8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02c      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_DMA_IRQHandler+0x6ac>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d027      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_DMA_IRQHandler+0x6b0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_DMA_IRQHandler+0x6b4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d01d      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <HAL_DMA_IRQHandler+0x6b8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_DMA_IRQHandler+0x6bc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_DMA_IRQHandler+0x6c0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_DMA_IRQHandler+0x6c4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_DMA_IRQHandler+0x6c8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x678>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <HAL_DMA_IRQHandler+0x6cc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d12b      	bne.n	8005abc <HAL_DMA_IRQHandler+0x6d0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e02a      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x6e4>
 8005a7a:	bf00      	nop
 8005a7c:	40020010 	.word	0x40020010
 8005a80:	40020028 	.word	0x40020028
 8005a84:	40020040 	.word	0x40020040
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	40020070 	.word	0x40020070
 8005a90:	40020088 	.word	0x40020088
 8005a94:	400200a0 	.word	0x400200a0
 8005a98:	400200b8 	.word	0x400200b8
 8005a9c:	40020410 	.word	0x40020410
 8005aa0:	40020428 	.word	0x40020428
 8005aa4:	40020440 	.word	0x40020440
 8005aa8:	40020458 	.word	0x40020458
 8005aac:	40020470 	.word	0x40020470
 8005ab0:	40020488 	.word	0x40020488
 8005ab4:	400204a0 	.word	0x400204a0
 8005ab8:	400204b8 	.word	0x400204b8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8087 	beq.w	8005be4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	2220      	movs	r2, #32
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d139      	bne.n	8005b66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0216 	bic.w	r2, r2, #22
 8005b00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d103      	bne.n	8005b22 <HAL_DMA_IRQHandler+0x736>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0208 	bic.w	r2, r2, #8
 8005b30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	223f      	movs	r2, #63	; 0x3f
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 834a 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
          }
          return;
 8005b64:	e344      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d108      	bne.n	8005b94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02c      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
 8005b92:	e027      	b.n	8005be4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d023      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
 8005ba4:	e01e      	b.n	8005be4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
 8005bc2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8306 	beq.w	80061fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8088 	beq.w	8005d0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a7a      	ldr	r2, [pc, #488]	; (8005df4 <HAL_DMA_IRQHandler+0xa08>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a79      	ldr	r2, [pc, #484]	; (8005df8 <HAL_DMA_IRQHandler+0xa0c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a77      	ldr	r2, [pc, #476]	; (8005dfc <HAL_DMA_IRQHandler+0xa10>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a76      	ldr	r2, [pc, #472]	; (8005e00 <HAL_DMA_IRQHandler+0xa14>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a74      	ldr	r2, [pc, #464]	; (8005e04 <HAL_DMA_IRQHandler+0xa18>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a73      	ldr	r2, [pc, #460]	; (8005e08 <HAL_DMA_IRQHandler+0xa1c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a71      	ldr	r2, [pc, #452]	; (8005e0c <HAL_DMA_IRQHandler+0xa20>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a70      	ldr	r2, [pc, #448]	; (8005e10 <HAL_DMA_IRQHandler+0xa24>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6e      	ldr	r2, [pc, #440]	; (8005e14 <HAL_DMA_IRQHandler+0xa28>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6d      	ldr	r2, [pc, #436]	; (8005e18 <HAL_DMA_IRQHandler+0xa2c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a6b      	ldr	r2, [pc, #428]	; (8005e1c <HAL_DMA_IRQHandler+0xa30>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a6a      	ldr	r2, [pc, #424]	; (8005e20 <HAL_DMA_IRQHandler+0xa34>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a68      	ldr	r2, [pc, #416]	; (8005e24 <HAL_DMA_IRQHandler+0xa38>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a67      	ldr	r2, [pc, #412]	; (8005e28 <HAL_DMA_IRQHandler+0xa3c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a65      	ldr	r2, [pc, #404]	; (8005e2c <HAL_DMA_IRQHandler+0xa40>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_DMA_IRQHandler+0x8b8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a64      	ldr	r2, [pc, #400]	; (8005e30 <HAL_DMA_IRQHandler+0xa44>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <HAL_DMA_IRQHandler+0x8ca>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e007      	b.n	8005cc6 <HAL_DMA_IRQHandler+0x8da>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d307      	bcc.n	8005ce2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f2      	bne.n	8005cc6 <HAL_DMA_IRQHandler+0x8da>
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ce2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d02:	e003      	b.n	8005d0c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8272 	beq.w	80061fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	e26c      	b.n	80061fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a43      	ldr	r2, [pc, #268]	; (8005e34 <HAL_DMA_IRQHandler+0xa48>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a42      	ldr	r2, [pc, #264]	; (8005e38 <HAL_DMA_IRQHandler+0xa4c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <HAL_DMA_IRQHandler+0xa50>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <HAL_DMA_IRQHandler+0xa54>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <HAL_DMA_IRQHandler+0xa58>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <HAL_DMA_IRQHandler+0xa5c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a3a      	ldr	r2, [pc, #232]	; (8005e4c <HAL_DMA_IRQHandler+0xa60>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x984>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a39      	ldr	r2, [pc, #228]	; (8005e50 <HAL_DMA_IRQHandler+0xa64>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x988>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_IRQHandler+0x98a>
 8005d74:	2300      	movs	r3, #0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 823f 	beq.w	80061fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80cd 	beq.w	8005f34 <HAL_DMA_IRQHandler+0xb48>
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80c7 	beq.w	8005f34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2204      	movs	r2, #4
 8005db0:	409a      	lsls	r2, r3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d049      	beq.n	8005e54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8210 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ddc:	e20a      	b.n	80061f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8206 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df0:	e200      	b.n	80061f4 <HAL_DMA_IRQHandler+0xe08>
 8005df2:	bf00      	nop
 8005df4:	40020010 	.word	0x40020010
 8005df8:	40020028 	.word	0x40020028
 8005dfc:	40020040 	.word	0x40020040
 8005e00:	40020058 	.word	0x40020058
 8005e04:	40020070 	.word	0x40020070
 8005e08:	40020088 	.word	0x40020088
 8005e0c:	400200a0 	.word	0x400200a0
 8005e10:	400200b8 	.word	0x400200b8
 8005e14:	40020410 	.word	0x40020410
 8005e18:	40020428 	.word	0x40020428
 8005e1c:	40020440 	.word	0x40020440
 8005e20:	40020458 	.word	0x40020458
 8005e24:	40020470 	.word	0x40020470
 8005e28:	40020488 	.word	0x40020488
 8005e2c:	400204a0 	.word	0x400204a0
 8005e30:	400204b8 	.word	0x400204b8
 8005e34:	58025408 	.word	0x58025408
 8005e38:	5802541c 	.word	0x5802541c
 8005e3c:	58025430 	.word	0x58025430
 8005e40:	58025444 	.word	0x58025444
 8005e44:	58025458 	.word	0x58025458
 8005e48:	5802546c 	.word	0x5802546c
 8005e4c:	58025480 	.word	0x58025480
 8005e50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d160      	bne.n	8005f20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a8c      	ldr	r2, [pc, #560]	; (8006094 <HAL_DMA_IRQHandler+0xca8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d04a      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a8a      	ldr	r2, [pc, #552]	; (8006098 <HAL_DMA_IRQHandler+0xcac>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d045      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a89      	ldr	r2, [pc, #548]	; (800609c <HAL_DMA_IRQHandler+0xcb0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d040      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a87      	ldr	r2, [pc, #540]	; (80060a0 <HAL_DMA_IRQHandler+0xcb4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d03b      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a86      	ldr	r2, [pc, #536]	; (80060a4 <HAL_DMA_IRQHandler+0xcb8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d036      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a84      	ldr	r2, [pc, #528]	; (80060a8 <HAL_DMA_IRQHandler+0xcbc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d031      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a83      	ldr	r2, [pc, #524]	; (80060ac <HAL_DMA_IRQHandler+0xcc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d02c      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a81      	ldr	r2, [pc, #516]	; (80060b0 <HAL_DMA_IRQHandler+0xcc4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d027      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a80      	ldr	r2, [pc, #512]	; (80060b4 <HAL_DMA_IRQHandler+0xcc8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a7e      	ldr	r2, [pc, #504]	; (80060b8 <HAL_DMA_IRQHandler+0xccc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01d      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a7d      	ldr	r2, [pc, #500]	; (80060bc <HAL_DMA_IRQHandler+0xcd0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7b      	ldr	r2, [pc, #492]	; (80060c0 <HAL_DMA_IRQHandler+0xcd4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a7a      	ldr	r2, [pc, #488]	; (80060c4 <HAL_DMA_IRQHandler+0xcd8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a78      	ldr	r2, [pc, #480]	; (80060c8 <HAL_DMA_IRQHandler+0xcdc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a77      	ldr	r2, [pc, #476]	; (80060cc <HAL_DMA_IRQHandler+0xce0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_DMA_IRQHandler+0xb12>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a75      	ldr	r2, [pc, #468]	; (80060d0 <HAL_DMA_IRQHandler+0xce4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d108      	bne.n	8005f10 <HAL_DMA_IRQHandler+0xb24>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0208 	bic.w	r2, r2, #8
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e007      	b.n	8005f20 <HAL_DMA_IRQHandler+0xb34>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0204 	bic.w	r2, r2, #4
 8005f1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8165 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f32:	e15f      	b.n	80061f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80c5 	beq.w	80060d4 <HAL_DMA_IRQHandler+0xce8>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80bf 	beq.w	80060d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2202      	movs	r2, #2
 8005f60:	409a      	lsls	r2, r3
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 813a 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f8c:	e134      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8130 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa0:	e12a      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d168      	bne.n	800607e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a38      	ldr	r2, [pc, #224]	; (8006094 <HAL_DMA_IRQHandler+0xca8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d04a      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a37      	ldr	r2, [pc, #220]	; (8006098 <HAL_DMA_IRQHandler+0xcac>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d045      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	; (800609c <HAL_DMA_IRQHandler+0xcb0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d040      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a34      	ldr	r2, [pc, #208]	; (80060a0 <HAL_DMA_IRQHandler+0xcb4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d03b      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a32      	ldr	r2, [pc, #200]	; (80060a4 <HAL_DMA_IRQHandler+0xcb8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d036      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a31      	ldr	r2, [pc, #196]	; (80060a8 <HAL_DMA_IRQHandler+0xcbc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d031      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2f      	ldr	r2, [pc, #188]	; (80060ac <HAL_DMA_IRQHandler+0xcc0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02c      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2e      	ldr	r2, [pc, #184]	; (80060b0 <HAL_DMA_IRQHandler+0xcc4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d027      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <HAL_DMA_IRQHandler+0xcc8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d022      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <HAL_DMA_IRQHandler+0xccc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01d      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a29      	ldr	r2, [pc, #164]	; (80060bc <HAL_DMA_IRQHandler+0xcd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a28      	ldr	r2, [pc, #160]	; (80060c0 <HAL_DMA_IRQHandler+0xcd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <HAL_DMA_IRQHandler+0xcd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <HAL_DMA_IRQHandler+0xcdc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a23      	ldr	r2, [pc, #140]	; (80060cc <HAL_DMA_IRQHandler+0xce0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_DMA_IRQHandler+0xc60>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_DMA_IRQHandler+0xce4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <HAL_DMA_IRQHandler+0xc72>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0214 	bic.w	r2, r2, #20
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e007      	b.n	800606e <HAL_DMA_IRQHandler+0xc82>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 020a 	bic.w	r2, r2, #10
 800606c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80b8 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006090:	e0b2      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe0c>
 8006092:	bf00      	nop
 8006094:	40020010 	.word	0x40020010
 8006098:	40020028 	.word	0x40020028
 800609c:	40020040 	.word	0x40020040
 80060a0:	40020058 	.word	0x40020058
 80060a4:	40020070 	.word	0x40020070
 80060a8:	40020088 	.word	0x40020088
 80060ac:	400200a0 	.word	0x400200a0
 80060b0:	400200b8 	.word	0x400200b8
 80060b4:	40020410 	.word	0x40020410
 80060b8:	40020428 	.word	0x40020428
 80060bc:	40020440 	.word	0x40020440
 80060c0:	40020458 	.word	0x40020458
 80060c4:	40020470 	.word	0x40020470
 80060c8:	40020488 	.word	0x40020488
 80060cc:	400204a0 	.word	0x400204a0
 80060d0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2208      	movs	r2, #8
 80060de:	409a      	lsls	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8088 	beq.w	80061fa <HAL_DMA_IRQHandler+0xe0e>
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8082 	beq.w	80061fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a41      	ldr	r2, [pc, #260]	; (8006200 <HAL_DMA_IRQHandler+0xe14>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d04a      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a3f      	ldr	r2, [pc, #252]	; (8006204 <HAL_DMA_IRQHandler+0xe18>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d045      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3e      	ldr	r2, [pc, #248]	; (8006208 <HAL_DMA_IRQHandler+0xe1c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d040      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3c      	ldr	r2, [pc, #240]	; (800620c <HAL_DMA_IRQHandler+0xe20>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d03b      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <HAL_DMA_IRQHandler+0xe24>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d036      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a39      	ldr	r2, [pc, #228]	; (8006214 <HAL_DMA_IRQHandler+0xe28>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a38      	ldr	r2, [pc, #224]	; (8006218 <HAL_DMA_IRQHandler+0xe2c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d02c      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a36      	ldr	r2, [pc, #216]	; (800621c <HAL_DMA_IRQHandler+0xe30>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d027      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a35      	ldr	r2, [pc, #212]	; (8006220 <HAL_DMA_IRQHandler+0xe34>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d022      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a33      	ldr	r2, [pc, #204]	; (8006224 <HAL_DMA_IRQHandler+0xe38>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01d      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a32      	ldr	r2, [pc, #200]	; (8006228 <HAL_DMA_IRQHandler+0xe3c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <HAL_DMA_IRQHandler+0xe40>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <HAL_DMA_IRQHandler+0xe44>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2d      	ldr	r2, [pc, #180]	; (8006234 <HAL_DMA_IRQHandler+0xe48>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <HAL_DMA_IRQHandler+0xe4c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_DMA_IRQHandler+0xdaa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2a      	ldr	r2, [pc, #168]	; (800623c <HAL_DMA_IRQHandler+0xe50>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d108      	bne.n	80061a8 <HAL_DMA_IRQHandler+0xdbc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 021c 	bic.w	r2, r2, #28
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e007      	b.n	80061b8 <HAL_DMA_IRQHandler+0xdcc>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 020e 	bic.w	r2, r2, #14
 80061b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2201      	movs	r2, #1
 80061c2:	409a      	lsls	r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
 80061ee:	e004      	b.n	80061fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061f0:	bf00      	nop
 80061f2:	e002      	b.n	80061fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061fa:	3728      	adds	r7, #40	; 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8

08006240 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a84      	ldr	r2, [pc, #528]	; (8006470 <DMA_SetConfig+0x230>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d072      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a82      	ldr	r2, [pc, #520]	; (8006474 <DMA_SetConfig+0x234>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d06d      	beq.n	800634a <DMA_SetConfig+0x10a>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a81      	ldr	r2, [pc, #516]	; (8006478 <DMA_SetConfig+0x238>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d068      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a7f      	ldr	r2, [pc, #508]	; (800647c <DMA_SetConfig+0x23c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d063      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7e      	ldr	r2, [pc, #504]	; (8006480 <DMA_SetConfig+0x240>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d05e      	beq.n	800634a <DMA_SetConfig+0x10a>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a7c      	ldr	r2, [pc, #496]	; (8006484 <DMA_SetConfig+0x244>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d059      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a7b      	ldr	r2, [pc, #492]	; (8006488 <DMA_SetConfig+0x248>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d054      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a79      	ldr	r2, [pc, #484]	; (800648c <DMA_SetConfig+0x24c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d04f      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a78      	ldr	r2, [pc, #480]	; (8006490 <DMA_SetConfig+0x250>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04a      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a76      	ldr	r2, [pc, #472]	; (8006494 <DMA_SetConfig+0x254>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d045      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a75      	ldr	r2, [pc, #468]	; (8006498 <DMA_SetConfig+0x258>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d040      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a73      	ldr	r2, [pc, #460]	; (800649c <DMA_SetConfig+0x25c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d03b      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a72      	ldr	r2, [pc, #456]	; (80064a0 <DMA_SetConfig+0x260>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d036      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a70      	ldr	r2, [pc, #448]	; (80064a4 <DMA_SetConfig+0x264>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d031      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a6f      	ldr	r2, [pc, #444]	; (80064a8 <DMA_SetConfig+0x268>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d02c      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a6d      	ldr	r2, [pc, #436]	; (80064ac <DMA_SetConfig+0x26c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <DMA_SetConfig+0x10a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6c      	ldr	r2, [pc, #432]	; (80064b0 <DMA_SetConfig+0x270>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6a      	ldr	r2, [pc, #424]	; (80064b4 <DMA_SetConfig+0x274>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <DMA_SetConfig+0x10a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a69      	ldr	r2, [pc, #420]	; (80064b8 <DMA_SetConfig+0x278>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a67      	ldr	r2, [pc, #412]	; (80064bc <DMA_SetConfig+0x27c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a66      	ldr	r2, [pc, #408]	; (80064c0 <DMA_SetConfig+0x280>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <DMA_SetConfig+0x10a>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a64      	ldr	r2, [pc, #400]	; (80064c4 <DMA_SetConfig+0x284>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a63      	ldr	r2, [pc, #396]	; (80064c8 <DMA_SetConfig+0x288>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <DMA_SetConfig+0x10a>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a61      	ldr	r2, [pc, #388]	; (80064cc <DMA_SetConfig+0x28c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <DMA_SetConfig+0x10e>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <DMA_SetConfig+0x110>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800635c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800636e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a3e      	ldr	r2, [pc, #248]	; (8006470 <DMA_SetConfig+0x230>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d04a      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <DMA_SetConfig+0x234>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d045      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a3b      	ldr	r2, [pc, #236]	; (8006478 <DMA_SetConfig+0x238>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d040      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a3a      	ldr	r2, [pc, #232]	; (800647c <DMA_SetConfig+0x23c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d03b      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a38      	ldr	r2, [pc, #224]	; (8006480 <DMA_SetConfig+0x240>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d036      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a37      	ldr	r2, [pc, #220]	; (8006484 <DMA_SetConfig+0x244>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d031      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a35      	ldr	r2, [pc, #212]	; (8006488 <DMA_SetConfig+0x248>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d02c      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <DMA_SetConfig+0x24c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d027      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a32      	ldr	r2, [pc, #200]	; (8006490 <DMA_SetConfig+0x250>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d022      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a31      	ldr	r2, [pc, #196]	; (8006494 <DMA_SetConfig+0x254>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d01d      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <DMA_SetConfig+0x258>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d018      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2e      	ldr	r2, [pc, #184]	; (800649c <DMA_SetConfig+0x25c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <DMA_SetConfig+0x260>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <DMA_SetConfig+0x264>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <DMA_SetConfig+0x268>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <DMA_SetConfig+0x1d0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <DMA_SetConfig+0x26c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <DMA_SetConfig+0x1d4>
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <DMA_SetConfig+0x1d6>
 8006414:	2300      	movs	r3, #0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d05a      	beq.n	80064d0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	223f      	movs	r2, #63	; 0x3f
 8006424:	409a      	lsls	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006438:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d108      	bne.n	800645c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800645a:	e087      	b.n	800656c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]
}
 800646c:	e07e      	b.n	800656c <DMA_SetConfig+0x32c>
 800646e:	bf00      	nop
 8006470:	40020010 	.word	0x40020010
 8006474:	40020028 	.word	0x40020028
 8006478:	40020040 	.word	0x40020040
 800647c:	40020058 	.word	0x40020058
 8006480:	40020070 	.word	0x40020070
 8006484:	40020088 	.word	0x40020088
 8006488:	400200a0 	.word	0x400200a0
 800648c:	400200b8 	.word	0x400200b8
 8006490:	40020410 	.word	0x40020410
 8006494:	40020428 	.word	0x40020428
 8006498:	40020440 	.word	0x40020440
 800649c:	40020458 	.word	0x40020458
 80064a0:	40020470 	.word	0x40020470
 80064a4:	40020488 	.word	0x40020488
 80064a8:	400204a0 	.word	0x400204a0
 80064ac:	400204b8 	.word	0x400204b8
 80064b0:	58025408 	.word	0x58025408
 80064b4:	5802541c 	.word	0x5802541c
 80064b8:	58025430 	.word	0x58025430
 80064bc:	58025444 	.word	0x58025444
 80064c0:	58025458 	.word	0x58025458
 80064c4:	5802546c 	.word	0x5802546c
 80064c8:	58025480 	.word	0x58025480
 80064cc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a28      	ldr	r2, [pc, #160]	; (8006578 <DMA_SetConfig+0x338>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a27      	ldr	r2, [pc, #156]	; (800657c <DMA_SetConfig+0x33c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d01d      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a25      	ldr	r2, [pc, #148]	; (8006580 <DMA_SetConfig+0x340>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a24      	ldr	r2, [pc, #144]	; (8006584 <DMA_SetConfig+0x344>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a22      	ldr	r2, [pc, #136]	; (8006588 <DMA_SetConfig+0x348>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a21      	ldr	r2, [pc, #132]	; (800658c <DMA_SetConfig+0x34c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <DMA_SetConfig+0x350>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <DMA_SetConfig+0x2e0>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <DMA_SetConfig+0x354>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d101      	bne.n	8006524 <DMA_SetConfig+0x2e4>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <DMA_SetConfig+0x2e6>
 8006524:	2300      	movs	r3, #0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	409a      	lsls	r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d108      	bne.n	800655c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	60da      	str	r2, [r3, #12]
}
 800655a:	e007      	b.n	800656c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	60da      	str	r2, [r3, #12]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	58025408 	.word	0x58025408
 800657c:	5802541c 	.word	0x5802541c
 8006580:	58025430 	.word	0x58025430
 8006584:	58025444 	.word	0x58025444
 8006588:	58025458 	.word	0x58025458
 800658c:	5802546c 	.word	0x5802546c
 8006590:	58025480 	.word	0x58025480
 8006594:	58025494 	.word	0x58025494

08006598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a42      	ldr	r2, [pc, #264]	; (80066b0 <DMA_CalcBaseAndBitshift+0x118>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d04a      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a41      	ldr	r2, [pc, #260]	; (80066b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d045      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3f      	ldr	r2, [pc, #252]	; (80066b8 <DMA_CalcBaseAndBitshift+0x120>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d040      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3e      	ldr	r2, [pc, #248]	; (80066bc <DMA_CalcBaseAndBitshift+0x124>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d03b      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a3c      	ldr	r2, [pc, #240]	; (80066c0 <DMA_CalcBaseAndBitshift+0x128>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d036      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3b      	ldr	r2, [pc, #236]	; (80066c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d031      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a39      	ldr	r2, [pc, #228]	; (80066c8 <DMA_CalcBaseAndBitshift+0x130>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d02c      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a38      	ldr	r2, [pc, #224]	; (80066cc <DMA_CalcBaseAndBitshift+0x134>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d027      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a36      	ldr	r2, [pc, #216]	; (80066d0 <DMA_CalcBaseAndBitshift+0x138>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d022      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a35      	ldr	r2, [pc, #212]	; (80066d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d01d      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a33      	ldr	r2, [pc, #204]	; (80066d8 <DMA_CalcBaseAndBitshift+0x140>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a32      	ldr	r2, [pc, #200]	; (80066dc <DMA_CalcBaseAndBitshift+0x144>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a30      	ldr	r2, [pc, #192]	; (80066e0 <DMA_CalcBaseAndBitshift+0x148>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2d      	ldr	r2, [pc, #180]	; (80066e8 <DMA_CalcBaseAndBitshift+0x150>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <DMA_CalcBaseAndBitshift+0xa8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <DMA_CalcBaseAndBitshift+0x154>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d101      	bne.n	8006644 <DMA_CalcBaseAndBitshift+0xac>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <DMA_CalcBaseAndBitshift+0xae>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d024      	beq.n	8006694 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	3b10      	subs	r3, #16
 8006652:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <DMA_CalcBaseAndBitshift+0x158>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	4a24      	ldr	r2, [pc, #144]	; (80066f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006664:	5cd3      	ldrb	r3, [r2, r3]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d908      	bls.n	8006684 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <DMA_CalcBaseAndBitshift+0x160>)
 800667a:	4013      	ands	r3, r2
 800667c:	1d1a      	adds	r2, r3, #4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	659a      	str	r2, [r3, #88]	; 0x58
 8006682:	e00d      	b.n	80066a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <DMA_CalcBaseAndBitshift+0x160>)
 800668c:	4013      	ands	r3, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6593      	str	r3, [r2, #88]	; 0x58
 8006692:	e005      	b.n	80066a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40020010 	.word	0x40020010
 80066b4:	40020028 	.word	0x40020028
 80066b8:	40020040 	.word	0x40020040
 80066bc:	40020058 	.word	0x40020058
 80066c0:	40020070 	.word	0x40020070
 80066c4:	40020088 	.word	0x40020088
 80066c8:	400200a0 	.word	0x400200a0
 80066cc:	400200b8 	.word	0x400200b8
 80066d0:	40020410 	.word	0x40020410
 80066d4:	40020428 	.word	0x40020428
 80066d8:	40020440 	.word	0x40020440
 80066dc:	40020458 	.word	0x40020458
 80066e0:	40020470 	.word	0x40020470
 80066e4:	40020488 	.word	0x40020488
 80066e8:	400204a0 	.word	0x400204a0
 80066ec:	400204b8 	.word	0x400204b8
 80066f0:	aaaaaaab 	.word	0xaaaaaaab
 80066f4:	0800fe54 	.word	0x0800fe54
 80066f8:	fffffc00 	.word	0xfffffc00

080066fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d120      	bne.n	8006752 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	2b03      	cmp	r3, #3
 8006716:	d858      	bhi.n	80067ca <DMA_CheckFifoParam+0xce>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <DMA_CheckFifoParam+0x24>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006731 	.word	0x08006731
 8006724:	08006743 	.word	0x08006743
 8006728:	08006731 	.word	0x08006731
 800672c:	080067cb 	.word	0x080067cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d048      	beq.n	80067ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006740:	e045      	b.n	80067ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800674a:	d142      	bne.n	80067d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006750:	e03f      	b.n	80067d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675a:	d123      	bne.n	80067a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	2b03      	cmp	r3, #3
 8006762:	d838      	bhi.n	80067d6 <DMA_CheckFifoParam+0xda>
 8006764:	a201      	add	r2, pc, #4	; (adr r2, 800676c <DMA_CheckFifoParam+0x70>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	0800677d 	.word	0x0800677d
 8006770:	08006783 	.word	0x08006783
 8006774:	0800677d 	.word	0x0800677d
 8006778:	08006795 	.word	0x08006795
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	73fb      	strb	r3, [r7, #15]
        break;
 8006780:	e030      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d025      	beq.n	80067da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006792:	e022      	b.n	80067da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800679c:	d11f      	bne.n	80067de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067a2:	e01c      	b.n	80067de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d902      	bls.n	80067b2 <DMA_CheckFifoParam+0xb6>
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d003      	beq.n	80067b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067b0:	e018      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
        break;
 80067b6:	e015      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00e      	beq.n	80067e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
    break;
 80067c8:	e00b      	b.n	80067e2 <DMA_CheckFifoParam+0xe6>
        break;
 80067ca:	bf00      	nop
 80067cc:	e00a      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e008      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e006      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e004      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
        break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <DMA_CheckFifoParam+0xe8>
    break;
 80067e2:	bf00      	nop
    }
  }

  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a38      	ldr	r2, [pc, #224]	; (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a36      	ldr	r2, [pc, #216]	; (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a35      	ldr	r2, [pc, #212]	; (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a33      	ldr	r2, [pc, #204]	; (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a32      	ldr	r2, [pc, #200]	; (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a30      	ldr	r2, [pc, #192]	; (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01a      	beq.n	8006892 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	3b08      	subs	r3, #8
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4b26      	ldr	r3, [pc, #152]	; (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a24      	ldr	r2, [pc, #144]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006880:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2201      	movs	r2, #1
 800688a:	409a      	lsls	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006890:	e024      	b.n	80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	3b10      	subs	r3, #16
 800689a:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	091b      	lsrs	r3, r3, #4
 80068a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d806      	bhi.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a1b      	ldr	r2, [pc, #108]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d902      	bls.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3308      	adds	r3, #8
 80068b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a16      	ldr	r2, [pc, #88]	; (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	58025408 	.word	0x58025408
 80068ec:	5802541c 	.word	0x5802541c
 80068f0:	58025430 	.word	0x58025430
 80068f4:	58025444 	.word	0x58025444
 80068f8:	58025458 	.word	0x58025458
 80068fc:	5802546c 	.word	0x5802546c
 8006900:	58025480 	.word	0x58025480
 8006904:	58025494 	.word	0x58025494
 8006908:	cccccccd 	.word	0xcccccccd
 800690c:	16009600 	.word	0x16009600
 8006910:	58025880 	.word	0x58025880
 8006914:	aaaaaaab 	.word	0xaaaaaaab
 8006918:	400204b8 	.word	0x400204b8
 800691c:	4002040f 	.word	0x4002040f
 8006920:	10008200 	.word	0x10008200
 8006924:	40020880 	.word	0x40020880

08006928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04a      	beq.n	80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b08      	cmp	r3, #8
 8006942:	d847      	bhi.n	80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01d      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a22      	ldr	r2, [pc, #136]	; (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a21      	ldr	r2, [pc, #132]	; (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1c      	ldr	r2, [pc, #112]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069b0:	671a      	str	r2, [r3, #112]	; 0x70
 80069b2:	e009      	b.n	80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2201      	movs	r2, #1
 80069ce:	409a      	lsls	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	58025408 	.word	0x58025408
 80069e4:	5802541c 	.word	0x5802541c
 80069e8:	58025430 	.word	0x58025430
 80069ec:	58025444 	.word	0x58025444
 80069f0:	58025458 	.word	0x58025458
 80069f4:	5802546c 	.word	0x5802546c
 80069f8:	58025480 	.word	0x58025480
 80069fc:	58025494 	.word	0x58025494
 8006a00:	1600963f 	.word	0x1600963f
 8006a04:	58025940 	.word	0x58025940
 8006a08:	1000823f 	.word	0x1000823f
 8006a0c:	40020940 	.word	0x40020940

08006a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	; 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a1e:	4b89      	ldr	r3, [pc, #548]	; (8006c44 <HAL_GPIO_Init+0x234>)
 8006a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a22:	e194      	b.n	8006d4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	2101      	movs	r1, #1
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a30:	4013      	ands	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8186 	beq.w	8006d48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d00b      	beq.n	8006a5c <HAL_GPIO_Init+0x4c>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d007      	beq.n	8006a5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a50:	2b11      	cmp	r3, #17
 8006a52:	d003      	beq.n	8006a5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b12      	cmp	r3, #18
 8006a5a:	d130      	bne.n	8006abe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	2203      	movs	r2, #3
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4013      	ands	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a92:	2201      	movs	r2, #1
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f003 0201 	and.w	r2, r3, #1
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	2203      	movs	r2, #3
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d003      	beq.n	8006afe <HAL_GPIO_Init+0xee>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b12      	cmp	r3, #18
 8006afc:	d123      	bne.n	8006b46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	08da      	lsrs	r2, r3, #3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3208      	adds	r2, #8
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	220f      	movs	r2, #15
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	08da      	lsrs	r2, r3, #3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3208      	adds	r2, #8
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2203      	movs	r2, #3
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f003 0203 	and.w	r2, r3, #3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80e0 	beq.w	8006d48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b88:	4b2f      	ldr	r3, [pc, #188]	; (8006c48 <HAL_GPIO_Init+0x238>)
 8006b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b8e:	4a2e      	ldr	r2, [pc, #184]	; (8006c48 <HAL_GPIO_Init+0x238>)
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <HAL_GPIO_Init+0x238>)
 8006b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ba6:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <HAL_GPIO_Init+0x23c>)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	3302      	adds	r3, #2
 8006bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	220f      	movs	r2, #15
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a20      	ldr	r2, [pc, #128]	; (8006c50 <HAL_GPIO_Init+0x240>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d052      	beq.n	8006c78 <HAL_GPIO_Init+0x268>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <HAL_GPIO_Init+0x244>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d031      	beq.n	8006c3e <HAL_GPIO_Init+0x22e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_GPIO_Init+0x248>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02b      	beq.n	8006c3a <HAL_GPIO_Init+0x22a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <HAL_GPIO_Init+0x24c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d025      	beq.n	8006c36 <HAL_GPIO_Init+0x226>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <HAL_GPIO_Init+0x250>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01f      	beq.n	8006c32 <HAL_GPIO_Init+0x222>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1b      	ldr	r2, [pc, #108]	; (8006c64 <HAL_GPIO_Init+0x254>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d019      	beq.n	8006c2e <HAL_GPIO_Init+0x21e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <HAL_GPIO_Init+0x258>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_GPIO_Init+0x21a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <HAL_GPIO_Init+0x25c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00d      	beq.n	8006c26 <HAL_GPIO_Init+0x216>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_GPIO_Init+0x260>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <HAL_GPIO_Init+0x212>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <HAL_GPIO_Init+0x264>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d101      	bne.n	8006c1e <HAL_GPIO_Init+0x20e>
 8006c1a:	2309      	movs	r3, #9
 8006c1c:	e02d      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c1e:	230a      	movs	r3, #10
 8006c20:	e02b      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c22:	2308      	movs	r3, #8
 8006c24:	e029      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c26:	2307      	movs	r3, #7
 8006c28:	e027      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c2a:	2306      	movs	r3, #6
 8006c2c:	e025      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c2e:	2305      	movs	r3, #5
 8006c30:	e023      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c32:	2304      	movs	r3, #4
 8006c34:	e021      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c36:	2303      	movs	r3, #3
 8006c38:	e01f      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e01d      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e01b      	b.n	8006c7a <HAL_GPIO_Init+0x26a>
 8006c42:	bf00      	nop
 8006c44:	58000080 	.word	0x58000080
 8006c48:	58024400 	.word	0x58024400
 8006c4c:	58000400 	.word	0x58000400
 8006c50:	58020000 	.word	0x58020000
 8006c54:	58020400 	.word	0x58020400
 8006c58:	58020800 	.word	0x58020800
 8006c5c:	58020c00 	.word	0x58020c00
 8006c60:	58021000 	.word	0x58021000
 8006c64:	58021400 	.word	0x58021400
 8006c68:	58021800 	.word	0x58021800
 8006c6c:	58021c00 	.word	0x58021c00
 8006c70:	58022000 	.word	0x58022000
 8006c74:	58022400 	.word	0x58022400
 8006c78:	2300      	movs	r3, #0
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	f002 0203 	and.w	r2, r2, #3
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	4093      	lsls	r3, r2
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c8a:	4938      	ldr	r1, [pc, #224]	; (8006d6c <HAL_GPIO_Init+0x35c>)
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	089b      	lsrs	r3, r3, #2
 8006c90:	3302      	adds	r3, #2
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f ae63 	bne.w	8006a24 <HAL_GPIO_Init+0x14>
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3724      	adds	r7, #36	; 0x24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	58000400 	.word	0x58000400

08006d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	887b      	ldrh	r3, [r7, #2]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e001      	b.n	8006d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006db0:	787b      	ldrb	r3, [r7, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006dbc:	e003      	b.n	8006dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	041a      	lsls	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	619a      	str	r2, [r3, #24]
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	4603      	mov	r3, r0
 8006dda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f804 	bl	8006e06 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <HAL_PWREx_ConfigSupply+0x70>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d00a      	beq.n	8006e46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e30:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <HAL_PWREx_ConfigSupply+0x70>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d001      	beq.n	8006e42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e01f      	b.n	8006e82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e01d      	b.n	8006e82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <HAL_PWREx_ConfigSupply+0x70>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f023 0207 	bic.w	r2, r3, #7
 8006e4e:	490f      	ldr	r1, [pc, #60]	; (8006e8c <HAL_PWREx_ConfigSupply+0x70>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e56:	f7fb ff93 	bl	8002d80 <HAL_GetTick>
 8006e5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e5c:	e009      	b.n	8006e72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e5e:	f7fb ff8f 	bl	8002d80 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e6c:	d901      	bls.n	8006e72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e007      	b.n	8006e82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_PWREx_ConfigSupply+0x70>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7e:	d1ee      	bne.n	8006e5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	58024800 	.word	0x58024800

08006e90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a04      	ldr	r2, [pc, #16]	; (8006eac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	60d3      	str	r3, [r2, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	58024800 	.word	0x58024800

08006eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e3ff      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8087 	beq.w	8006fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed0:	4b99      	ldr	r3, [pc, #612]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eda:	4b97      	ldr	r3, [pc, #604]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x46>
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	2b18      	cmp	r3, #24
 8006eea:	d110      	bne.n	8006f0e <HAL_RCC_OscConfig+0x5e>
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d10b      	bne.n	8006f0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef6:	4b90      	ldr	r3, [pc, #576]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d06c      	beq.n	8006fdc <HAL_RCC_OscConfig+0x12c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d168      	bne.n	8006fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e3d9      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f16:	d106      	bne.n	8006f26 <HAL_RCC_OscConfig+0x76>
 8006f18:	4b87      	ldr	r3, [pc, #540]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a86      	ldr	r2, [pc, #536]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e02e      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x98>
 8006f2e:	4b82      	ldr	r3, [pc, #520]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a81      	ldr	r2, [pc, #516]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4b7f      	ldr	r3, [pc, #508]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e01d      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0xbc>
 8006f52:	4b79      	ldr	r3, [pc, #484]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a78      	ldr	r2, [pc, #480]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4b76      	ldr	r3, [pc, #472]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a75      	ldr	r2, [pc, #468]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCC_OscConfig+0xd4>
 8006f6c:	4b72      	ldr	r3, [pc, #456]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a71      	ldr	r2, [pc, #452]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	4b6f      	ldr	r3, [pc, #444]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6e      	ldr	r2, [pc, #440]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d013      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7fb fef8 	bl	8002d80 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fb fef4 	bl	8002d80 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	; 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e38d      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa6:	4b64      	ldr	r3, [pc, #400]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0xe4>
 8006fb2:	e014      	b.n	8006fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fb fee4 	bl	8002d80 <HAL_GetTick>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fbc:	f7fb fee0 	bl	8002d80 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b64      	cmp	r3, #100	; 0x64
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e379      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fce:	4b5a      	ldr	r3, [pc, #360]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x10c>
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80ae 	beq.w	8007148 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fec:	4b52      	ldr	r3, [pc, #328]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff6:	4b50      	ldr	r3, [pc, #320]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <HAL_RCC_OscConfig+0x162>
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2b18      	cmp	r3, #24
 8007006:	d13a      	bne.n	800707e <HAL_RCC_OscConfig+0x1ce>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d135      	bne.n	800707e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007012:	4b49      	ldr	r3, [pc, #292]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_RCC_OscConfig+0x17a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e34b      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702a:	f7fb feb5 	bl	8002d98 <HAL_GetREVID>
 800702e:	4602      	mov	r2, r0
 8007030:	f241 0303 	movw	r3, #4099	; 0x1003
 8007034:	429a      	cmp	r2, r3
 8007036:	d817      	bhi.n	8007068 <HAL_RCC_OscConfig+0x1b8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d108      	bne.n	8007052 <HAL_RCC_OscConfig+0x1a2>
 8007040:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007048:	4a3b      	ldr	r2, [pc, #236]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800704a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007050:	e07a      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	4b39      	ldr	r3, [pc, #228]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	031b      	lsls	r3, r3, #12
 8007060:	4935      	ldr	r1, [pc, #212]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007062:	4313      	orrs	r3, r2
 8007064:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007066:	e06f      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007068:	4b33      	ldr	r3, [pc, #204]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	4930      	ldr	r1, [pc, #192]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800707c:	e064      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d045      	beq.n	8007112 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007086:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 0219 	bic.w	r2, r3, #25
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4929      	ldr	r1, [pc, #164]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fb fe72 	bl	8002d80 <HAL_GetTick>
 800709c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070a0:	f7fb fe6e 	bl	8002d80 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e307      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070be:	f7fb fe6b 	bl	8002d98 <HAL_GetREVID>
 80070c2:	4602      	mov	r2, r0
 80070c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d817      	bhi.n	80070fc <HAL_RCC_OscConfig+0x24c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d108      	bne.n	80070e6 <HAL_RCC_OscConfig+0x236>
 80070d4:	4b18      	ldr	r3, [pc, #96]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e2:	6053      	str	r3, [r2, #4]
 80070e4:	e030      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
 80070e6:	4b14      	ldr	r3, [pc, #80]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	031b      	lsls	r3, r3, #12
 80070f4:	4910      	ldr	r1, [pc, #64]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	604b      	str	r3, [r1, #4]
 80070fa:	e025      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	490b      	ldr	r1, [pc, #44]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 800710c:	4313      	orrs	r3, r2
 800710e:	604b      	str	r3, [r1, #4]
 8007110:	e01a      	b.n	8007148 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <HAL_RCC_OscConfig+0x288>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fb fe2f 	bl	8002d80 <HAL_GetTick>
 8007122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007124:	e00a      	b.n	800713c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007126:	f7fb fe2b 	bl	8002d80 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d903      	bls.n	800713c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e2c4      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
 8007138:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800713c:	4ba4      	ldr	r3, [pc, #656]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1ee      	bne.n	8007126 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80a9 	beq.w	80072a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007156:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800715e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007160:	4b9b      	ldr	r3, [pc, #620]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d007      	beq.n	800717c <HAL_RCC_OscConfig+0x2cc>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b18      	cmp	r3, #24
 8007170:	d13a      	bne.n	80071e8 <HAL_RCC_OscConfig+0x338>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d135      	bne.n	80071e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800717c:	4b94      	ldr	r3, [pc, #592]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_OscConfig+0x2e4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	d001      	beq.n	8007194 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e296      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007194:	f7fb fe00 	bl	8002d98 <HAL_GetREVID>
 8007198:	4602      	mov	r2, r0
 800719a:	f241 0303 	movw	r3, #4099	; 0x1003
 800719e:	429a      	cmp	r2, r3
 80071a0:	d817      	bhi.n	80071d2 <HAL_RCC_OscConfig+0x322>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d108      	bne.n	80071bc <HAL_RCC_OscConfig+0x30c>
 80071aa:	4b89      	ldr	r3, [pc, #548]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071b2:	4a87      	ldr	r2, [pc, #540]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ba:	e075      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071bc:	4b84      	ldr	r3, [pc, #528]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	069b      	lsls	r3, r3, #26
 80071ca:	4981      	ldr	r1, [pc, #516]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071d0:	e06a      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	061b      	lsls	r3, r3, #24
 80071e0:	497b      	ldr	r1, [pc, #492]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e6:	e05f      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d042      	beq.n	8007276 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071f0:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a76      	ldr	r2, [pc, #472]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80071f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fb fdc0 	bl	8002d80 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007204:	f7fb fdbc 	bl	8002d80 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e255      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007216:	4b6e      	ldr	r3, [pc, #440]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007222:	f7fb fdb9 	bl	8002d98 <HAL_GetREVID>
 8007226:	4602      	mov	r2, r0
 8007228:	f241 0303 	movw	r3, #4099	; 0x1003
 800722c:	429a      	cmp	r2, r3
 800722e:	d817      	bhi.n	8007260 <HAL_RCC_OscConfig+0x3b0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	2b20      	cmp	r3, #32
 8007236:	d108      	bne.n	800724a <HAL_RCC_OscConfig+0x39a>
 8007238:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007240:	4a63      	ldr	r2, [pc, #396]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e02e      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
 800724a:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	069b      	lsls	r3, r3, #26
 8007258:	495d      	ldr	r1, [pc, #372]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800725a:	4313      	orrs	r3, r2
 800725c:	604b      	str	r3, [r1, #4]
 800725e:	e023      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
 8007260:	4b5b      	ldr	r3, [pc, #364]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	061b      	lsls	r3, r3, #24
 800726e:	4958      	ldr	r1, [pc, #352]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007270:	4313      	orrs	r3, r2
 8007272:	60cb      	str	r3, [r1, #12]
 8007274:	e018      	b.n	80072a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007276:	4b56      	ldr	r3, [pc, #344]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a55      	ldr	r2, [pc, #340]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800727c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fb fd7d 	bl	8002d80 <HAL_GetTick>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800728a:	f7fb fd79 	bl	8002d80 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e212      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800729c:	4b4c      	ldr	r3, [pc, #304]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f0      	bne.n	800728a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d036      	beq.n	8007322 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d019      	beq.n	80072f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072bc:	4b44      	ldr	r3, [pc, #272]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	4a43      	ldr	r2, [pc, #268]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c8:	f7fb fd5a 	bl	8002d80 <HAL_GetTick>
 80072cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d0:	f7fb fd56 	bl	8002d80 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e1ef      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072e2:	4b3b      	ldr	r3, [pc, #236]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x420>
 80072ee:	e018      	b.n	8007322 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f0:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f4:	4a36      	ldr	r2, [pc, #216]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fc:	f7fb fd40 	bl	8002d80 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007304:	f7fb fd3c 	bl	8002d80 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e1d5      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d036      	beq.n	800739c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d019      	beq.n	800736a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007336:	4b26      	ldr	r3, [pc, #152]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a25      	ldr	r2, [pc, #148]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800733c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007340:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007342:	f7fb fd1d 	bl	8002d80 <HAL_GetTick>
 8007346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800734a:	f7fb fd19 	bl	8002d80 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e1b2      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0f0      	beq.n	800734a <HAL_RCC_OscConfig+0x49a>
 8007368:	e018      	b.n	800739c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800736a:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007374:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007376:	f7fb fd03 	bl	8002d80 <HAL_GetTick>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800737e:	f7fb fcff 	bl	8002d80 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e198      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <HAL_RCC_OscConfig+0x520>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f0      	bne.n	800737e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8085 	beq.w	80074b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <HAL_RCC_OscConfig+0x524>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <HAL_RCC_OscConfig+0x524>)
 80073b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073b6:	f7fb fce3 	bl	8002d80 <HAL_GetTick>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073bc:	e00c      	b.n	80073d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073be:	f7fb fcdf 	bl	8002d80 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b64      	cmp	r3, #100	; 0x64
 80073ca:	d905      	bls.n	80073d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e178      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
 80073d0:	58024400 	.word	0x58024400
 80073d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d8:	4b96      	ldr	r3, [pc, #600]	; (8007634 <HAL_RCC_OscConfig+0x784>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ec      	beq.n	80073be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d106      	bne.n	80073fa <HAL_RCC_OscConfig+0x54a>
 80073ec:	4b92      	ldr	r3, [pc, #584]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80073ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f0:	4a91      	ldr	r2, [pc, #580]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80073f2:	f043 0301 	orr.w	r3, r3, #1
 80073f6:	6713      	str	r3, [r2, #112]	; 0x70
 80073f8:	e02d      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10c      	bne.n	800741c <HAL_RCC_OscConfig+0x56c>
 8007402:	4b8d      	ldr	r3, [pc, #564]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	4a8c      	ldr	r2, [pc, #560]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	; 0x70
 800740e:	4b8a      	ldr	r3, [pc, #552]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a89      	ldr	r2, [pc, #548]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007414:	f023 0304 	bic.w	r3, r3, #4
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	e01c      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b05      	cmp	r3, #5
 8007422:	d10c      	bne.n	800743e <HAL_RCC_OscConfig+0x58e>
 8007424:	4b84      	ldr	r3, [pc, #528]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a83      	ldr	r2, [pc, #524]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800742a:	f043 0304 	orr.w	r3, r3, #4
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
 8007430:	4b81      	ldr	r3, [pc, #516]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a80      	ldr	r2, [pc, #512]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	e00b      	b.n	8007456 <HAL_RCC_OscConfig+0x5a6>
 800743e:	4b7e      	ldr	r3, [pc, #504]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a7d      	ldr	r2, [pc, #500]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a7a      	ldr	r2, [pc, #488]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d015      	beq.n	800748a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745e:	f7fb fc8f 	bl	8002d80 <HAL_GetTick>
 8007462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007464:	e00a      	b.n	800747c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fb fc8b 	bl	8002d80 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e122      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800747c:	4b6e      	ldr	r3, [pc, #440]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ee      	beq.n	8007466 <HAL_RCC_OscConfig+0x5b6>
 8007488:	e014      	b.n	80074b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fb fc79 	bl	8002d80 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007490:	e00a      	b.n	80074a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fb fc75 	bl	8002d80 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e10c      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074a8:	4b63      	ldr	r3, [pc, #396]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ee      	bne.n	8007492 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8101 	beq.w	80076c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074be:	4b5e      	ldr	r3, [pc, #376]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c6:	2b18      	cmp	r3, #24
 80074c8:	f000 80bc 	beq.w	8007644 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	f040 8095 	bne.w	8007600 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d6:	4b58      	ldr	r3, [pc, #352]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e2:	f7fb fc4d 	bl	8002d80 <HAL_GetTick>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ea:	f7fb fc49 	bl	8002d80 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0e2      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074fc:	4b4e      	ldr	r3, [pc, #312]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f0      	bne.n	80074ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800750a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800750c:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCC_OscConfig+0x78c>)
 800750e:	4013      	ands	r3, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007518:	0112      	lsls	r2, r2, #4
 800751a:	430a      	orrs	r2, r1
 800751c:	4946      	ldr	r1, [pc, #280]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800751e:	4313      	orrs	r3, r2
 8007520:	628b      	str	r3, [r1, #40]	; 0x28
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	3b01      	subs	r3, #1
 8007528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	3b01      	subs	r3, #1
 8007532:	025b      	lsls	r3, r3, #9
 8007534:	b29b      	uxth	r3, r3
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	3b01      	subs	r3, #1
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	3b01      	subs	r3, #1
 800754c:	061b      	lsls	r3, r3, #24
 800754e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007552:	4939      	ldr	r1, [pc, #228]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007554:	4313      	orrs	r3, r2
 8007556:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007558:	4b37      	ldr	r3, [pc, #220]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	4a36      	ldr	r2, [pc, #216]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007564:	4b34      	ldr	r3, [pc, #208]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007568:	4b35      	ldr	r3, [pc, #212]	; (8007640 <HAL_RCC_OscConfig+0x790>)
 800756a:	4013      	ands	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007570:	00d2      	lsls	r2, r2, #3
 8007572:	4931      	ldr	r1, [pc, #196]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007574:	4313      	orrs	r3, r2
 8007576:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007578:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	f023 020c 	bic.w	r2, r3, #12
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	492c      	ldr	r1, [pc, #176]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007586:	4313      	orrs	r3, r2
 8007588:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800758a:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f023 0202 	bic.w	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	4928      	ldr	r1, [pc, #160]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007598:	4313      	orrs	r3, r2
 800759a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800759c:	4b26      	ldr	r3, [pc, #152]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a25      	ldr	r2, [pc, #148]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a22      	ldr	r2, [pc, #136]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075b4:	4b20      	ldr	r3, [pc, #128]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fb fbd2 	bl	8002d80 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e0:	f7fb fbce 	bl	8002d80 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e067      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x730>
 80075fe:	e05f      	b.n	80076c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0c      	ldr	r2, [pc, #48]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fb fbb8 	bl	8002d80 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007614:	f7fb fbb4 	bl	8002d80 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e04d      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <HAL_RCC_OscConfig+0x788>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0x764>
 8007632:	e045      	b.n	80076c0 <HAL_RCC_OscConfig+0x810>
 8007634:	58024800 	.word	0x58024800
 8007638:	58024400 	.word	0x58024400
 800763c:	fffffc0c 	.word	0xfffffc0c
 8007640:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007644:	4b21      	ldr	r3, [pc, #132]	; (80076cc <HAL_RCC_OscConfig+0x81c>)
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_RCC_OscConfig+0x81c>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b01      	cmp	r3, #1
 8007656:	d031      	beq.n	80076bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 0203 	and.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007662:	429a      	cmp	r2, r3
 8007664:	d12a      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007672:	429a      	cmp	r2, r3
 8007674:	d122      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d11a      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0a5b      	lsrs	r3, r3, #9
 800768a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007692:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d111      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d108      	bne.n	80076bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3730      	adds	r7, #48	; 0x30
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	58024400 	.word	0x58024400

080076d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e19c      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076e4:	4b8a      	ldr	r3, [pc, #552]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d910      	bls.n	8007714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b87      	ldr	r3, [pc, #540]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 020f 	bic.w	r2, r3, #15
 80076fa:	4985      	ldr	r1, [pc, #532]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b83      	ldr	r3, [pc, #524]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e184      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	4b7b      	ldr	r3, [pc, #492]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800772c:	429a      	cmp	r2, r3
 800772e:	d908      	bls.n	8007742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007730:	4b78      	ldr	r3, [pc, #480]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4975      	ldr	r1, [pc, #468]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800773e:	4313      	orrs	r3, r2
 8007740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d010      	beq.n	8007770 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	4b70      	ldr	r3, [pc, #448]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800775a:	429a      	cmp	r2, r3
 800775c:	d908      	bls.n	8007770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800775e:	4b6d      	ldr	r3, [pc, #436]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	496a      	ldr	r1, [pc, #424]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800776c:	4313      	orrs	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	4b64      	ldr	r3, [pc, #400]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007788:	429a      	cmp	r2, r3
 800778a:	d908      	bls.n	800779e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800778c:	4b61      	ldr	r3, [pc, #388]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	495e      	ldr	r1, [pc, #376]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800779a:	4313      	orrs	r3, r2
 800779c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d010      	beq.n	80077cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d908      	bls.n	80077cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	4953      	ldr	r1, [pc, #332]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	4b4d      	ldr	r3, [pc, #308]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d908      	bls.n	80077fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f023 020f 	bic.w	r2, r3, #15
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4947      	ldr	r1, [pc, #284]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d055      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007806:	4b43      	ldr	r3, [pc, #268]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4940      	ldr	r1, [pc, #256]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007814:	4313      	orrs	r3, r2
 8007816:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d107      	bne.n	8007830 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007820:	4b3c      	ldr	r3, [pc, #240]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d121      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0f6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d107      	bne.n	8007848 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d115      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0ea      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007850:	4b30      	ldr	r3, [pc, #192]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0de      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0d6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f023 0207 	bic.w	r2, r3, #7
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4925      	ldr	r1, [pc, #148]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007882:	f7fb fa7d 	bl	8002d80 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007888:	e00a      	b.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800788a:	f7fb fa79 	bl	8002d80 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f241 3288 	movw	r2, #5000	; 0x1388
 8007898:	4293      	cmp	r3, r2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e0be      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a0:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d1eb      	bne.n	800788a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d208      	bcs.n	80078e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f023 020f 	bic.w	r2, r3, #15
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	490e      	ldr	r1, [pc, #56]	; (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d214      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 020f 	bic.w	r2, r3, #15
 80078f6:	4906      	ldr	r1, [pc, #24]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d005      	beq.n	8007918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e086      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
 8007910:	52002000 	.word	0x52002000
 8007914:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	4b3f      	ldr	r3, [pc, #252]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007930:	429a      	cmp	r2, r3
 8007932:	d208      	bcs.n	8007946 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007934:	4b3c      	ldr	r3, [pc, #240]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	4939      	ldr	r1, [pc, #228]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007942:	4313      	orrs	r3, r2
 8007944:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800795e:	429a      	cmp	r2, r3
 8007960:	d208      	bcs.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007962:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	492e      	ldr	r1, [pc, #184]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800798c:	429a      	cmp	r2, r3
 800798e:	d208      	bcs.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4922      	ldr	r1, [pc, #136]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d208      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079be:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4917      	ldr	r1, [pc, #92]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079d0:	f000 f89e 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 80079d4:	4601      	mov	r1, r0
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	4a12      	ldr	r2, [pc, #72]	; (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079e2:	5cd3      	ldrb	r3, [r2, r3]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	fa21 f303 	lsr.w	r3, r1, r3
 80079ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079ee:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079f8:	5cd3      	ldrb	r3, [r2, r3]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <HAL_RCC_ClockConfig+0x360>)
 8007a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a08:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <HAL_RCC_ClockConfig+0x364>)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <HAL_RCC_ClockConfig+0x368>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fa ff9a 	bl	800294c <HAL_InitTick>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	0800fe44 	.word	0x0800fe44
 8007a30:	24000004 	.word	0x24000004
 8007a34:	24000000 	.word	0x24000000
 8007a38:	24000008 	.word	0x24000008

08007a3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08c      	sub	sp, #48	; 0x30
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d12a      	bne.n	8007aa4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a54:	4a2b      	ldr	r2, [pc, #172]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a72:	2302      	movs	r3, #2
 8007a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a76:	2303      	movs	r3, #3
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a82:	f107 031c 	add.w	r3, r7, #28
 8007a86:	4619      	mov	r1, r3
 8007a88:	481f      	ldr	r0, [pc, #124]	; (8007b08 <HAL_RCC_MCOConfig+0xcc>)
 8007a8a:	f7fe ffc1 	bl	8006a10 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	4919      	ldr	r1, [pc, #100]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007aa2:	e02a      	b.n	8007afa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007aa4:	4b17      	ldr	r3, [pc, #92]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aaa:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ab4:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007acc:	2303      	movs	r3, #3
 8007ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007ad8:	f107 031c 	add.w	r3, r7, #28
 8007adc:	4619      	mov	r1, r3
 8007ade:	480b      	ldr	r0, [pc, #44]	; (8007b0c <HAL_RCC_MCOConfig+0xd0>)
 8007ae0:	f7fe ff96 	bl	8006a10 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	01d9      	lsls	r1, r3, #7
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	430b      	orrs	r3, r1
 8007af4:	4903      	ldr	r1, [pc, #12]	; (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	610b      	str	r3, [r1, #16]
}
 8007afa:	bf00      	nop
 8007afc:	3730      	adds	r7, #48	; 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
 8007b08:	58020000 	.word	0x58020000
 8007b0c:	58020800 	.word	0x58020800

08007b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	; 0x24
 8007b14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b16:	4baf      	ldr	r3, [pc, #700]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b1e:	2b18      	cmp	r3, #24
 8007b20:	f200 814e 	bhi.w	8007dc0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b91 	.word	0x08007b91
 8007b30:	08007dc1 	.word	0x08007dc1
 8007b34:	08007dc1 	.word	0x08007dc1
 8007b38:	08007dc1 	.word	0x08007dc1
 8007b3c:	08007dc1 	.word	0x08007dc1
 8007b40:	08007dc1 	.word	0x08007dc1
 8007b44:	08007dc1 	.word	0x08007dc1
 8007b48:	08007dc1 	.word	0x08007dc1
 8007b4c:	08007bb7 	.word	0x08007bb7
 8007b50:	08007dc1 	.word	0x08007dc1
 8007b54:	08007dc1 	.word	0x08007dc1
 8007b58:	08007dc1 	.word	0x08007dc1
 8007b5c:	08007dc1 	.word	0x08007dc1
 8007b60:	08007dc1 	.word	0x08007dc1
 8007b64:	08007dc1 	.word	0x08007dc1
 8007b68:	08007dc1 	.word	0x08007dc1
 8007b6c:	08007bbd 	.word	0x08007bbd
 8007b70:	08007dc1 	.word	0x08007dc1
 8007b74:	08007dc1 	.word	0x08007dc1
 8007b78:	08007dc1 	.word	0x08007dc1
 8007b7c:	08007dc1 	.word	0x08007dc1
 8007b80:	08007dc1 	.word	0x08007dc1
 8007b84:	08007dc1 	.word	0x08007dc1
 8007b88:	08007dc1 	.word	0x08007dc1
 8007b8c:	08007bc3 	.word	0x08007bc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b90:	4b90      	ldr	r3, [pc, #576]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d009      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b9c:	4b8d      	ldr	r3, [pc, #564]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	4a8c      	ldr	r2, [pc, #560]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007bae:	e10a      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bb0:	4b89      	ldr	r3, [pc, #548]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007bb2:	61bb      	str	r3, [r7, #24]
    break;
 8007bb4:	e107      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007bb6:	4b89      	ldr	r3, [pc, #548]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007bb8:	61bb      	str	r3, [r7, #24]
    break;
 8007bba:	e104      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007bbc:	4b88      	ldr	r3, [pc, #544]	; (8007de0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007bbe:	61bb      	str	r3, [r7, #24]
    break;
 8007bc0:	e101      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bc2:	4b84      	ldr	r3, [pc, #528]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007bcc:	4b81      	ldr	r3, [pc, #516]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bd8:	4b7e      	ldr	r3, [pc, #504]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007be2:	4b7c      	ldr	r3, [pc, #496]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	08db      	lsrs	r3, r3, #3
 8007be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	fb02 f303 	mul.w	r3, r2, r3
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80da 	beq.w	8007dba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d05a      	beq.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d302      	bcc.n	8007c16 <HAL_RCC_GetSysClockFreq+0x106>
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d078      	beq.n	8007d06 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007c14:	e099      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c16:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02d      	beq.n	8007c7e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c22:	4b6c      	ldr	r3, [pc, #432]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	08db      	lsrs	r3, r3, #3
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	4a6a      	ldr	r2, [pc, #424]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c32:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4c:	4b61      	ldr	r3, [pc, #388]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	ee07 3a90 	vmov	s15, r3
 8007c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c60:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007c7c:	e087      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c88:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007de8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c90:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc0:	e065      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007dec <HAL_RCC_GetSysClockFreq+0x2dc>
 8007cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d04:	e043      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d10:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007df0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d18:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d28:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d48:	e021      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d54:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007dec <HAL_RCC_GetSysClockFreq+0x2dc>
 8007d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5c:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d70:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d8c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	0a5b      	lsrs	r3, r3, #9
 8007d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d98:	3301      	adds	r3, #1
 8007d9a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007db2:	ee17 3a90 	vmov	r3, s15
 8007db6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007db8:	e005      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
    break;
 8007dbe:	e002      	b.n	8007dc6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007dc0:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007dc2:	61bb      	str	r3, [r7, #24]
    break;
 8007dc4:	bf00      	nop
  }

  return sysclockfreq;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3724      	adds	r7, #36	; 0x24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	01e84800 	.word	0x01e84800
 8007de4:	46000000 	.word	0x46000000
 8007de8:	4c742400 	.word	0x4c742400
 8007dec:	4a742400 	.word	0x4a742400
 8007df0:	4bf42400 	.word	0x4bf42400

08007df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007dfa:	f7ff fe89 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e0c:	5cd3      	ldrb	r3, [r2, r3]
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	fa21 f303 	lsr.w	r3, r1, r3
 8007e16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e22:	5cd3      	ldrb	r3, [r2, r3]
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2e:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e32:	4a07      	ldr	r2, [pc, #28]	; (8007e50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e38:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	58024400 	.word	0x58024400
 8007e48:	0800fe44 	.word	0x0800fe44
 8007e4c:	24000004 	.word	0x24000004
 8007e50:	24000000 	.word	0x24000000

08007e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e58:	f7ff ffcc 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e6a:	5cd3      	ldrb	r3, [r2, r3]
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	0800fe44 	.word	0x0800fe44

08007e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e84:	f7ff ffb6 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	4a04      	ldr	r2, [pc, #16]	; (8007ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e96:	5cd3      	ldrb	r3, [r2, r3]
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	0800fe44 	.word	0x0800fe44

08007eac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	223f      	movs	r2, #63	; 0x3f
 8007eba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f003 0207 	and.w	r2, r3, #7
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ec8:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ed4:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 020f 	and.w	r2, r3, #15
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ee0:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007eec:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <HAL_RCC_GetClockConfig+0x80>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	52002000 	.word	0x52002000

08007f30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d03d      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f54:	d013      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f5a:	d802      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007f60:	e01f      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f66:	d013      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f6c:	d01c      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007f6e:	e018      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f70:	4baf      	ldr	r3, [pc, #700]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	4aae      	ldr	r2, [pc, #696]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f7c:	e015      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3304      	adds	r3, #4
 8007f82:	2102      	movs	r1, #2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 fd33 	bl	80099f0 <RCCEx_PLL2_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f8e:	e00c      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3324      	adds	r3, #36	; 0x24
 8007f94:	2102      	movs	r1, #2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fddc 	bl	8009b54 <RCCEx_PLL3_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fa0:	e003      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa6:	e000      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d109      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fb0:	4b9f      	ldr	r3, [pc, #636]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fbc:	499c      	ldr	r1, [pc, #624]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	650b      	str	r3, [r1, #80]	; 0x50
 8007fc2:	e001      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d03d      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d826      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08007ff9 	.word	0x08007ff9
 8007fe8:	08008007 	.word	0x08008007
 8007fec:	08008019 	.word	0x08008019
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff8:	4b8d      	ldr	r3, [pc, #564]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a8c      	ldr	r2, [pc, #560]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008004:	e015      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3304      	adds	r3, #4
 800800a:	2100      	movs	r1, #0
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fcef 	bl	80099f0 <RCCEx_PLL2_Config>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008016:	e00c      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3324      	adds	r3, #36	; 0x24
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fd98 	bl	8009b54 <RCCEx_PLL3_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
      break;
 800802e:	e000      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008038:	4b7d      	ldr	r3, [pc, #500]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800803a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803c:	f023 0207 	bic.w	r2, r3, #7
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008044:	497a      	ldr	r1, [pc, #488]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008046:	4313      	orrs	r3, r2
 8008048:	650b      	str	r3, [r1, #80]	; 0x50
 800804a:	e001      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008058:	2b00      	cmp	r3, #0
 800805a:	d03e      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d01c      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d804      	bhi.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d008      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800806c:	2b40      	cmp	r3, #64	; 0x40
 800806e:	d00d      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008070:	e01e      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008072:	2bc0      	cmp	r3, #192	; 0xc0
 8008074:	d01f      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807a:	d01e      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800807c:	e018      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800807e:	4b6c      	ldr	r3, [pc, #432]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	4a6b      	ldr	r2, [pc, #428]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800808a:	e017      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3304      	adds	r3, #4
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fcac 	bl	80099f0 <RCCEx_PLL2_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800809c:	e00e      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3324      	adds	r3, #36	; 0x24
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fd55 	bl	8009b54 <RCCEx_PLL3_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080ae:	e005      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]
      break;
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80080ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80080c2:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	4958      	ldr	r1, [pc, #352]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	650b      	str	r3, [r1, #80]	; 0x50
 80080d4:	e001      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d044      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f0:	d01f      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80080f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f6:	d805      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008100:	d00e      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008102:	e01f      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008104:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008108:	d01f      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800810a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800810e:	d01e      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008110:	e018      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008112:	4b47      	ldr	r3, [pc, #284]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	4a46      	ldr	r2, [pc, #280]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800811c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800811e:	e017      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f001 fc62 	bl	80099f0 <RCCEx_PLL2_Config>
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008130:	e00e      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3324      	adds	r3, #36	; 0x24
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fd0b 	bl	8009b54 <RCCEx_PLL3_Config>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008142:	e005      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	75fb      	strb	r3, [r7, #23]
      break;
 8008148:	e002      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800814e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008156:	4b36      	ldr	r3, [pc, #216]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008164:	4932      	ldr	r1, [pc, #200]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008166:	4313      	orrs	r3, r2
 8008168:	658b      	str	r3, [r1, #88]	; 0x58
 800816a:	e001      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008178:	2b00      	cmp	r3, #0
 800817a:	d044      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008186:	d01f      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800818c:	d805      	bhi.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008196:	d00e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008198:	e01f      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800819a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800819e:	d01f      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80081a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081a4:	d01e      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80081a6:	e018      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a8:	4b21      	ldr	r3, [pc, #132]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	4a20      	ldr	r2, [pc, #128]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081b4:	e017      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 fc17 	bl	80099f0 <RCCEx_PLL2_Config>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80081c6:	e00e      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3324      	adds	r3, #36	; 0x24
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 fcc0 	bl	8009b54 <RCCEx_PLL3_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081d8:	e005      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
      break;
 80081de:	e002      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80081e0:	bf00      	nop
 80081e2:	e000      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80081e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081ec:	4b10      	ldr	r3, [pc, #64]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081fa:	490d      	ldr	r1, [pc, #52]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008200:	e001      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d035      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008216:	2b10      	cmp	r3, #16
 8008218:	d00c      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800821a:	2b10      	cmp	r3, #16
 800821c:	d802      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01b      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008222:	e017      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008224:	2b20      	cmp	r3, #32
 8008226:	d00c      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008228:	2b30      	cmp	r3, #48	; 0x30
 800822a:	d018      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800822c:	e012      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800822e:	bf00      	nop
 8008230:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008234:	4baf      	ldr	r3, [pc, #700]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	4aae      	ldr	r2, [pc, #696]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800823a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008240:	e00e      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3304      	adds	r3, #4
 8008246:	2102      	movs	r1, #2
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fbd1 	bl	80099f0 <RCCEx_PLL2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008252:	e005      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800825e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008266:	4ba3      	ldr	r3, [pc, #652]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	49a0      	ldr	r1, [pc, #640]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008274:	4313      	orrs	r3, r2
 8008276:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008278:	e001      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d042      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008292:	d01f      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008298:	d805      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a2:	d00e      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80082a4:	e01f      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80082a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082aa:	d01f      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80082ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b0:	d01e      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80082b2:	e018      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b4:	4b8f      	ldr	r3, [pc, #572]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a8e      	ldr	r2, [pc, #568]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082c0:	e017      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3304      	adds	r3, #4
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fb91 	bl	80099f0 <RCCEx_PLL2_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082d2:	e00e      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3324      	adds	r3, #36	; 0x24
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fc3a 	bl	8009b54 <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082e4:	e005      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ea:	e002      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80082f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082f8:	4b7e      	ldr	r3, [pc, #504]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008304:	497b      	ldr	r1, [pc, #492]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	650b      	str	r3, [r1, #80]	; 0x50
 800830a:	e001      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d042      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008324:	d01b      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800832a:	d805      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d022      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008334:	d00a      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008336:	e01b      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800833c:	d01d      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800833e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008342:	d01c      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008348:	d01b      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800834a:	e011      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fb4c 	bl	80099f0 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800835c:	e012      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3324      	adds	r3, #36	; 0x24
 8008362:	2101      	movs	r1, #1
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fbf5 	bl	8009b54 <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800836e:	e009      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e006      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008376:	bf00      	nop
 8008378:	e004      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800838a:	4b5a      	ldr	r3, [pc, #360]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800838c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008396:	4957      	ldr	r1, [pc, #348]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008398:	4313      	orrs	r3, r2
 800839a:	650b      	str	r3, [r1, #80]	; 0x50
 800839c:	e001      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d044      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b8:	d01b      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80083ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083be:	d805      	bhi.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d022      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80083c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c8:	d00a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80083ca:	e01b      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d01d      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80083d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d6:	d01c      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80083d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083dc:	d01b      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083de:	e011      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	2101      	movs	r1, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fb02 	bl	80099f0 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083f0:	e012      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3324      	adds	r3, #36	; 0x24
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fbab 	bl	8009b54 <RCCEx_PLL3_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008402:	e009      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
      break;
 8008408:	e006      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800840a:	bf00      	nop
 800840c:	e004      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008418:	7dfb      	ldrb	r3, [r7, #23]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800841e:	4b35      	ldr	r3, [pc, #212]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008422:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800842c:	4931      	ldr	r1, [pc, #196]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800842e:	4313      	orrs	r3, r2
 8008430:	658b      	str	r3, [r1, #88]	; 0x58
 8008432:	e001      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02d      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844c:	d005      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800844e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008452:	d009      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d013      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008458:	e00f      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845a:	4b26      	ldr	r3, [pc, #152]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	4a25      	ldr	r2, [pc, #148]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008466:	e00c      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	2101      	movs	r1, #1
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fabe 	bl	80099f0 <RCCEx_PLL2_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
      break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800848a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008494:	4917      	ldr	r1, [pc, #92]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008496:	4313      	orrs	r3, r2
 8008498:	650b      	str	r3, [r1, #80]	; 0x50
 800849a:	e001      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d035      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d81b      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084f9 	.word	0x080084f9
 80084c0:	080084cd 	.word	0x080084cd
 80084c4:	080084db 	.word	0x080084db
 80084c8:	080084f9 	.word	0x080084f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	4a08      	ldr	r2, [pc, #32]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084d8:	e00f      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3304      	adds	r3, #4
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fa85 	bl	80099f0 <RCCEx_PLL2_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084ea:	e006      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80084f2:	bf00      	nop
 80084f4:	58024400 	.word	0x58024400
      break;
 80084f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008500:	4bba      	ldr	r3, [pc, #744]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008504:	f023 0203 	bic.w	r2, r3, #3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850c:	49b7      	ldr	r1, [pc, #732]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800850e:	4313      	orrs	r3, r2
 8008510:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008512:	e001      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8086 	beq.w	8008632 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008526:	4bb2      	ldr	r3, [pc, #712]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4ab1      	ldr	r2, [pc, #708]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800852c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008532:	f7fa fc25 	bl	8002d80 <HAL_GetTick>
 8008536:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008538:	e009      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800853a:	f7fa fc21 	bl	8002d80 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b64      	cmp	r3, #100	; 0x64
 8008546:	d902      	bls.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	75fb      	strb	r3, [r7, #23]
        break;
 800854c:	e005      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800854e:	4ba8      	ldr	r3, [pc, #672]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0ef      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d166      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008560:	4ba2      	ldr	r3, [pc, #648]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800856a:	4053      	eors	r3, r2
 800856c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008570:	2b00      	cmp	r3, #0
 8008572:	d013      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008574:	4b9d      	ldr	r3, [pc, #628]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800857e:	4b9b      	ldr	r3, [pc, #620]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008582:	4a9a      	ldr	r2, [pc, #616]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008588:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800858a:	4b98      	ldr	r3, [pc, #608]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	4a97      	ldr	r2, [pc, #604]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008594:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008596:	4a95      	ldr	r2, [pc, #596]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a6:	d115      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a8:	f7fa fbea 	bl	8002d80 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ae:	e00b      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085b0:	f7fa fbe6 	bl	8002d80 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80085be:	4293      	cmp	r3, r2
 80085c0:	d902      	bls.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	75fb      	strb	r3, [r7, #23]
            break;
 80085c6:	e005      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085c8:	4b88      	ldr	r3, [pc, #544]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0ed      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d126      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e8:	d10d      	bne.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80085ea:	4b80      	ldr	r3, [pc, #512]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085f8:	0919      	lsrs	r1, r3, #4
 80085fa:	4b7e      	ldr	r3, [pc, #504]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80085fc:	400b      	ands	r3, r1
 80085fe:	497b      	ldr	r1, [pc, #492]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008600:	4313      	orrs	r3, r2
 8008602:	610b      	str	r3, [r1, #16]
 8008604:	e005      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008606:	4b79      	ldr	r3, [pc, #484]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	4a78      	ldr	r2, [pc, #480]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800860c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008610:	6113      	str	r3, [r2, #16]
 8008612:	4b76      	ldr	r3, [pc, #472]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800861c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008620:	4972      	ldr	r1, [pc, #456]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008622:	4313      	orrs	r3, r2
 8008624:	670b      	str	r3, [r1, #112]	; 0x70
 8008626:	e004      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	75bb      	strb	r3, [r7, #22]
 800862c:	e001      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d07d      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008642:	2b28      	cmp	r3, #40	; 0x28
 8008644:	d866      	bhi.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	0800871b 	.word	0x0800871b
 8008650:	08008715 	.word	0x08008715
 8008654:	08008715 	.word	0x08008715
 8008658:	08008715 	.word	0x08008715
 800865c:	08008715 	.word	0x08008715
 8008660:	08008715 	.word	0x08008715
 8008664:	08008715 	.word	0x08008715
 8008668:	08008715 	.word	0x08008715
 800866c:	080086f1 	.word	0x080086f1
 8008670:	08008715 	.word	0x08008715
 8008674:	08008715 	.word	0x08008715
 8008678:	08008715 	.word	0x08008715
 800867c:	08008715 	.word	0x08008715
 8008680:	08008715 	.word	0x08008715
 8008684:	08008715 	.word	0x08008715
 8008688:	08008715 	.word	0x08008715
 800868c:	08008703 	.word	0x08008703
 8008690:	08008715 	.word	0x08008715
 8008694:	08008715 	.word	0x08008715
 8008698:	08008715 	.word	0x08008715
 800869c:	08008715 	.word	0x08008715
 80086a0:	08008715 	.word	0x08008715
 80086a4:	08008715 	.word	0x08008715
 80086a8:	08008715 	.word	0x08008715
 80086ac:	0800871b 	.word	0x0800871b
 80086b0:	08008715 	.word	0x08008715
 80086b4:	08008715 	.word	0x08008715
 80086b8:	08008715 	.word	0x08008715
 80086bc:	08008715 	.word	0x08008715
 80086c0:	08008715 	.word	0x08008715
 80086c4:	08008715 	.word	0x08008715
 80086c8:	08008715 	.word	0x08008715
 80086cc:	0800871b 	.word	0x0800871b
 80086d0:	08008715 	.word	0x08008715
 80086d4:	08008715 	.word	0x08008715
 80086d8:	08008715 	.word	0x08008715
 80086dc:	08008715 	.word	0x08008715
 80086e0:	08008715 	.word	0x08008715
 80086e4:	08008715 	.word	0x08008715
 80086e8:	08008715 	.word	0x08008715
 80086ec:	0800871b 	.word	0x0800871b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	2101      	movs	r1, #1
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 f97a 	bl	80099f0 <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008700:	e00c      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3324      	adds	r3, #36	; 0x24
 8008706:	2101      	movs	r1, #1
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fa23 	bl	8009b54 <RCCEx_PLL3_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008712:	e003      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
      break;
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800871a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008722:	4b32      	ldr	r3, [pc, #200]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008726:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800872e:	492f      	ldr	r1, [pc, #188]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008730:	4313      	orrs	r3, r2
 8008732:	654b      	str	r3, [r1, #84]	; 0x54
 8008734:	e001      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d037      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874a:	2b05      	cmp	r3, #5
 800874c:	d820      	bhi.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	08008797 	.word	0x08008797
 8008758:	0800876d 	.word	0x0800876d
 800875c:	0800877f 	.word	0x0800877f
 8008760:	08008797 	.word	0x08008797
 8008764:	08008797 	.word	0x08008797
 8008768:	08008797 	.word	0x08008797
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	2101      	movs	r1, #1
 8008772:	4618      	mov	r0, r3
 8008774:	f001 f93c 	bl	80099f0 <RCCEx_PLL2_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800877c:	e00c      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3324      	adds	r3, #36	; 0x24
 8008782:	2101      	movs	r1, #1
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f9e5 	bl	8009b54 <RCCEx_PLL3_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800878e:	e003      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	75fb      	strb	r3, [r7, #23]
      break;
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800879e:	4b13      	ldr	r3, [pc, #76]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f023 0207 	bic.w	r2, r3, #7
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087aa:	4910      	ldr	r1, [pc, #64]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	654b      	str	r3, [r1, #84]	; 0x54
 80087b0:	e001      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d040      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d827      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	08008823 	.word	0x08008823
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	0800880b 	.word	0x0800880b
 80087e0:	08008823 	.word	0x08008823
 80087e4:	08008823 	.word	0x08008823
 80087e8:	08008823 	.word	0x08008823
 80087ec:	58024400 	.word	0x58024400
 80087f0:	58024800 	.word	0x58024800
 80087f4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	2101      	movs	r1, #1
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 f8f6 	bl	80099f0 <RCCEx_PLL2_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008808:	e00c      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	2101      	movs	r1, #1
 8008810:	4618      	mov	r0, r3
 8008812:	f001 f99f 	bl	8009b54 <RCCEx_PLL3_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800881a:	e003      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
      break;
 8008820:	e000      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800882a:	4bb2      	ldr	r3, [pc, #712]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	f023 0207 	bic.w	r2, r3, #7
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008838:	49ae      	ldr	r1, [pc, #696]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800883a:	4313      	orrs	r3, r2
 800883c:	658b      	str	r3, [r1, #88]	; 0x58
 800883e:	e001      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d044      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885a:	d01b      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800885c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008860:	d805      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d022      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800886c:	e01b      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008872:	d01d      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008878:	d01c      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800887a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800887e:	d01b      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008880:	e011      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3304      	adds	r3, #4
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f8b1 	bl	80099f0 <RCCEx_PLL2_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008892:	e012      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3324      	adds	r3, #36	; 0x24
 8008898:	2102      	movs	r1, #2
 800889a:	4618      	mov	r0, r3
 800889c:	f001 f95a 	bl	8009b54 <RCCEx_PLL3_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088a4:	e009      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]
      break;
 80088aa:	e006      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80088ac:	bf00      	nop
 80088ae:	e004      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80088b0:	bf00      	nop
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80088b4:	bf00      	nop
 80088b6:	e000      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80088b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088c0:	4b8c      	ldr	r3, [pc, #560]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ce:	4989      	ldr	r1, [pc, #548]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	654b      	str	r3, [r1, #84]	; 0x54
 80088d4:	e001      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d044      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f0:	d01b      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80088f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f6:	d805      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d022      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80088fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008900:	d00a      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008902:	e01b      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d01d      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800890a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800890e:	d01c      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008914:	d01b      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008916:	e011      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	2100      	movs	r1, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f001 f866 	bl	80099f0 <RCCEx_PLL2_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008928:	e012      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2102      	movs	r1, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f90f 	bl	8009b54 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800893a:	e009      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
      break;
 8008940:	e006      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008942:	bf00      	nop
 8008944:	e004      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008946:	bf00      	nop
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800894a:	bf00      	nop
 800894c:	e000      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800894e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008956:	4b67      	ldr	r3, [pc, #412]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008964:	4963      	ldr	r1, [pc, #396]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008966:	4313      	orrs	r3, r2
 8008968:	658b      	str	r3, [r1, #88]	; 0x58
 800896a:	e001      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008978:	2b00      	cmp	r3, #0
 800897a:	d044      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008986:	d01b      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800898c:	d805      	bhi.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d022      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008996:	d00a      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008998:	e01b      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800899a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800899e:	d01d      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80089a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089a4:	d01c      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80089a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089aa:	d01b      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80089ac:	e011      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3304      	adds	r3, #4
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f81b 	bl	80099f0 <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089be:	e012      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3324      	adds	r3, #36	; 0x24
 80089c4:	2102      	movs	r1, #2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 f8c4 	bl	8009b54 <RCCEx_PLL3_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089d0:	e009      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	75fb      	strb	r3, [r7, #23]
      break;
 80089d6:	e006      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089d8:	bf00      	nop
 80089da:	e004      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80089e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80089ec:	4b41      	ldr	r3, [pc, #260]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089fa:	493e      	ldr	r1, [pc, #248]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008a00:	e001      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01a      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1c:	d10a      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3324      	adds	r3, #36	; 0x24
 8008a22:	2102      	movs	r1, #2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 f895 	bl	8009b54 <RCCEx_PLL3_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a34:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a42:	492c      	ldr	r1, [pc, #176]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5e:	d10a      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3324      	adds	r3, #36	; 0x24
 8008a64:	2102      	movs	r1, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 f874 	bl	8009b54 <RCCEx_PLL3_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a76:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a84:	491b      	ldr	r1, [pc, #108]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d032      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d00d      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aa6:	d016      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d111      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 ff9c 	bl	80099f0 <RCCEx_PLL2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008abc:	e00c      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3324      	adds	r3, #36	; 0x24
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f845 	bl	8009b54 <RCCEx_PLL3_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ace:	e003      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	e000      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008aec:	4901      	ldr	r1, [pc, #4]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	658b      	str	r3, [r1, #88]	; 0x58
 8008af2:	e003      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d02f      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b12:	d00c      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b18:	d015      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1e:	d10f      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b20:	4b79      	ldr	r3, [pc, #484]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a78      	ldr	r2, [pc, #480]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b2c:	e00c      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3324      	adds	r3, #36	; 0x24
 8008b32:	2101      	movs	r1, #1
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 f80d 	bl	8009b54 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b3e:	e003      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	e000      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b4e:	4b6e      	ldr	r3, [pc, #440]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b5c:	496a      	ldr	r1, [pc, #424]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	654b      	str	r3, [r1, #84]	; 0x54
 8008b62:	e001      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d029      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d007      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008b82:	e00f      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b84:	4b60      	ldr	r3, [pc, #384]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	4a5f      	ldr	r2, [pc, #380]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b90:	e00b      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3304      	adds	r3, #4
 8008b96:	2102      	movs	r1, #2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 ff29 	bl	80099f0 <RCCEx_PLL2_Config>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ba2:	e002      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bb0:	4b55      	ldr	r3, [pc, #340]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bbc:	4952      	ldr	r1, [pc, #328]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bc2:	e001      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3324      	adds	r3, #36	; 0x24
 8008bd8:	2102      	movs	r1, #2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 ffba 	bl	8009b54 <RCCEx_PLL3_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d02f      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfe:	d00c      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c04:	d802      	bhi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d011      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008c0a:	e00d      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c10:	d00f      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c16:	d00e      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008c18:	e006      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1a:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	4a3a      	ldr	r2, [pc, #232]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008c26:	e007      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2c:	e004      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c3e:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c4a:	492f      	ldr	r1, [pc, #188]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	654b      	str	r3, [r1, #84]	; 0x54
 8008c50:	e001      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c62:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	4926      	ldr	r1, [pc, #152]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c80:	4b21      	ldr	r3, [pc, #132]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c8e:	491e      	ldr	r1, [pc, #120]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cac:	4916      	ldr	r1, [pc, #88]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	4a11      	ldr	r2, [pc, #68]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cc8:	6113      	str	r3, [r2, #16]
 8008cca:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ccc:	691a      	ldr	r2, [r3, #16]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008cd4:	490c      	ldr	r1, [pc, #48]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da08      	bge.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cee:	4906      	ldr	r1, [pc, #24]	; (8008d08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008cf4:	7dbb      	ldrb	r3, [r7, #22]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	58024400 	.word	0x58024400

08008d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b090      	sub	sp, #64	; 0x40
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d1a:	d150      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008d1c:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d844      	bhi.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d49 	.word	0x08008d49
 8008d38:	08008d59 	.word	0x08008d59
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	08008db1 	.word	0x08008db1
 8008d44:	08008d79 	.word	0x08008d79
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fd03 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d56:	e241      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d58:	f107 0318 	add.w	r3, r7, #24
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fa63 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d66:	e239      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d68:	f107 030c 	add.w	r3, r7, #12
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fba7 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d76:	e231      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d78:	4b8a      	ldr	r3, [pc, #552]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d88:	4b87      	ldr	r3, [pc, #540]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d8c:	e226      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d94:	d102      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008d96:	4b85      	ldr	r3, [pc, #532]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9a:	e21f      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da2:	d102      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008da4:	4b82      	ldr	r3, [pc, #520]	; (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da8:	e218      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dae:	e215      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008db0:	4b80      	ldr	r3, [pc, #512]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db4:	e212      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dba:	bf00      	nop
 8008dbc:	e20e      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc4:	d14f      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008dc6:	4b77      	ldr	r3, [pc, #476]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	2b80      	cmp	r3, #128	; 0x80
 8008dd4:	d01c      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d804      	bhi.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d00e      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008de2:	e03c      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008de4:	2bc0      	cmp	r3, #192	; 0xc0
 8008de6:	d037      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dec:	d018      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008dee:	e036      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fcaf 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfe:	e1ed      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e00:	f107 0318 	add.w	r3, r7, #24
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fa0f 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0e:	e1e5      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e10:	f107 030c 	add.w	r3, r7, #12
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fb53 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e1dd      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e20:	4b60      	ldr	r3, [pc, #384]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e30:	4b5d      	ldr	r3, [pc, #372]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e34:	e1d2      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e3c:	d102      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008e3e:	4b5b      	ldr	r3, [pc, #364]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e42:	e1cb      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4a:	d102      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008e4c:	4b58      	ldr	r3, [pc, #352]	; (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e50:	e1c4      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e56:	e1c1      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e58:	4b56      	ldr	r3, [pc, #344]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5c:	e1be      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e62:	bf00      	nop
 8008e64:	e1ba      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e6c:	d153      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e6e:	4b4d      	ldr	r3, [pc, #308]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e72:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e7e:	d01f      	beq.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e84:	d805      	bhi.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e8e:	d00f      	beq.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008e90:	e03d      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008e92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e96:	d037      	beq.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008e98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e9c:	d018      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008e9e:	e036      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fc57 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eae:	e195      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb0:	f107 0318 	add.w	r3, r7, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f9b7 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ebe:	e18d      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec0:	f107 030c 	add.w	r3, r7, #12
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fafb 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ece:	e185      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ed0:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d102      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ee0:	4b31      	ldr	r3, [pc, #196]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ee4:	e17a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eec:	d102      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008eee:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef2:	e173      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d102      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008efc:	4b2c      	ldr	r3, [pc, #176]	; (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f00:	e16c      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f06:	e169      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f08:	4b2a      	ldr	r3, [pc, #168]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0c:	e166      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f12:	bf00      	nop
 8008f14:	e162      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1c:	d15d      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008f1e:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f2e:	d01f      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f34:	d805      	bhi.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f3e:	d00f      	beq.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f40:	e047      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008f42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f46:	d041      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f4c:	d018      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008f4e:	e040      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fbff 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5e:	e13d      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f60:	f107 0318 	add.w	r3, r7, #24
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f95f 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6e:	e135      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f70:	f107 030c 	add.w	r3, r7, #12
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 faa3 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f7e:	e12d      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f94:	e122      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008f9e:	4b03      	ldr	r3, [pc, #12]	; (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa2:	e11b      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	003d0900 	.word	0x003d0900
 8008fb0:	01e84800 	.word	0x01e84800
 8008fb4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008fc0:	4b89      	ldr	r3, [pc, #548]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc4:	e10a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fca:	e107      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fcc:	4b87      	ldr	r3, [pc, #540]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd0:	e104      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd6:	bf00      	nop
 8008fd8:	e100      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe0:	d153      	bne.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008fe2:	4b83      	ldr	r3, [pc, #524]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008fea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff2:	d01f      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff8:	d805      	bhi.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009002:	d00f      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009004:	e03d      	b.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800900a:	d037      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800900c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009010:	d018      	beq.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009012:	e036      	b.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fb9d 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009022:	e0db      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009024:	f107 0318 	add.w	r3, r7, #24
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f8fd 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009032:	e0d3      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009034:	f107 030c 	add.w	r3, r7, #12
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fa41 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009042:	e0cb      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009044:	4b6a      	ldr	r3, [pc, #424]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800904c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800904e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009054:	4b67      	ldr	r3, [pc, #412]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009058:	e0c0      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800905a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009060:	d102      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009062:	4b65      	ldr	r3, [pc, #404]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009066:	e0b9      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906e:	d102      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009070:	4b5d      	ldr	r3, [pc, #372]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009074:	e0b2      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907a:	e0af      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800907c:	4b5b      	ldr	r3, [pc, #364]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009080:	e0ac      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009086:	bf00      	nop
 8009088:	e0a8      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009090:	d13d      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009092:	4b57      	ldr	r3, [pc, #348]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800909a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a2:	d00c      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80090a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a8:	d011      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d12b      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f8b8 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090bc:	e08e      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090be:	f107 030c 	add.w	r3, r7, #12
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 f9fc 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090cc:	e086      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090ce:	4b48      	ldr	r3, [pc, #288]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80090d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80090d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80090de:	4b45      	ldr	r3, [pc, #276]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80090e2:	e07b      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ea:	d102      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80090ec:	4b42      	ldr	r3, [pc, #264]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f0:	e074      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f8:	d102      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80090fa:	4b3b      	ldr	r3, [pc, #236]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fe:	e06d      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009104:	e06a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910a:	bf00      	nop
 800910c:	e066      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009114:	d11f      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009116:	4b36      	ldr	r3, [pc, #216]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912a:	d008      	beq.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800912c:	e00f      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800912e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fb10 	bl	8009758 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800913c:	e04e      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913e:	f107 0318 	add.w	r3, r7, #24
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f870 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800914c:	e046      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009152:	bf00      	nop
 8009154:	e042      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800915c:	d13c      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800915e:	4b24      	ldr	r3, [pc, #144]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009166:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800916e:	d01e      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009174:	d805      	bhi.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00d      	beq.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800917a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800917e:	d00e      	beq.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009180:	e026      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009186:	d01d      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800918c:	d01d      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800918e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009192:	d014      	beq.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009194:	e01c      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009196:	f000 f831 	bl	80091fc <HAL_RCCEx_GetD3PCLK1Freq>
 800919a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800919c:	e01e      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919e:	f107 0318 	add.w	r3, r7, #24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f840 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ac:	e016      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ae:	f107 030c 	add.w	r3, r7, #12
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 f984 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091bc:	e00e      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80091be:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80091c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c2:	e00b      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c8:	e008      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80091ca:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ce:	e005      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d4:	bf00      	nop
 80091d6:	e001      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3740      	adds	r7, #64	; 0x40
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	01e84800 	.word	0x01e84800
 80091ec:	00bb8000 	.word	0x00bb8000
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900

080091fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009200:	f7fe fdf8 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8009204:	4601      	mov	r1, r0
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	091b      	lsrs	r3, r3, #4
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4a04      	ldr	r2, [pc, #16]	; (8009224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009212:	5cd3      	ldrb	r3, [r2, r3]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800921c:	4618      	mov	r0, r3
 800921e:	bd80      	pop	{r7, pc}
 8009220:	58024400 	.word	0x58024400
 8009224:	0800fe44 	.word	0x0800fe44

08009228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009228:	b480      	push	{r7}
 800922a:	b089      	sub	sp, #36	; 0x24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009230:	4b9d      	ldr	r3, [pc, #628]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800923a:	4b9b      	ldr	r3, [pc, #620]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	0b1b      	lsrs	r3, r3, #12
 8009240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009246:	4b98      	ldr	r3, [pc, #608]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009252:	4b95      	ldr	r3, [pc, #596]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009256:	08db      	lsrs	r3, r3, #3
 8009258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	fb02 f303 	mul.w	r3, r2, r3
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 810a 	beq.w	800948a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d05a      	beq.n	8009332 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800927c:	2b01      	cmp	r3, #1
 800927e:	d302      	bcc.n	8009286 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009280:	2b02      	cmp	r3, #2
 8009282:	d078      	beq.n	8009376 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009284:	e099      	b.n	80093ba <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009286:	4b88      	ldr	r3, [pc, #544]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02d      	beq.n	80092ee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009292:	4b85      	ldr	r3, [pc, #532]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a83      	ldr	r2, [pc, #524]	; (80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092bc:	4b7a      	ldr	r3, [pc, #488]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092ec:	e087      	b.n	80093fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80092fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009300:	4b69      	ldr	r3, [pc, #420]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009310:	ed97 6a03 	vldr	s12, [r7, #12]
 8009314:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009330:	e065      	b.n	80093fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009344:	4b58      	ldr	r3, [pc, #352]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009354:	ed97 6a03 	vldr	s12, [r7, #12]
 8009358:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800935c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009374:	e043      	b.n	80093fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009380:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009388:	4b47      	ldr	r3, [pc, #284]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009398:	ed97 6a03 	vldr	s12, [r7, #12]
 800939c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b8:	e021      	b.n	80093fe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	ee07 3a90 	vmov	s15, r3
 80093c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80093c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093cc:	4b36      	ldr	r3, [pc, #216]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093fc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093fe:	4b2a      	ldr	r3, [pc, #168]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	0a5b      	lsrs	r3, r3, #9
 8009404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009408:	ee07 3a90 	vmov	s15, r3
 800940c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009418:	edd7 6a07 	vldr	s13, [r7, #28]
 800941c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009424:	ee17 2a90 	vmov	r2, s15
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009430:	0c1b      	lsrs	r3, r3, #16
 8009432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009446:	edd7 6a07 	vldr	s13, [r7, #28]
 800944a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009452:	ee17 2a90 	vmov	r2, s15
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800945a:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	0e1b      	lsrs	r3, r3, #24
 8009460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009474:	edd7 6a07 	vldr	s13, [r7, #28]
 8009478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009480:	ee17 2a90 	vmov	r2, s15
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009488:	e008      	b.n	800949c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	609a      	str	r2, [r3, #8]
}
 800949c:	bf00      	nop
 800949e:	3724      	adds	r7, #36	; 0x24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	58024400 	.word	0x58024400
 80094ac:	03d09000 	.word	0x03d09000
 80094b0:	46000000 	.word	0x46000000
 80094b4:	4c742400 	.word	0x4c742400
 80094b8:	4a742400 	.word	0x4a742400
 80094bc:	4bf42400 	.word	0x4bf42400

080094c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	; 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c8:	4b9d      	ldr	r3, [pc, #628]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094d2:	4b9b      	ldr	r3, [pc, #620]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	0d1b      	lsrs	r3, r3, #20
 80094d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094de:	4b98      	ldr	r3, [pc, #608]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094ea:	4b95      	ldr	r3, [pc, #596]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 810a 	beq.w	8009722 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d05a      	beq.n	80095ca <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009514:	2b01      	cmp	r3, #1
 8009516:	d302      	bcc.n	800951e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009518:	2b02      	cmp	r3, #2
 800951a:	d078      	beq.n	800960e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800951c:	e099      	b.n	8009652 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800951e:	4b88      	ldr	r3, [pc, #544]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	d02d      	beq.n	8009586 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800952a:	4b85      	ldr	r3, [pc, #532]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	08db      	lsrs	r3, r3, #3
 8009530:	f003 0303 	and.w	r3, r3, #3
 8009534:	4a83      	ldr	r2, [pc, #524]	; (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009536:	fa22 f303 	lsr.w	r3, r2, r3
 800953a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009554:	4b7a      	ldr	r3, [pc, #488]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955c:	ee07 3a90 	vmov	s15, r3
 8009560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009564:	ed97 6a03 	vldr	s12, [r7, #12]
 8009568:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800956c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009580:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009584:	e087      	b.n	8009696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009590:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009598:	4b69      	ldr	r3, [pc, #420]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a0:	ee07 3a90 	vmov	s15, r3
 80095a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095c8:	e065      	b.n	8009696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80095d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095dc:	4b58      	ldr	r3, [pc, #352]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	ee07 3a90 	vmov	s15, r3
 80095e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800960c:	e043      	b.n	8009696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800961c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009620:	4b47      	ldr	r3, [pc, #284]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009630:	ed97 6a03 	vldr	s12, [r7, #12]
 8009634:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009650:	e021      	b.n	8009696 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009664:	4b36      	ldr	r3, [pc, #216]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009674:	ed97 6a03 	vldr	s12, [r7, #12]
 8009678:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800967c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009694:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009696:	4b2a      	ldr	r3, [pc, #168]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	0a5b      	lsrs	r3, r3, #9
 800969c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096bc:	ee17 2a90 	vmov	r2, s15
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80096c4:	4b1e      	ldr	r3, [pc, #120]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	0c1b      	lsrs	r3, r3, #16
 80096ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096de:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ea:	ee17 2a90 	vmov	r2, s15
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80096f2:	4b13      	ldr	r3, [pc, #76]	; (8009740 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	0e1b      	lsrs	r3, r3, #24
 80096f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009718:	ee17 2a90 	vmov	r2, s15
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009720:	e008      	b.n	8009734 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	609a      	str	r2, [r3, #8]
}
 8009734:	bf00      	nop
 8009736:	3724      	adds	r7, #36	; 0x24
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	58024400 	.word	0x58024400
 8009744:	03d09000 	.word	0x03d09000
 8009748:	46000000 	.word	0x46000000
 800974c:	4c742400 	.word	0x4c742400
 8009750:	4a742400 	.word	0x4a742400
 8009754:	4bf42400 	.word	0x4bf42400

08009758 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009758:	b480      	push	{r7}
 800975a:	b089      	sub	sp, #36	; 0x24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009760:	4b9d      	ldr	r3, [pc, #628]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f003 0303 	and.w	r3, r3, #3
 8009768:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800976a:	4b9b      	ldr	r3, [pc, #620]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	091b      	lsrs	r3, r3, #4
 8009770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009774:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009776:	4b98      	ldr	r3, [pc, #608]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009780:	4b95      	ldr	r3, [pc, #596]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009784:	08db      	lsrs	r3, r3, #3
 8009786:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	fb02 f303 	mul.w	r3, r2, r3
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009798:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 810a 	beq.w	80099b8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d05a      	beq.n	8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d302      	bcc.n	80097b4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d078      	beq.n	80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80097b2:	e099      	b.n	80098e8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b4:	4b88      	ldr	r3, [pc, #544]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d02d      	beq.n	800981c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097c0:	4b85      	ldr	r3, [pc, #532]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	08db      	lsrs	r3, r3, #3
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	4a84      	ldr	r2, [pc, #528]	; (80099dc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
 80097d0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ea:	4b7b      	ldr	r3, [pc, #492]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800981a:	e087      	b.n	800992c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800982a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982e:	4b6a      	ldr	r3, [pc, #424]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800984a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800985e:	e065      	b.n	800992c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800986e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009872:	4b59      	ldr	r3, [pc, #356]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009882:	ed97 6a03 	vldr	s12, [r7, #12]
 8009886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800988a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098a2:	e043      	b.n	800992c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b6:	4b48      	ldr	r3, [pc, #288]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80098ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e6:	e021      	b.n	800992c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80098f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fa:	4b37      	ldr	r3, [pc, #220]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990a:	ed97 6a03 	vldr	s12, [r7, #12]
 800990e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099e0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800992c:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	0a5b      	lsrs	r3, r3, #9
 8009932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009946:	edd7 6a07 	vldr	s13, [r7, #28]
 800994a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009952:	ee17 2a90 	vmov	r2, s15
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800995a:	4b1f      	ldr	r3, [pc, #124]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009974:	edd7 6a07 	vldr	s13, [r7, #28]
 8009978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009980:	ee17 2a90 	vmov	r2, s15
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009988:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	0e1b      	lsrs	r3, r3, #24
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ae:	ee17 2a90 	vmov	r2, s15
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099b6:	e008      	b.n	80099ca <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	609a      	str	r2, [r3, #8]
}
 80099ca:	bf00      	nop
 80099cc:	3724      	adds	r7, #36	; 0x24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
 80099dc:	03d09000 	.word	0x03d09000
 80099e0:	46000000 	.word	0x46000000
 80099e4:	4c742400 	.word	0x4c742400
 80099e8:	4a742400 	.word	0x4a742400
 80099ec:	4bf42400 	.word	0x4bf42400

080099f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099fe:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d101      	bne.n	8009a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e099      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a0e:	4b4f      	ldr	r3, [pc, #316]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a4e      	ldr	r2, [pc, #312]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a1a:	f7f9 f9b1 	bl	8002d80 <HAL_GetTick>
 8009a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a20:	e008      	b.n	8009a34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a22:	f7f9 f9ad 	bl	8002d80 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d901      	bls.n	8009a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e086      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a34:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f0      	bne.n	8009a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a40:	4b42      	ldr	r3, [pc, #264]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	031b      	lsls	r3, r3, #12
 8009a4e:	493f      	ldr	r1, [pc, #252]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	628b      	str	r3, [r1, #40]	; 0x28
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	025b      	lsls	r3, r3, #9
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	061b      	lsls	r3, r3, #24
 8009a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a84:	4931      	ldr	r1, [pc, #196]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a8a:	4b30      	ldr	r3, [pc, #192]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	492d      	ldr	r1, [pc, #180]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a9c:	4b2b      	ldr	r3, [pc, #172]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f023 0220 	bic.w	r2, r3, #32
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	4928      	ldr	r1, [pc, #160]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009aae:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	f023 0310 	bic.w	r3, r3, #16
 8009ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <RCCEx_PLL2_Config+0x160>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	69d2      	ldr	r2, [r2, #28]
 8009ac6:	00d2      	lsls	r2, r2, #3
 8009ac8:	4920      	ldr	r1, [pc, #128]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ace:	4b1f      	ldr	r3, [pc, #124]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	f043 0310 	orr.w	r3, r3, #16
 8009ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aec:	e00f      	b.n	8009b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d106      	bne.n	8009b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009af4:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b00:	e005      	b.n	8009b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4a11      	ldr	r2, [pc, #68]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a0e      	ldr	r2, [pc, #56]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b1a:	f7f9 f931 	bl	8002d80 <HAL_GetTick>
 8009b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b22:	f7f9 f92d 	bl	8002d80 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e006      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	58024400 	.word	0x58024400
 8009b50:	ffff0007 	.word	0xffff0007

08009b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b62:	4b53      	ldr	r3, [pc, #332]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d101      	bne.n	8009b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e099      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b72:	4b4f      	ldr	r3, [pc, #316]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a4e      	ldr	r2, [pc, #312]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7e:	f7f9 f8ff 	bl	8002d80 <HAL_GetTick>
 8009b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b86:	f7f9 f8fb 	bl	8002d80 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e086      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b98:	4b45      	ldr	r3, [pc, #276]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f0      	bne.n	8009b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ba4:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	051b      	lsls	r3, r3, #20
 8009bb2:	493f      	ldr	r1, [pc, #252]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	025b      	lsls	r3, r3, #9
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009be8:	4931      	ldr	r1, [pc, #196]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bee:	4b30      	ldr	r3, [pc, #192]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	492d      	ldr	r1, [pc, #180]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c00:	4b2b      	ldr	r3, [pc, #172]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	4928      	ldr	r1, [pc, #160]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c12:	4b27      	ldr	r3, [pc, #156]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4a26      	ldr	r2, [pc, #152]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c1e:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c22:	4b24      	ldr	r3, [pc, #144]	; (8009cb4 <RCCEx_PLL3_Config+0x160>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	69d2      	ldr	r2, [r2, #28]
 8009c2a:	00d2      	lsls	r2, r2, #3
 8009c2c:	4920      	ldr	r1, [pc, #128]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c32:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c50:	e00f      	b.n	8009c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d106      	bne.n	8009c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4a14      	ldr	r2, [pc, #80]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c64:	e005      	b.n	8009c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	4a11      	ldr	r2, [pc, #68]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a0e      	ldr	r2, [pc, #56]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c7e:	f7f9 f87f 	bl	8002d80 <HAL_GetTick>
 8009c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c84:	e008      	b.n	8009c98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c86:	f7f9 f87b 	bl	8002d80 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d901      	bls.n	8009c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e006      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0f0      	beq.n	8009c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	ffff0007 	.word	0xffff0007

08009cb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d067      	beq.n	8009d9a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f8 faee 	bl	80022c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	22ca      	movs	r2, #202	; 0xca
 8009cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2253      	movs	r2, #83	; 0x53
 8009cfa:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f879 	bl	8009df4 <RTC_EnterInitMode>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d13b      	bne.n	8009d84 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6899      	ldr	r1, [r3, #8]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b23      	ldr	r3, [pc, #140]	; (8009da4 <HAL_RTC_Init+0xec>)
 8009d18:	400b      	ands	r3, r1
 8009d1a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6899      	ldr	r1, [r3, #8]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	431a      	orrs	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	0419      	lsls	r1, r3, #16
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f881 	bl	8009e54 <RTC_ExitInitMode>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d113      	bne.n	8009d84 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f022 0203 	bic.w	r2, r2, #3
 8009d6a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	69da      	ldr	r2, [r3, #28]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	22ff      	movs	r2, #255	; 0xff
 8009d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	ff8fffbf 	.word	0xff8fffbf

08009da8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009dbe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009dc0:	f7f8 ffde 	bl	8002d80 <HAL_GetTick>
 8009dc4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dc6:	e009      	b.n	8009ddc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dc8:	f7f8 ffda 	bl	8002d80 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dd6:	d901      	bls.n	8009ddc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e007      	b.n	8009dec <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0ee      	beq.n	8009dc8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d11d      	bne.n	8009e4a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f04f 32ff 	mov.w	r2, #4294967295
 8009e16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e18:	f7f8 ffb2 	bl	8002d80 <HAL_GetTick>
 8009e1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e1e:	e00d      	b.n	8009e3c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e20:	f7f8 ffae 	bl	8002d80 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e2e:	d905      	bls.n	8009e3c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2203      	movs	r2, #3
 8009e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0ea      	beq.n	8009e20 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009e60:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	4a19      	ldr	r2, [pc, #100]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f003 0320 	and.w	r3, r3, #32
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10c      	bne.n	8009e92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ff95 	bl	8009da8 <HAL_RTC_WaitForSynchro>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01e      	beq.n	8009ec2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2203      	movs	r2, #3
 8009e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	73fb      	strb	r3, [r7, #15]
 8009e90:	e017      	b.n	8009ec2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e92:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	4a0d      	ldr	r2, [pc, #52]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009e98:	f023 0320 	bic.w	r3, r3, #32
 8009e9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff ff82 	bl	8009da8 <HAL_RTC_WaitForSynchro>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d005      	beq.n	8009eb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2203      	movs	r2, #3
 8009eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	4a04      	ldr	r2, [pc, #16]	; (8009ecc <RTC_ExitInitMode+0x78>)
 8009ebc:	f043 0320 	orr.w	r3, r3, #32
 8009ec0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	58004000 	.word	0x58004000

08009ed0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e0e2      	b.n	800a0ac <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a70      	ldr	r2, [pc, #448]	; (800a0b4 <HAL_SPI_Init+0x1e4>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00f      	beq.n	8009f16 <HAL_SPI_Init+0x46>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a6f      	ldr	r2, [pc, #444]	; (800a0b8 <HAL_SPI_Init+0x1e8>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00a      	beq.n	8009f16 <HAL_SPI_Init+0x46>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a6d      	ldr	r2, [pc, #436]	; (800a0bc <HAL_SPI_Init+0x1ec>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d005      	beq.n	8009f16 <HAL_SPI_Init+0x46>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	2b0f      	cmp	r3, #15
 8009f10:	d901      	bls.n	8009f16 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e0ca      	b.n	800a0ac <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fb96 	bl	800a648 <SPI_GetPacketSize>
 8009f1c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a64      	ldr	r2, [pc, #400]	; (800a0b4 <HAL_SPI_Init+0x1e4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00c      	beq.n	8009f42 <HAL_SPI_Init+0x72>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a62      	ldr	r2, [pc, #392]	; (800a0b8 <HAL_SPI_Init+0x1e8>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d007      	beq.n	8009f42 <HAL_SPI_Init+0x72>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a61      	ldr	r2, [pc, #388]	; (800a0bc <HAL_SPI_Init+0x1ec>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d002      	beq.n	8009f42 <HAL_SPI_Init+0x72>
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d811      	bhi.n	8009f66 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f46:	4a5b      	ldr	r2, [pc, #364]	; (800a0b4 <HAL_SPI_Init+0x1e4>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d009      	beq.n	8009f60 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a59      	ldr	r2, [pc, #356]	; (800a0b8 <HAL_SPI_Init+0x1e8>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d004      	beq.n	8009f60 <HAL_SPI_Init+0x90>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a58      	ldr	r2, [pc, #352]	; (800a0bc <HAL_SPI_Init+0x1ec>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d104      	bne.n	8009f6a <HAL_SPI_Init+0x9a>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d901      	bls.n	8009f6a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e0a0      	b.n	800a0ac <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7f8 f9b8 	bl	80022f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fa4:	d110      	bne.n	8009fc8 <HAL_SPI_Init+0xf8>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fae:	d10b      	bne.n	8009fc8 <HAL_SPI_Init+0xf8>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fc6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fda:	ea42 0103 	orr.w	r1, r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	431a      	orrs	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a028:	ea42 0103 	orr.w	r1, r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d113      	bne.n	800a068 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a052:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a066:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00a      	beq.n	800a09a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	40013000 	.word	0x40013000
 800a0b8:	40003800 	.word	0x40003800
 800a0bc:	40003c00 	.word	0x40003c00

0800a0c0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08a      	sub	sp, #40	; 0x28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a0d8:	6a3a      	ldr	r2, [r7, #32]
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	4013      	ands	r3, r2
 800a0de:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a0f2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3330      	adds	r3, #48	; 0x30
 800a0fa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b00      	cmp	r3, #0
 800a104:	d113      	bne.n	800a12e <HAL_SPI_IRQHandler+0x6e>
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f003 0320 	and.w	r3, r3, #32
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10e      	bne.n	800a12e <HAL_SPI_IRQHandler+0x6e>
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
    handled = 1UL;
 800a12a:	2301      	movs	r3, #1
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10f      	bne.n	800a158 <HAL_SPI_IRQHandler+0x98>
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <HAL_SPI_IRQHandler+0x98>
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d105      	bne.n	800a158 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	4798      	blx	r3
    handled = 1UL;
 800a154:	2301      	movs	r3, #1
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10f      	bne.n	800a182 <HAL_SPI_IRQHandler+0xc2>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <HAL_SPI_IRQHandler+0xc2>
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	4798      	blx	r3
    handled = 1UL;
 800a17e:	2301      	movs	r3, #1
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 8170 	bne.w	800a46a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80a0 	beq.w	800a2d6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f042 0208 	orr.w	r2, r2, #8
 800a1a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	699a      	ldr	r2, [r3, #24]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0210 	orr.w	r2, r2, #16
 800a1b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	699a      	ldr	r2, [r3, #24]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0208 	bic.w	r2, r2, #8
 800a1d4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00f      	beq.n	800a200 <HAL_SPI_IRQHandler+0x140>
 800a1e0:	7cfb      	ldrb	r3, [r7, #19]
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d004      	beq.n	800a1f0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d007      	beq.n	800a200 <HAL_SPI_IRQHandler+0x140>
 800a1f0:	7cfb      	ldrb	r3, [r7, #19]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d059      	beq.n	800a2aa <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d154      	bne.n	800a2aa <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d13d      	bne.n	800a28a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a20e:	e036      	b.n	800a27e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b0f      	cmp	r3, #15
 800a216:	d90b      	bls.n	800a230 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a222:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a228:	1d1a      	adds	r2, r3, #4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	665a      	str	r2, [r3, #100]	; 0x64
 800a22e:	e01d      	b.n	800a26c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	2b07      	cmp	r3, #7
 800a236:	d90b      	bls.n	800a250 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	8812      	ldrh	r2, [r2, #0]
 800a240:	b292      	uxth	r2, r2
 800a242:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a248:	1c9a      	adds	r2, r3, #2
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	665a      	str	r2, [r3, #100]	; 0x64
 800a24e:	e00d      	b.n	800a26c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a25c:	7812      	ldrb	r2, [r2, #0]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a284:	b29b      	uxth	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1c2      	bne.n	800a210 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f93c 	bl	800a508 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f90c 	bl	800a4c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a2a8:	e0e4      	b.n	800a474 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a2aa:	7cfb      	ldrb	r3, [r7, #19]
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	d103      	bne.n	800a2b8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f8fb 	bl	800a4ac <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800a2b6:	e0da      	b.n	800a46e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a2b8:	7cfb      	ldrb	r3, [r7, #19]
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d103      	bne.n	800a2c6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8ea 	bl	800a498 <HAL_SPI_RxCpltCallback>
    return;
 800a2c4:	e0d3      	b.n	800a46e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a2c6:	7cfb      	ldrb	r3, [r7, #19]
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	f040 80d0 	bne.w	800a46e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f8d8 	bl	800a484 <HAL_SPI_TxCpltCallback>
    return;
 800a2d4:	e0cb      	b.n	800a46e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <HAL_SPI_IRQHandler+0x23c>
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f8:	619a      	str	r2, [r3, #24]

    return;
 800a2fa:	e0bb      	b.n	800a474 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 80b6 	beq.w	800a474 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00f      	beq.n	800a332 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a318:	f043 0204 	orr.w	r2, r3, #4
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	699a      	ldr	r2, [r3, #24]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a330:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00f      	beq.n	800a35c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a342:	f043 0201 	orr.w	r2, r3, #1
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	699a      	ldr	r2, [r3, #24]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a35a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00f      	beq.n	800a386 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36c:	f043 0208 	orr.w	r2, r3, #8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	699a      	ldr	r2, [r3, #24]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a384:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00f      	beq.n	800a3b0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a396:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0220 	orr.w	r2, r2, #32
 800a3ae:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d05b      	beq.n	800a472 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f022 0201 	bic.w	r2, r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6919      	ldr	r1, [r3, #16]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <HAL_SPI_IRQHandler+0x3bc>)
 800a3d6:	400b      	ands	r3, r1
 800a3d8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a3e4:	d138      	bne.n	800a458 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a3f4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d013      	beq.n	800a426 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a402:	4a1f      	ldr	r2, [pc, #124]	; (800a480 <HAL_SPI_IRQHandler+0x3c0>)
 800a404:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fa fdaa 	bl	8004f64 <HAL_DMA_Abort_IT>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d007      	beq.n	800a426 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a41c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d021      	beq.n	800a472 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a432:	4a13      	ldr	r2, [pc, #76]	; (800a480 <HAL_SPI_IRQHandler+0x3c0>)
 800a434:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fa fd92 	bl	8004f64 <HAL_DMA_Abort_IT>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d015      	beq.n	800a472 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a456:	e00c      	b.n	800a472 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f82d 	bl	800a4c0 <HAL_SPI_ErrorCallback>
    return;
 800a466:	bf00      	nop
 800a468:	e003      	b.n	800a472 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a46a:	bf00      	nop
 800a46c:	e002      	b.n	800a474 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a46e:	bf00      	nop
 800a470:	e000      	b.n	800a474 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a472:	bf00      	nop
  }
}
 800a474:	3728      	adds	r7, #40	; 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	fffffc94 	.word	0xfffffc94
 800a480:	0800a4d5 	.word	0x0800a4d5

0800a484 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7ff ffe0 	bl	800a4c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699a      	ldr	r2, [r3, #24]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0208 	orr.w	r2, r2, #8
 800a526:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0210 	orr.w	r2, r2, #16
 800a536:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0201 	bic.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6919      	ldr	r1, [r3, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b3c      	ldr	r3, [pc, #240]	; (800a644 <SPI_CloseTransfer+0x13c>)
 800a554:	400b      	ands	r3, r1
 800a556:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a566:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b04      	cmp	r3, #4
 800a572:	d014      	beq.n	800a59e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00f      	beq.n	800a59e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	699a      	ldr	r2, [r3, #24]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f042 0220 	orr.w	r2, r2, #32
 800a59c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d014      	beq.n	800a5d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00f      	beq.n	800a5d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ba:	f043 0204 	orr.w	r2, r3, #4
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00f      	beq.n	800a5fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e4:	f043 0201 	orr.w	r2, r3, #1
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00f      	beq.n	800a628 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a60e:	f043 0208 	orr.w	r2, r3, #8
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a626:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a638:	bf00      	nop
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	fffffc90 	.word	0xfffffc90

0800a648 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	3307      	adds	r3, #7
 800a666:	08db      	lsrs	r3, r3, #3
 800a668:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e049      	b.n	800a724 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7f7 fe97 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f000 fc21 	bl	800af04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d001      	beq.n	800a744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e019      	b.n	800a778 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689a      	ldr	r2, [r3, #8]
 800a752:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <HAL_TIM_Base_Start+0x58>)
 800a754:	4013      	ands	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b06      	cmp	r3, #6
 800a75c:	d00b      	beq.n	800a776 <HAL_TIM_Base_Start+0x4a>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a764:	d007      	beq.n	800a776 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f042 0201 	orr.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	00010007 	.word	0x00010007

0800a788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d001      	beq.n	800a7a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e021      	b.n	800a7e4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0201 	orr.w	r2, r2, #1
 800a7b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <HAL_TIM_Base_Start_IT+0x68>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b06      	cmp	r3, #6
 800a7c8:	d00b      	beq.n	800a7e2 <HAL_TIM_Base_Start_IT+0x5a>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d0:	d007      	beq.n	800a7e2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f042 0201 	orr.w	r2, r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	00010007 	.word	0x00010007

0800a7f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e049      	b.n	800a89a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f841 	bl	800a8a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3304      	adds	r3, #4
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	f000 fb66 	bl	800af04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d122      	bne.n	800a912 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d11b      	bne.n	800a912 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f06f 0202 	mvn.w	r2, #2
 800a8e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fae5 	bl	800aec8 <HAL_TIM_IC_CaptureCallback>
 800a8fe:	e005      	b.n	800a90c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fad7 	bl	800aeb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fae8 	bl	800aedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d122      	bne.n	800a966 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f003 0304 	and.w	r3, r3, #4
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d11b      	bne.n	800a966 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f06f 0204 	mvn.w	r2, #4
 800a936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fabb 	bl	800aec8 <HAL_TIM_IC_CaptureCallback>
 800a952:	e005      	b.n	800a960 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 faad 	bl	800aeb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fabe 	bl	800aedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b08      	cmp	r3, #8
 800a972:	d122      	bne.n	800a9ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b08      	cmp	r3, #8
 800a980:	d11b      	bne.n	800a9ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f06f 0208 	mvn.w	r2, #8
 800a98a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2204      	movs	r2, #4
 800a990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f003 0303 	and.w	r3, r3, #3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fa91 	bl	800aec8 <HAL_TIM_IC_CaptureCallback>
 800a9a6:	e005      	b.n	800a9b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fa83 	bl	800aeb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fa94 	bl	800aedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b10      	cmp	r3, #16
 800a9c6:	d122      	bne.n	800aa0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d11b      	bne.n	800aa0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f06f 0210 	mvn.w	r2, #16
 800a9de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2208      	movs	r2, #8
 800a9e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa67 	bl	800aec8 <HAL_TIM_IC_CaptureCallback>
 800a9fa:	e005      	b.n	800aa08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa59 	bl	800aeb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa6a 	bl	800aedc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d10e      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d107      	bne.n	800aa3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f06f 0201 	mvn.w	r2, #1
 800aa32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7f7 fba3 	bl	8002180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa44:	2b80      	cmp	r3, #128	; 0x80
 800aa46:	d10e      	bne.n	800aa66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d107      	bne.n	800aa66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fee7 	bl	800b834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa74:	d10e      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa80:	2b80      	cmp	r3, #128	; 0x80
 800aa82:	d107      	bne.n	800aa94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 feda 	bl	800b848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d10e      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaac:	2b40      	cmp	r3, #64	; 0x40
 800aaae:	d107      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fa18 	bl	800aef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d10e      	bne.n	800aaec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0320 	and.w	r3, r3, #32
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d107      	bne.n	800aaec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0220 	mvn.w	r2, #32
 800aae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fe9a 	bl	800b820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e0fd      	b.n	800ad0a <HAL_TIM_PWM_ConfigChannel+0x216>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b14      	cmp	r3, #20
 800ab1a:	f200 80f0 	bhi.w	800acfe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab79 	.word	0x0800ab79
 800ab28:	0800acff 	.word	0x0800acff
 800ab2c:	0800acff 	.word	0x0800acff
 800ab30:	0800acff 	.word	0x0800acff
 800ab34:	0800abb9 	.word	0x0800abb9
 800ab38:	0800acff 	.word	0x0800acff
 800ab3c:	0800acff 	.word	0x0800acff
 800ab40:	0800acff 	.word	0x0800acff
 800ab44:	0800abfb 	.word	0x0800abfb
 800ab48:	0800acff 	.word	0x0800acff
 800ab4c:	0800acff 	.word	0x0800acff
 800ab50:	0800acff 	.word	0x0800acff
 800ab54:	0800ac3b 	.word	0x0800ac3b
 800ab58:	0800acff 	.word	0x0800acff
 800ab5c:	0800acff 	.word	0x0800acff
 800ab60:	0800acff 	.word	0x0800acff
 800ab64:	0800ac7d 	.word	0x0800ac7d
 800ab68:	0800acff 	.word	0x0800acff
 800ab6c:	0800acff 	.word	0x0800acff
 800ab70:	0800acff 	.word	0x0800acff
 800ab74:	0800acbd 	.word	0x0800acbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fa5a 	bl	800b038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0208 	orr.w	r2, r2, #8
 800ab92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	699a      	ldr	r2, [r3, #24]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0204 	bic.w	r2, r2, #4
 800aba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6999      	ldr	r1, [r3, #24]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	619a      	str	r2, [r3, #24]
      break;
 800abb6:	e0a3      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68b9      	ldr	r1, [r7, #8]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 faca 	bl	800b158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6999      	ldr	r1, [r3, #24]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	021a      	lsls	r2, r3, #8
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	619a      	str	r2, [r3, #24]
      break;
 800abf8:	e082      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fb33 	bl	800b26c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f042 0208 	orr.w	r2, r2, #8
 800ac14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69da      	ldr	r2, [r3, #28]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 0204 	bic.w	r2, r2, #4
 800ac24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69d9      	ldr	r1, [r3, #28]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	691a      	ldr	r2, [r3, #16]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	430a      	orrs	r2, r1
 800ac36:	61da      	str	r2, [r3, #28]
      break;
 800ac38:	e062      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 fb99 	bl	800b378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	69da      	ldr	r2, [r3, #28]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	69da      	ldr	r2, [r3, #28]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69d9      	ldr	r1, [r3, #28]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	021a      	lsls	r2, r3, #8
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	61da      	str	r2, [r3, #28]
      break;
 800ac7a:	e041      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68b9      	ldr	r1, [r7, #8]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fbe0 	bl	800b448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0208 	orr.w	r2, r2, #8
 800ac96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f022 0204 	bic.w	r2, r2, #4
 800aca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acba:	e021      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fc22 	bl	800b50c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ace6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	021a      	lsls	r2, r3, #8
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acfc:	e000      	b.n	800ad00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800acfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop

0800ad14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d101      	bne.n	800ad2c <HAL_TIM_ConfigClockSource+0x18>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	e0b7      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x188>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4b57      	ldr	r3, [pc, #348]	; (800aea4 <HAL_TIM_ConfigClockSource+0x190>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b70      	cmp	r3, #112	; 0x70
 800ad62:	d02e      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0xae>
 800ad64:	2b70      	cmp	r3, #112	; 0x70
 800ad66:	d812      	bhi.n	800ad8e <HAL_TIM_ConfigClockSource+0x7a>
 800ad68:	2b30      	cmp	r3, #48	; 0x30
 800ad6a:	f000 8084 	beq.w	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800ad6e:	2b30      	cmp	r3, #48	; 0x30
 800ad70:	d806      	bhi.n	800ad80 <HAL_TIM_ConfigClockSource+0x6c>
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d07f      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	d07d      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d07b      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ad7e:	e084      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800ad80:	2b50      	cmp	r3, #80	; 0x50
 800ad82:	d048      	beq.n	800ae16 <HAL_TIM_ConfigClockSource+0x102>
 800ad84:	2b60      	cmp	r3, #96	; 0x60
 800ad86:	d056      	beq.n	800ae36 <HAL_TIM_ConfigClockSource+0x122>
 800ad88:	2b40      	cmp	r3, #64	; 0x40
 800ad8a:	d064      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800ad8c:	e07d      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800ad8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad92:	d070      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800ad94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad98:	d809      	bhi.n	800adae <HAL_TIM_ConfigClockSource+0x9a>
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9e:	d027      	beq.n	800adf0 <HAL_TIM_ConfigClockSource+0xdc>
 800ada0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ada4:	d067      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800ada6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adaa:	d06d      	beq.n	800ae88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800adac:	e06d      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800adae:	4a3e      	ldr	r2, [pc, #248]	; (800aea8 <HAL_TIM_ConfigClockSource+0x194>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d060      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800adb4:	4a3d      	ldr	r2, [pc, #244]	; (800aeac <HAL_TIM_ConfigClockSource+0x198>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d05d      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
 800adba:	4a3d      	ldr	r2, [pc, #244]	; (800aeb0 <HAL_TIM_ConfigClockSource+0x19c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d05a      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800adc0:	e063      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6899      	ldr	r1, [r3, #8]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f000 fc7d 	bl	800b6d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ade4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	609a      	str	r2, [r3, #8]
      break;
 800adee:	e04c      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6818      	ldr	r0, [r3, #0]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	6899      	ldr	r1, [r3, #8]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f000 fc66 	bl	800b6d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae12:	609a      	str	r2, [r3, #8]
      break;
 800ae14:	e039      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	6859      	ldr	r1, [r3, #4]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f000 fbd6 	bl	800b5d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2150      	movs	r1, #80	; 0x50
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fc30 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae34:	e029      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6859      	ldr	r1, [r3, #4]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f000 fbf5 	bl	800b632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2160      	movs	r1, #96	; 0x60
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fc20 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae54:	e019      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	6859      	ldr	r1, [r3, #4]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f000 fbb6 	bl	800b5d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2140      	movs	r1, #64	; 0x40
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 fc10 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae74:	e009      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f000 fc07 	bl	800b694 <TIM_ITRx_SetConfig>
      break;
 800ae86:	e000      	b.n	800ae8a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ae88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	ffceff88 	.word	0xffceff88
 800aea8:	00100030 	.word	0x00100030
 800aeac:	00100040 	.word	0x00100040
 800aeb0:	00100020 	.word	0x00100020

0800aeb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a40      	ldr	r2, [pc, #256]	; (800b018 <TIM_Base_SetConfig+0x114>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d013      	beq.n	800af44 <TIM_Base_SetConfig+0x40>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af22:	d00f      	beq.n	800af44 <TIM_Base_SetConfig+0x40>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a3d      	ldr	r2, [pc, #244]	; (800b01c <TIM_Base_SetConfig+0x118>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00b      	beq.n	800af44 <TIM_Base_SetConfig+0x40>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a3c      	ldr	r2, [pc, #240]	; (800b020 <TIM_Base_SetConfig+0x11c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d007      	beq.n	800af44 <TIM_Base_SetConfig+0x40>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a3b      	ldr	r2, [pc, #236]	; (800b024 <TIM_Base_SetConfig+0x120>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d003      	beq.n	800af44 <TIM_Base_SetConfig+0x40>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a3a      	ldr	r2, [pc, #232]	; (800b028 <TIM_Base_SetConfig+0x124>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d108      	bne.n	800af56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a2f      	ldr	r2, [pc, #188]	; (800b018 <TIM_Base_SetConfig+0x114>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d01f      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af64:	d01b      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a2c      	ldr	r2, [pc, #176]	; (800b01c <TIM_Base_SetConfig+0x118>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d017      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a2b      	ldr	r2, [pc, #172]	; (800b020 <TIM_Base_SetConfig+0x11c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d013      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a2a      	ldr	r2, [pc, #168]	; (800b024 <TIM_Base_SetConfig+0x120>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00f      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a29      	ldr	r2, [pc, #164]	; (800b028 <TIM_Base_SetConfig+0x124>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00b      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a28      	ldr	r2, [pc, #160]	; (800b02c <TIM_Base_SetConfig+0x128>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a27      	ldr	r2, [pc, #156]	; (800b030 <TIM_Base_SetConfig+0x12c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d003      	beq.n	800af9e <TIM_Base_SetConfig+0x9a>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a26      	ldr	r2, [pc, #152]	; (800b034 <TIM_Base_SetConfig+0x130>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d108      	bne.n	800afb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a10      	ldr	r2, [pc, #64]	; (800b018 <TIM_Base_SetConfig+0x114>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d00f      	beq.n	800affc <TIM_Base_SetConfig+0xf8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a12      	ldr	r2, [pc, #72]	; (800b028 <TIM_Base_SetConfig+0x124>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d00b      	beq.n	800affc <TIM_Base_SetConfig+0xf8>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a11      	ldr	r2, [pc, #68]	; (800b02c <TIM_Base_SetConfig+0x128>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d007      	beq.n	800affc <TIM_Base_SetConfig+0xf8>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a10      	ldr	r2, [pc, #64]	; (800b030 <TIM_Base_SetConfig+0x12c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d003      	beq.n	800affc <TIM_Base_SetConfig+0xf8>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a0f      	ldr	r2, [pc, #60]	; (800b034 <TIM_Base_SetConfig+0x130>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d103      	bne.n	800b004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	615a      	str	r2, [r3, #20]
}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	40010000 	.word	0x40010000
 800b01c:	40000400 	.word	0x40000400
 800b020:	40000800 	.word	0x40000800
 800b024:	40000c00 	.word	0x40000c00
 800b028:	40010400 	.word	0x40010400
 800b02c:	40014000 	.word	0x40014000
 800b030:	40014400 	.word	0x40014400
 800b034:	40014800 	.word	0x40014800

0800b038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f023 0201 	bic.w	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	4b37      	ldr	r3, [pc, #220]	; (800b140 <TIM_OC1_SetConfig+0x108>)
 800b064:	4013      	ands	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f023 0302 	bic.w	r3, r3, #2
 800b080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4313      	orrs	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a2d      	ldr	r2, [pc, #180]	; (800b144 <TIM_OC1_SetConfig+0x10c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00f      	beq.n	800b0b4 <TIM_OC1_SetConfig+0x7c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a2c      	ldr	r2, [pc, #176]	; (800b148 <TIM_OC1_SetConfig+0x110>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d00b      	beq.n	800b0b4 <TIM_OC1_SetConfig+0x7c>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a2b      	ldr	r2, [pc, #172]	; (800b14c <TIM_OC1_SetConfig+0x114>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d007      	beq.n	800b0b4 <TIM_OC1_SetConfig+0x7c>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	; (800b150 <TIM_OC1_SetConfig+0x118>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d003      	beq.n	800b0b4 <TIM_OC1_SetConfig+0x7c>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a29      	ldr	r2, [pc, #164]	; (800b154 <TIM_OC1_SetConfig+0x11c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d10c      	bne.n	800b0ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f023 0308 	bic.w	r3, r3, #8
 800b0ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f023 0304 	bic.w	r3, r3, #4
 800b0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1c      	ldr	r2, [pc, #112]	; (800b144 <TIM_OC1_SetConfig+0x10c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d00f      	beq.n	800b0f6 <TIM_OC1_SetConfig+0xbe>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a1b      	ldr	r2, [pc, #108]	; (800b148 <TIM_OC1_SetConfig+0x110>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d00b      	beq.n	800b0f6 <TIM_OC1_SetConfig+0xbe>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a1a      	ldr	r2, [pc, #104]	; (800b14c <TIM_OC1_SetConfig+0x114>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d007      	beq.n	800b0f6 <TIM_OC1_SetConfig+0xbe>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a19      	ldr	r2, [pc, #100]	; (800b150 <TIM_OC1_SetConfig+0x118>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d003      	beq.n	800b0f6 <TIM_OC1_SetConfig+0xbe>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a18      	ldr	r2, [pc, #96]	; (800b154 <TIM_OC1_SetConfig+0x11c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d111      	bne.n	800b11a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	621a      	str	r2, [r3, #32]
}
 800b134:	bf00      	nop
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	fffeff8f 	.word	0xfffeff8f
 800b144:	40010000 	.word	0x40010000
 800b148:	40010400 	.word	0x40010400
 800b14c:	40014000 	.word	0x40014000
 800b150:	40014400 	.word	0x40014400
 800b154:	40014800 	.word	0x40014800

0800b158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	f023 0210 	bic.w	r2, r3, #16
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4b34      	ldr	r3, [pc, #208]	; (800b254 <TIM_OC2_SetConfig+0xfc>)
 800b184:	4013      	ands	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f023 0320 	bic.w	r3, r3, #32
 800b1a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	011b      	lsls	r3, r3, #4
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a29      	ldr	r2, [pc, #164]	; (800b258 <TIM_OC2_SetConfig+0x100>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d003      	beq.n	800b1c0 <TIM_OC2_SetConfig+0x68>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a28      	ldr	r2, [pc, #160]	; (800b25c <TIM_OC2_SetConfig+0x104>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d10d      	bne.n	800b1dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a1e      	ldr	r2, [pc, #120]	; (800b258 <TIM_OC2_SetConfig+0x100>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00f      	beq.n	800b204 <TIM_OC2_SetConfig+0xac>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a1d      	ldr	r2, [pc, #116]	; (800b25c <TIM_OC2_SetConfig+0x104>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d00b      	beq.n	800b204 <TIM_OC2_SetConfig+0xac>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a1c      	ldr	r2, [pc, #112]	; (800b260 <TIM_OC2_SetConfig+0x108>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d007      	beq.n	800b204 <TIM_OC2_SetConfig+0xac>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a1b      	ldr	r2, [pc, #108]	; (800b264 <TIM_OC2_SetConfig+0x10c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d003      	beq.n	800b204 <TIM_OC2_SetConfig+0xac>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a1a      	ldr	r2, [pc, #104]	; (800b268 <TIM_OC2_SetConfig+0x110>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d113      	bne.n	800b22c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b20a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	621a      	str	r2, [r3, #32]
}
 800b246:	bf00      	nop
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	feff8fff 	.word	0xfeff8fff
 800b258:	40010000 	.word	0x40010000
 800b25c:	40010400 	.word	0x40010400
 800b260:	40014000 	.word	0x40014000
 800b264:	40014400 	.word	0x40014400
 800b268:	40014800 	.word	0x40014800

0800b26c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	021b      	lsls	r3, r3, #8
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a27      	ldr	r2, [pc, #156]	; (800b364 <TIM_OC3_SetConfig+0xf8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d003      	beq.n	800b2d2 <TIM_OC3_SetConfig+0x66>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a26      	ldr	r2, [pc, #152]	; (800b368 <TIM_OC3_SetConfig+0xfc>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d10d      	bne.n	800b2ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	021b      	lsls	r3, r3, #8
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a1c      	ldr	r2, [pc, #112]	; (800b364 <TIM_OC3_SetConfig+0xf8>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00f      	beq.n	800b316 <TIM_OC3_SetConfig+0xaa>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <TIM_OC3_SetConfig+0xfc>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00b      	beq.n	800b316 <TIM_OC3_SetConfig+0xaa>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a1a      	ldr	r2, [pc, #104]	; (800b36c <TIM_OC3_SetConfig+0x100>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d007      	beq.n	800b316 <TIM_OC3_SetConfig+0xaa>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a19      	ldr	r2, [pc, #100]	; (800b370 <TIM_OC3_SetConfig+0x104>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d003      	beq.n	800b316 <TIM_OC3_SetConfig+0xaa>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a18      	ldr	r2, [pc, #96]	; (800b374 <TIM_OC3_SetConfig+0x108>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d113      	bne.n	800b33e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	621a      	str	r2, [r3, #32]
}
 800b358:	bf00      	nop
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	40010000 	.word	0x40010000
 800b368:	40010400 	.word	0x40010400
 800b36c:	40014000 	.word	0x40014000
 800b370:	40014400 	.word	0x40014400
 800b374:	40014800 	.word	0x40014800

0800b378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b378:	b480      	push	{r7}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	031b      	lsls	r3, r3, #12
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a18      	ldr	r2, [pc, #96]	; (800b434 <TIM_OC4_SetConfig+0xbc>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00f      	beq.n	800b3f8 <TIM_OC4_SetConfig+0x80>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a17      	ldr	r2, [pc, #92]	; (800b438 <TIM_OC4_SetConfig+0xc0>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00b      	beq.n	800b3f8 <TIM_OC4_SetConfig+0x80>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a16      	ldr	r2, [pc, #88]	; (800b43c <TIM_OC4_SetConfig+0xc4>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d007      	beq.n	800b3f8 <TIM_OC4_SetConfig+0x80>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a15      	ldr	r2, [pc, #84]	; (800b440 <TIM_OC4_SetConfig+0xc8>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d003      	beq.n	800b3f8 <TIM_OC4_SetConfig+0x80>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a14      	ldr	r2, [pc, #80]	; (800b444 <TIM_OC4_SetConfig+0xcc>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d109      	bne.n	800b40c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	019b      	lsls	r3, r3, #6
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	621a      	str	r2, [r3, #32]
}
 800b426:	bf00      	nop
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40010000 	.word	0x40010000
 800b438:	40010400 	.word	0x40010400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800

0800b448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	041b      	lsls	r3, r3, #16
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <TIM_OC5_SetConfig+0xb0>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00f      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <TIM_OC5_SetConfig+0xb4>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00b      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a15      	ldr	r2, [pc, #84]	; (800b500 <TIM_OC5_SetConfig+0xb8>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d007      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a14      	ldr	r2, [pc, #80]	; (800b504 <TIM_OC5_SetConfig+0xbc>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d003      	beq.n	800b4be <TIM_OC5_SetConfig+0x76>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a13      	ldr	r2, [pc, #76]	; (800b508 <TIM_OC5_SetConfig+0xc0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d109      	bne.n	800b4d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	621a      	str	r2, [r3, #32]
}
 800b4ec:	bf00      	nop
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40014000 	.word	0x40014000
 800b504:	40014400 	.word	0x40014400
 800b508:	40014800 	.word	0x40014800

0800b50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b54e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	051b      	lsls	r3, r3, #20
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	4313      	orrs	r3, r2
 800b55a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a18      	ldr	r2, [pc, #96]	; (800b5c0 <TIM_OC6_SetConfig+0xb4>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d00f      	beq.n	800b584 <TIM_OC6_SetConfig+0x78>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a17      	ldr	r2, [pc, #92]	; (800b5c4 <TIM_OC6_SetConfig+0xb8>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00b      	beq.n	800b584 <TIM_OC6_SetConfig+0x78>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a16      	ldr	r2, [pc, #88]	; (800b5c8 <TIM_OC6_SetConfig+0xbc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d007      	beq.n	800b584 <TIM_OC6_SetConfig+0x78>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <TIM_OC6_SetConfig+0xc0>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_OC6_SetConfig+0x78>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a14      	ldr	r2, [pc, #80]	; (800b5d0 <TIM_OC6_SetConfig+0xc4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d109      	bne.n	800b598 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b58a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	029b      	lsls	r3, r3, #10
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	621a      	str	r2, [r3, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	f023 0201 	bic.w	r2, r3, #1
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	4313      	orrs	r3, r2
 800b608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f023 030a 	bic.w	r3, r3, #10
 800b610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b632:	b480      	push	{r7}
 800b634:	b087      	sub	sp, #28
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	f023 0210 	bic.w	r2, r3, #16
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b65c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	031b      	lsls	r3, r3, #12
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	621a      	str	r2, [r3, #32]
}
 800b686:	bf00      	nop
 800b688:	371c      	adds	r7, #28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <TIM_ITRx_SetConfig+0x38>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f043 0307 	orr.w	r3, r3, #7
 800b6b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	609a      	str	r2, [r3, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	ffcfff8f 	.word	0xffcfff8f

0800b6d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	021a      	lsls	r2, r3, #8
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	609a      	str	r2, [r3, #8]
}
 800b704:	bf00      	nop
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b720:	2b01      	cmp	r3, #1
 800b722:	d101      	bne.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b724:	2302      	movs	r3, #2
 800b726:	e068      	b.n	800b7fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a2e      	ldr	r2, [pc, #184]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d004      	beq.n	800b75c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a2d      	ldr	r2, [pc, #180]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d108      	bne.n	800b76e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a1e      	ldr	r2, [pc, #120]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d01d      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b79a:	d018      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a1b      	ldr	r2, [pc, #108]	; (800b810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d013      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a1a      	ldr	r2, [pc, #104]	; (800b814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00e      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a18      	ldr	r2, [pc, #96]	; (800b818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d009      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a13      	ldr	r2, [pc, #76]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d004      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a14      	ldr	r2, [pc, #80]	; (800b81c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d10c      	bne.n	800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	40010000 	.word	0x40010000
 800b80c:	40010400 	.word	0x40010400
 800b810:	40000400 	.word	0x40000400
 800b814:	40000800 	.word	0x40000800
 800b818:	40000c00 	.word	0x40000c00
 800b81c:	40001800 	.word	0x40001800

0800b820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e042      	b.n	800b8f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f6 fe5b 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2224      	movs	r2, #36	; 0x24
 800b88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f022 0201 	bic.w	r2, r2, #1
 800b89c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fad2 	bl	800be48 <UART_SetConfig>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d101      	bne.n	800b8ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e022      	b.n	800b8f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f001 f876 	bl	800c9a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0201 	orr.w	r2, r2, #1
 800b8ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f001 f8fd 	bl	800caec <UART_CheckIdleState>
 800b8f2:	4603      	mov	r3, r0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	4613      	mov	r3, r2
 800b908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b910:	2b20      	cmp	r3, #32
 800b912:	d168      	bne.n	800b9e6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <HAL_UART_Transmit_DMA+0x24>
 800b91a:	88fb      	ldrh	r3, [r7, #6]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e061      	b.n	800b9e8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d101      	bne.n	800b932 <HAL_UART_Transmit_DMA+0x36>
 800b92e:	2302      	movs	r3, #2
 800b930:	e05a      	b.n	800b9e8 <HAL_UART_Transmit_DMA+0xec>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	88fa      	ldrh	r2, [r7, #6]
 800b944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	88fa      	ldrh	r2, [r7, #6]
 800b94c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2221      	movs	r2, #33	; 0x21
 800b95c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b964:	2b00      	cmp	r3, #0
 800b966:	d02c      	beq.n	800b9c2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b96c:	4a20      	ldr	r2, [pc, #128]	; (800b9f0 <HAL_UART_Transmit_DMA+0xf4>)
 800b96e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b974:	4a1f      	ldr	r2, [pc, #124]	; (800b9f4 <HAL_UART_Transmit_DMA+0xf8>)
 800b976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b97c:	4a1e      	ldr	r2, [pc, #120]	; (800b9f8 <HAL_UART_Transmit_DMA+0xfc>)
 800b97e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b984:	2200      	movs	r2, #0
 800b986:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b990:	4619      	mov	r1, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3328      	adds	r3, #40	; 0x28
 800b998:	461a      	mov	r2, r3
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	f7f9 f878 	bl	8004a90 <HAL_DMA_Start_IT>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00d      	beq.n	800b9c2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2210      	movs	r2, #16
 800b9aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e012      	b.n	800b9e8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2240      	movs	r2, #64	; 0x40
 800b9c8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e000      	b.n	800b9e8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b9e6:	2302      	movs	r3, #2
  }
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	0800cd01 	.word	0x0800cd01
 800b9f4:	0800cd51 	.word	0x0800cd51
 800b9f8:	0800cdef 	.word	0x0800cdef

0800b9fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	4613      	mov	r3, r2
 800ba08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d170      	bne.n	800baf6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <HAL_UART_Receive_DMA+0x24>
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e069      	b.n	800baf8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d101      	bne.n	800ba32 <HAL_UART_Receive_DMA+0x36>
 800ba2e:	2302      	movs	r3, #2
 800ba30:	e062      	b.n	800baf8 <HAL_UART_Receive_DMA+0xfc>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	88fa      	ldrh	r2, [r7, #6]
 800ba44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2222      	movs	r2, #34	; 0x22
 800ba54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d02c      	beq.n	800baba <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba64:	4a26      	ldr	r2, [pc, #152]	; (800bb00 <HAL_UART_Receive_DMA+0x104>)
 800ba66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba6c:	4a25      	ldr	r2, [pc, #148]	; (800bb04 <HAL_UART_Receive_DMA+0x108>)
 800ba6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba74:	4a24      	ldr	r2, [pc, #144]	; (800bb08 <HAL_UART_Receive_DMA+0x10c>)
 800ba76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3324      	adds	r3, #36	; 0x24
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba90:	461a      	mov	r2, r3
 800ba92:	88fb      	ldrh	r3, [r7, #6]
 800ba94:	f7f8 fffc 	bl	8004a90 <HAL_DMA_Start_IT>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00d      	beq.n	800baba <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2210      	movs	r2, #16
 800baa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e01e      	b.n	800baf8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bad0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 0201 	orr.w	r2, r2, #1
 800bae0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baf0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e000      	b.n	800baf8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800baf6:	2302      	movs	r3, #2
  }
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	0800cd6d 	.word	0x0800cd6d
 800bb04:	0800cdd3 	.word	0x0800cdd3
 800bb08:	0800cdef 	.word	0x0800cdef

0800bb0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb32:	4013      	ands	r3, r2
 800bb34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d118      	bne.n	800bb6e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d013      	beq.n	800bb6e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d104      	bne.n	800bb5a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d009      	beq.n	800bb6e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 8145 	beq.w	800bdee <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
      }
      return;
 800bb6c:	e13f      	b.n	800bdee <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 80e8 	beq.w	800bd46 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	4ba1      	ldr	r3, [pc, #644]	; (800be00 <HAL_UART_IRQHandler+0x2f4>)
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb80:	69ba      	ldr	r2, [r7, #24]
 800bb82:	4ba0      	ldr	r3, [pc, #640]	; (800be04 <HAL_UART_IRQHandler+0x2f8>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80dd 	beq.w	800bd46 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d010      	beq.n	800bbb8 <HAL_UART_IRQHandler+0xac>
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2201      	movs	r2, #1
 800bba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbae:	f043 0201 	orr.w	r2, r3, #1
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d010      	beq.n	800bbe4 <HAL_UART_IRQHandler+0xd8>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbda:	f043 0204 	orr.w	r2, r3, #4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d010      	beq.n	800bc10 <HAL_UART_IRQHandler+0x104>
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2204      	movs	r2, #4
 800bbfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc06:	f043 0202 	orr.w	r2, r3, #2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	f003 0308 	and.w	r3, r3, #8
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d015      	beq.n	800bc46 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	f003 0320 	and.w	r3, r3, #32
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d104      	bne.n	800bc2e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	4b76      	ldr	r3, [pc, #472]	; (800be00 <HAL_UART_IRQHandler+0x2f4>)
 800bc28:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00b      	beq.n	800bc46 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2208      	movs	r2, #8
 800bc34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3c:	f043 0208 	orr.w	r2, r3, #8
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d011      	beq.n	800bc74 <HAL_UART_IRQHandler+0x168>
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00c      	beq.n	800bc74 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6a:	f043 0220 	orr.w	r2, r3, #32
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 80b9 	beq.w	800bdf2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	f003 0320 	and.w	r3, r3, #32
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d011      	beq.n	800bcae <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	f003 0320 	and.w	r3, r3, #32
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d104      	bne.n	800bc9e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d007      	beq.n	800bcae <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b40      	cmp	r3, #64	; 0x40
 800bcc2:	d004      	beq.n	800bcce <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d031      	beq.n	800bd32 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fff2 	bl	800ccb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b40      	cmp	r3, #64	; 0x40
 800bce0:	d123      	bne.n	800bd2a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689a      	ldr	r2, [r3, #8]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d013      	beq.n	800bd22 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcfe:	4a42      	ldr	r2, [pc, #264]	; (800be08 <HAL_UART_IRQHandler+0x2fc>)
 800bd00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f9 f92c 	bl	8004f64 <HAL_DMA_Abort_IT>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d017      	beq.n	800bd42 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd20:	e00f      	b.n	800bd42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f886 	bl	800be34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd28:	e00b      	b.n	800bd42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f882 	bl	800be34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd30:	e007      	b.n	800bd42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f87e 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bd40:	e057      	b.n	800bdf2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd42:	bf00      	nop
    return;
 800bd44:	e055      	b.n	800bdf2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00d      	beq.n	800bd6c <HAL_UART_IRQHandler+0x260>
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 f8b2 	bl	800cece <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd6a:	e045      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d012      	beq.n	800bd9c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d104      	bne.n	800bd8a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d008      	beq.n	800bd9c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d031      	beq.n	800bdf6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
    }
    return;
 800bd9a:	e02c      	b.n	800bdf6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d008      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x2ac>
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 f872 	bl	800ce9a <UART_EndTransmit_IT>
    return;
 800bdb6:	e01f      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d008      	beq.n	800bdd4 <HAL_UART_IRQHandler+0x2c8>
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d003      	beq.n	800bdd4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f001 f892 	bl	800cef6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdd2:	e011      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00c      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	da09      	bge.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f001 f87c 	bl	800cee2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdea:	bf00      	nop
 800bdec:	e004      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bdee:	bf00      	nop
 800bdf0:	e002      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bdf2:	bf00      	nop
 800bdf4:	e000      	b.n	800bdf8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bdf6:	bf00      	nop
  }
}
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	10000001 	.word	0x10000001
 800be04:	04000120 	.word	0x04000120
 800be08:	0800ce6f 	.word	0x0800ce6f

0800be0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800be4c:	b08e      	sub	sp, #56	; 0x38
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689a      	ldr	r2, [r3, #8]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	431a      	orrs	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	431a      	orrs	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be76:	4313      	orrs	r3, r2
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	4bc1      	ldr	r3, [pc, #772]	; (800c188 <UART_SetConfig+0x340>)
 800be82:	4013      	ands	r3, r2
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be8a:	430b      	orrs	r3, r1
 800be8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	68da      	ldr	r2, [r3, #12]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4ab7      	ldr	r2, [pc, #732]	; (800c18c <UART_SetConfig+0x344>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d004      	beq.n	800bebe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beba:	4313      	orrs	r3, r2
 800bebc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689a      	ldr	r2, [r3, #8]
 800bec4:	4bb2      	ldr	r3, [pc, #712]	; (800c190 <UART_SetConfig+0x348>)
 800bec6:	4013      	ands	r3, r2
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bece:	430b      	orrs	r3, r1
 800bed0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	f023 010f 	bic.w	r1, r3, #15
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4aa9      	ldr	r2, [pc, #676]	; (800c194 <UART_SetConfig+0x34c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d177      	bne.n	800bfe2 <UART_SetConfig+0x19a>
 800bef2:	4ba9      	ldr	r3, [pc, #676]	; (800c198 <UART_SetConfig+0x350>)
 800bef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800befa:	2b28      	cmp	r3, #40	; 0x28
 800befc:	d86c      	bhi.n	800bfd8 <UART_SetConfig+0x190>
 800befe:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <UART_SetConfig+0xbc>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bfa9 	.word	0x0800bfa9
 800bf08:	0800bfd9 	.word	0x0800bfd9
 800bf0c:	0800bfd9 	.word	0x0800bfd9
 800bf10:	0800bfd9 	.word	0x0800bfd9
 800bf14:	0800bfd9 	.word	0x0800bfd9
 800bf18:	0800bfd9 	.word	0x0800bfd9
 800bf1c:	0800bfd9 	.word	0x0800bfd9
 800bf20:	0800bfd9 	.word	0x0800bfd9
 800bf24:	0800bfb1 	.word	0x0800bfb1
 800bf28:	0800bfd9 	.word	0x0800bfd9
 800bf2c:	0800bfd9 	.word	0x0800bfd9
 800bf30:	0800bfd9 	.word	0x0800bfd9
 800bf34:	0800bfd9 	.word	0x0800bfd9
 800bf38:	0800bfd9 	.word	0x0800bfd9
 800bf3c:	0800bfd9 	.word	0x0800bfd9
 800bf40:	0800bfd9 	.word	0x0800bfd9
 800bf44:	0800bfb9 	.word	0x0800bfb9
 800bf48:	0800bfd9 	.word	0x0800bfd9
 800bf4c:	0800bfd9 	.word	0x0800bfd9
 800bf50:	0800bfd9 	.word	0x0800bfd9
 800bf54:	0800bfd9 	.word	0x0800bfd9
 800bf58:	0800bfd9 	.word	0x0800bfd9
 800bf5c:	0800bfd9 	.word	0x0800bfd9
 800bf60:	0800bfd9 	.word	0x0800bfd9
 800bf64:	0800bfc1 	.word	0x0800bfc1
 800bf68:	0800bfd9 	.word	0x0800bfd9
 800bf6c:	0800bfd9 	.word	0x0800bfd9
 800bf70:	0800bfd9 	.word	0x0800bfd9
 800bf74:	0800bfd9 	.word	0x0800bfd9
 800bf78:	0800bfd9 	.word	0x0800bfd9
 800bf7c:	0800bfd9 	.word	0x0800bfd9
 800bf80:	0800bfd9 	.word	0x0800bfd9
 800bf84:	0800bfc9 	.word	0x0800bfc9
 800bf88:	0800bfd9 	.word	0x0800bfd9
 800bf8c:	0800bfd9 	.word	0x0800bfd9
 800bf90:	0800bfd9 	.word	0x0800bfd9
 800bf94:	0800bfd9 	.word	0x0800bfd9
 800bf98:	0800bfd9 	.word	0x0800bfd9
 800bf9c:	0800bfd9 	.word	0x0800bfd9
 800bfa0:	0800bfd9 	.word	0x0800bfd9
 800bfa4:	0800bfd1 	.word	0x0800bfd1
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfae:	e233      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfb0:	2304      	movs	r3, #4
 800bfb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfb6:	e22f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfb8:	2308      	movs	r3, #8
 800bfba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfbe:	e22b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfc0:	2310      	movs	r3, #16
 800bfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfc6:	e227      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfce:	e223      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfd6:	e21f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfd8:	2380      	movs	r3, #128	; 0x80
 800bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfde:	bf00      	nop
 800bfe0:	e21a      	b.n	800c418 <UART_SetConfig+0x5d0>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a6d      	ldr	r2, [pc, #436]	; (800c19c <UART_SetConfig+0x354>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d132      	bne.n	800c052 <UART_SetConfig+0x20a>
 800bfec:	4b6a      	ldr	r3, [pc, #424]	; (800c198 <UART_SetConfig+0x350>)
 800bfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff0:	f003 0307 	and.w	r3, r3, #7
 800bff4:	2b05      	cmp	r3, #5
 800bff6:	d827      	bhi.n	800c048 <UART_SetConfig+0x200>
 800bff8:	a201      	add	r2, pc, #4	; (adr r2, 800c000 <UART_SetConfig+0x1b8>)
 800bffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffe:	bf00      	nop
 800c000:	0800c019 	.word	0x0800c019
 800c004:	0800c021 	.word	0x0800c021
 800c008:	0800c029 	.word	0x0800c029
 800c00c:	0800c031 	.word	0x0800c031
 800c010:	0800c039 	.word	0x0800c039
 800c014:	0800c041 	.word	0x0800c041
 800c018:	2300      	movs	r3, #0
 800c01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c01e:	e1fb      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c020:	2304      	movs	r3, #4
 800c022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c026:	e1f7      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c028:	2308      	movs	r3, #8
 800c02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02e:	e1f3      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c030:	2310      	movs	r3, #16
 800c032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c036:	e1ef      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c038:	2320      	movs	r3, #32
 800c03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03e:	e1eb      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c040:	2340      	movs	r3, #64	; 0x40
 800c042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c046:	e1e7      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04e:	bf00      	nop
 800c050:	e1e2      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a52      	ldr	r2, [pc, #328]	; (800c1a0 <UART_SetConfig+0x358>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d132      	bne.n	800c0c2 <UART_SetConfig+0x27a>
 800c05c:	4b4e      	ldr	r3, [pc, #312]	; (800c198 <UART_SetConfig+0x350>)
 800c05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c060:	f003 0307 	and.w	r3, r3, #7
 800c064:	2b05      	cmp	r3, #5
 800c066:	d827      	bhi.n	800c0b8 <UART_SetConfig+0x270>
 800c068:	a201      	add	r2, pc, #4	; (adr r2, 800c070 <UART_SetConfig+0x228>)
 800c06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06e:	bf00      	nop
 800c070:	0800c089 	.word	0x0800c089
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c099 	.word	0x0800c099
 800c07c:	0800c0a1 	.word	0x0800c0a1
 800c080:	0800c0a9 	.word	0x0800c0a9
 800c084:	0800c0b1 	.word	0x0800c0b1
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c08e:	e1c3      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c090:	2304      	movs	r3, #4
 800c092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c096:	e1bf      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c098:	2308      	movs	r3, #8
 800c09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c09e:	e1bb      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0a6:	e1b7      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c0a8:	2320      	movs	r3, #32
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ae:	e1b3      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c0b0:	2340      	movs	r3, #64	; 0x40
 800c0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0b6:	e1af      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c0b8:	2380      	movs	r3, #128	; 0x80
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	bf00      	nop
 800c0c0:	e1aa      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a37      	ldr	r2, [pc, #220]	; (800c1a4 <UART_SetConfig+0x35c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d132      	bne.n	800c132 <UART_SetConfig+0x2ea>
 800c0cc:	4b32      	ldr	r3, [pc, #200]	; (800c198 <UART_SetConfig+0x350>)
 800c0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	2b05      	cmp	r3, #5
 800c0d6:	d827      	bhi.n	800c128 <UART_SetConfig+0x2e0>
 800c0d8:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <UART_SetConfig+0x298>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c0f9 	.word	0x0800c0f9
 800c0e4:	0800c101 	.word	0x0800c101
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c111 	.word	0x0800c111
 800c0f0:	0800c119 	.word	0x0800c119
 800c0f4:	0800c121 	.word	0x0800c121
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0fe:	e18b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c100:	2304      	movs	r3, #4
 800c102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c106:	e187      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c108:	2308      	movs	r3, #8
 800c10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c10e:	e183      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c110:	2310      	movs	r3, #16
 800c112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c116:	e17f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c118:	2320      	movs	r3, #32
 800c11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c11e:	e17b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c126:	e177      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c128:	2380      	movs	r3, #128	; 0x80
 800c12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12e:	bf00      	nop
 800c130:	e172      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a1c      	ldr	r2, [pc, #112]	; (800c1a8 <UART_SetConfig+0x360>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d144      	bne.n	800c1c6 <UART_SetConfig+0x37e>
 800c13c:	4b16      	ldr	r3, [pc, #88]	; (800c198 <UART_SetConfig+0x350>)
 800c13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	2b05      	cmp	r3, #5
 800c146:	d839      	bhi.n	800c1bc <UART_SetConfig+0x374>
 800c148:	a201      	add	r2, pc, #4	; (adr r2, 800c150 <UART_SetConfig+0x308>)
 800c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14e:	bf00      	nop
 800c150:	0800c169 	.word	0x0800c169
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c179 	.word	0x0800c179
 800c15c:	0800c181 	.word	0x0800c181
 800c160:	0800c1ad 	.word	0x0800c1ad
 800c164:	0800c1b5 	.word	0x0800c1b5
 800c168:	2300      	movs	r3, #0
 800c16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16e:	e153      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c176:	e14f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17e:	e14b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c186:	e147      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c188:	cfff69f3 	.word	0xcfff69f3
 800c18c:	58000c00 	.word	0x58000c00
 800c190:	11fff4ff 	.word	0x11fff4ff
 800c194:	40011000 	.word	0x40011000
 800c198:	58024400 	.word	0x58024400
 800c19c:	40004400 	.word	0x40004400
 800c1a0:	40004800 	.word	0x40004800
 800c1a4:	40004c00 	.word	0x40004c00
 800c1a8:	40005000 	.word	0x40005000
 800c1ac:	2320      	movs	r3, #32
 800c1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1b2:	e131      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c1b4:	2340      	movs	r3, #64	; 0x40
 800c1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ba:	e12d      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c1bc:	2380      	movs	r3, #128	; 0x80
 800c1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1c2:	bf00      	nop
 800c1c4:	e128      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4ab6      	ldr	r2, [pc, #728]	; (800c4a4 <UART_SetConfig+0x65c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d178      	bne.n	800c2c2 <UART_SetConfig+0x47a>
 800c1d0:	4bb5      	ldr	r3, [pc, #724]	; (800c4a8 <UART_SetConfig+0x660>)
 800c1d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1d8:	2b28      	cmp	r3, #40	; 0x28
 800c1da:	d86d      	bhi.n	800c2b8 <UART_SetConfig+0x470>
 800c1dc:	a201      	add	r2, pc, #4	; (adr r2, 800c1e4 <UART_SetConfig+0x39c>)
 800c1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e2:	bf00      	nop
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c2b9 	.word	0x0800c2b9
 800c1ec:	0800c2b9 	.word	0x0800c2b9
 800c1f0:	0800c2b9 	.word	0x0800c2b9
 800c1f4:	0800c2b9 	.word	0x0800c2b9
 800c1f8:	0800c2b9 	.word	0x0800c2b9
 800c1fc:	0800c2b9 	.word	0x0800c2b9
 800c200:	0800c2b9 	.word	0x0800c2b9
 800c204:	0800c291 	.word	0x0800c291
 800c208:	0800c2b9 	.word	0x0800c2b9
 800c20c:	0800c2b9 	.word	0x0800c2b9
 800c210:	0800c2b9 	.word	0x0800c2b9
 800c214:	0800c2b9 	.word	0x0800c2b9
 800c218:	0800c2b9 	.word	0x0800c2b9
 800c21c:	0800c2b9 	.word	0x0800c2b9
 800c220:	0800c2b9 	.word	0x0800c2b9
 800c224:	0800c299 	.word	0x0800c299
 800c228:	0800c2b9 	.word	0x0800c2b9
 800c22c:	0800c2b9 	.word	0x0800c2b9
 800c230:	0800c2b9 	.word	0x0800c2b9
 800c234:	0800c2b9 	.word	0x0800c2b9
 800c238:	0800c2b9 	.word	0x0800c2b9
 800c23c:	0800c2b9 	.word	0x0800c2b9
 800c240:	0800c2b9 	.word	0x0800c2b9
 800c244:	0800c2a1 	.word	0x0800c2a1
 800c248:	0800c2b9 	.word	0x0800c2b9
 800c24c:	0800c2b9 	.word	0x0800c2b9
 800c250:	0800c2b9 	.word	0x0800c2b9
 800c254:	0800c2b9 	.word	0x0800c2b9
 800c258:	0800c2b9 	.word	0x0800c2b9
 800c25c:	0800c2b9 	.word	0x0800c2b9
 800c260:	0800c2b9 	.word	0x0800c2b9
 800c264:	0800c2a9 	.word	0x0800c2a9
 800c268:	0800c2b9 	.word	0x0800c2b9
 800c26c:	0800c2b9 	.word	0x0800c2b9
 800c270:	0800c2b9 	.word	0x0800c2b9
 800c274:	0800c2b9 	.word	0x0800c2b9
 800c278:	0800c2b9 	.word	0x0800c2b9
 800c27c:	0800c2b9 	.word	0x0800c2b9
 800c280:	0800c2b9 	.word	0x0800c2b9
 800c284:	0800c2b1 	.word	0x0800c2b1
 800c288:	2301      	movs	r3, #1
 800c28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c28e:	e0c3      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c290:	2304      	movs	r3, #4
 800c292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c296:	e0bf      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c298:	2308      	movs	r3, #8
 800c29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c29e:	e0bb      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2a6:	e0b7      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ae:	e0b3      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c2b0:	2340      	movs	r3, #64	; 0x40
 800c2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b6:	e0af      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c2b8:	2380      	movs	r3, #128	; 0x80
 800c2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2be:	bf00      	nop
 800c2c0:	e0aa      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a79      	ldr	r2, [pc, #484]	; (800c4ac <UART_SetConfig+0x664>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d132      	bne.n	800c332 <UART_SetConfig+0x4ea>
 800c2cc:	4b76      	ldr	r3, [pc, #472]	; (800c4a8 <UART_SetConfig+0x660>)
 800c2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d0:	f003 0307 	and.w	r3, r3, #7
 800c2d4:	2b05      	cmp	r3, #5
 800c2d6:	d827      	bhi.n	800c328 <UART_SetConfig+0x4e0>
 800c2d8:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <UART_SetConfig+0x498>)
 800c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2de:	bf00      	nop
 800c2e0:	0800c2f9 	.word	0x0800c2f9
 800c2e4:	0800c301 	.word	0x0800c301
 800c2e8:	0800c309 	.word	0x0800c309
 800c2ec:	0800c311 	.word	0x0800c311
 800c2f0:	0800c319 	.word	0x0800c319
 800c2f4:	0800c321 	.word	0x0800c321
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2fe:	e08b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c300:	2304      	movs	r3, #4
 800c302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c306:	e087      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c308:	2308      	movs	r3, #8
 800c30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c30e:	e083      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c310:	2310      	movs	r3, #16
 800c312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c316:	e07f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c318:	2320      	movs	r3, #32
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e07b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c320:	2340      	movs	r3, #64	; 0x40
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e077      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c328:	2380      	movs	r3, #128	; 0x80
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	bf00      	nop
 800c330:	e072      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a5e      	ldr	r2, [pc, #376]	; (800c4b0 <UART_SetConfig+0x668>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d132      	bne.n	800c3a2 <UART_SetConfig+0x55a>
 800c33c:	4b5a      	ldr	r3, [pc, #360]	; (800c4a8 <UART_SetConfig+0x660>)
 800c33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c340:	f003 0307 	and.w	r3, r3, #7
 800c344:	2b05      	cmp	r3, #5
 800c346:	d827      	bhi.n	800c398 <UART_SetConfig+0x550>
 800c348:	a201      	add	r2, pc, #4	; (adr r2, 800c350 <UART_SetConfig+0x508>)
 800c34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34e:	bf00      	nop
 800c350:	0800c369 	.word	0x0800c369
 800c354:	0800c371 	.word	0x0800c371
 800c358:	0800c379 	.word	0x0800c379
 800c35c:	0800c381 	.word	0x0800c381
 800c360:	0800c389 	.word	0x0800c389
 800c364:	0800c391 	.word	0x0800c391
 800c368:	2300      	movs	r3, #0
 800c36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c36e:	e053      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c370:	2304      	movs	r3, #4
 800c372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c376:	e04f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c378:	2308      	movs	r3, #8
 800c37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37e:	e04b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c380:	2310      	movs	r3, #16
 800c382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c386:	e047      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c388:	2320      	movs	r3, #32
 800c38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38e:	e043      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c396:	e03f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c398:	2380      	movs	r3, #128	; 0x80
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	bf00      	nop
 800c3a0:	e03a      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a43      	ldr	r2, [pc, #268]	; (800c4b4 <UART_SetConfig+0x66c>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d132      	bne.n	800c412 <UART_SetConfig+0x5ca>
 800c3ac:	4b3e      	ldr	r3, [pc, #248]	; (800c4a8 <UART_SetConfig+0x660>)
 800c3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b0:	f003 0307 	and.w	r3, r3, #7
 800c3b4:	2b05      	cmp	r3, #5
 800c3b6:	d827      	bhi.n	800c408 <UART_SetConfig+0x5c0>
 800c3b8:	a201      	add	r2, pc, #4	; (adr r2, 800c3c0 <UART_SetConfig+0x578>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c3d9 	.word	0x0800c3d9
 800c3c4:	0800c3e1 	.word	0x0800c3e1
 800c3c8:	0800c3e9 	.word	0x0800c3e9
 800c3cc:	0800c3f1 	.word	0x0800c3f1
 800c3d0:	0800c3f9 	.word	0x0800c3f9
 800c3d4:	0800c401 	.word	0x0800c401
 800c3d8:	2302      	movs	r3, #2
 800c3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3de:	e01b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3e6:	e017      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c3e8:	2308      	movs	r3, #8
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e013      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e00f      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c3f8:	2320      	movs	r3, #32
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e00b      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c400:	2340      	movs	r3, #64	; 0x40
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e007      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c408:	2380      	movs	r3, #128	; 0x80
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	bf00      	nop
 800c410:	e002      	b.n	800c418 <UART_SetConfig+0x5d0>
 800c412:	2380      	movs	r3, #128	; 0x80
 800c414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a25      	ldr	r2, [pc, #148]	; (800c4b4 <UART_SetConfig+0x66c>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	f040 80b8 	bne.w	800c594 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c428:	2b08      	cmp	r3, #8
 800c42a:	d019      	beq.n	800c460 <UART_SetConfig+0x618>
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	dc04      	bgt.n	800c43a <UART_SetConfig+0x5f2>
 800c430:	2b02      	cmp	r3, #2
 800c432:	d009      	beq.n	800c448 <UART_SetConfig+0x600>
 800c434:	2b04      	cmp	r3, #4
 800c436:	d00b      	beq.n	800c450 <UART_SetConfig+0x608>
 800c438:	e042      	b.n	800c4c0 <UART_SetConfig+0x678>
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	d02b      	beq.n	800c496 <UART_SetConfig+0x64e>
 800c43e:	2b40      	cmp	r3, #64	; 0x40
 800c440:	d02c      	beq.n	800c49c <UART_SetConfig+0x654>
 800c442:	2b10      	cmp	r3, #16
 800c444:	d014      	beq.n	800c470 <UART_SetConfig+0x628>
 800c446:	e03b      	b.n	800c4c0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c448:	f7fc fed8 	bl	80091fc <HAL_RCCEx_GetD3PCLK1Freq>
 800c44c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c44e:	e03d      	b.n	800c4cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c450:	f107 0314 	add.w	r3, r7, #20
 800c454:	4618      	mov	r0, r3
 800c456:	f7fc fee7 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c45e:	e035      	b.n	800c4cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4618      	mov	r0, r3
 800c466:	f7fd f82b 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c46e:	e02d      	b.n	800c4cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c470:	4b0d      	ldr	r3, [pc, #52]	; (800c4a8 <UART_SetConfig+0x660>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d009      	beq.n	800c490 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c47c:	4b0a      	ldr	r3, [pc, #40]	; (800c4a8 <UART_SetConfig+0x660>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	08db      	lsrs	r3, r3, #3
 800c482:	f003 0303 	and.w	r3, r3, #3
 800c486:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <UART_SetConfig+0x670>)
 800c488:	fa22 f303 	lsr.w	r3, r2, r3
 800c48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c48e:	e01d      	b.n	800c4cc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c490:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <UART_SetConfig+0x670>)
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c494:	e01a      	b.n	800c4cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <UART_SetConfig+0x674>)
 800c498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c49a:	e017      	b.n	800c4cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c49c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4a2:	e013      	b.n	800c4cc <UART_SetConfig+0x684>
 800c4a4:	40011400 	.word	0x40011400
 800c4a8:	58024400 	.word	0x58024400
 800c4ac:	40007800 	.word	0x40007800
 800c4b0:	40007c00 	.word	0x40007c00
 800c4b4:	58000c00 	.word	0x58000c00
 800c4b8:	03d09000 	.word	0x03d09000
 800c4bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c4ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 824d 	beq.w	800c96e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d8:	4aad      	ldr	r2, [pc, #692]	; (800c790 <UART_SetConfig+0x948>)
 800c4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4e6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	6a3a      	ldr	r2, [r7, #32]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d305      	bcc.n	800c504 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4fe:	6a3a      	ldr	r2, [r7, #32]
 800c500:	429a      	cmp	r2, r3
 800c502:	d903      	bls.n	800c50c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c50a:	e230      	b.n	800c96e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50e:	4618      	mov	r0, r3
 800c510:	f04f 0100 	mov.w	r1, #0
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	4a9d      	ldr	r2, [pc, #628]	; (800c790 <UART_SetConfig+0x948>)
 800c51a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	f04f 0400 	mov.w	r4, #0
 800c524:	461a      	mov	r2, r3
 800c526:	4623      	mov	r3, r4
 800c528:	f7f3 feda 	bl	80002e0 <__aeabi_uldivmod>
 800c52c:	4603      	mov	r3, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	4619      	mov	r1, r3
 800c532:	4622      	mov	r2, r4
 800c534:	f04f 0300 	mov.w	r3, #0
 800c538:	f04f 0400 	mov.w	r4, #0
 800c53c:	0214      	lsls	r4, r2, #8
 800c53e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c542:	020b      	lsls	r3, r1, #8
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	6852      	ldr	r2, [r2, #4]
 800c548:	0852      	lsrs	r2, r2, #1
 800c54a:	4611      	mov	r1, r2
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	eb13 0b01 	adds.w	fp, r3, r1
 800c554:	eb44 0c02 	adc.w	ip, r4, r2
 800c558:	4658      	mov	r0, fp
 800c55a:	4661      	mov	r1, ip
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f04f 0400 	mov.w	r4, #0
 800c564:	461a      	mov	r2, r3
 800c566:	4623      	mov	r3, r4
 800c568:	f7f3 feba 	bl	80002e0 <__aeabi_uldivmod>
 800c56c:	4603      	mov	r3, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c578:	d308      	bcc.n	800c58c <UART_SetConfig+0x744>
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c580:	d204      	bcs.n	800c58c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	e1f0      	b.n	800c96e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c592:	e1ec      	b.n	800c96e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c59c:	f040 8100 	bne.w	800c7a0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c5a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5a4:	2b40      	cmp	r3, #64	; 0x40
 800c5a6:	f200 80b7 	bhi.w	800c718 <UART_SetConfig+0x8d0>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <UART_SetConfig+0x768>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c6b5 	.word	0x0800c6b5
 800c5b4:	0800c6bd 	.word	0x0800c6bd
 800c5b8:	0800c719 	.word	0x0800c719
 800c5bc:	0800c719 	.word	0x0800c719
 800c5c0:	0800c6c5 	.word	0x0800c6c5
 800c5c4:	0800c719 	.word	0x0800c719
 800c5c8:	0800c719 	.word	0x0800c719
 800c5cc:	0800c719 	.word	0x0800c719
 800c5d0:	0800c6d5 	.word	0x0800c6d5
 800c5d4:	0800c719 	.word	0x0800c719
 800c5d8:	0800c719 	.word	0x0800c719
 800c5dc:	0800c719 	.word	0x0800c719
 800c5e0:	0800c719 	.word	0x0800c719
 800c5e4:	0800c719 	.word	0x0800c719
 800c5e8:	0800c719 	.word	0x0800c719
 800c5ec:	0800c719 	.word	0x0800c719
 800c5f0:	0800c6e5 	.word	0x0800c6e5
 800c5f4:	0800c719 	.word	0x0800c719
 800c5f8:	0800c719 	.word	0x0800c719
 800c5fc:	0800c719 	.word	0x0800c719
 800c600:	0800c719 	.word	0x0800c719
 800c604:	0800c719 	.word	0x0800c719
 800c608:	0800c719 	.word	0x0800c719
 800c60c:	0800c719 	.word	0x0800c719
 800c610:	0800c719 	.word	0x0800c719
 800c614:	0800c719 	.word	0x0800c719
 800c618:	0800c719 	.word	0x0800c719
 800c61c:	0800c719 	.word	0x0800c719
 800c620:	0800c719 	.word	0x0800c719
 800c624:	0800c719 	.word	0x0800c719
 800c628:	0800c719 	.word	0x0800c719
 800c62c:	0800c719 	.word	0x0800c719
 800c630:	0800c70b 	.word	0x0800c70b
 800c634:	0800c719 	.word	0x0800c719
 800c638:	0800c719 	.word	0x0800c719
 800c63c:	0800c719 	.word	0x0800c719
 800c640:	0800c719 	.word	0x0800c719
 800c644:	0800c719 	.word	0x0800c719
 800c648:	0800c719 	.word	0x0800c719
 800c64c:	0800c719 	.word	0x0800c719
 800c650:	0800c719 	.word	0x0800c719
 800c654:	0800c719 	.word	0x0800c719
 800c658:	0800c719 	.word	0x0800c719
 800c65c:	0800c719 	.word	0x0800c719
 800c660:	0800c719 	.word	0x0800c719
 800c664:	0800c719 	.word	0x0800c719
 800c668:	0800c719 	.word	0x0800c719
 800c66c:	0800c719 	.word	0x0800c719
 800c670:	0800c719 	.word	0x0800c719
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c719 	.word	0x0800c719
 800c67c:	0800c719 	.word	0x0800c719
 800c680:	0800c719 	.word	0x0800c719
 800c684:	0800c719 	.word	0x0800c719
 800c688:	0800c719 	.word	0x0800c719
 800c68c:	0800c719 	.word	0x0800c719
 800c690:	0800c719 	.word	0x0800c719
 800c694:	0800c719 	.word	0x0800c719
 800c698:	0800c719 	.word	0x0800c719
 800c69c:	0800c719 	.word	0x0800c719
 800c6a0:	0800c719 	.word	0x0800c719
 800c6a4:	0800c719 	.word	0x0800c719
 800c6a8:	0800c719 	.word	0x0800c719
 800c6ac:	0800c719 	.word	0x0800c719
 800c6b0:	0800c711 	.word	0x0800c711
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6b4:	f7fb fbce 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800c6b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c6ba:	e033      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6bc:	f7fb fbe0 	bl	8007e80 <HAL_RCC_GetPCLK2Freq>
 800c6c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c6c2:	e02f      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6c4:	f107 0314 	add.w	r3, r7, #20
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fc fdad 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6d2:	e027      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6d4:	f107 0308 	add.w	r3, r7, #8
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fc fef1 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6e2:	e01f      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6e4:	4b2b      	ldr	r3, [pc, #172]	; (800c794 <UART_SetConfig+0x94c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0320 	and.w	r3, r3, #32
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d009      	beq.n	800c704 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6f0:	4b28      	ldr	r3, [pc, #160]	; (800c794 <UART_SetConfig+0x94c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	08db      	lsrs	r3, r3, #3
 800c6f6:	f003 0303 	and.w	r3, r3, #3
 800c6fa:	4a27      	ldr	r2, [pc, #156]	; (800c798 <UART_SetConfig+0x950>)
 800c6fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c702:	e00f      	b.n	800c724 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c704:	4b24      	ldr	r3, [pc, #144]	; (800c798 <UART_SetConfig+0x950>)
 800c706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c708:	e00c      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c70a:	4b24      	ldr	r3, [pc, #144]	; (800c79c <UART_SetConfig+0x954>)
 800c70c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c70e:	e009      	b.n	800c724 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c716:	e005      	b.n	800c724 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 8121 	beq.w	800c96e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	4a17      	ldr	r2, [pc, #92]	; (800c790 <UART_SetConfig+0x948>)
 800c732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c736:	461a      	mov	r2, r3
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c73e:	005a      	lsls	r2, r3, #1
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	085b      	lsrs	r3, r3, #1
 800c746:	441a      	add	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c750:	b29b      	uxth	r3, r3
 800c752:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	2b0f      	cmp	r3, #15
 800c758:	d916      	bls.n	800c788 <UART_SetConfig+0x940>
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c760:	d212      	bcs.n	800c788 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	b29b      	uxth	r3, r3
 800c766:	f023 030f 	bic.w	r3, r3, #15
 800c76a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	b29b      	uxth	r3, r3
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	b29a      	uxth	r2, r3
 800c778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c77a:	4313      	orrs	r3, r2
 800c77c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c784:	60da      	str	r2, [r3, #12]
 800c786:	e0f2      	b.n	800c96e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c78e:	e0ee      	b.n	800c96e <UART_SetConfig+0xb26>
 800c790:	0800fe5c 	.word	0x0800fe5c
 800c794:	58024400 	.word	0x58024400
 800c798:	03d09000 	.word	0x03d09000
 800c79c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7a4:	2b40      	cmp	r3, #64	; 0x40
 800c7a6:	f200 80b7 	bhi.w	800c918 <UART_SetConfig+0xad0>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <UART_SetConfig+0x968>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c8b5 	.word	0x0800c8b5
 800c7b4:	0800c8bd 	.word	0x0800c8bd
 800c7b8:	0800c919 	.word	0x0800c919
 800c7bc:	0800c919 	.word	0x0800c919
 800c7c0:	0800c8c5 	.word	0x0800c8c5
 800c7c4:	0800c919 	.word	0x0800c919
 800c7c8:	0800c919 	.word	0x0800c919
 800c7cc:	0800c919 	.word	0x0800c919
 800c7d0:	0800c8d5 	.word	0x0800c8d5
 800c7d4:	0800c919 	.word	0x0800c919
 800c7d8:	0800c919 	.word	0x0800c919
 800c7dc:	0800c919 	.word	0x0800c919
 800c7e0:	0800c919 	.word	0x0800c919
 800c7e4:	0800c919 	.word	0x0800c919
 800c7e8:	0800c919 	.word	0x0800c919
 800c7ec:	0800c919 	.word	0x0800c919
 800c7f0:	0800c8e5 	.word	0x0800c8e5
 800c7f4:	0800c919 	.word	0x0800c919
 800c7f8:	0800c919 	.word	0x0800c919
 800c7fc:	0800c919 	.word	0x0800c919
 800c800:	0800c919 	.word	0x0800c919
 800c804:	0800c919 	.word	0x0800c919
 800c808:	0800c919 	.word	0x0800c919
 800c80c:	0800c919 	.word	0x0800c919
 800c810:	0800c919 	.word	0x0800c919
 800c814:	0800c919 	.word	0x0800c919
 800c818:	0800c919 	.word	0x0800c919
 800c81c:	0800c919 	.word	0x0800c919
 800c820:	0800c919 	.word	0x0800c919
 800c824:	0800c919 	.word	0x0800c919
 800c828:	0800c919 	.word	0x0800c919
 800c82c:	0800c919 	.word	0x0800c919
 800c830:	0800c90b 	.word	0x0800c90b
 800c834:	0800c919 	.word	0x0800c919
 800c838:	0800c919 	.word	0x0800c919
 800c83c:	0800c919 	.word	0x0800c919
 800c840:	0800c919 	.word	0x0800c919
 800c844:	0800c919 	.word	0x0800c919
 800c848:	0800c919 	.word	0x0800c919
 800c84c:	0800c919 	.word	0x0800c919
 800c850:	0800c919 	.word	0x0800c919
 800c854:	0800c919 	.word	0x0800c919
 800c858:	0800c919 	.word	0x0800c919
 800c85c:	0800c919 	.word	0x0800c919
 800c860:	0800c919 	.word	0x0800c919
 800c864:	0800c919 	.word	0x0800c919
 800c868:	0800c919 	.word	0x0800c919
 800c86c:	0800c919 	.word	0x0800c919
 800c870:	0800c919 	.word	0x0800c919
 800c874:	0800c919 	.word	0x0800c919
 800c878:	0800c919 	.word	0x0800c919
 800c87c:	0800c919 	.word	0x0800c919
 800c880:	0800c919 	.word	0x0800c919
 800c884:	0800c919 	.word	0x0800c919
 800c888:	0800c919 	.word	0x0800c919
 800c88c:	0800c919 	.word	0x0800c919
 800c890:	0800c919 	.word	0x0800c919
 800c894:	0800c919 	.word	0x0800c919
 800c898:	0800c919 	.word	0x0800c919
 800c89c:	0800c919 	.word	0x0800c919
 800c8a0:	0800c919 	.word	0x0800c919
 800c8a4:	0800c919 	.word	0x0800c919
 800c8a8:	0800c919 	.word	0x0800c919
 800c8ac:	0800c919 	.word	0x0800c919
 800c8b0:	0800c911 	.word	0x0800c911
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8b4:	f7fb face 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800c8b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8ba:	e033      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8bc:	f7fb fae0 	bl	8007e80 <HAL_RCC_GetPCLK2Freq>
 800c8c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8c2:	e02f      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8c4:	f107 0314 	add.w	r3, r7, #20
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fc fcad 	bl	8009228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8d2:	e027      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8d4:	f107 0308 	add.w	r3, r7, #8
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fc fdf1 	bl	80094c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8e2:	e01f      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e4:	4b2c      	ldr	r3, [pc, #176]	; (800c998 <UART_SetConfig+0xb50>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <UART_SetConfig+0xb50>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	08db      	lsrs	r3, r3, #3
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	4a28      	ldr	r2, [pc, #160]	; (800c99c <UART_SetConfig+0xb54>)
 800c8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c902:	e00f      	b.n	800c924 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800c904:	4b25      	ldr	r3, [pc, #148]	; (800c99c <UART_SetConfig+0xb54>)
 800c906:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c908:	e00c      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c90a:	4b25      	ldr	r3, [pc, #148]	; (800c9a0 <UART_SetConfig+0xb58>)
 800c90c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c90e:	e009      	b.n	800c924 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c916:	e005      	b.n	800c924 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c922:	bf00      	nop
    }

    if (pclk != 0U)
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d021      	beq.n	800c96e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	4a1d      	ldr	r2, [pc, #116]	; (800c9a4 <UART_SetConfig+0xb5c>)
 800c930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c934:	461a      	mov	r2, r3
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	fbb3 f2f2 	udiv	r2, r3, r2
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	085b      	lsrs	r3, r3, #1
 800c942:	441a      	add	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d908      	bls.n	800c968 <UART_SetConfig+0xb20>
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c95c:	d204      	bcs.n	800c968 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	e002      	b.n	800c96e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c98a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3738      	adds	r7, #56	; 0x38
 800c992:	46bd      	mov	sp, r7
 800c994:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c998:	58024400 	.word	0x58024400
 800c99c:	03d09000 	.word	0x03d09000
 800c9a0:	003d0900 	.word	0x003d0900
 800c9a4:	0800fe5c 	.word	0x0800fe5c

0800c9a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	430a      	orrs	r2, r1
 800c9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1a:	f003 0308 	and.w	r3, r3, #8
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3c:	f003 0310 	and.w	r3, r3, #16
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5e:	f003 0320 	and.w	r3, r3, #32
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d01a      	beq.n	800cabe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caa6:	d10a      	bne.n	800cabe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	430a      	orrs	r2, r1
 800cade:	605a      	str	r2, [r3, #4]
  }
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cafc:	f7f6 f940 	bl	8002d80 <HAL_GetTick>
 800cb00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d10e      	bne.n	800cb2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f82c 	bl	800cb7c <UART_WaitOnFlagUntilTimeout>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	e022      	b.n	800cb74 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b04      	cmp	r3, #4
 800cb3a:	d10e      	bne.n	800cb5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f816 	bl	800cb7c <UART_WaitOnFlagUntilTimeout>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	e00c      	b.n	800cb74 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2220      	movs	r2, #32
 800cb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	603b      	str	r3, [r7, #0]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb8c:	e062      	b.n	800cc54 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb94:	d05e      	beq.n	800cc54 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb96:	f7f6 f8f3 	bl	8002d80 <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	69ba      	ldr	r2, [r7, #24]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d302      	bcc.n	800cbac <UART_WaitOnFlagUntilTimeout+0x30>
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11d      	bne.n	800cbe8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cbba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	689a      	ldr	r2, [r3, #8]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 0201 	bic.w	r2, r2, #1
 800cbca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2220      	movs	r2, #32
 800cbd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e045      	b.n	800cc74 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0304 	and.w	r3, r3, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d02e      	beq.n	800cc54 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc04:	d126      	bne.n	800cc54 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f022 0201 	bic.w	r2, r2, #1
 800cc2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2220      	movs	r2, #32
 800cc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2220      	movs	r2, #32
 800cc44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800cc50:	2303      	movs	r3, #3
 800cc52:	e00f      	b.n	800cc74 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	69da      	ldr	r2, [r3, #28]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	bf0c      	ite	eq
 800cc64:	2301      	moveq	r3, #1
 800cc66:	2300      	movne	r3, #0
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d08d      	beq.n	800cb8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cc92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689a      	ldr	r2, [r3, #8]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800cca2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2220      	movs	r2, #32
 800cca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ccce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6899      	ldr	r1, [r3, #8]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	4b08      	ldr	r3, [pc, #32]	; (800ccfc <UART_EndRxTransfer+0x44>)
 800ccdc:	400b      	ands	r3, r1
 800ccde:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ccee:	bf00      	nop
 800ccf0:	370c      	adds	r7, #12
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	effffffe 	.word	0xeffffffe

0800cd00 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	69db      	ldr	r3, [r3, #28]
 800cd12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd16:	d014      	beq.n	800cd42 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689a      	ldr	r2, [r3, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd2e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd3e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd40:	e002      	b.n	800cd48 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7f4 f938 	bl	8000fb8 <HAL_UART_TxCpltCallback>
}
 800cd48:	bf00      	nop
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f7ff f854 	bl	800be0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd78:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd82:	d01f      	beq.n	800cdc4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd9a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689a      	ldr	r2, [r3, #8]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f022 0201 	bic.w	r2, r2, #1
 800cdaa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	689a      	ldr	r2, [r3, #8]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdba:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7f4 f91d 	bl	8001004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f7ff f81d 	bl	800be20 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cde6:	bf00      	nop
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b086      	sub	sp, #24
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce16:	2b80      	cmp	r3, #128	; 0x80
 800ce18:	d109      	bne.n	800ce2e <UART_DMAError+0x40>
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b21      	cmp	r3, #33	; 0x21
 800ce1e:	d106      	bne.n	800ce2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ce28:	6978      	ldr	r0, [r7, #20]
 800ce2a:	f7ff ff27 	bl	800cc7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce38:	2b40      	cmp	r3, #64	; 0x40
 800ce3a:	d109      	bne.n	800ce50 <UART_DMAError+0x62>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2b22      	cmp	r3, #34	; 0x22
 800ce40:	d106      	bne.n	800ce50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ce4a:	6978      	ldr	r0, [r7, #20]
 800ce4c:	f7ff ff34 	bl	800ccb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce56:	f043 0210 	orr.w	r2, r3, #16
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce60:	6978      	ldr	r0, [r7, #20]
 800ce62:	f7fe ffe7 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce66:	bf00      	nop
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7fe ffd1 	bl	800be34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2220      	movs	r2, #32
 800ceb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7f4 f879 	bl	8000fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cee2:	b480      	push	{r7}
 800cee4:	b083      	sub	sp, #12
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ceea:	bf00      	nop
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cefe:	bf00      	nop
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b085      	sub	sp, #20
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d101      	bne.n	800cf20 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e027      	b.n	800cf70 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2224      	movs	r2, #36	; 0x24
 800cf2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 0201 	bic.w	r2, r2, #1
 800cf46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2220      	movs	r2, #32
 800cf62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d101      	bne.n	800cf94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf90:	2302      	movs	r3, #2
 800cf92:	e02d      	b.n	800cff0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2224      	movs	r2, #36	; 0x24
 800cfa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0201 	bic.w	r2, r2, #1
 800cfba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	430a      	orrs	r2, r1
 800cfce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 f84f 	bl	800d074 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2220      	movs	r2, #32
 800cfe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d101      	bne.n	800d010 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d00c:	2302      	movs	r3, #2
 800d00e:	e02d      	b.n	800d06c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2224      	movs	r2, #36	; 0x24
 800d01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0201 	bic.w	r2, r2, #1
 800d036:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f811 	bl	800d074 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d074:	b480      	push	{r7}
 800d076:	b089      	sub	sp, #36	; 0x24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d07c:	4a2f      	ldr	r2, [pc, #188]	; (800d13c <UARTEx_SetNbDataToProcess+0xc8>)
 800d07e:	f107 0314 	add.w	r3, r7, #20
 800d082:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d086:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d08a:	4a2d      	ldr	r2, [pc, #180]	; (800d140 <UARTEx_SetNbDataToProcess+0xcc>)
 800d08c:	f107 030c 	add.w	r3, r7, #12
 800d090:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d094:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d108      	bne.n	800d0b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0b0:	e03d      	b.n	800d12e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0b2:	2310      	movs	r3, #16
 800d0b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0b6:	2310      	movs	r3, #16
 800d0b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	0e5b      	lsrs	r3, r3, #25
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0307 	and.w	r3, r3, #7
 800d0c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	0f5b      	lsrs	r3, r3, #29
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	f003 0307 	and.w	r3, r3, #7
 800d0d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d0da:	7fbb      	ldrb	r3, [r7, #30]
 800d0dc:	7f3a      	ldrb	r2, [r7, #28]
 800d0de:	f107 0120 	add.w	r1, r7, #32
 800d0e2:	440a      	add	r2, r1
 800d0e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ec:	7f3a      	ldrb	r2, [r7, #28]
 800d0ee:	f107 0120 	add.w	r1, r7, #32
 800d0f2:	440a      	add	r2, r1
 800d0f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d0f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d104:	7ffb      	ldrb	r3, [r7, #31]
 800d106:	7f7a      	ldrb	r2, [r7, #29]
 800d108:	f107 0120 	add.w	r1, r7, #32
 800d10c:	440a      	add	r2, r1
 800d10e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d112:	fb02 f303 	mul.w	r3, r2, r3
 800d116:	7f7a      	ldrb	r2, [r7, #29]
 800d118:	f107 0120 	add.w	r1, r7, #32
 800d11c:	440a      	add	r2, r1
 800d11e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d122:	fb93 f3f2 	sdiv	r3, r3, r2
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d12e:	bf00      	nop
 800d130:	3724      	adds	r7, #36	; 0x24
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	0800fe1c 	.word	0x0800fe1c
 800d140:	0800fe24 	.word	0x0800fe24

0800d144 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d148:	f001 f860 	bl	800e20c <vTaskStartScheduler>
  
  return osOK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	bd80      	pop	{r7, pc}

0800d152 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f103 0208 	add.w	r2, r3, #8
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f04f 32ff 	mov.w	r2, #4294967295
 800d16a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f103 0208 	add.w	r2, r3, #8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f103 0208 	add.w	r2, r3, #8
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d192:	b480      	push	{r7}
 800d194:	b083      	sub	sp, #12
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	689a      	ldr	r2, [r3, #8]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	601a      	str	r2, [r3, #0]
}
 800d1e8:	bf00      	nop
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20a:	d103      	bne.n	800d214 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	e00c      	b.n	800d22e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3308      	adds	r3, #8
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	e002      	b.n	800d222 <vListInsert+0x2e>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	60fb      	str	r3, [r7, #12]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d2f6      	bcs.n	800d21c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	601a      	str	r2, [r3, #0]
}
 800d25a:	bf00      	nop
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	6892      	ldr	r2, [r2, #8]
 800d27c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	6852      	ldr	r2, [r2, #4]
 800d286:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d103      	bne.n	800d29a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689a      	ldr	r2, [r3, #8]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	1e5a      	subs	r2, r3, #1
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
	...

0800d2bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <xQueueGenericReset+0x28>
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	60bb      	str	r3, [r7, #8]
 800d2e2:	e7fe      	b.n	800d2e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d2e4:	f002 fa52 	bl	800f78c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f0:	68f9      	ldr	r1, [r7, #12]
 800d2f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2f4:	fb01 f303 	mul.w	r3, r1, r3
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d314:	3b01      	subs	r3, #1
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d31a:	fb01 f303 	mul.w	r3, r1, r3
 800d31e:	441a      	add	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	22ff      	movs	r2, #255	; 0xff
 800d328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	22ff      	movs	r2, #255	; 0xff
 800d330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d114      	bne.n	800d364 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d01a      	beq.n	800d378 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3310      	adds	r3, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f001 f9c6 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d012      	beq.n	800d378 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d352:	4b0d      	ldr	r3, [pc, #52]	; (800d388 <xQueueGenericReset+0xcc>)
 800d354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	e009      	b.n	800d378 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3310      	adds	r3, #16
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fef2 	bl	800d152 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3324      	adds	r3, #36	; 0x24
 800d372:	4618      	mov	r0, r3
 800d374:	f7ff feed 	bl	800d152 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d378:	f002 fa36 	bl	800f7e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d37c:	2301      	movs	r3, #1
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af02      	add	r7, sp, #8
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d109      	bne.n	800d3b4 <xQueueGenericCreate+0x28>
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
 800d3b2:	e7fe      	b.n	800d3b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61fb      	str	r3, [r7, #28]
 800d3be:	e004      	b.n	800d3ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	fb02 f303 	mul.w	r3, r2, r3
 800d3c8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	3348      	adds	r3, #72	; 0x48
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f002 faf6 	bl	800f9c0 <pvPortMalloc>
 800d3d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00d      	beq.n	800d3f8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	3348      	adds	r3, #72	; 0x48
 800d3e4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3e6:	79fa      	ldrb	r2, [r7, #7]
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	68b9      	ldr	r1, [r7, #8]
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f000 f805 	bl	800d402 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3f8:	69bb      	ldr	r3, [r7, #24]
	}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b084      	sub	sp, #16
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	607a      	str	r2, [r7, #4]
 800d40e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d103      	bne.n	800d41e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	69ba      	ldr	r2, [r7, #24]
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	e002      	b.n	800d424 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d430:	2101      	movs	r1, #1
 800d432:	69b8      	ldr	r0, [r7, #24]
 800d434:	f7ff ff42 	bl	800d2bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d438:	bf00      	nop
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08e      	sub	sp, #56	; 0x38
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d44e:	2300      	movs	r3, #0
 800d450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d109      	bne.n	800d470 <xQueueGenericSend+0x30>
 800d45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d46e:	e7fe      	b.n	800d46e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d103      	bne.n	800d47e <xQueueGenericSend+0x3e>
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d101      	bne.n	800d482 <xQueueGenericSend+0x42>
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <xQueueGenericSend+0x44>
 800d482:	2300      	movs	r3, #0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d109      	bne.n	800d49c <xQueueGenericSend+0x5c>
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	627b      	str	r3, [r7, #36]	; 0x24
 800d49a:	e7fe      	b.n	800d49a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d103      	bne.n	800d4aa <xQueueGenericSend+0x6a>
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d101      	bne.n	800d4ae <xQueueGenericSend+0x6e>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <xQueueGenericSend+0x70>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d109      	bne.n	800d4c8 <xQueueGenericSend+0x88>
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	623b      	str	r3, [r7, #32]
 800d4c6:	e7fe      	b.n	800d4c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4c8:	f001 fa9e 	bl	800ea08 <xTaskGetSchedulerState>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <xQueueGenericSend+0x98>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d101      	bne.n	800d4dc <xQueueGenericSend+0x9c>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <xQueueGenericSend+0x9e>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d109      	bne.n	800d4f6 <xQueueGenericSend+0xb6>
 800d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	61fb      	str	r3, [r7, #28]
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4f6:	f002 f949 	bl	800f78c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d502:	429a      	cmp	r2, r3
 800d504:	d302      	bcc.n	800d50c <xQueueGenericSend+0xcc>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d129      	bne.n	800d560 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d50c:	683a      	ldr	r2, [r7, #0]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d512:	f000 fba9 	bl	800dc68 <prvCopyDataToQueue>
 800d516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d010      	beq.n	800d542 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d522:	3324      	adds	r3, #36	; 0x24
 800d524:	4618      	mov	r0, r3
 800d526:	f001 f8d7 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d013      	beq.n	800d558 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d530:	4b3f      	ldr	r3, [pc, #252]	; (800d630 <xQueueGenericSend+0x1f0>)
 800d532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	e00a      	b.n	800d558 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d007      	beq.n	800d558 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d548:	4b39      	ldr	r3, [pc, #228]	; (800d630 <xQueueGenericSend+0x1f0>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d558:	f002 f946 	bl	800f7e8 <vPortExitCritical>
				return pdPASS;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e063      	b.n	800d628 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d566:	f002 f93f 	bl	800f7e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	e05c      	b.n	800d628 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	2b00      	cmp	r3, #0
 800d572:	d106      	bne.n	800d582 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d574:	f107 0314 	add.w	r3, r7, #20
 800d578:	4618      	mov	r0, r3
 800d57a:	f001 f90f 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d57e:	2301      	movs	r3, #1
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d582:	f002 f931 	bl	800f7e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d586:	f000 fe8d 	bl	800e2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d58a:	f002 f8ff 	bl	800f78c <vPortEnterCritical>
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d594:	b25b      	sxtb	r3, r3
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d103      	bne.n	800d5a4 <xQueueGenericSend+0x164>
 800d59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5aa:	b25b      	sxtb	r3, r3
 800d5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b0:	d103      	bne.n	800d5ba <xQueueGenericSend+0x17a>
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5ba:	f002 f915 	bl	800f7e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5be:	1d3a      	adds	r2, r7, #4
 800d5c0:	f107 0314 	add.w	r3, r7, #20
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f001 f8fe 	bl	800e7c8 <xTaskCheckForTimeOut>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d124      	bne.n	800d61c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5d4:	f000 fc40 	bl	800de58 <prvIsQueueFull>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d018      	beq.n	800d610 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	3310      	adds	r3, #16
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f001 f828 	bl	800e63c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ee:	f000 fbcb 	bl	800dd88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5f2:	f000 fe65 	bl	800e2c0 <xTaskResumeAll>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f47f af7c 	bne.w	800d4f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d5fe:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <xQueueGenericSend+0x1f0>)
 800d600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	e772      	b.n	800d4f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d612:	f000 fbb9 	bl	800dd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d616:	f000 fe53 	bl	800e2c0 <xTaskResumeAll>
 800d61a:	e76c      	b.n	800d4f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61e:	f000 fbb3 	bl	800dd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d622:	f000 fe4d 	bl	800e2c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3738      	adds	r7, #56	; 0x38
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	e000ed04 	.word	0xe000ed04

0800d634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08e      	sub	sp, #56	; 0x38
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
 800d640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <xQueueGenericSendFromISR+0x2c>
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
 800d65e:	e7fe      	b.n	800d65e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d103      	bne.n	800d66e <xQueueGenericSendFromISR+0x3a>
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <xQueueGenericSendFromISR+0x3e>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <xQueueGenericSendFromISR+0x40>
 800d672:	2300      	movs	r3, #0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <xQueueGenericSendFromISR+0x58>
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	623b      	str	r3, [r7, #32]
 800d68a:	e7fe      	b.n	800d68a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d103      	bne.n	800d69a <xQueueGenericSendFromISR+0x66>
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d696:	2b01      	cmp	r3, #1
 800d698:	d101      	bne.n	800d69e <xQueueGenericSendFromISR+0x6a>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e000      	b.n	800d6a0 <xQueueGenericSendFromISR+0x6c>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d109      	bne.n	800d6b8 <xQueueGenericSendFromISR+0x84>
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	61fb      	str	r3, [r7, #28]
 800d6b6:	e7fe      	b.n	800d6b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6b8:	f002 f944 	bl	800f944 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6bc:	f3ef 8211 	mrs	r2, BASEPRI
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	61ba      	str	r2, [r7, #24]
 800d6d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d302      	bcc.n	800d6ea <xQueueGenericSendFromISR+0xb6>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d12c      	bne.n	800d744 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	68b9      	ldr	r1, [r7, #8]
 800d6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6fa:	f000 fab5 	bl	800dc68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d706:	d112      	bne.n	800d72e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d016      	beq.n	800d73e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	3324      	adds	r3, #36	; 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f000 ffdf 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00e      	beq.n	800d73e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00b      	beq.n	800d73e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	e007      	b.n	800d73e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d732:	3301      	adds	r3, #1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	b25a      	sxtb	r2, r3
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d73e:	2301      	movs	r3, #1
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d742:	e001      	b.n	800d748 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d744:	2300      	movs	r3, #0
 800d746:	637b      	str	r3, [r7, #52]	; 0x34
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d754:	4618      	mov	r0, r3
 800d756:	3738      	adds	r7, #56	; 0x38
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08e      	sub	sp, #56	; 0x38
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d109      	bne.n	800d784 <xQueueGiveFromISR+0x28>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	623b      	str	r3, [r7, #32]
 800d782:	e7fe      	b.n	800d782 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d009      	beq.n	800d7a0 <xQueueGiveFromISR+0x44>
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	61fb      	str	r3, [r7, #28]
 800d79e:	e7fe      	b.n	800d79e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <xQueueGiveFromISR+0x54>
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <xQueueGiveFromISR+0x58>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <xQueueGiveFromISR+0x5a>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d109      	bne.n	800d7ce <xQueueGiveFromISR+0x72>
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	f383 8811 	msr	BASEPRI, r3
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	61bb      	str	r3, [r7, #24]
 800d7cc:	e7fe      	b.n	800d7cc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7ce:	f002 f8b9 	bl	800f944 <vPortValidateInterruptPriority>
	__asm volatile
 800d7d2:	f3ef 8211 	mrs	r2, BASEPRI
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	617a      	str	r2, [r7, #20]
 800d7e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d7ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d22b      	bcs.n	800d856 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	1c5a      	adds	r2, r3, #1
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d818:	d112      	bne.n	800d840 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d016      	beq.n	800d850 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	3324      	adds	r3, #36	; 0x24
 800d826:	4618      	mov	r0, r3
 800d828:	f000 ff56 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00e      	beq.n	800d850 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2201      	movs	r2, #1
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	e007      	b.n	800d850 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d844:	3301      	adds	r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	b25a      	sxtb	r2, r3
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d850:	2301      	movs	r3, #1
 800d852:	637b      	str	r3, [r7, #52]	; 0x34
 800d854:	e001      	b.n	800d85a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d856:	2300      	movs	r3, #0
 800d858:	637b      	str	r3, [r7, #52]	; 0x34
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d866:	4618      	mov	r0, r3
 800d868:	3738      	adds	r7, #56	; 0x38
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08c      	sub	sp, #48	; 0x30
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d87c:	2300      	movs	r3, #0
 800d87e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	2b00      	cmp	r3, #0
 800d888:	d109      	bne.n	800d89e <xQueueReceive+0x2e>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	623b      	str	r3, [r7, #32]
 800d89c:	e7fe      	b.n	800d89c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d103      	bne.n	800d8ac <xQueueReceive+0x3c>
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d101      	bne.n	800d8b0 <xQueueReceive+0x40>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <xQueueReceive+0x42>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d109      	bne.n	800d8ca <xQueueReceive+0x5a>
 800d8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	61fb      	str	r3, [r7, #28]
 800d8c8:	e7fe      	b.n	800d8c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8ca:	f001 f89d 	bl	800ea08 <xTaskGetSchedulerState>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <xQueueReceive+0x6a>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <xQueueReceive+0x6e>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e000      	b.n	800d8e0 <xQueueReceive+0x70>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d109      	bne.n	800d8f8 <xQueueReceive+0x88>
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e7fe      	b.n	800d8f6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8f8:	f001 ff48 	bl	800f78c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d900:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01f      	beq.n	800d948 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d908:	68b9      	ldr	r1, [r7, #8]
 800d90a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d90c:	f000 fa16 	bl	800dd3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	1e5a      	subs	r2, r3, #1
 800d914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d916:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00f      	beq.n	800d940 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	3310      	adds	r3, #16
 800d924:	4618      	mov	r0, r3
 800d926:	f000 fed7 	bl	800e6d8 <xTaskRemoveFromEventList>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d007      	beq.n	800d940 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d930:	4b3c      	ldr	r3, [pc, #240]	; (800da24 <xQueueReceive+0x1b4>)
 800d932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d940:	f001 ff52 	bl	800f7e8 <vPortExitCritical>
				return pdPASS;
 800d944:	2301      	movs	r3, #1
 800d946:	e069      	b.n	800da1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d103      	bne.n	800d956 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d94e:	f001 ff4b 	bl	800f7e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d952:	2300      	movs	r3, #0
 800d954:	e062      	b.n	800da1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d95c:	f107 0310 	add.w	r3, r7, #16
 800d960:	4618      	mov	r0, r3
 800d962:	f000 ff1b 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d966:	2301      	movs	r3, #1
 800d968:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d96a:	f001 ff3d 	bl	800f7e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d96e:	f000 fc99 	bl	800e2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d972:	f001 ff0b 	bl	800f78c <vPortEnterCritical>
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d97c:	b25b      	sxtb	r3, r3
 800d97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d982:	d103      	bne.n	800d98c <xQueueReceive+0x11c>
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d992:	b25b      	sxtb	r3, r3
 800d994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d998:	d103      	bne.n	800d9a2 <xQueueReceive+0x132>
 800d99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9a2:	f001 ff21 	bl	800f7e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9a6:	1d3a      	adds	r2, r7, #4
 800d9a8:	f107 0310 	add.w	r3, r7, #16
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 ff0a 	bl	800e7c8 <xTaskCheckForTimeOut>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d123      	bne.n	800da02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9bc:	f000 fa36 	bl	800de2c <prvIsQueueEmpty>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d017      	beq.n	800d9f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	3324      	adds	r3, #36	; 0x24
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 fe34 	bl	800e63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d6:	f000 f9d7 	bl	800dd88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9da:	f000 fc71 	bl	800e2c0 <xTaskResumeAll>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d189      	bne.n	800d8f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <xQueueReceive+0x1b4>)
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	e780      	b.n	800d8f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f8:	f000 f9c6 	bl	800dd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9fc:	f000 fc60 	bl	800e2c0 <xTaskResumeAll>
 800da00:	e77a      	b.n	800d8f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da04:	f000 f9c0 	bl	800dd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da08:	f000 fc5a 	bl	800e2c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0e:	f000 fa0d 	bl	800de2c <prvIsQueueEmpty>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	f43f af6f 	beq.w	800d8f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3730      	adds	r7, #48	; 0x30
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08e      	sub	sp, #56	; 0x38
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da32:	2300      	movs	r3, #0
 800da34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d109      	bne.n	800da58 <xQueueSemaphoreTake+0x30>
 800da44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	623b      	str	r3, [r7, #32]
 800da56:	e7fe      	b.n	800da56 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d009      	beq.n	800da74 <xQueueSemaphoreTake+0x4c>
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	61fb      	str	r3, [r7, #28]
 800da72:	e7fe      	b.n	800da72 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da74:	f000 ffc8 	bl	800ea08 <xTaskGetSchedulerState>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d102      	bne.n	800da84 <xQueueSemaphoreTake+0x5c>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <xQueueSemaphoreTake+0x60>
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <xQueueSemaphoreTake+0x62>
 800da88:	2300      	movs	r3, #0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <xQueueSemaphoreTake+0x7a>
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	61bb      	str	r3, [r7, #24]
 800daa0:	e7fe      	b.n	800daa0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daa2:	f001 fe73 	bl	800f78c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800daac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d024      	beq.n	800dafc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	1e5a      	subs	r2, r3, #1
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d104      	bne.n	800dacc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dac2:	f001 f95b 	bl	800ed7c <pvTaskIncrementMutexHeldCount>
 800dac6:	4602      	mov	r2, r0
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00f      	beq.n	800daf4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	3310      	adds	r3, #16
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 fdfd 	bl	800e6d8 <xTaskRemoveFromEventList>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dae4:	4b53      	ldr	r3, [pc, #332]	; (800dc34 <xQueueSemaphoreTake+0x20c>)
 800dae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800daf4:	f001 fe78 	bl	800f7e8 <vPortExitCritical>
				return pdPASS;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e096      	b.n	800dc2a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d110      	bne.n	800db24 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	2b00      	cmp	r3, #0
 800db06:	d009      	beq.n	800db1c <xQueueSemaphoreTake+0xf4>
 800db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	617b      	str	r3, [r7, #20]
 800db1a:	e7fe      	b.n	800db1a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db1c:	f001 fe64 	bl	800f7e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db20:	2300      	movs	r3, #0
 800db22:	e082      	b.n	800dc2a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db2a:	f107 030c 	add.w	r3, r7, #12
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 fe34 	bl	800e79c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db34:	2301      	movs	r3, #1
 800db36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db38:	f001 fe56 	bl	800f7e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db3c:	f000 fbb2 	bl	800e2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db40:	f001 fe24 	bl	800f78c <vPortEnterCritical>
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db4a:	b25b      	sxtb	r3, r3
 800db4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db50:	d103      	bne.n	800db5a <xQueueSemaphoreTake+0x132>
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	2200      	movs	r2, #0
 800db56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db60:	b25b      	sxtb	r3, r3
 800db62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db66:	d103      	bne.n	800db70 <xQueueSemaphoreTake+0x148>
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db70:	f001 fe3a 	bl	800f7e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db74:	463a      	mov	r2, r7
 800db76:	f107 030c 	add.w	r3, r7, #12
 800db7a:	4611      	mov	r1, r2
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 fe23 	bl	800e7c8 <xTaskCheckForTimeOut>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d132      	bne.n	800dbee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db8a:	f000 f94f 	bl	800de2c <prvIsQueueEmpty>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d026      	beq.n	800dbe2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800db9c:	f001 fdf6 	bl	800f78c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 ff4d 	bl	800ea44 <xTaskPriorityInherit>
 800dbaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dbac:	f001 fe1c 	bl	800f7e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	3324      	adds	r3, #36	; 0x24
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f000 fd3f 	bl	800e63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbc0:	f000 f8e2 	bl	800dd88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbc4:	f000 fb7c 	bl	800e2c0 <xTaskResumeAll>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f47f af69 	bne.w	800daa2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800dbd0:	4b18      	ldr	r3, [pc, #96]	; (800dc34 <xQueueSemaphoreTake+0x20c>)
 800dbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	e75f      	b.n	800daa2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbe4:	f000 f8d0 	bl	800dd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbe8:	f000 fb6a 	bl	800e2c0 <xTaskResumeAll>
 800dbec:	e759      	b.n	800daa2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbf0:	f000 f8ca 	bl	800dd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbf4:	f000 fb64 	bl	800e2c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbfa:	f000 f917 	bl	800de2c <prvIsQueueEmpty>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f43f af4e 	beq.w	800daa2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00d      	beq.n	800dc28 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800dc0c:	f001 fdbe 	bl	800f78c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc12:	f000 f811 	bl	800dc38 <prvGetDisinheritPriorityAfterTimeout>
 800dc16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 f814 	bl	800ec4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc24:	f001 fde0 	bl	800f7e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3738      	adds	r7, #56	; 0x38
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d006      	beq.n	800dc56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f1c3 0307 	rsb	r3, r3, #7
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e001      	b.n	800dc5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc74:	2300      	movs	r3, #0
 800dc76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10d      	bne.n	800dca2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d14d      	bne.n	800dd2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 ff56 	bl	800eb44 <xTaskPriorityDisinherit>
 800dc98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	609a      	str	r2, [r3, #8]
 800dca0:	e043      	b.n	800dd2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d119      	bne.n	800dcdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6858      	ldr	r0, [r3, #4]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	f002 f880 	bl	800fdb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc0:	441a      	add	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d32b      	bcc.n	800dd2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	605a      	str	r2, [r3, #4]
 800dcda:	e026      	b.n	800dd2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68d8      	ldr	r0, [r3, #12]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce4:	461a      	mov	r2, r3
 800dce6:	68b9      	ldr	r1, [r7, #8]
 800dce8:	f002 f866 	bl	800fdb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68da      	ldr	r2, [r3, #12]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf4:	425b      	negs	r3, r3
 800dcf6:	441a      	add	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	68da      	ldr	r2, [r3, #12]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d207      	bcs.n	800dd18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	689a      	ldr	r2, [r3, #8]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd10:	425b      	negs	r3, r3
 800dd12:	441a      	add	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d105      	bne.n	800dd2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd32:	697b      	ldr	r3, [r7, #20]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d018      	beq.n	800dd80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68da      	ldr	r2, [r3, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	441a      	add	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68da      	ldr	r2, [r3, #12]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d303      	bcc.n	800dd70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68d9      	ldr	r1, [r3, #12]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6838      	ldr	r0, [r7, #0]
 800dd7c:	f002 f81c 	bl	800fdb8 <memcpy>
	}
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd90:	f001 fcfc 	bl	800f78c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd9c:	e011      	b.n	800ddc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d012      	beq.n	800ddcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3324      	adds	r3, #36	; 0x24
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fc94 	bl	800e6d8 <xTaskRemoveFromEventList>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddb6:	f000 fd67 	bl	800e888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	dce9      	bgt.n	800dd9e <prvUnlockQueue+0x16>
 800ddca:	e000      	b.n	800ddce <prvUnlockQueue+0x46>
					break;
 800ddcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	22ff      	movs	r2, #255	; 0xff
 800ddd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ddd6:	f001 fd07 	bl	800f7e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddda:	f001 fcd7 	bl	800f78c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dde4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dde6:	e011      	b.n	800de0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d012      	beq.n	800de16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3310      	adds	r3, #16
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fc6f 	bl	800e6d8 <xTaskRemoveFromEventList>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de00:	f000 fd42 	bl	800e888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de04:	7bbb      	ldrb	r3, [r7, #14]
 800de06:	3b01      	subs	r3, #1
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de10:	2b00      	cmp	r3, #0
 800de12:	dce9      	bgt.n	800dde8 <prvUnlockQueue+0x60>
 800de14:	e000      	b.n	800de18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	22ff      	movs	r2, #255	; 0xff
 800de1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de20:	f001 fce2 	bl	800f7e8 <vPortExitCritical>
}
 800de24:	bf00      	nop
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de34:	f001 fcaa 	bl	800f78c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d102      	bne.n	800de46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de40:	2301      	movs	r3, #1
 800de42:	60fb      	str	r3, [r7, #12]
 800de44:	e001      	b.n	800de4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de4a:	f001 fccd 	bl	800f7e8 <vPortExitCritical>

	return xReturn;
 800de4e:	68fb      	ldr	r3, [r7, #12]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de60:	f001 fc94 	bl	800f78c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d102      	bne.n	800de76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e001      	b.n	800de7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de76:	2300      	movs	r3, #0
 800de78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de7a:	f001 fcb5 	bl	800f7e8 <vPortExitCritical>

	return xReturn;
 800de7e:	68fb      	ldr	r3, [r7, #12]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de92:	2300      	movs	r3, #0
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	e014      	b.n	800dec2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de98:	4a0e      	ldr	r2, [pc, #56]	; (800ded4 <vQueueAddToRegistry+0x4c>)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10b      	bne.n	800debc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dea4:	490b      	ldr	r1, [pc, #44]	; (800ded4 <vQueueAddToRegistry+0x4c>)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800deae:	4a09      	ldr	r2, [pc, #36]	; (800ded4 <vQueueAddToRegistry+0x4c>)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	4413      	add	r3, r2
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800deba:	e005      	b.n	800dec8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3301      	adds	r3, #1
 800dec0:	60fb      	str	r3, [r7, #12]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b07      	cmp	r3, #7
 800dec6:	d9e7      	bls.n	800de98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dec8:	bf00      	nop
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	24027cb4 	.word	0x24027cb4

0800ded8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dee8:	f001 fc50 	bl	800f78c <vPortEnterCritical>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800def2:	b25b      	sxtb	r3, r3
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def8:	d103      	bne.n	800df02 <vQueueWaitForMessageRestricted+0x2a>
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df08:	b25b      	sxtb	r3, r3
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d103      	bne.n	800df18 <vQueueWaitForMessageRestricted+0x40>
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df18:	f001 fc66 	bl	800f7e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df20:	2b00      	cmp	r3, #0
 800df22:	d106      	bne.n	800df32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3324      	adds	r3, #36	; 0x24
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	68b9      	ldr	r1, [r7, #8]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 fba9 	bl	800e684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df32:	6978      	ldr	r0, [r7, #20]
 800df34:	f7ff ff28 	bl	800dd88 <prvUnlockQueue>
	}
 800df38:	bf00      	nop
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08c      	sub	sp, #48	; 0x30
 800df44:	af04      	add	r7, sp, #16
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	603b      	str	r3, [r7, #0]
 800df4c:	4613      	mov	r3, r2
 800df4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df50:	88fb      	ldrh	r3, [r7, #6]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4618      	mov	r0, r3
 800df56:	f001 fd33 	bl	800f9c0 <pvPortMalloc>
 800df5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00e      	beq.n	800df80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df62:	2054      	movs	r0, #84	; 0x54
 800df64:	f001 fd2c 	bl	800f9c0 <pvPortMalloc>
 800df68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	631a      	str	r2, [r3, #48]	; 0x30
 800df76:	e005      	b.n	800df84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df78:	6978      	ldr	r0, [r7, #20]
 800df7a:	f001 fde3 	bl	800fb44 <vPortFree>
 800df7e:	e001      	b.n	800df84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df80:	2300      	movs	r3, #0
 800df82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d013      	beq.n	800dfb2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df8a:	88fa      	ldrh	r2, [r7, #6]
 800df8c:	2300      	movs	r3, #0
 800df8e:	9303      	str	r3, [sp, #12]
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	9302      	str	r3, [sp, #8]
 800df94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f80e 	bl	800dfc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfa6:	69f8      	ldr	r0, [r7, #28]
 800dfa8:	f000 f892 	bl	800e0d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfac:	2301      	movs	r3, #1
 800dfae:	61bb      	str	r3, [r7, #24]
 800dfb0:	e002      	b.n	800dfb8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfb8:	69bb      	ldr	r3, [r7, #24]
	}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3720      	adds	r7, #32
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b088      	sub	sp, #32
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	60f8      	str	r0, [r7, #12]
 800dfca:	60b9      	str	r1, [r7, #8]
 800dfcc:	607a      	str	r2, [r7, #4]
 800dfce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dfda:	440b      	add	r3, r1
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	f023 0307 	bic.w	r3, r3, #7
 800dfe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	f003 0307 	and.w	r3, r3, #7
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d009      	beq.n	800e008 <prvInitialiseNewTask+0x46>
 800dff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	e7fe      	b.n	800e006 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d01f      	beq.n	800e04e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e012      	b.n	800e03a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	4413      	add	r3, r2
 800e01a:	7819      	ldrb	r1, [r3, #0]
 800e01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	4413      	add	r3, r2
 800e022:	3334      	adds	r3, #52	; 0x34
 800e024:	460a      	mov	r2, r1
 800e026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	4413      	add	r3, r2
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d006      	beq.n	800e042 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	3301      	adds	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	2b0f      	cmp	r3, #15
 800e03e:	d9e9      	bls.n	800e014 <prvInitialiseNewTask+0x52>
 800e040:	e000      	b.n	800e044 <prvInitialiseNewTask+0x82>
			{
				break;
 800e042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e046:	2200      	movs	r2, #0
 800e048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e04c:	e003      	b.n	800e056 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	2200      	movs	r2, #0
 800e052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e058:	2b06      	cmp	r3, #6
 800e05a:	d901      	bls.n	800e060 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e05c:	2306      	movs	r3, #6
 800e05e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e06a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	2200      	movs	r2, #0
 800e070:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	3304      	adds	r3, #4
 800e076:	4618      	mov	r0, r3
 800e078:	f7ff f88b 	bl	800d192 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	3318      	adds	r3, #24
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff f886 	bl	800d192 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e08a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f1c3 0207 	rsb	r2, r3, #7
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e09a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	2200      	movs	r2, #0
 800e0a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	68f9      	ldr	r1, [r7, #12]
 800e0ae:	69b8      	ldr	r0, [r7, #24]
 800e0b0:	f001 fa48 	bl	800f544 <pxPortInitialiseStack>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
	...

0800e0d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0d8:	f001 fb58 	bl	800f78c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0dc:	4b2a      	ldr	r3, [pc, #168]	; (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	4a29      	ldr	r2, [pc, #164]	; (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0e6:	4b29      	ldr	r3, [pc, #164]	; (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0ee:	4a27      	ldr	r2, [pc, #156]	; (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0f4:	4b24      	ldr	r3, [pc, #144]	; (800e188 <prvAddNewTaskToReadyList+0xb8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d110      	bne.n	800e11e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0fc:	f000 fbe8 	bl	800e8d0 <prvInitialiseTaskLists>
 800e100:	e00d      	b.n	800e11e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e102:	4b23      	ldr	r3, [pc, #140]	; (800e190 <prvAddNewTaskToReadyList+0xc0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d109      	bne.n	800e11e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e10a:	4b20      	ldr	r3, [pc, #128]	; (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	429a      	cmp	r2, r3
 800e116:	d802      	bhi.n	800e11e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e118:	4a1c      	ldr	r2, [pc, #112]	; (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e11e:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <prvAddNewTaskToReadyList+0xc4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	4a1b      	ldr	r2, [pc, #108]	; (800e194 <prvAddNewTaskToReadyList+0xc4>)
 800e126:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	2201      	movs	r2, #1
 800e12e:	409a      	lsls	r2, r3
 800e130:	4b19      	ldr	r3, [pc, #100]	; (800e198 <prvAddNewTaskToReadyList+0xc8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4313      	orrs	r3, r2
 800e136:	4a18      	ldr	r2, [pc, #96]	; (800e198 <prvAddNewTaskToReadyList+0xc8>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13e:	4613      	mov	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4a15      	ldr	r2, [pc, #84]	; (800e19c <prvAddNewTaskToReadyList+0xcc>)
 800e148:	441a      	add	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f7ff f82b 	bl	800d1ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e156:	f001 fb47 	bl	800f7e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e15a:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <prvAddNewTaskToReadyList+0xc0>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e162:	4b0a      	ldr	r3, [pc, #40]	; (800e18c <prvAddNewTaskToReadyList+0xbc>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d207      	bcs.n	800e180 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e170:	4b0b      	ldr	r3, [pc, #44]	; (800e1a0 <prvAddNewTaskToReadyList+0xd0>)
 800e172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	2400015c 	.word	0x2400015c
 800e18c:	2400005c 	.word	0x2400005c
 800e190:	24000168 	.word	0x24000168
 800e194:	24000178 	.word	0x24000178
 800e198:	24000164 	.word	0x24000164
 800e19c:	24000060 	.word	0x24000060
 800e1a0:	e000ed04 	.word	0xe000ed04

0800e1a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d016      	beq.n	800e1e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e1b6:	4b13      	ldr	r3, [pc, #76]	; (800e204 <vTaskDelay+0x60>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d009      	beq.n	800e1d2 <vTaskDelay+0x2e>
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60bb      	str	r3, [r7, #8]
 800e1d0:	e7fe      	b.n	800e1d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e1d2:	f000 f867 	bl	800e2a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fde3 	bl	800eda4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1de:	f000 f86f 	bl	800e2c0 <xTaskResumeAll>
 800e1e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d107      	bne.n	800e1fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e1ea:	4b07      	ldr	r3, [pc, #28]	; (800e208 <vTaskDelay+0x64>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1fa:	bf00      	nop
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	24000184 	.word	0x24000184
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e212:	4b1e      	ldr	r3, [pc, #120]	; (800e28c <vTaskStartScheduler+0x80>)
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	2300      	movs	r3, #0
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	2300      	movs	r3, #0
 800e21c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e220:	491b      	ldr	r1, [pc, #108]	; (800e290 <vTaskStartScheduler+0x84>)
 800e222:	481c      	ldr	r0, [pc, #112]	; (800e294 <vTaskStartScheduler+0x88>)
 800e224:	f7ff fe8c 	bl	800df40 <xTaskCreate>
 800e228:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d102      	bne.n	800e236 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800e230:	f000 fe1e 	bl	800ee70 <xTimerCreateTimerTask>
 800e234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d115      	bne.n	800e268 <vTaskStartScheduler+0x5c>
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e24e:	4b12      	ldr	r3, [pc, #72]	; (800e298 <vTaskStartScheduler+0x8c>)
 800e250:	f04f 32ff 	mov.w	r2, #4294967295
 800e254:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e256:	4b11      	ldr	r3, [pc, #68]	; (800e29c <vTaskStartScheduler+0x90>)
 800e258:	2201      	movs	r2, #1
 800e25a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e25c:	4b10      	ldr	r3, [pc, #64]	; (800e2a0 <vTaskStartScheduler+0x94>)
 800e25e:	2200      	movs	r2, #0
 800e260:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e262:	f001 f9f5 	bl	800f650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e266:	e00d      	b.n	800e284 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26e:	d109      	bne.n	800e284 <vTaskStartScheduler+0x78>
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	607b      	str	r3, [r7, #4]
 800e282:	e7fe      	b.n	800e282 <vTaskStartScheduler+0x76>
}
 800e284:	bf00      	nop
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	24000180 	.word	0x24000180
 800e290:	0800fe2c 	.word	0x0800fe2c
 800e294:	0800e8a1 	.word	0x0800e8a1
 800e298:	2400017c 	.word	0x2400017c
 800e29c:	24000168 	.word	0x24000168
 800e2a0:	24000160 	.word	0x24000160

0800e2a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e2a8:	4b04      	ldr	r3, [pc, #16]	; (800e2bc <vTaskSuspendAll+0x18>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	4a03      	ldr	r2, [pc, #12]	; (800e2bc <vTaskSuspendAll+0x18>)
 800e2b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e2b2:	bf00      	nop
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	24000184 	.word	0x24000184

0800e2c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2ce:	4b41      	ldr	r3, [pc, #260]	; (800e3d4 <xTaskResumeAll+0x114>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d109      	bne.n	800e2ea <xTaskResumeAll+0x2a>
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	e7fe      	b.n	800e2e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2ea:	f001 fa4f 	bl	800f78c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2ee:	4b39      	ldr	r3, [pc, #228]	; (800e3d4 <xTaskResumeAll+0x114>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	4a37      	ldr	r2, [pc, #220]	; (800e3d4 <xTaskResumeAll+0x114>)
 800e2f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2f8:	4b36      	ldr	r3, [pc, #216]	; (800e3d4 <xTaskResumeAll+0x114>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d161      	bne.n	800e3c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e300:	4b35      	ldr	r3, [pc, #212]	; (800e3d8 <xTaskResumeAll+0x118>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d05d      	beq.n	800e3c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e308:	e02e      	b.n	800e368 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e30a:	4b34      	ldr	r3, [pc, #208]	; (800e3dc <xTaskResumeAll+0x11c>)
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3318      	adds	r3, #24
 800e316:	4618      	mov	r0, r3
 800e318:	f7fe ffa5 	bl	800d266 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3304      	adds	r3, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f7fe ffa0 	bl	800d266 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32a:	2201      	movs	r2, #1
 800e32c:	409a      	lsls	r2, r3
 800e32e:	4b2c      	ldr	r3, [pc, #176]	; (800e3e0 <xTaskResumeAll+0x120>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4313      	orrs	r3, r2
 800e334:	4a2a      	ldr	r2, [pc, #168]	; (800e3e0 <xTaskResumeAll+0x120>)
 800e336:	6013      	str	r3, [r2, #0]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4a27      	ldr	r2, [pc, #156]	; (800e3e4 <xTaskResumeAll+0x124>)
 800e346:	441a      	add	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3304      	adds	r3, #4
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fe ff2c 	bl	800d1ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	4b23      	ldr	r3, [pc, #140]	; (800e3e8 <xTaskResumeAll+0x128>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35e:	429a      	cmp	r2, r3
 800e360:	d302      	bcc.n	800e368 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800e362:	4b22      	ldr	r3, [pc, #136]	; (800e3ec <xTaskResumeAll+0x12c>)
 800e364:	2201      	movs	r2, #1
 800e366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e368:	4b1c      	ldr	r3, [pc, #112]	; (800e3dc <xTaskResumeAll+0x11c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1cc      	bne.n	800e30a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e376:	f000 fb27 	bl	800e9c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e37a:	4b1d      	ldr	r3, [pc, #116]	; (800e3f0 <xTaskResumeAll+0x130>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d010      	beq.n	800e3a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e386:	f000 f847 	bl	800e418 <xTaskIncrementTick>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d002      	beq.n	800e396 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800e390:	4b16      	ldr	r3, [pc, #88]	; (800e3ec <xTaskResumeAll+0x12c>)
 800e392:	2201      	movs	r2, #1
 800e394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3b01      	subs	r3, #1
 800e39a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1f1      	bne.n	800e386 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800e3a2:	4b13      	ldr	r3, [pc, #76]	; (800e3f0 <xTaskResumeAll+0x130>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3a8:	4b10      	ldr	r3, [pc, #64]	; (800e3ec <xTaskResumeAll+0x12c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d009      	beq.n	800e3c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	; (800e3f4 <xTaskResumeAll+0x134>)
 800e3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3c4:	f001 fa10 	bl	800f7e8 <vPortExitCritical>

	return xAlreadyYielded;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	24000184 	.word	0x24000184
 800e3d8:	2400015c 	.word	0x2400015c
 800e3dc:	2400011c 	.word	0x2400011c
 800e3e0:	24000164 	.word	0x24000164
 800e3e4:	24000060 	.word	0x24000060
 800e3e8:	2400005c 	.word	0x2400005c
 800e3ec:	24000170 	.word	0x24000170
 800e3f0:	2400016c 	.word	0x2400016c
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3fe:	4b05      	ldr	r3, [pc, #20]	; (800e414 <xTaskGetTickCount+0x1c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e404:	687b      	ldr	r3, [r7, #4]
}
 800e406:	4618      	mov	r0, r3
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	24000160 	.word	0x24000160

0800e418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e41e:	2300      	movs	r3, #0
 800e420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e422:	4b4e      	ldr	r3, [pc, #312]	; (800e55c <xTaskIncrementTick+0x144>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	f040 8087 	bne.w	800e53a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e42c:	4b4c      	ldr	r3, [pc, #304]	; (800e560 <xTaskIncrementTick+0x148>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3301      	adds	r3, #1
 800e432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e434:	4a4a      	ldr	r2, [pc, #296]	; (800e560 <xTaskIncrementTick+0x148>)
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d11f      	bne.n	800e480 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e440:	4b48      	ldr	r3, [pc, #288]	; (800e564 <xTaskIncrementTick+0x14c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d009      	beq.n	800e45e <xTaskIncrementTick+0x46>
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	e7fe      	b.n	800e45c <xTaskIncrementTick+0x44>
 800e45e:	4b41      	ldr	r3, [pc, #260]	; (800e564 <xTaskIncrementTick+0x14c>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	4b40      	ldr	r3, [pc, #256]	; (800e568 <xTaskIncrementTick+0x150>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a3e      	ldr	r2, [pc, #248]	; (800e564 <xTaskIncrementTick+0x14c>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	4a3e      	ldr	r2, [pc, #248]	; (800e568 <xTaskIncrementTick+0x150>)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6013      	str	r3, [r2, #0]
 800e472:	4b3e      	ldr	r3, [pc, #248]	; (800e56c <xTaskIncrementTick+0x154>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	3301      	adds	r3, #1
 800e478:	4a3c      	ldr	r2, [pc, #240]	; (800e56c <xTaskIncrementTick+0x154>)
 800e47a:	6013      	str	r3, [r2, #0]
 800e47c:	f000 faa4 	bl	800e9c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e480:	4b3b      	ldr	r3, [pc, #236]	; (800e570 <xTaskIncrementTick+0x158>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	d348      	bcc.n	800e51c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e48a:	4b36      	ldr	r3, [pc, #216]	; (800e564 <xTaskIncrementTick+0x14c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d104      	bne.n	800e49e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e494:	4b36      	ldr	r3, [pc, #216]	; (800e570 <xTaskIncrementTick+0x158>)
 800e496:	f04f 32ff 	mov.w	r2, #4294967295
 800e49a:	601a      	str	r2, [r3, #0]
					break;
 800e49c:	e03e      	b.n	800e51c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e49e:	4b31      	ldr	r3, [pc, #196]	; (800e564 <xTaskIncrementTick+0x14c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d203      	bcs.n	800e4be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4b6:	4a2e      	ldr	r2, [pc, #184]	; (800e570 <xTaskIncrementTick+0x158>)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4bc:	e02e      	b.n	800e51c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fecf 	bl	800d266 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d004      	beq.n	800e4da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	3318      	adds	r3, #24
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe fec6 	bl	800d266 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4de:	2201      	movs	r2, #1
 800e4e0:	409a      	lsls	r2, r3
 800e4e2:	4b24      	ldr	r3, [pc, #144]	; (800e574 <xTaskIncrementTick+0x15c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	4a22      	ldr	r2, [pc, #136]	; (800e574 <xTaskIncrementTick+0x15c>)
 800e4ea:	6013      	str	r3, [r2, #0]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4a1f      	ldr	r2, [pc, #124]	; (800e578 <xTaskIncrementTick+0x160>)
 800e4fa:	441a      	add	r2, r3
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fe fe52 	bl	800d1ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50c:	4b1b      	ldr	r3, [pc, #108]	; (800e57c <xTaskIncrementTick+0x164>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e512:	429a      	cmp	r2, r3
 800e514:	d3b9      	bcc.n	800e48a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e516:	2301      	movs	r3, #1
 800e518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e51a:	e7b6      	b.n	800e48a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e51c:	4b17      	ldr	r3, [pc, #92]	; (800e57c <xTaskIncrementTick+0x164>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e522:	4915      	ldr	r1, [pc, #84]	; (800e578 <xTaskIncrementTick+0x160>)
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	440b      	add	r3, r1
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d907      	bls.n	800e544 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800e534:	2301      	movs	r3, #1
 800e536:	617b      	str	r3, [r7, #20]
 800e538:	e004      	b.n	800e544 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e53a:	4b11      	ldr	r3, [pc, #68]	; (800e580 <xTaskIncrementTick+0x168>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3301      	adds	r3, #1
 800e540:	4a0f      	ldr	r2, [pc, #60]	; (800e580 <xTaskIncrementTick+0x168>)
 800e542:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e544:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <xTaskIncrementTick+0x16c>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800e54c:	2301      	movs	r3, #1
 800e54e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e550:	697b      	ldr	r3, [r7, #20]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	24000184 	.word	0x24000184
 800e560:	24000160 	.word	0x24000160
 800e564:	24000114 	.word	0x24000114
 800e568:	24000118 	.word	0x24000118
 800e56c:	24000174 	.word	0x24000174
 800e570:	2400017c 	.word	0x2400017c
 800e574:	24000164 	.word	0x24000164
 800e578:	24000060 	.word	0x24000060
 800e57c:	2400005c 	.word	0x2400005c
 800e580:	2400016c 	.word	0x2400016c
 800e584:	24000170 	.word	0x24000170

0800e588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e58e:	4b26      	ldr	r3, [pc, #152]	; (800e628 <vTaskSwitchContext+0xa0>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d003      	beq.n	800e59e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e596:	4b25      	ldr	r3, [pc, #148]	; (800e62c <vTaskSwitchContext+0xa4>)
 800e598:	2201      	movs	r2, #1
 800e59a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e59c:	e03e      	b.n	800e61c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800e59e:	4b23      	ldr	r3, [pc, #140]	; (800e62c <vTaskSwitchContext+0xa4>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5a4:	4b22      	ldr	r3, [pc, #136]	; (800e630 <vTaskSwitchContext+0xa8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	fab3 f383 	clz	r3, r3
 800e5b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e5b2:	7afb      	ldrb	r3, [r7, #11]
 800e5b4:	f1c3 031f 	rsb	r3, r3, #31
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	491e      	ldr	r1, [pc, #120]	; (800e634 <vTaskSwitchContext+0xac>)
 800e5bc:	697a      	ldr	r2, [r7, #20]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	440b      	add	r3, r1
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d109      	bne.n	800e5e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	607b      	str	r3, [r7, #4]
 800e5e0:	e7fe      	b.n	800e5e0 <vTaskSwitchContext+0x58>
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4a11      	ldr	r2, [pc, #68]	; (800e634 <vTaskSwitchContext+0xac>)
 800e5ee:	4413      	add	r3, r2
 800e5f0:	613b      	str	r3, [r7, #16]
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	605a      	str	r2, [r3, #4]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	3308      	adds	r3, #8
 800e604:	429a      	cmp	r2, r3
 800e606:	d104      	bne.n	800e612 <vTaskSwitchContext+0x8a>
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	605a      	str	r2, [r3, #4]
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	4a07      	ldr	r2, [pc, #28]	; (800e638 <vTaskSwitchContext+0xb0>)
 800e61a:	6013      	str	r3, [r2, #0]
}
 800e61c:	bf00      	nop
 800e61e:	371c      	adds	r7, #28
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	24000184 	.word	0x24000184
 800e62c:	24000170 	.word	0x24000170
 800e630:	24000164 	.word	0x24000164
 800e634:	24000060 	.word	0x24000060
 800e638:	2400005c 	.word	0x2400005c

0800e63c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d109      	bne.n	800e660 <vTaskPlaceOnEventList+0x24>
 800e64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e650:	f383 8811 	msr	BASEPRI, r3
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	60fb      	str	r3, [r7, #12]
 800e65e:	e7fe      	b.n	800e65e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <vTaskPlaceOnEventList+0x44>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3318      	adds	r3, #24
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7fe fdc3 	bl	800d1f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e66e:	2101      	movs	r1, #1
 800e670:	6838      	ldr	r0, [r7, #0]
 800e672:	f000 fb97 	bl	800eda4 <prvAddCurrentTaskToDelayedList>
}
 800e676:	bf00      	nop
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	2400005c 	.word	0x2400005c

0800e684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d109      	bne.n	800e6aa <vTaskPlaceOnEventListRestricted+0x26>
 800e696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	617b      	str	r3, [r7, #20]
 800e6a8:	e7fe      	b.n	800e6a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6aa:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <vTaskPlaceOnEventListRestricted+0x50>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3318      	adds	r3, #24
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7fe fd7a 	bl	800d1ac <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e6be:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	68b8      	ldr	r0, [r7, #8]
 800e6c8:	f000 fb6c 	bl	800eda4 <prvAddCurrentTaskToDelayedList>
	}
 800e6cc:	bf00      	nop
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	2400005c 	.word	0x2400005c

0800e6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d109      	bne.n	800e702 <xTaskRemoveFromEventList+0x2a>
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	e7fe      	b.n	800e700 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	3318      	adds	r3, #24
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe fdad 	bl	800d266 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e70c:	4b1d      	ldr	r3, [pc, #116]	; (800e784 <xTaskRemoveFromEventList+0xac>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d11c      	bne.n	800e74e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3304      	adds	r3, #4
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fda4 	bl	800d266 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	2201      	movs	r2, #1
 800e724:	409a      	lsls	r2, r3
 800e726:	4b18      	ldr	r3, [pc, #96]	; (800e788 <xTaskRemoveFromEventList+0xb0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	4a16      	ldr	r2, [pc, #88]	; (800e788 <xTaskRemoveFromEventList+0xb0>)
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e734:	4613      	mov	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	4413      	add	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4a13      	ldr	r2, [pc, #76]	; (800e78c <xTaskRemoveFromEventList+0xb4>)
 800e73e:	441a      	add	r2, r3
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	3304      	adds	r3, #4
 800e744:	4619      	mov	r1, r3
 800e746:	4610      	mov	r0, r2
 800e748:	f7fe fd30 	bl	800d1ac <vListInsertEnd>
 800e74c:	e005      	b.n	800e75a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	3318      	adds	r3, #24
 800e752:	4619      	mov	r1, r3
 800e754:	480e      	ldr	r0, [pc, #56]	; (800e790 <xTaskRemoveFromEventList+0xb8>)
 800e756:	f7fe fd29 	bl	800d1ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75e:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <xTaskRemoveFromEventList+0xbc>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e764:	429a      	cmp	r2, r3
 800e766:	d905      	bls.n	800e774 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e768:	2301      	movs	r3, #1
 800e76a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e76c:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <xTaskRemoveFromEventList+0xc0>)
 800e76e:	2201      	movs	r2, #1
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	e001      	b.n	800e778 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800e774:	2300      	movs	r3, #0
 800e776:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e778:	697b      	ldr	r3, [r7, #20]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	24000184 	.word	0x24000184
 800e788:	24000164 	.word	0x24000164
 800e78c:	24000060 	.word	0x24000060
 800e790:	2400011c 	.word	0x2400011c
 800e794:	2400005c 	.word	0x2400005c
 800e798:	24000170 	.word	0x24000170

0800e79c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <vTaskInternalSetTimeOutState+0x24>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <vTaskInternalSetTimeOutState+0x28>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	605a      	str	r2, [r3, #4]
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	24000174 	.word	0x24000174
 800e7c4:	24000160 	.word	0x24000160

0800e7c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b088      	sub	sp, #32
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d109      	bne.n	800e7ec <xTaskCheckForTimeOut+0x24>
 800e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	613b      	str	r3, [r7, #16]
 800e7ea:	e7fe      	b.n	800e7ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d109      	bne.n	800e806 <xTaskCheckForTimeOut+0x3e>
 800e7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e7fe      	b.n	800e804 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e806:	f000 ffc1 	bl	800f78c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e80a:	4b1d      	ldr	r3, [pc, #116]	; (800e880 <xTaskCheckForTimeOut+0xb8>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	69ba      	ldr	r2, [r7, #24]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e822:	d102      	bne.n	800e82a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e824:	2300      	movs	r3, #0
 800e826:	61fb      	str	r3, [r7, #28]
 800e828:	e023      	b.n	800e872 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	4b15      	ldr	r3, [pc, #84]	; (800e884 <xTaskCheckForTimeOut+0xbc>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d007      	beq.n	800e846 <xTaskCheckForTimeOut+0x7e>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	69ba      	ldr	r2, [r7, #24]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d302      	bcc.n	800e846 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e840:	2301      	movs	r3, #1
 800e842:	61fb      	str	r3, [r7, #28]
 800e844:	e015      	b.n	800e872 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	697a      	ldr	r2, [r7, #20]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d20b      	bcs.n	800e868 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	1ad2      	subs	r2, r2, r3
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff ff9d 	bl	800e79c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	61fb      	str	r3, [r7, #28]
 800e866:	e004      	b.n	800e872 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e86e:	2301      	movs	r3, #1
 800e870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e872:	f000 ffb9 	bl	800f7e8 <vPortExitCritical>

	return xReturn;
 800e876:	69fb      	ldr	r3, [r7, #28]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3720      	adds	r7, #32
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	24000160 	.word	0x24000160
 800e884:	24000174 	.word	0x24000174

0800e888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e88c:	4b03      	ldr	r3, [pc, #12]	; (800e89c <vTaskMissedYield+0x14>)
 800e88e:	2201      	movs	r2, #1
 800e890:	601a      	str	r2, [r3, #0]
}
 800e892:	bf00      	nop
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	24000170 	.word	0x24000170

0800e8a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8a8:	f000 f852 	bl	800e950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8ac:	4b06      	ldr	r3, [pc, #24]	; (800e8c8 <prvIdleTask+0x28>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d9f9      	bls.n	800e8a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8b4:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <prvIdleTask+0x2c>)
 800e8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8c4:	e7f0      	b.n	800e8a8 <prvIdleTask+0x8>
 800e8c6:	bf00      	nop
 800e8c8:	24000060 	.word	0x24000060
 800e8cc:	e000ed04 	.word	0xe000ed04

0800e8d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	607b      	str	r3, [r7, #4]
 800e8da:	e00c      	b.n	800e8f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4a12      	ldr	r2, [pc, #72]	; (800e930 <prvInitialiseTaskLists+0x60>)
 800e8e8:	4413      	add	r3, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fc31 	bl	800d152 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	607b      	str	r3, [r7, #4]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b06      	cmp	r3, #6
 800e8fa:	d9ef      	bls.n	800e8dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8fc:	480d      	ldr	r0, [pc, #52]	; (800e934 <prvInitialiseTaskLists+0x64>)
 800e8fe:	f7fe fc28 	bl	800d152 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e902:	480d      	ldr	r0, [pc, #52]	; (800e938 <prvInitialiseTaskLists+0x68>)
 800e904:	f7fe fc25 	bl	800d152 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e908:	480c      	ldr	r0, [pc, #48]	; (800e93c <prvInitialiseTaskLists+0x6c>)
 800e90a:	f7fe fc22 	bl	800d152 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e90e:	480c      	ldr	r0, [pc, #48]	; (800e940 <prvInitialiseTaskLists+0x70>)
 800e910:	f7fe fc1f 	bl	800d152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e914:	480b      	ldr	r0, [pc, #44]	; (800e944 <prvInitialiseTaskLists+0x74>)
 800e916:	f7fe fc1c 	bl	800d152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e91a:	4b0b      	ldr	r3, [pc, #44]	; (800e948 <prvInitialiseTaskLists+0x78>)
 800e91c:	4a05      	ldr	r2, [pc, #20]	; (800e934 <prvInitialiseTaskLists+0x64>)
 800e91e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e920:	4b0a      	ldr	r3, [pc, #40]	; (800e94c <prvInitialiseTaskLists+0x7c>)
 800e922:	4a05      	ldr	r2, [pc, #20]	; (800e938 <prvInitialiseTaskLists+0x68>)
 800e924:	601a      	str	r2, [r3, #0]
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	24000060 	.word	0x24000060
 800e934:	240000ec 	.word	0x240000ec
 800e938:	24000100 	.word	0x24000100
 800e93c:	2400011c 	.word	0x2400011c
 800e940:	24000130 	.word	0x24000130
 800e944:	24000148 	.word	0x24000148
 800e948:	24000114 	.word	0x24000114
 800e94c:	24000118 	.word	0x24000118

0800e950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e956:	e019      	b.n	800e98c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e958:	f000 ff18 	bl	800f78c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e95c:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <prvCheckTasksWaitingTermination+0x4c>)
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3304      	adds	r3, #4
 800e968:	4618      	mov	r0, r3
 800e96a:	f7fe fc7c 	bl	800d266 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <prvCheckTasksWaitingTermination+0x50>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3b01      	subs	r3, #1
 800e974:	4a0a      	ldr	r2, [pc, #40]	; (800e9a0 <prvCheckTasksWaitingTermination+0x50>)
 800e976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e978:	4b0a      	ldr	r3, [pc, #40]	; (800e9a4 <prvCheckTasksWaitingTermination+0x54>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	4a09      	ldr	r2, [pc, #36]	; (800e9a4 <prvCheckTasksWaitingTermination+0x54>)
 800e980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e982:	f000 ff31 	bl	800f7e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 f80e 	bl	800e9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <prvCheckTasksWaitingTermination+0x54>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e1      	bne.n	800e958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	24000130 	.word	0x24000130
 800e9a0:	2400015c 	.word	0x2400015c
 800e9a4:	24000144 	.word	0x24000144

0800e9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f001 f8c5 	bl	800fb44 <vPortFree>
			vPortFree( pxTCB );
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 f8c2 	bl	800fb44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9c0:	bf00      	nop
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <prvResetNextTaskUnblockTime+0x38>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d104      	bne.n	800e9e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <prvResetNextTaskUnblockTime+0x3c>)
 800e9da:	f04f 32ff 	mov.w	r2, #4294967295
 800e9de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9e0:	e008      	b.n	800e9f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9e2:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <prvResetNextTaskUnblockTime+0x38>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	4a04      	ldr	r2, [pc, #16]	; (800ea04 <prvResetNextTaskUnblockTime+0x3c>)
 800e9f2:	6013      	str	r3, [r2, #0]
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	24000114 	.word	0x24000114
 800ea04:	2400017c 	.word	0x2400017c

0800ea08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <xTaskGetSchedulerState+0x34>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d102      	bne.n	800ea1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea16:	2301      	movs	r3, #1
 800ea18:	607b      	str	r3, [r7, #4]
 800ea1a:	e008      	b.n	800ea2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea1c:	4b08      	ldr	r3, [pc, #32]	; (800ea40 <xTaskGetSchedulerState+0x38>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d102      	bne.n	800ea2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea24:	2302      	movs	r3, #2
 800ea26:	607b      	str	r3, [r7, #4]
 800ea28:	e001      	b.n	800ea2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea2e:	687b      	ldr	r3, [r7, #4]
	}
 800ea30:	4618      	mov	r0, r3
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	24000168 	.word	0x24000168
 800ea40:	24000184 	.word	0x24000184

0800ea44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea50:	2300      	movs	r3, #0
 800ea52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d069      	beq.n	800eb2e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5e:	4b36      	ldr	r3, [pc, #216]	; (800eb38 <xTaskPriorityInherit+0xf4>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d259      	bcs.n	800eb1c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	db06      	blt.n	800ea7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea70:	4b31      	ldr	r3, [pc, #196]	; (800eb38 <xTaskPriorityInherit+0xf4>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	f1c3 0207 	rsb	r2, r3, #7
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	6959      	ldr	r1, [r3, #20]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea86:	4613      	mov	r3, r2
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4a2b      	ldr	r2, [pc, #172]	; (800eb3c <xTaskPriorityInherit+0xf8>)
 800ea90:	4413      	add	r3, r2
 800ea92:	4299      	cmp	r1, r3
 800ea94:	d13a      	bne.n	800eb0c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3304      	adds	r3, #4
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe fbe3 	bl	800d266 <uxListRemove>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d115      	bne.n	800ead2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaaa:	4924      	ldr	r1, [pc, #144]	; (800eb3c <xTaskPriorityInherit+0xf8>)
 800eaac:	4613      	mov	r3, r2
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	440b      	add	r3, r1
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10a      	bne.n	800ead2 <xTaskPriorityInherit+0x8e>
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac0:	2201      	movs	r2, #1
 800eac2:	fa02 f303 	lsl.w	r3, r2, r3
 800eac6:	43da      	mvns	r2, r3
 800eac8:	4b1d      	ldr	r3, [pc, #116]	; (800eb40 <xTaskPriorityInherit+0xfc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4013      	ands	r3, r2
 800eace:	4a1c      	ldr	r2, [pc, #112]	; (800eb40 <xTaskPriorityInherit+0xfc>)
 800ead0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ead2:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <xTaskPriorityInherit+0xf4>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae0:	2201      	movs	r2, #1
 800eae2:	409a      	lsls	r2, r3
 800eae4:	4b16      	ldr	r3, [pc, #88]	; (800eb40 <xTaskPriorityInherit+0xfc>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	4a15      	ldr	r2, [pc, #84]	; (800eb40 <xTaskPriorityInherit+0xfc>)
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	4413      	add	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4a10      	ldr	r2, [pc, #64]	; (800eb3c <xTaskPriorityInherit+0xf8>)
 800eafc:	441a      	add	r2, r3
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7fe fb51 	bl	800d1ac <vListInsertEnd>
 800eb0a:	e004      	b.n	800eb16 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <xTaskPriorityInherit+0xf4>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb16:	2301      	movs	r3, #1
 800eb18:	60fb      	str	r3, [r7, #12]
 800eb1a:	e008      	b.n	800eb2e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb20:	4b05      	ldr	r3, [pc, #20]	; (800eb38 <xTaskPriorityInherit+0xf4>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d201      	bcs.n	800eb2e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	2400005c 	.word	0x2400005c
 800eb3c:	24000060 	.word	0x24000060
 800eb40:	24000164 	.word	0x24000164

0800eb44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb50:	2300      	movs	r3, #0
 800eb52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d06c      	beq.n	800ec34 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb5a:	4b39      	ldr	r3, [pc, #228]	; (800ec40 <xTaskPriorityDisinherit+0xfc>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d009      	beq.n	800eb78 <xTaskPriorityDisinherit+0x34>
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	e7fe      	b.n	800eb76 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <xTaskPriorityDisinherit+0x50>
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	60bb      	str	r3, [r7, #8]
 800eb92:	e7fe      	b.n	800eb92 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb98:	1e5a      	subs	r2, r3, #1
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d044      	beq.n	800ec34 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d140      	bne.n	800ec34 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fb55 	bl	800d266 <uxListRemove>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d115      	bne.n	800ebee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	491f      	ldr	r1, [pc, #124]	; (800ec44 <xTaskPriorityDisinherit+0x100>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	440b      	add	r3, r1
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <xTaskPriorityDisinherit+0xaa>
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebdc:	2201      	movs	r2, #1
 800ebde:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe2:	43da      	mvns	r2, r3
 800ebe4:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <xTaskPriorityDisinherit+0x104>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4013      	ands	r3, r2
 800ebea:	4a17      	ldr	r2, [pc, #92]	; (800ec48 <xTaskPriorityDisinherit+0x104>)
 800ebec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	f1c3 0207 	rsb	r2, r3, #7
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec06:	2201      	movs	r2, #1
 800ec08:	409a      	lsls	r2, r3
 800ec0a:	4b0f      	ldr	r3, [pc, #60]	; (800ec48 <xTaskPriorityDisinherit+0x104>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	4a0d      	ldr	r2, [pc, #52]	; (800ec48 <xTaskPriorityDisinherit+0x104>)
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec18:	4613      	mov	r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	4413      	add	r3, r2
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	4a08      	ldr	r2, [pc, #32]	; (800ec44 <xTaskPriorityDisinherit+0x100>)
 800ec22:	441a      	add	r2, r3
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	3304      	adds	r3, #4
 800ec28:	4619      	mov	r1, r3
 800ec2a:	4610      	mov	r0, r2
 800ec2c:	f7fe fabe 	bl	800d1ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec30:	2301      	movs	r3, #1
 800ec32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec34:	697b      	ldr	r3, [r7, #20]
	}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2400005c 	.word	0x2400005c
 800ec44:	24000060 	.word	0x24000060
 800ec48:	24000164 	.word	0x24000164

0800ec4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b088      	sub	sp, #32
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 8081 	beq.w	800ed68 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d109      	bne.n	800ec82 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	e7fe      	b.n	800ec80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d902      	bls.n	800ec92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	61fb      	str	r3, [r7, #28]
 800ec90:	e002      	b.n	800ec98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9c:	69fa      	ldr	r2, [r7, #28]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d062      	beq.n	800ed68 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d15d      	bne.n	800ed68 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecac:	4b30      	ldr	r3, [pc, #192]	; (800ed70 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	69ba      	ldr	r2, [r7, #24]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d109      	bne.n	800ecca <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	60bb      	str	r3, [r7, #8]
 800ecc8:	e7fe      	b.n	800ecc8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	69fa      	ldr	r2, [r7, #28]
 800ecd4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	699b      	ldr	r3, [r3, #24]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	db04      	blt.n	800ece8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	f1c3 0207 	rsb	r2, r3, #7
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	6959      	ldr	r1, [r3, #20]
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4a1f      	ldr	r2, [pc, #124]	; (800ed74 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ecf8:	4413      	add	r3, r2
 800ecfa:	4299      	cmp	r1, r3
 800ecfc:	d134      	bne.n	800ed68 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe faaf 	bl	800d266 <uxListRemove>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d115      	bne.n	800ed3a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	4918      	ldr	r1, [pc, #96]	; (800ed74 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed14:	4613      	mov	r3, r2
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	440b      	add	r3, r1
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	2201      	movs	r2, #1
 800ed2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2e:	43da      	mvns	r2, r3
 800ed30:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4013      	ands	r3, r2
 800ed36:	4a10      	ldr	r2, [pc, #64]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3e:	2201      	movs	r2, #1
 800ed40:	409a      	lsls	r2, r3
 800ed42:	4b0d      	ldr	r3, [pc, #52]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4313      	orrs	r3, r2
 800ed48:	4a0b      	ldr	r2, [pc, #44]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed4a:	6013      	str	r3, [r2, #0]
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed50:	4613      	mov	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4413      	add	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4a06      	ldr	r2, [pc, #24]	; (800ed74 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed5a:	441a      	add	r2, r3
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	4619      	mov	r1, r3
 800ed62:	4610      	mov	r0, r2
 800ed64:	f7fe fa22 	bl	800d1ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed68:	bf00      	nop
 800ed6a:	3720      	adds	r7, #32
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	2400005c 	.word	0x2400005c
 800ed74:	24000060 	.word	0x24000060
 800ed78:	24000164 	.word	0x24000164

0800ed7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed7c:	b480      	push	{r7}
 800ed7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed80:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed88:	4b05      	ldr	r3, [pc, #20]	; (800eda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed8e:	3201      	adds	r2, #1
 800ed90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ed92:	4b03      	ldr	r3, [pc, #12]	; (800eda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed94:	681b      	ldr	r3, [r3, #0]
	}
 800ed96:	4618      	mov	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	2400005c 	.word	0x2400005c

0800eda4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edae:	4b29      	ldr	r3, [pc, #164]	; (800ee54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edb4:	4b28      	ldr	r3, [pc, #160]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3304      	adds	r3, #4
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fa53 	bl	800d266 <uxListRemove>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10b      	bne.n	800edde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800edc6:	4b24      	ldr	r3, [pc, #144]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edcc:	2201      	movs	r2, #1
 800edce:	fa02 f303 	lsl.w	r3, r2, r3
 800edd2:	43da      	mvns	r2, r3
 800edd4:	4b21      	ldr	r3, [pc, #132]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4013      	ands	r3, r2
 800edda:	4a20      	ldr	r2, [pc, #128]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede4:	d10a      	bne.n	800edfc <prvAddCurrentTaskToDelayedList+0x58>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d007      	beq.n	800edfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edec:	4b1a      	ldr	r3, [pc, #104]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3304      	adds	r3, #4
 800edf2:	4619      	mov	r1, r3
 800edf4:	481a      	ldr	r0, [pc, #104]	; (800ee60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800edf6:	f7fe f9d9 	bl	800d1ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edfa:	e026      	b.n	800ee4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4413      	add	r3, r2
 800ee02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee04:	4b14      	ldr	r3, [pc, #80]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d209      	bcs.n	800ee28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee14:	4b13      	ldr	r3, [pc, #76]	; (800ee64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b0f      	ldr	r3, [pc, #60]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4619      	mov	r1, r3
 800ee20:	4610      	mov	r0, r2
 800ee22:	f7fe f9e7 	bl	800d1f4 <vListInsert>
}
 800ee26:	e010      	b.n	800ee4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee28:	4b0f      	ldr	r3, [pc, #60]	; (800ee68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3304      	adds	r3, #4
 800ee32:	4619      	mov	r1, r3
 800ee34:	4610      	mov	r0, r2
 800ee36:	f7fe f9dd 	bl	800d1f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee3a:	4b0c      	ldr	r3, [pc, #48]	; (800ee6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d202      	bcs.n	800ee4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ee44:	4a09      	ldr	r2, [pc, #36]	; (800ee6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	6013      	str	r3, [r2, #0]
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	24000160 	.word	0x24000160
 800ee58:	2400005c 	.word	0x2400005c
 800ee5c:	24000164 	.word	0x24000164
 800ee60:	24000148 	.word	0x24000148
 800ee64:	24000118 	.word	0x24000118
 800ee68:	24000114 	.word	0x24000114
 800ee6c:	2400017c 	.word	0x2400017c

0800ee70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee7a:	f000 fb2d 	bl	800f4d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee7e:	4b11      	ldr	r3, [pc, #68]	; (800eec4 <xTimerCreateTimerTask+0x54>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00b      	beq.n	800ee9e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800ee86:	4b10      	ldr	r3, [pc, #64]	; (800eec8 <xTimerCreateTimerTask+0x58>)
 800ee88:	9301      	str	r3, [sp, #4]
 800ee8a:	2305      	movs	r3, #5
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee94:	490d      	ldr	r1, [pc, #52]	; (800eecc <xTimerCreateTimerTask+0x5c>)
 800ee96:	480e      	ldr	r0, [pc, #56]	; (800eed0 <xTimerCreateTimerTask+0x60>)
 800ee98:	f7ff f852 	bl	800df40 <xTaskCreate>
 800ee9c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d109      	bne.n	800eeb8 <xTimerCreateTimerTask+0x48>
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	603b      	str	r3, [r7, #0]
 800eeb6:	e7fe      	b.n	800eeb6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 800eeb8:	687b      	ldr	r3, [r7, #4]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	240001b8 	.word	0x240001b8
 800eec8:	240001bc 	.word	0x240001bc
 800eecc:	0800fe34 	.word	0x0800fe34
 800eed0:	0800f0bd 	.word	0x0800f0bd

0800eed4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af02      	add	r7, sp, #8
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800eee2:	2028      	movs	r0, #40	; 0x28
 800eee4:	f000 fd6c 	bl	800f9c0 <pvPortMalloc>
 800eee8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00d      	beq.n	800ef0c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f000 f805 	bl	800ef16 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ef0c:	697b      	ldr	r3, [r7, #20]
	}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b086      	sub	sp, #24
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	60f8      	str	r0, [r7, #12]
 800ef1e:	60b9      	str	r1, [r7, #8]
 800ef20:	607a      	str	r2, [r7, #4]
 800ef22:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d109      	bne.n	800ef3e <prvInitialiseNewTimer+0x28>
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	617b      	str	r3, [r7, #20]
 800ef3c:	e7fe      	b.n	800ef3c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d01e      	beq.n	800ef82 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ef44:	f000 fac8 	bl	800f4d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	6a3a      	ldr	r2, [r7, #32]
 800ef5e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	3304      	adds	r3, #4
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fe f914 	bl	800d192 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d008      	beq.n	800ef82 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef76:	f043 0304 	orr.w	r3, r3, #4
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ef82:	bf00      	nop
 800ef84:	3718      	adds	r7, #24
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b08a      	sub	sp, #40	; 0x28
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d109      	bne.n	800efb8 <xTimerGenericCommand+0x2c>
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	623b      	str	r3, [r7, #32]
 800efb6:	e7fe      	b.n	800efb6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efb8:	4b19      	ldr	r3, [pc, #100]	; (800f020 <xTimerGenericCommand+0x94>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d02a      	beq.n	800f016 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b05      	cmp	r3, #5
 800efd0:	dc18      	bgt.n	800f004 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efd2:	f7ff fd19 	bl	800ea08 <xTaskGetSchedulerState>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b02      	cmp	r3, #2
 800efda:	d109      	bne.n	800eff0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efdc:	4b10      	ldr	r3, [pc, #64]	; (800f020 <xTimerGenericCommand+0x94>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	f107 0114 	add.w	r1, r7, #20
 800efe4:	2300      	movs	r3, #0
 800efe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efe8:	f7fe fa2a 	bl	800d440 <xQueueGenericSend>
 800efec:	6278      	str	r0, [r7, #36]	; 0x24
 800efee:	e012      	b.n	800f016 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eff0:	4b0b      	ldr	r3, [pc, #44]	; (800f020 <xTimerGenericCommand+0x94>)
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	f107 0114 	add.w	r1, r7, #20
 800eff8:	2300      	movs	r3, #0
 800effa:	2200      	movs	r2, #0
 800effc:	f7fe fa20 	bl	800d440 <xQueueGenericSend>
 800f000:	6278      	str	r0, [r7, #36]	; 0x24
 800f002:	e008      	b.n	800f016 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f004:	4b06      	ldr	r3, [pc, #24]	; (800f020 <xTimerGenericCommand+0x94>)
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	f107 0114 	add.w	r1, r7, #20
 800f00c:	2300      	movs	r3, #0
 800f00e:	683a      	ldr	r2, [r7, #0]
 800f010:	f7fe fb10 	bl	800d634 <xQueueGenericSendFromISR>
 800f014:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3728      	adds	r7, #40	; 0x28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	240001b8 	.word	0x240001b8

0800f024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af02      	add	r7, sp, #8
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f02e:	4b22      	ldr	r3, [pc, #136]	; (800f0b8 <prvProcessExpiredTimer+0x94>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	3304      	adds	r3, #4
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe f912 	bl	800d266 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d021      	beq.n	800f094 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	699a      	ldr	r2, [r3, #24]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	18d1      	adds	r1, r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	6978      	ldr	r0, [r7, #20]
 800f05e:	f000 f8d1 	bl	800f204 <prvInsertTimerInActiveList>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d01e      	beq.n	800f0a6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f068:	2300      	movs	r3, #0
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	2300      	movs	r3, #0
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	2100      	movs	r1, #0
 800f072:	6978      	ldr	r0, [r7, #20]
 800f074:	f7ff ff8a 	bl	800ef8c <xTimerGenericCommand>
 800f078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d112      	bne.n	800f0a6 <prvProcessExpiredTimer+0x82>
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e7fe      	b.n	800f092 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f09a:	f023 0301 	bic.w	r3, r3, #1
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	6978      	ldr	r0, [r7, #20]
 800f0ac:	4798      	blx	r3
}
 800f0ae:	bf00      	nop
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	240001b0 	.word	0x240001b0

0800f0bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0c4:	f107 0308 	add.w	r3, r7, #8
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 f857 	bl	800f17c <prvGetNextExpireTime>
 800f0ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	f000 f803 	bl	800f0e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0da:	f000 f8d5 	bl	800f288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0de:	e7f1      	b.n	800f0c4 <prvTimerTask+0x8>

0800f0e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0ea:	f7ff f8db 	bl	800e2a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0ee:	f107 0308 	add.w	r3, r7, #8
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 f866 	bl	800f1c4 <prvSampleTimeNow>
 800f0f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d130      	bne.n	800f162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10a      	bne.n	800f11c <prvProcessTimerOrBlockTask+0x3c>
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d806      	bhi.n	800f11c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f10e:	f7ff f8d7 	bl	800e2c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f112:	68f9      	ldr	r1, [r7, #12]
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7ff ff85 	bl	800f024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f11a:	e024      	b.n	800f166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d008      	beq.n	800f134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f122:	4b13      	ldr	r3, [pc, #76]	; (800f170 <prvProcessTimerOrBlockTask+0x90>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <prvProcessTimerOrBlockTask+0x50>
 800f12c:	2301      	movs	r3, #1
 800f12e:	e000      	b.n	800f132 <prvProcessTimerOrBlockTask+0x52>
 800f130:	2300      	movs	r3, #0
 800f132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f134:	4b0f      	ldr	r3, [pc, #60]	; (800f174 <prvProcessTimerOrBlockTask+0x94>)
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	4619      	mov	r1, r3
 800f142:	f7fe fec9 	bl	800ded8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f146:	f7ff f8bb 	bl	800e2c0 <xTaskResumeAll>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10a      	bne.n	800f166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f150:	4b09      	ldr	r3, [pc, #36]	; (800f178 <prvProcessTimerOrBlockTask+0x98>)
 800f152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
}
 800f160:	e001      	b.n	800f166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f162:	f7ff f8ad 	bl	800e2c0 <xTaskResumeAll>
}
 800f166:	bf00      	nop
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	240001b4 	.word	0x240001b4
 800f174:	240001b8 	.word	0x240001b8
 800f178:	e000ed04 	.word	0xe000ed04

0800f17c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f184:	4b0e      	ldr	r3, [pc, #56]	; (800f1c0 <prvGetNextExpireTime+0x44>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <prvGetNextExpireTime+0x16>
 800f18e:	2201      	movs	r2, #1
 800f190:	e000      	b.n	800f194 <prvGetNextExpireTime+0x18>
 800f192:	2200      	movs	r2, #0
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d105      	bne.n	800f1ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1a0:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <prvGetNextExpireTime+0x44>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	e001      	b.n	800f1b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	240001b0 	.word	0x240001b0

0800f1c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f1cc:	f7ff f914 	bl	800e3f8 <xTaskGetTickCount>
 800f1d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1d2:	4b0b      	ldr	r3, [pc, #44]	; (800f200 <prvSampleTimeNow+0x3c>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d205      	bcs.n	800f1e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1dc:	f000 f918 	bl	800f410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]
 800f1e6:	e002      	b.n	800f1ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1ee:	4a04      	ldr	r2, [pc, #16]	; (800f200 <prvSampleTimeNow+0x3c>)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	240001c0 	.word	0x240001c0

0800f204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f212:	2300      	movs	r3, #0
 800f214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	429a      	cmp	r2, r3
 800f228:	d812      	bhi.n	800f250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	1ad2      	subs	r2, r2, r3
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	699b      	ldr	r3, [r3, #24]
 800f234:	429a      	cmp	r2, r3
 800f236:	d302      	bcc.n	800f23e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f238:	2301      	movs	r3, #1
 800f23a:	617b      	str	r3, [r7, #20]
 800f23c:	e01b      	b.n	800f276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f23e:	4b10      	ldr	r3, [pc, #64]	; (800f280 <prvInsertTimerInActiveList+0x7c>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3304      	adds	r3, #4
 800f246:	4619      	mov	r1, r3
 800f248:	4610      	mov	r0, r2
 800f24a:	f7fd ffd3 	bl	800d1f4 <vListInsert>
 800f24e:	e012      	b.n	800f276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	429a      	cmp	r2, r3
 800f256:	d206      	bcs.n	800f266 <prvInsertTimerInActiveList+0x62>
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d302      	bcc.n	800f266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e007      	b.n	800f276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f266:	4b07      	ldr	r3, [pc, #28]	; (800f284 <prvInsertTimerInActiveList+0x80>)
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	3304      	adds	r3, #4
 800f26e:	4619      	mov	r1, r3
 800f270:	4610      	mov	r0, r2
 800f272:	f7fd ffbf 	bl	800d1f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f276:	697b      	ldr	r3, [r7, #20]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3718      	adds	r7, #24
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	240001b4 	.word	0x240001b4
 800f284:	240001b0 	.word	0x240001b0

0800f288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b08c      	sub	sp, #48	; 0x30
 800f28c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f28e:	e0ac      	b.n	800f3ea <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f2c0 80a8 	blt.w	800f3e8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fd ffdc 	bl	800d266 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ae:	1d3b      	adds	r3, r7, #4
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff ff87 	bl	800f1c4 <prvSampleTimeNow>
 800f2b6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2b09      	cmp	r3, #9
 800f2bc:	f200 8095 	bhi.w	800f3ea <prvProcessReceivedCommands+0x162>
 800f2c0:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <prvProcessReceivedCommands+0x40>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f2f1 	.word	0x0800f2f1
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f2f1 	.word	0x0800f2f1
 800f2d4:	0800f363 	.word	0x0800f363
 800f2d8:	0800f377 	.word	0x0800f377
 800f2dc:	0800f3bf 	.word	0x0800f3bf
 800f2e0:	0800f2f1 	.word	0x0800f2f1
 800f2e4:	0800f2f1 	.word	0x0800f2f1
 800f2e8:	0800f363 	.word	0x0800f363
 800f2ec:	0800f377 	.word	0x0800f377
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2f6:	f043 0301 	orr.w	r3, r3, #1
 800f2fa:	b2da      	uxtb	r2, r3
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	18d1      	adds	r1, r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6a3a      	ldr	r2, [r7, #32]
 800f30e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f310:	f7ff ff78 	bl	800f204 <prvInsertTimerInActiveList>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d067      	beq.n	800f3ea <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d05c      	beq.n	800f3ea <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	441a      	add	r2, r3
 800f338:	2300      	movs	r3, #0
 800f33a:	9300      	str	r3, [sp, #0]
 800f33c:	2300      	movs	r3, #0
 800f33e:	2100      	movs	r1, #0
 800f340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f342:	f7ff fe23 	bl	800ef8c <xTimerGenericCommand>
 800f346:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d14d      	bne.n	800f3ea <prvProcessReceivedCommands+0x162>
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	61bb      	str	r3, [r7, #24]
 800f360:	e7fe      	b.n	800f360 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f368:	f023 0301 	bic.w	r3, r3, #1
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800f374:	e039      	b.n	800f3ea <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f37c:	f043 0301 	orr.w	r3, r3, #1
 800f380:	b2da      	uxtb	r2, r3
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d109      	bne.n	800f3aa <prvProcessReceivedCommands+0x122>
 800f396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	617b      	str	r3, [r7, #20]
 800f3a8:	e7fe      	b.n	800f3a8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	699a      	ldr	r2, [r3, #24]
 800f3ae:	6a3b      	ldr	r3, [r7, #32]
 800f3b0:	18d1      	adds	r1, r2, r3
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	6a3a      	ldr	r2, [r7, #32]
 800f3b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3b8:	f7ff ff24 	bl	800f204 <prvInsertTimerInActiveList>
					break;
 800f3bc:	e015      	b.n	800f3ea <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f3c4:	f003 0302 	and.w	r3, r3, #2
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d103      	bne.n	800f3d4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800f3cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ce:	f000 fbb9 	bl	800fb44 <vPortFree>
 800f3d2:	e00a      	b.n	800f3ea <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f3da:	f023 0301 	bic.w	r3, r3, #1
 800f3de:	b2da      	uxtb	r2, r3
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3e6:	e000      	b.n	800f3ea <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3ea:	4b08      	ldr	r3, [pc, #32]	; (800f40c <prvProcessReceivedCommands+0x184>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f107 0108 	add.w	r1, r7, #8
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe fa3b 	bl	800d870 <xQueueReceive>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f af47 	bne.w	800f290 <prvProcessReceivedCommands+0x8>
	}
}
 800f402:	bf00      	nop
 800f404:	3728      	adds	r7, #40	; 0x28
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	240001b8 	.word	0x240001b8

0800f410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f416:	e047      	b.n	800f4a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f418:	4b2d      	ldr	r3, [pc, #180]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f422:	4b2b      	ldr	r3, [pc, #172]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	3304      	adds	r3, #4
 800f430:	4618      	mov	r0, r3
 800f432:	f7fd ff18 	bl	800d266 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f444:	f003 0304 	and.w	r3, r3, #4
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d02d      	beq.n	800f4a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	699b      	ldr	r3, [r3, #24]
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	4413      	add	r3, r2
 800f454:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d90e      	bls.n	800f47c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f46a:	4b19      	ldr	r3, [pc, #100]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3304      	adds	r3, #4
 800f472:	4619      	mov	r1, r3
 800f474:	4610      	mov	r0, r2
 800f476:	f7fd febd 	bl	800d1f4 <vListInsert>
 800f47a:	e015      	b.n	800f4a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f47c:	2300      	movs	r3, #0
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	2300      	movs	r3, #0
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	2100      	movs	r1, #0
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f7ff fd80 	bl	800ef8c <xTimerGenericCommand>
 800f48c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d109      	bne.n	800f4a8 <prvSwitchTimerLists+0x98>
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	603b      	str	r3, [r7, #0]
 800f4a6:	e7fe      	b.n	800f4a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4a8:	4b09      	ldr	r3, [pc, #36]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1b2      	bne.n	800f418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f4b2:	4b07      	ldr	r3, [pc, #28]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <prvSwitchTimerLists+0xc4>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a04      	ldr	r2, [pc, #16]	; (800f4d0 <prvSwitchTimerLists+0xc0>)
 800f4be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f4c0:	4a04      	ldr	r2, [pc, #16]	; (800f4d4 <prvSwitchTimerLists+0xc4>)
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	6013      	str	r3, [r2, #0]
}
 800f4c6:	bf00      	nop
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	240001b0 	.word	0x240001b0
 800f4d4:	240001b4 	.word	0x240001b4

0800f4d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4dc:	f000 f956 	bl	800f78c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4e0:	4b12      	ldr	r3, [pc, #72]	; (800f52c <prvCheckForValidListAndQueue+0x54>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d11d      	bne.n	800f524 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4e8:	4811      	ldr	r0, [pc, #68]	; (800f530 <prvCheckForValidListAndQueue+0x58>)
 800f4ea:	f7fd fe32 	bl	800d152 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4ee:	4811      	ldr	r0, [pc, #68]	; (800f534 <prvCheckForValidListAndQueue+0x5c>)
 800f4f0:	f7fd fe2f 	bl	800d152 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4f4:	4b10      	ldr	r3, [pc, #64]	; (800f538 <prvCheckForValidListAndQueue+0x60>)
 800f4f6:	4a0e      	ldr	r2, [pc, #56]	; (800f530 <prvCheckForValidListAndQueue+0x58>)
 800f4f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4fa:	4b10      	ldr	r3, [pc, #64]	; (800f53c <prvCheckForValidListAndQueue+0x64>)
 800f4fc:	4a0d      	ldr	r2, [pc, #52]	; (800f534 <prvCheckForValidListAndQueue+0x5c>)
 800f4fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f500:	2200      	movs	r2, #0
 800f502:	210c      	movs	r1, #12
 800f504:	2010      	movs	r0, #16
 800f506:	f7fd ff41 	bl	800d38c <xQueueGenericCreate>
 800f50a:	4602      	mov	r2, r0
 800f50c:	4b07      	ldr	r3, [pc, #28]	; (800f52c <prvCheckForValidListAndQueue+0x54>)
 800f50e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f510:	4b06      	ldr	r3, [pc, #24]	; (800f52c <prvCheckForValidListAndQueue+0x54>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f518:	4b04      	ldr	r3, [pc, #16]	; (800f52c <prvCheckForValidListAndQueue+0x54>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4908      	ldr	r1, [pc, #32]	; (800f540 <prvCheckForValidListAndQueue+0x68>)
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fe fcb2 	bl	800de88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f524:	f000 f960 	bl	800f7e8 <vPortExitCritical>
}
 800f528:	bf00      	nop
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	240001b8 	.word	0x240001b8
 800f530:	24000188 	.word	0x24000188
 800f534:	2400019c 	.word	0x2400019c
 800f538:	240001b0 	.word	0x240001b0
 800f53c:	240001b4 	.word	0x240001b4
 800f540:	0800fe3c 	.word	0x0800fe3c

0800f544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3b04      	subs	r3, #4
 800f554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3b04      	subs	r3, #4
 800f562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	f023 0201 	bic.w	r2, r3, #1
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3b04      	subs	r3, #4
 800f572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f574:	4a0c      	ldr	r2, [pc, #48]	; (800f5a8 <pxPortInitialiseStack+0x64>)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3b14      	subs	r3, #20
 800f57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3b04      	subs	r3, #4
 800f58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f06f 0202 	mvn.w	r2, #2
 800f592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3b20      	subs	r3, #32
 800f598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f59a:	68fb      	ldr	r3, [r7, #12]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	0800f5ad 	.word	0x0800f5ad

0800f5ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5b6:	4b11      	ldr	r3, [pc, #68]	; (800f5fc <prvTaskExitError+0x50>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5be:	d009      	beq.n	800f5d4 <prvTaskExitError+0x28>
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	60fb      	str	r3, [r7, #12]
 800f5d2:	e7fe      	b.n	800f5d2 <prvTaskExitError+0x26>
 800f5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5e6:	bf00      	nop
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d0fc      	beq.n	800f5e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5ee:	bf00      	nop
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	24000010 	.word	0x24000010

0800f600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f600:	4b07      	ldr	r3, [pc, #28]	; (800f620 <pxCurrentTCBConst2>)
 800f602:	6819      	ldr	r1, [r3, #0]
 800f604:	6808      	ldr	r0, [r1, #0]
 800f606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60a:	f380 8809 	msr	PSP, r0
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f04f 0000 	mov.w	r0, #0
 800f616:	f380 8811 	msr	BASEPRI, r0
 800f61a:	4770      	bx	lr
 800f61c:	f3af 8000 	nop.w

0800f620 <pxCurrentTCBConst2>:
 800f620:	2400005c 	.word	0x2400005c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop

0800f628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f628:	4808      	ldr	r0, [pc, #32]	; (800f64c <prvPortStartFirstTask+0x24>)
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	6800      	ldr	r0, [r0, #0]
 800f62e:	f380 8808 	msr	MSP, r0
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8814 	msr	CONTROL, r0
 800f63a:	b662      	cpsie	i
 800f63c:	b661      	cpsie	f
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	df00      	svc	0
 800f648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f64a:	bf00      	nop
 800f64c:	e000ed08 	.word	0xe000ed08

0800f650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f656:	4b44      	ldr	r3, [pc, #272]	; (800f768 <xPortStartScheduler+0x118>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4a44      	ldr	r2, [pc, #272]	; (800f76c <xPortStartScheduler+0x11c>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d109      	bne.n	800f674 <xPortStartScheduler+0x24>
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	613b      	str	r3, [r7, #16]
 800f672:	e7fe      	b.n	800f672 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f674:	4b3c      	ldr	r3, [pc, #240]	; (800f768 <xPortStartScheduler+0x118>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a3d      	ldr	r2, [pc, #244]	; (800f770 <xPortStartScheduler+0x120>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d109      	bne.n	800f692 <xPortStartScheduler+0x42>
 800f67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f682:	f383 8811 	msr	BASEPRI, r3
 800f686:	f3bf 8f6f 	isb	sy
 800f68a:	f3bf 8f4f 	dsb	sy
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	e7fe      	b.n	800f690 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f692:	4b38      	ldr	r3, [pc, #224]	; (800f774 <xPortStartScheduler+0x124>)
 800f694:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	22ff      	movs	r2, #255	; 0xff
 800f6a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6ac:	78fb      	ldrb	r3, [r7, #3]
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6b4:	b2da      	uxtb	r2, r3
 800f6b6:	4b30      	ldr	r3, [pc, #192]	; (800f778 <xPortStartScheduler+0x128>)
 800f6b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6ba:	4b30      	ldr	r3, [pc, #192]	; (800f77c <xPortStartScheduler+0x12c>)
 800f6bc:	2207      	movs	r2, #7
 800f6be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6c0:	e009      	b.n	800f6d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f6c2:	4b2e      	ldr	r3, [pc, #184]	; (800f77c <xPortStartScheduler+0x12c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	4a2c      	ldr	r2, [pc, #176]	; (800f77c <xPortStartScheduler+0x12c>)
 800f6ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6cc:	78fb      	ldrb	r3, [r7, #3]
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6d6:	78fb      	ldrb	r3, [r7, #3]
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6de:	2b80      	cmp	r3, #128	; 0x80
 800f6e0:	d0ef      	beq.n	800f6c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6e2:	4b26      	ldr	r3, [pc, #152]	; (800f77c <xPortStartScheduler+0x12c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f1c3 0307 	rsb	r3, r3, #7
 800f6ea:	2b04      	cmp	r3, #4
 800f6ec:	d009      	beq.n	800f702 <xPortStartScheduler+0xb2>
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	60bb      	str	r3, [r7, #8]
 800f700:	e7fe      	b.n	800f700 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f702:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <xPortStartScheduler+0x12c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	021b      	lsls	r3, r3, #8
 800f708:	4a1c      	ldr	r2, [pc, #112]	; (800f77c <xPortStartScheduler+0x12c>)
 800f70a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f70c:	4b1b      	ldr	r3, [pc, #108]	; (800f77c <xPortStartScheduler+0x12c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f714:	4a19      	ldr	r2, [pc, #100]	; (800f77c <xPortStartScheduler+0x12c>)
 800f716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	b2da      	uxtb	r2, r3
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f720:	4b17      	ldr	r3, [pc, #92]	; (800f780 <xPortStartScheduler+0x130>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a16      	ldr	r2, [pc, #88]	; (800f780 <xPortStartScheduler+0x130>)
 800f726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f72a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f72c:	4b14      	ldr	r3, [pc, #80]	; (800f780 <xPortStartScheduler+0x130>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a13      	ldr	r2, [pc, #76]	; (800f780 <xPortStartScheduler+0x130>)
 800f732:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f738:	f000 f8d6 	bl	800f8e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f73c:	4b11      	ldr	r3, [pc, #68]	; (800f784 <xPortStartScheduler+0x134>)
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f742:	f000 f8f5 	bl	800f930 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f746:	4b10      	ldr	r3, [pc, #64]	; (800f788 <xPortStartScheduler+0x138>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a0f      	ldr	r2, [pc, #60]	; (800f788 <xPortStartScheduler+0x138>)
 800f74c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f750:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f752:	f7ff ff69 	bl	800f628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f756:	f7fe ff17 	bl	800e588 <vTaskSwitchContext>
	prvTaskExitError();
 800f75a:	f7ff ff27 	bl	800f5ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	e000ed00 	.word	0xe000ed00
 800f76c:	410fc271 	.word	0x410fc271
 800f770:	410fc270 	.word	0x410fc270
 800f774:	e000e400 	.word	0xe000e400
 800f778:	240001c4 	.word	0x240001c4
 800f77c:	240001c8 	.word	0x240001c8
 800f780:	e000ed20 	.word	0xe000ed20
 800f784:	24000010 	.word	0x24000010
 800f788:	e000ef34 	.word	0xe000ef34

0800f78c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7a4:	4b0e      	ldr	r3, [pc, #56]	; (800f7e0 <vPortEnterCritical+0x54>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	4a0d      	ldr	r2, [pc, #52]	; (800f7e0 <vPortEnterCritical+0x54>)
 800f7ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7ae:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <vPortEnterCritical+0x54>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d10e      	bne.n	800f7d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7b6:	4b0b      	ldr	r3, [pc, #44]	; (800f7e4 <vPortEnterCritical+0x58>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d009      	beq.n	800f7d4 <vPortEnterCritical+0x48>
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	603b      	str	r3, [r7, #0]
 800f7d2:	e7fe      	b.n	800f7d2 <vPortEnterCritical+0x46>
	}
}
 800f7d4:	bf00      	nop
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	24000010 	.word	0x24000010
 800f7e4:	e000ed04 	.word	0xe000ed04

0800f7e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7ee:	4b11      	ldr	r3, [pc, #68]	; (800f834 <vPortExitCritical+0x4c>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d109      	bne.n	800f80a <vPortExitCritical+0x22>
 800f7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fa:	f383 8811 	msr	BASEPRI, r3
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	607b      	str	r3, [r7, #4]
 800f808:	e7fe      	b.n	800f808 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f80a:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <vPortExitCritical+0x4c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3b01      	subs	r3, #1
 800f810:	4a08      	ldr	r2, [pc, #32]	; (800f834 <vPortExitCritical+0x4c>)
 800f812:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f814:	4b07      	ldr	r3, [pc, #28]	; (800f834 <vPortExitCritical+0x4c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d104      	bne.n	800f826 <vPortExitCritical+0x3e>
 800f81c:	2300      	movs	r3, #0
 800f81e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f826:	bf00      	nop
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	24000010 	.word	0x24000010
	...

0800f840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f840:	f3ef 8009 	mrs	r0, PSP
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	4b15      	ldr	r3, [pc, #84]	; (800f8a0 <pxCurrentTCBConst>)
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	f01e 0f10 	tst.w	lr, #16
 800f850:	bf08      	it	eq
 800f852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f85a:	6010      	str	r0, [r2, #0]
 800f85c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f860:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f864:	f380 8811 	msr	BASEPRI, r0
 800f868:	f3bf 8f4f 	dsb	sy
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f7fe fe8a 	bl	800e588 <vTaskSwitchContext>
 800f874:	f04f 0000 	mov.w	r0, #0
 800f878:	f380 8811 	msr	BASEPRI, r0
 800f87c:	bc09      	pop	{r0, r3}
 800f87e:	6819      	ldr	r1, [r3, #0]
 800f880:	6808      	ldr	r0, [r1, #0]
 800f882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f886:	f01e 0f10 	tst.w	lr, #16
 800f88a:	bf08      	it	eq
 800f88c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f890:	f380 8809 	msr	PSP, r0
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	f3af 8000 	nop.w

0800f8a0 <pxCurrentTCBConst>:
 800f8a0:	2400005c 	.word	0x2400005c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop

0800f8a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8c0:	f7fe fdaa 	bl	800e418 <xTaskIncrementTick>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d003      	beq.n	800f8d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <SysTick_Handler+0x3c>)
 800f8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d0:	601a      	str	r2, [r3, #0]
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	e000ed04 	.word	0xe000ed04

0800f8e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f8ec:	4b0b      	ldr	r3, [pc, #44]	; (800f91c <vPortSetupTimerInterrupt+0x34>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8f2:	4b0b      	ldr	r3, [pc, #44]	; (800f920 <vPortSetupTimerInterrupt+0x38>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <vPortSetupTimerInterrupt+0x3c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a0a      	ldr	r2, [pc, #40]	; (800f928 <vPortSetupTimerInterrupt+0x40>)
 800f8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f902:	099b      	lsrs	r3, r3, #6
 800f904:	4a09      	ldr	r2, [pc, #36]	; (800f92c <vPortSetupTimerInterrupt+0x44>)
 800f906:	3b01      	subs	r3, #1
 800f908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f90a:	4b04      	ldr	r3, [pc, #16]	; (800f91c <vPortSetupTimerInterrupt+0x34>)
 800f90c:	2207      	movs	r2, #7
 800f90e:	601a      	str	r2, [r3, #0]
}
 800f910:	bf00      	nop
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	e000e010 	.word	0xe000e010
 800f920:	e000e018 	.word	0xe000e018
 800f924:	24000000 	.word	0x24000000
 800f928:	10624dd3 	.word	0x10624dd3
 800f92c:	e000e014 	.word	0xe000e014

0800f930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f940 <vPortEnableVFP+0x10>
 800f934:	6801      	ldr	r1, [r0, #0]
 800f936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f93a:	6001      	str	r1, [r0, #0]
 800f93c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f93e:	bf00      	nop
 800f940:	e000ed88 	.word	0xe000ed88

0800f944 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f94a:	f3ef 8305 	mrs	r3, IPSR
 800f94e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2b0f      	cmp	r3, #15
 800f954:	d913      	bls.n	800f97e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f956:	4a16      	ldr	r2, [pc, #88]	; (800f9b0 <vPortValidateInterruptPriority+0x6c>)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	4413      	add	r3, r2
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f960:	4b14      	ldr	r3, [pc, #80]	; (800f9b4 <vPortValidateInterruptPriority+0x70>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	7afa      	ldrb	r2, [r7, #11]
 800f966:	429a      	cmp	r2, r3
 800f968:	d209      	bcs.n	800f97e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96e:	f383 8811 	msr	BASEPRI, r3
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	607b      	str	r3, [r7, #4]
 800f97c:	e7fe      	b.n	800f97c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f97e:	4b0e      	ldr	r3, [pc, #56]	; (800f9b8 <vPortValidateInterruptPriority+0x74>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f986:	4b0d      	ldr	r3, [pc, #52]	; (800f9bc <vPortValidateInterruptPriority+0x78>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d909      	bls.n	800f9a2 <vPortValidateInterruptPriority+0x5e>
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	603b      	str	r3, [r7, #0]
 800f9a0:	e7fe      	b.n	800f9a0 <vPortValidateInterruptPriority+0x5c>
	}
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	e000e3f0 	.word	0xe000e3f0
 800f9b4:	240001c4 	.word	0x240001c4
 800f9b8:	e000ed0c 	.word	0xe000ed0c
 800f9bc:	240001c8 	.word	0x240001c8

0800f9c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08a      	sub	sp, #40	; 0x28
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9cc:	f7fe fc6a 	bl	800e2a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9d0:	4b57      	ldr	r3, [pc, #348]	; (800fb30 <pvPortMalloc+0x170>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d101      	bne.n	800f9dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f9d8:	f000 f90c 	bl	800fbf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f9dc:	4b55      	ldr	r3, [pc, #340]	; (800fb34 <pvPortMalloc+0x174>)
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4013      	ands	r3, r2
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 808c 	bne.w	800fb02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d01c      	beq.n	800fa2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f9f0:	2208      	movs	r2, #8
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f003 0307 	and.w	r3, r3, #7
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d013      	beq.n	800fa2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f023 0307 	bic.w	r3, r3, #7
 800fa08:	3308      	adds	r3, #8
 800fa0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f003 0307 	and.w	r3, r3, #7
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d009      	beq.n	800fa2a <pvPortMalloc+0x6a>
 800fa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	e7fe      	b.n	800fa28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d068      	beq.n	800fb02 <pvPortMalloc+0x142>
 800fa30:	4b41      	ldr	r3, [pc, #260]	; (800fb38 <pvPortMalloc+0x178>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d863      	bhi.n	800fb02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa3a:	4b40      	ldr	r3, [pc, #256]	; (800fb3c <pvPortMalloc+0x17c>)
 800fa3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa3e:	4b3f      	ldr	r3, [pc, #252]	; (800fb3c <pvPortMalloc+0x17c>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa44:	e004      	b.n	800fa50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d903      	bls.n	800fa62 <pvPortMalloc+0xa2>
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1f1      	bne.n	800fa46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa62:	4b33      	ldr	r3, [pc, #204]	; (800fb30 <pvPortMalloc+0x170>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d04a      	beq.n	800fb02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2208      	movs	r2, #8
 800fa72:	4413      	add	r3, r2
 800fa74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	6a3b      	ldr	r3, [r7, #32]
 800fa7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	1ad2      	subs	r2, r2, r3
 800fa86:	2308      	movs	r3, #8
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d91e      	bls.n	800facc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4413      	add	r3, r2
 800fa94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	f003 0307 	and.w	r3, r3, #7
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d009      	beq.n	800fab4 <pvPortMalloc+0xf4>
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	e7fe      	b.n	800fab2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	685a      	ldr	r2, [r3, #4]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	1ad2      	subs	r2, r2, r3
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fac6:	69b8      	ldr	r0, [r7, #24]
 800fac8:	f000 f8f8 	bl	800fcbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800facc:	4b1a      	ldr	r3, [pc, #104]	; (800fb38 <pvPortMalloc+0x178>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	4a18      	ldr	r2, [pc, #96]	; (800fb38 <pvPortMalloc+0x178>)
 800fad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fada:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <pvPortMalloc+0x178>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	4b18      	ldr	r3, [pc, #96]	; (800fb40 <pvPortMalloc+0x180>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d203      	bcs.n	800faee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fae6:	4b14      	ldr	r3, [pc, #80]	; (800fb38 <pvPortMalloc+0x178>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a15      	ldr	r2, [pc, #84]	; (800fb40 <pvPortMalloc+0x180>)
 800faec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	4b10      	ldr	r3, [pc, #64]	; (800fb34 <pvPortMalloc+0x174>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	431a      	orrs	r2, r3
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	2200      	movs	r2, #0
 800fb00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb02:	f7fe fbdd 	bl	800e2c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	f003 0307 	and.w	r3, r3, #7
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d009      	beq.n	800fb24 <pvPortMalloc+0x164>
 800fb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	60fb      	str	r3, [r7, #12]
 800fb22:	e7fe      	b.n	800fb22 <pvPortMalloc+0x162>
	return pvReturn;
 800fb24:	69fb      	ldr	r3, [r7, #28]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3728      	adds	r7, #40	; 0x28
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	240272d4 	.word	0x240272d4
 800fb34:	240272e0 	.word	0x240272e0
 800fb38:	240272d8 	.word	0x240272d8
 800fb3c:	240272cc 	.word	0x240272cc
 800fb40:	240272dc 	.word	0x240272dc

0800fb44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d046      	beq.n	800fbe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb56:	2308      	movs	r3, #8
 800fb58:	425b      	negs	r3, r3
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	4b20      	ldr	r3, [pc, #128]	; (800fbec <vPortFree+0xa8>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d109      	bne.n	800fb86 <vPortFree+0x42>
 800fb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb76:	f383 8811 	msr	BASEPRI, r3
 800fb7a:	f3bf 8f6f 	isb	sy
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	60fb      	str	r3, [r7, #12]
 800fb84:	e7fe      	b.n	800fb84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d009      	beq.n	800fba2 <vPortFree+0x5e>
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	60bb      	str	r3, [r7, #8]
 800fba0:	e7fe      	b.n	800fba0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	4b11      	ldr	r3, [pc, #68]	; (800fbec <vPortFree+0xa8>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4013      	ands	r3, r2
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d019      	beq.n	800fbe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d115      	bne.n	800fbe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	4b0b      	ldr	r3, [pc, #44]	; (800fbec <vPortFree+0xa8>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	43db      	mvns	r3, r3
 800fbc2:	401a      	ands	r2, r3
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fbc8:	f7fe fb6c 	bl	800e2a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	4b07      	ldr	r3, [pc, #28]	; (800fbf0 <vPortFree+0xac>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	4a06      	ldr	r2, [pc, #24]	; (800fbf0 <vPortFree+0xac>)
 800fbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fbda:	6938      	ldr	r0, [r7, #16]
 800fbdc:	f000 f86e 	bl	800fcbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fbe0:	f7fe fb6e 	bl	800e2c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fbe4:	bf00      	nop
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	240272e0 	.word	0x240272e0
 800fbf0:	240272d8 	.word	0x240272d8

0800fbf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbfa:	4b29      	ldr	r3, [pc, #164]	; (800fca0 <prvHeapInit+0xac>)
 800fbfc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbfe:	4b29      	ldr	r3, [pc, #164]	; (800fca4 <prvHeapInit+0xb0>)
 800fc00:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f003 0307 	and.w	r3, r3, #7
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00c      	beq.n	800fc26 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3307      	adds	r3, #7
 800fc10:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f023 0307 	bic.w	r3, r3, #7
 800fc18:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	4a20      	ldr	r2, [pc, #128]	; (800fca4 <prvHeapInit+0xb0>)
 800fc22:	4413      	add	r3, r2
 800fc24:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc2a:	4a1f      	ldr	r2, [pc, #124]	; (800fca8 <prvHeapInit+0xb4>)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc30:	4b1d      	ldr	r3, [pc, #116]	; (800fca8 <prvHeapInit+0xb4>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68ba      	ldr	r2, [r7, #8]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc3e:	2208      	movs	r2, #8
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f023 0307 	bic.w	r3, r3, #7
 800fc4c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	4a16      	ldr	r2, [pc, #88]	; (800fcac <prvHeapInit+0xb8>)
 800fc52:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc54:	4b15      	ldr	r3, [pc, #84]	; (800fcac <prvHeapInit+0xb8>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc5c:	4b13      	ldr	r3, [pc, #76]	; (800fcac <prvHeapInit+0xb8>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	1ad2      	subs	r2, r2, r3
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc72:	4b0e      	ldr	r3, [pc, #56]	; (800fcac <prvHeapInit+0xb8>)
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	4a0c      	ldr	r2, [pc, #48]	; (800fcb0 <prvHeapInit+0xbc>)
 800fc80:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	4a0b      	ldr	r2, [pc, #44]	; (800fcb4 <prvHeapInit+0xc0>)
 800fc88:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc8a:	4b0b      	ldr	r3, [pc, #44]	; (800fcb8 <prvHeapInit+0xc4>)
 800fc8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc90:	601a      	str	r2, [r3, #0]
}
 800fc92:	bf00      	nop
 800fc94:	3714      	adds	r7, #20
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	00027100 	.word	0x00027100
 800fca4:	240001cc 	.word	0x240001cc
 800fca8:	240272cc 	.word	0x240272cc
 800fcac:	240272d4 	.word	0x240272d4
 800fcb0:	240272dc 	.word	0x240272dc
 800fcb4:	240272d8 	.word	0x240272d8
 800fcb8:	240272e0 	.word	0x240272e0

0800fcbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fcc4:	4b28      	ldr	r3, [pc, #160]	; (800fd68 <prvInsertBlockIntoFreeList+0xac>)
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	e002      	b.n	800fcd0 <prvInsertBlockIntoFreeList+0x14>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d8f7      	bhi.n	800fcca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	4413      	add	r3, r2
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d108      	bne.n	800fcfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	441a      	add	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d118      	bne.n	800fd44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	4b15      	ldr	r3, [pc, #84]	; (800fd6c <prvInsertBlockIntoFreeList+0xb0>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d00d      	beq.n	800fd3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	441a      	add	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	e008      	b.n	800fd4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd3a:	4b0c      	ldr	r3, [pc, #48]	; (800fd6c <prvInsertBlockIntoFreeList+0xb0>)
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	e003      	b.n	800fd4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d002      	beq.n	800fd5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd5a:	bf00      	nop
 800fd5c:	3714      	adds	r7, #20
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	240272cc 	.word	0x240272cc
 800fd6c:	240272d4 	.word	0x240272d4

0800fd70 <__libc_init_array>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	4e0d      	ldr	r6, [pc, #52]	; (800fda8 <__libc_init_array+0x38>)
 800fd74:	4c0d      	ldr	r4, [pc, #52]	; (800fdac <__libc_init_array+0x3c>)
 800fd76:	1ba4      	subs	r4, r4, r6
 800fd78:	10a4      	asrs	r4, r4, #2
 800fd7a:	2500      	movs	r5, #0
 800fd7c:	42a5      	cmp	r5, r4
 800fd7e:	d109      	bne.n	800fd94 <__libc_init_array+0x24>
 800fd80:	4e0b      	ldr	r6, [pc, #44]	; (800fdb0 <__libc_init_array+0x40>)
 800fd82:	4c0c      	ldr	r4, [pc, #48]	; (800fdb4 <__libc_init_array+0x44>)
 800fd84:	f000 f82c 	bl	800fde0 <_init>
 800fd88:	1ba4      	subs	r4, r4, r6
 800fd8a:	10a4      	asrs	r4, r4, #2
 800fd8c:	2500      	movs	r5, #0
 800fd8e:	42a5      	cmp	r5, r4
 800fd90:	d105      	bne.n	800fd9e <__libc_init_array+0x2e>
 800fd92:	bd70      	pop	{r4, r5, r6, pc}
 800fd94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd98:	4798      	blx	r3
 800fd9a:	3501      	adds	r5, #1
 800fd9c:	e7ee      	b.n	800fd7c <__libc_init_array+0xc>
 800fd9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fda2:	4798      	blx	r3
 800fda4:	3501      	adds	r5, #1
 800fda6:	e7f2      	b.n	800fd8e <__libc_init_array+0x1e>
 800fda8:	0800fe7c 	.word	0x0800fe7c
 800fdac:	0800fe7c 	.word	0x0800fe7c
 800fdb0:	0800fe7c 	.word	0x0800fe7c
 800fdb4:	0800fe80 	.word	0x0800fe80

0800fdb8 <memcpy>:
 800fdb8:	b510      	push	{r4, lr}
 800fdba:	1e43      	subs	r3, r0, #1
 800fdbc:	440a      	add	r2, r1
 800fdbe:	4291      	cmp	r1, r2
 800fdc0:	d100      	bne.n	800fdc4 <memcpy+0xc>
 800fdc2:	bd10      	pop	{r4, pc}
 800fdc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdcc:	e7f7      	b.n	800fdbe <memcpy+0x6>

0800fdce <memset>:
 800fdce:	4402      	add	r2, r0
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d100      	bne.n	800fdd8 <memset+0xa>
 800fdd6:	4770      	bx	lr
 800fdd8:	f803 1b01 	strb.w	r1, [r3], #1
 800fddc:	e7f9      	b.n	800fdd2 <memset+0x4>
	...

0800fde0 <_init>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	bf00      	nop
 800fde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde6:	bc08      	pop	{r3}
 800fde8:	469e      	mov	lr, r3
 800fdea:	4770      	bx	lr

0800fdec <_fini>:
 800fdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdee:	bf00      	nop
 800fdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdf2:	bc08      	pop	{r3}
 800fdf4:	469e      	mov	lr, r3
 800fdf6:	4770      	bx	lr
